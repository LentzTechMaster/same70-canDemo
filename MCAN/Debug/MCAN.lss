
MCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d68  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406d68  00406d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00406d70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000a50  204009c0  00407730  000209c0  2**3
                  ALLOC
  4 .stack        00002000  20401410  00408180  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20403410  0040a180  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018cb7  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002bf6  00000000  00000000  000396fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007f5d  00000000  00000000  0003c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d90  00000000  00000000  00044251  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf8  00000000  00000000  00044fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002158c  00000000  00000000  00045cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d1e3  00000000  00000000  00067265  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096655  00000000  00000000  00074448  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004730  00000000  00000000  0010aaa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 34 40 20 4d 1b 40 00 fd 1b 40 00 fd 1b 40 00     .4@ M.@...@...@.
  400010:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 fd 1b 40 00     ..@...@.......@.
  40003c:	ed 36 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     .6@...@...@...@.
  40004c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40005c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 e1 12 40 00     ..@...@.......@.
  40006c:	f9 12 40 00 11 13 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40007c:	fd 1b 40 00 29 13 40 00 41 13 40 00 fd 1b 40 00     ..@.).@.A.@...@.
  40008c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40009c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000ac:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000bc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000cc:	81 29 40 00 99 2b 40 00 cd 2c 40 00 a9 2e 40 00     .)@..+@..,@...@.
  4000dc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000ec:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000fc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40010c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ......@...@...@.
  40012c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40013c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40014c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00406d70 	.word	0x00406d70

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406d70 	.word	0x00406d70
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00406d70 	.word	0x00406d70
  4001d0:	00000000 	.word	0x00000000

004001d4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	2b07      	cmp	r3, #7
  4001e0:	d831      	bhi.n	400246 <osc_enable+0x72>
  4001e2:	a201      	add	r2, pc, #4	; (adr r2, 4001e8 <osc_enable+0x14>)
  4001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e8:	00400245 	.word	0x00400245
  4001ec:	00400209 	.word	0x00400209
  4001f0:	00400211 	.word	0x00400211
  4001f4:	00400219 	.word	0x00400219
  4001f8:	00400221 	.word	0x00400221
  4001fc:	00400229 	.word	0x00400229
  400200:	00400231 	.word	0x00400231
  400204:	0040023b 	.word	0x0040023b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400208:	2000      	movs	r0, #0
  40020a:	4b11      	ldr	r3, [pc, #68]	; (400250 <osc_enable+0x7c>)
  40020c:	4798      	blx	r3
		break;
  40020e:	e01a      	b.n	400246 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400210:	2001      	movs	r0, #1
  400212:	4b0f      	ldr	r3, [pc, #60]	; (400250 <osc_enable+0x7c>)
  400214:	4798      	blx	r3
		break;
  400216:	e016      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400218:	2000      	movs	r0, #0
  40021a:	4b0e      	ldr	r3, [pc, #56]	; (400254 <osc_enable+0x80>)
  40021c:	4798      	blx	r3
		break;
  40021e:	e012      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400220:	2010      	movs	r0, #16
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <osc_enable+0x80>)
  400224:	4798      	blx	r3
		break;
  400226:	e00e      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400228:	2020      	movs	r0, #32
  40022a:	4b0a      	ldr	r3, [pc, #40]	; (400254 <osc_enable+0x80>)
  40022c:	4798      	blx	r3
		break;
  40022e:	e00a      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400230:	213e      	movs	r1, #62	; 0x3e
  400232:	2000      	movs	r0, #0
  400234:	4b08      	ldr	r3, [pc, #32]	; (400258 <osc_enable+0x84>)
  400236:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400238:	e005      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40023a:	213e      	movs	r1, #62	; 0x3e
  40023c:	2001      	movs	r0, #1
  40023e:	4b06      	ldr	r3, [pc, #24]	; (400258 <osc_enable+0x84>)
  400240:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400242:	e000      	b.n	400246 <osc_enable+0x72>
		break;
  400244:	bf00      	nop
	}
}
  400246:	bf00      	nop
  400248:	3708      	adds	r7, #8
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	00401459 	.word	0x00401459
  400254:	004014c5 	.word	0x004014c5
  400258:	00401535 	.word	0x00401535

0040025c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40025c:	b580      	push	{r7, lr}
  40025e:	b082      	sub	sp, #8
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b07      	cmp	r3, #7
  400268:	d826      	bhi.n	4002b8 <osc_is_ready+0x5c>
  40026a:	a201      	add	r2, pc, #4	; (adr r2, 400270 <osc_is_ready+0x14>)
  40026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400270:	00400291 	.word	0x00400291
  400274:	00400295 	.word	0x00400295
  400278:	00400295 	.word	0x00400295
  40027c:	004002a7 	.word	0x004002a7
  400280:	004002a7 	.word	0x004002a7
  400284:	004002a7 	.word	0x004002a7
  400288:	004002a7 	.word	0x004002a7
  40028c:	004002a7 	.word	0x004002a7
	case OSC_SLCK_32K_RC:
		return 1;
  400290:	2301      	movs	r3, #1
  400292:	e012      	b.n	4002ba <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <osc_is_ready+0x68>)
  400296:	4798      	blx	r3
  400298:	4603      	mov	r3, r0
  40029a:	2b00      	cmp	r3, #0
  40029c:	bf14      	ite	ne
  40029e:	2301      	movne	r3, #1
  4002a0:	2300      	moveq	r3, #0
  4002a2:	b2db      	uxtb	r3, r3
  4002a4:	e009      	b.n	4002ba <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <osc_is_ready+0x6c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	bf14      	ite	ne
  4002b0:	2301      	movne	r3, #1
  4002b2:	2300      	moveq	r3, #0
  4002b4:	b2db      	uxtb	r3, r3
  4002b6:	e000      	b.n	4002ba <osc_is_ready+0x5e>
	}

	return 0;
  4002b8:	2300      	movs	r3, #0
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	3708      	adds	r7, #8
  4002be:	46bd      	mov	sp, r7
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	00401491 	.word	0x00401491
  4002c8:	004015ad 	.word	0x004015ad

004002cc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d4:	687b      	ldr	r3, [r7, #4]
  4002d6:	2b07      	cmp	r3, #7
  4002d8:	d825      	bhi.n	400326 <osc_get_rate+0x5a>
  4002da:	a201      	add	r2, pc, #4	; (adr r2, 4002e0 <osc_get_rate+0x14>)
  4002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e0:	00400301 	.word	0x00400301
  4002e4:	00400307 	.word	0x00400307
  4002e8:	0040030d 	.word	0x0040030d
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400304:	e010      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030a:	e00d      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400310:	e00a      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x68>)
  400314:	e008      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x6c>)
  400318:	e006      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x70>)
  40031c:	e004      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <osc_get_rate+0x70>)
  400320:	e002      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400322:	4b06      	ldr	r3, [pc, #24]	; (40033c <osc_get_rate+0x70>)
  400324:	e000      	b.n	400328 <osc_get_rate+0x5c>
	}

	return 0;
  400326:	2300      	movs	r3, #0
}
  400328:	4618      	mov	r0, r3
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	003d0900 	.word	0x003d0900
  400338:	007a1200 	.word	0x007a1200
  40033c:	00b71b00 	.word	0x00b71b00

00400340 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400340:	b580      	push	{r7, lr}
  400342:	b082      	sub	sp, #8
  400344:	af00      	add	r7, sp, #0
  400346:	4603      	mov	r3, r0
  400348:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40034a:	bf00      	nop
  40034c:	79fb      	ldrb	r3, [r7, #7]
  40034e:	4618      	mov	r0, r3
  400350:	4b05      	ldr	r3, [pc, #20]	; (400368 <osc_wait_ready+0x28>)
  400352:	4798      	blx	r3
  400354:	4603      	mov	r3, r0
  400356:	f083 0301 	eor.w	r3, r3, #1
  40035a:	b2db      	uxtb	r3, r3
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f5      	bne.n	40034c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	0040025d 	.word	0x0040025d

0040036c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40036c:	b580      	push	{r7, lr}
  40036e:	b086      	sub	sp, #24
  400370:	af00      	add	r7, sp, #0
  400372:	60f8      	str	r0, [r7, #12]
  400374:	607a      	str	r2, [r7, #4]
  400376:	603b      	str	r3, [r7, #0]
  400378:	460b      	mov	r3, r1
  40037a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40037c:	687b      	ldr	r3, [r7, #4]
  40037e:	2b00      	cmp	r3, #0
  400380:	d107      	bne.n	400392 <pll_config_init+0x26>
  400382:	683b      	ldr	r3, [r7, #0]
  400384:	2b00      	cmp	r3, #0
  400386:	d104      	bne.n	400392 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400388:	68fb      	ldr	r3, [r7, #12]
  40038a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40038e:	601a      	str	r2, [r3, #0]
  400390:	e019      	b.n	4003c6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400392:	7afb      	ldrb	r3, [r7, #11]
  400394:	4618      	mov	r0, r3
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <pll_config_init+0x64>)
  400398:	4798      	blx	r3
  40039a:	4602      	mov	r2, r0
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	fbb2 f3f3 	udiv	r3, r2, r3
  4003a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4003a4:	697b      	ldr	r3, [r7, #20]
  4003a6:	683a      	ldr	r2, [r7, #0]
  4003a8:	fb02 f303 	mul.w	r3, r2, r3
  4003ac:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	3b01      	subs	r3, #1
  4003b2:	041a      	lsls	r2, r3, #16
  4003b4:	4b07      	ldr	r3, [pc, #28]	; (4003d4 <pll_config_init+0x68>)
  4003b6:	4013      	ands	r3, r2
  4003b8:	687a      	ldr	r2, [r7, #4]
  4003ba:	b2d2      	uxtb	r2, r2
  4003bc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4003be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003c2:	68fb      	ldr	r3, [r7, #12]
  4003c4:	601a      	str	r2, [r3, #0]
	}
}
  4003c6:	bf00      	nop
  4003c8:	3718      	adds	r7, #24
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004002cd 	.word	0x004002cd
  4003d4:	07ff0000 	.word	0x07ff0000

004003d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
  4003e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d108      	bne.n	4003fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <pll_enable+0x38>)
  4003ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ec:	4a09      	ldr	r2, [pc, #36]	; (400414 <pll_enable+0x3c>)
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003f8:	e005      	b.n	400406 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003fa:	4a06      	ldr	r2, [pc, #24]	; (400414 <pll_enable+0x3c>)
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	681b      	ldr	r3, [r3, #0]
  400400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400404:	61d3      	str	r3, [r2, #28]
}
  400406:	bf00      	nop
  400408:	3708      	adds	r7, #8
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004015c9 	.word	0x004015c9
  400414:	400e0600 	.word	0x400e0600

00400418 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400418:	b580      	push	{r7, lr}
  40041a:	b082      	sub	sp, #8
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	2b00      	cmp	r3, #0
  400424:	d103      	bne.n	40042e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <pll_is_locked+0x24>)
  400428:	4798      	blx	r3
  40042a:	4603      	mov	r3, r0
  40042c:	e002      	b.n	400434 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <pll_is_locked+0x28>)
  400430:	4798      	blx	r3
  400432:	4603      	mov	r3, r0
	}
}
  400434:	4618      	mov	r0, r3
  400436:	3708      	adds	r7, #8
  400438:	46bd      	mov	sp, r7
  40043a:	bd80      	pop	{r7, pc}
  40043c:	004015e5 	.word	0x004015e5
  400440:	00401629 	.word	0x00401629

00400444 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	4603      	mov	r3, r0
  40044c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40044e:	79fb      	ldrb	r3, [r7, #7]
  400450:	3b03      	subs	r3, #3
  400452:	2b04      	cmp	r3, #4
  400454:	d808      	bhi.n	400468 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4618      	mov	r0, r3
  40045a:	4b06      	ldr	r3, [pc, #24]	; (400474 <pll_enable_source+0x30>)
  40045c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4618      	mov	r0, r3
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <pll_enable_source+0x34>)
  400464:	4798      	blx	r3
		break;
  400466:	e000      	b.n	40046a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400468:	bf00      	nop
	}
}
  40046a:	bf00      	nop
  40046c:	3708      	adds	r7, #8
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	004001d5 	.word	0x004001d5
  400478:	00400341 	.word	0x00400341

0040047c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	b082      	sub	sp, #8
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400484:	bf00      	nop
  400486:	6878      	ldr	r0, [r7, #4]
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <pll_wait_for_lock+0x20>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d0f9      	beq.n	400486 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400492:	2300      	movs	r3, #0
}
  400494:	4618      	mov	r0, r3
  400496:	3708      	adds	r7, #8
  400498:	46bd      	mov	sp, r7
  40049a:	bd80      	pop	{r7, pc}
  40049c:	00400419 	.word	0x00400419

004004a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004a4:	2006      	movs	r0, #6
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <sysclk_get_main_hz+0x1c>)
  4004a8:	4798      	blx	r3
  4004aa:	4602      	mov	r2, r0
  4004ac:	4613      	mov	r3, r2
  4004ae:	009b      	lsls	r3, r3, #2
  4004b0:	4413      	add	r3, r2
  4004b2:	009a      	lsls	r2, r3, #2
  4004b4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd80      	pop	{r7, pc}
  4004ba:	bf00      	nop
  4004bc:	004002cd 	.word	0x004002cd

004004c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <sysclk_get_cpu_hz+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004ca:	4618      	mov	r0, r3
  4004cc:	bd80      	pop	{r7, pc}
  4004ce:	bf00      	nop
  4004d0:	004004a1 	.word	0x004004a1

004004d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d4:	b590      	push	{r4, r7, lr}
  4004d6:	b083      	sub	sp, #12
  4004d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4813      	ldr	r0, [pc, #76]	; (400528 <sysclk_init+0x54>)
  4004dc:	4b13      	ldr	r3, [pc, #76]	; (40052c <sysclk_init+0x58>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <sysclk_init+0x5c>)
  4004e4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004e6:	1d38      	adds	r0, r7, #4
  4004e8:	2319      	movs	r3, #25
  4004ea:	2201      	movs	r2, #1
  4004ec:	2106      	movs	r1, #6
  4004ee:	4c11      	ldr	r4, [pc, #68]	; (400534 <sysclk_init+0x60>)
  4004f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004f2:	1d3b      	adds	r3, r7, #4
  4004f4:	2100      	movs	r1, #0
  4004f6:	4618      	mov	r0, r3
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <sysclk_init+0x64>)
  4004fa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0f      	ldr	r3, [pc, #60]	; (40053c <sysclk_init+0x68>)
  400500:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <sysclk_init+0x6c>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2000      	movs	r0, #0
  40050a:	4b0e      	ldr	r3, [pc, #56]	; (400544 <sysclk_init+0x70>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <sysclk_init+0x74>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <sysclk_init+0x78>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	085b      	lsrs	r3, r3, #1
  40051a:	4618      	mov	r0, r3
  40051c:	4b03      	ldr	r3, [pc, #12]	; (40052c <sysclk_init+0x58>)
  40051e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400520:	bf00      	nop
  400522:	370c      	adds	r7, #12
  400524:	46bd      	mov	sp, r7
  400526:	bd90      	pop	{r4, r7, pc}
  400528:	08f0d180 	.word	0x08f0d180
  40052c:	00401d6d 	.word	0x00401d6d
  400530:	00400445 	.word	0x00400445
  400534:	0040036d 	.word	0x0040036d
  400538:	004003d9 	.word	0x004003d9
  40053c:	0040047d 	.word	0x0040047d
  400540:	00401359 	.word	0x00401359
  400544:	004013d5 	.word	0x004013d5
  400548:	00401c05 	.word	0x00401c05
  40054c:	004004c1 	.word	0x004004c1

00400550 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400550:	b580      	push	{r7, lr}
  400552:	b082      	sub	sp, #8
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400558:	6878      	ldr	r0, [r7, #4]
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <sysclk_enable_peripheral_clock+0x18>)
  40055c:	4798      	blx	r3
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	00401645 	.word	0x00401645

0040056c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400570:	200a      	movs	r0, #10
  400572:	4b08      	ldr	r3, [pc, #32]	; (400594 <ioport_init+0x28>)
  400574:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400576:	200b      	movs	r0, #11
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <ioport_init+0x28>)
  40057a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40057c:	200c      	movs	r0, #12
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <ioport_init+0x28>)
  400580:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400582:	2010      	movs	r0, #16
  400584:	4b03      	ldr	r3, [pc, #12]	; (400594 <ioport_init+0x28>)
  400586:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400588:	2011      	movs	r0, #17
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <ioport_init+0x28>)
  40058c:	4798      	blx	r3
	arch_ioport_init();
}
  40058e:	bf00      	nop
  400590:	bd80      	pop	{r7, pc}
  400592:	bf00      	nop
  400594:	00400551 	.word	0x00400551

00400598 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400598:	b480      	push	{r7}
  40059a:	b089      	sub	sp, #36	; 0x24
  40059c:	af00      	add	r7, sp, #0
  40059e:	6078      	str	r0, [r7, #4]
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	61fb      	str	r3, [r7, #28]
  4005a4:	69fb      	ldr	r3, [r7, #28]
  4005a6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4005a8:	69bb      	ldr	r3, [r7, #24]
  4005aa:	095a      	lsrs	r2, r3, #5
  4005ac:	69fb      	ldr	r3, [r7, #28]
  4005ae:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4005b0:	697b      	ldr	r3, [r7, #20]
  4005b2:	f003 031f 	and.w	r3, r3, #31
  4005b6:	2101      	movs	r1, #1
  4005b8:	fa01 f303 	lsl.w	r3, r1, r3
  4005bc:	613a      	str	r2, [r7, #16]
  4005be:	60fb      	str	r3, [r7, #12]
  4005c0:	693b      	ldr	r3, [r7, #16]
  4005c2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <ioport_disable_pin+0x48>)
  4005c8:	4413      	add	r3, r2
  4005ca:	025b      	lsls	r3, r3, #9
  4005cc:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005ce:	68fb      	ldr	r3, [r7, #12]
  4005d0:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4005d2:	bf00      	nop
  4005d4:	3724      	adds	r7, #36	; 0x24
  4005d6:	46bd      	mov	sp, r7
  4005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	00200707 	.word	0x00200707

004005e4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b08d      	sub	sp, #52	; 0x34
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
  4005ec:	6039      	str	r1, [r7, #0]
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4005f2:	683b      	ldr	r3, [r7, #0]
  4005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  4005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005f8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005fc:	095a      	lsrs	r2, r3, #5
  4005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400600:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400602:	6a3b      	ldr	r3, [r7, #32]
  400604:	f003 031f 	and.w	r3, r3, #31
  400608:	2101      	movs	r1, #1
  40060a:	fa01 f303 	lsl.w	r3, r1, r3
  40060e:	61fa      	str	r2, [r7, #28]
  400610:	61bb      	str	r3, [r7, #24]
  400612:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400614:	617b      	str	r3, [r7, #20]
  400616:	69fb      	ldr	r3, [r7, #28]
  400618:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40061a:	693a      	ldr	r2, [r7, #16]
  40061c:	4b37      	ldr	r3, [pc, #220]	; (4006fc <ioport_set_pin_mode+0x118>)
  40061e:	4413      	add	r3, r2
  400620:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400622:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400624:	697b      	ldr	r3, [r7, #20]
  400626:	f003 0308 	and.w	r3, r3, #8
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	69ba      	ldr	r2, [r7, #24]
  400632:	665a      	str	r2, [r3, #100]	; 0x64
  400634:	e002      	b.n	40063c <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	69ba      	ldr	r2, [r7, #24]
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	f003 0310 	and.w	r3, r3, #16
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	69ba      	ldr	r2, [r7, #24]
  40064a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40064e:	e003      	b.n	400658 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	69ba      	ldr	r2, [r7, #24]
  400654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400658:	697b      	ldr	r3, [r7, #20]
  40065a:	f003 0320 	and.w	r3, r3, #32
  40065e:	2b00      	cmp	r3, #0
  400660:	d003      	beq.n	40066a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	69ba      	ldr	r2, [r7, #24]
  400666:	651a      	str	r2, [r3, #80]	; 0x50
  400668:	e002      	b.n	400670 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	69ba      	ldr	r2, [r7, #24]
  40066e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400670:	697b      	ldr	r3, [r7, #20]
  400672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400676:	2b00      	cmp	r3, #0
  400678:	d003      	beq.n	400682 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	69ba      	ldr	r2, [r7, #24]
  40067e:	621a      	str	r2, [r3, #32]
  400680:	e002      	b.n	400688 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	69ba      	ldr	r2, [r7, #24]
  400686:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400688:	697b      	ldr	r3, [r7, #20]
  40068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40068e:	2b00      	cmp	r3, #0
  400690:	d004      	beq.n	40069c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400692:	68fb      	ldr	r3, [r7, #12]
  400694:	69ba      	ldr	r2, [r7, #24]
  400696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40069a:	e003      	b.n	4006a4 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	69ba      	ldr	r2, [r7, #24]
  4006a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4006a4:	697b      	ldr	r3, [r7, #20]
  4006a6:	f003 0301 	and.w	r3, r3, #1
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d006      	beq.n	4006bc <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b2:	69bb      	ldr	r3, [r7, #24]
  4006b4:	431a      	orrs	r2, r3
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	671a      	str	r2, [r3, #112]	; 0x70
  4006ba:	e006      	b.n	4006ca <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006bc:	68fb      	ldr	r3, [r7, #12]
  4006be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	43db      	mvns	r3, r3
  4006c4:	401a      	ands	r2, r3
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4006ca:	697b      	ldr	r3, [r7, #20]
  4006cc:	f003 0302 	and.w	r3, r3, #2
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d006      	beq.n	4006e2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006d8:	69bb      	ldr	r3, [r7, #24]
  4006da:	431a      	orrs	r2, r3
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4006e0:	e006      	b.n	4006f0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e6:	69bb      	ldr	r3, [r7, #24]
  4006e8:	43db      	mvns	r3, r3
  4006ea:	401a      	ands	r2, r3
  4006ec:	68fb      	ldr	r3, [r7, #12]
  4006ee:	675a      	str	r2, [r3, #116]	; 0x74
  4006f0:	bf00      	nop
  4006f2:	3734      	adds	r7, #52	; 0x34
  4006f4:	46bd      	mov	sp, r7
  4006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fa:	4770      	bx	lr
  4006fc:	00200707 	.word	0x00200707

00400700 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400700:	b480      	push	{r7}
  400702:	b08d      	sub	sp, #52	; 0x34
  400704:	af00      	add	r7, sp, #0
  400706:	6078      	str	r0, [r7, #4]
  400708:	460b      	mov	r3, r1
  40070a:	70fb      	strb	r3, [r7, #3]
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400710:	78fb      	ldrb	r3, [r7, #3]
  400712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400718:	627b      	str	r3, [r7, #36]	; 0x24
  40071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40071c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40071e:	6a3b      	ldr	r3, [r7, #32]
  400720:	095b      	lsrs	r3, r3, #5
  400722:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400724:	69fa      	ldr	r2, [r7, #28]
  400726:	4b17      	ldr	r3, [pc, #92]	; (400784 <ioport_set_pin_dir+0x84>)
  400728:	4413      	add	r3, r2
  40072a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40072c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40072e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400732:	2b01      	cmp	r3, #1
  400734:	d109      	bne.n	40074a <ioport_set_pin_dir+0x4a>
  400736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400738:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40073a:	697b      	ldr	r3, [r7, #20]
  40073c:	f003 031f 	and.w	r3, r3, #31
  400740:	2201      	movs	r2, #1
  400742:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400744:	69bb      	ldr	r3, [r7, #24]
  400746:	611a      	str	r2, [r3, #16]
  400748:	e00c      	b.n	400764 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40074a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40074e:	2b00      	cmp	r3, #0
  400750:	d108      	bne.n	400764 <ioport_set_pin_dir+0x64>
  400752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400754:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400756:	693b      	ldr	r3, [r7, #16]
  400758:	f003 031f 	and.w	r3, r3, #31
  40075c:	2201      	movs	r2, #1
  40075e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400760:	69bb      	ldr	r3, [r7, #24]
  400762:	615a      	str	r2, [r3, #20]
  400764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400766:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400768:	68fb      	ldr	r3, [r7, #12]
  40076a:	f003 031f 	and.w	r3, r3, #31
  40076e:	2201      	movs	r2, #1
  400770:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400772:	69bb      	ldr	r3, [r7, #24]
  400774:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400778:	bf00      	nop
  40077a:	3734      	adds	r7, #52	; 0x34
  40077c:	46bd      	mov	sp, r7
  40077e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400782:	4770      	bx	lr
  400784:	00200707 	.word	0x00200707

00400788 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400788:	b480      	push	{r7}
  40078a:	b08b      	sub	sp, #44	; 0x2c
  40078c:	af00      	add	r7, sp, #0
  40078e:	6078      	str	r0, [r7, #4]
  400790:	460b      	mov	r3, r1
  400792:	70fb      	strb	r3, [r7, #3]
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	627b      	str	r3, [r7, #36]	; 0x24
  400798:	78fb      	ldrb	r3, [r7, #3]
  40079a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a0:	61fb      	str	r3, [r7, #28]
  4007a2:	69fb      	ldr	r3, [r7, #28]
  4007a4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4007a6:	69bb      	ldr	r3, [r7, #24]
  4007a8:	095b      	lsrs	r3, r3, #5
  4007aa:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007ac:	697a      	ldr	r2, [r7, #20]
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <ioport_set_pin_level+0x68>)
  4007b0:	4413      	add	r3, r2
  4007b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007b4:	613b      	str	r3, [r7, #16]

	if (level) {
  4007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d009      	beq.n	4007d2 <ioport_set_pin_level+0x4a>
  4007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	f003 031f 	and.w	r3, r3, #31
  4007c8:	2201      	movs	r2, #1
  4007ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007cc:	693b      	ldr	r3, [r7, #16]
  4007ce:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4007d0:	e008      	b.n	4007e4 <ioport_set_pin_level+0x5c>
  4007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4007d6:	68bb      	ldr	r3, [r7, #8]
  4007d8:	f003 031f 	and.w	r3, r3, #31
  4007dc:	2201      	movs	r2, #1
  4007de:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007e0:	693b      	ldr	r3, [r7, #16]
  4007e2:	635a      	str	r2, [r3, #52]	; 0x34
  4007e4:	bf00      	nop
  4007e6:	372c      	adds	r7, #44	; 0x2c
  4007e8:	46bd      	mov	sp, r7
  4007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ee:	4770      	bx	lr
  4007f0:	00200707 	.word	0x00200707

004007f4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4007f4:	b480      	push	{r7}
  4007f6:	b08d      	sub	sp, #52	; 0x34
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	6078      	str	r0, [r7, #4]
  4007fc:	460b      	mov	r3, r1
  4007fe:	70fb      	strb	r3, [r7, #3]
  400800:	687b      	ldr	r3, [r7, #4]
  400802:	62fb      	str	r3, [r7, #44]	; 0x2c
  400804:	78fb      	ldrb	r3, [r7, #3]
  400806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40080c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400810:	095a      	lsrs	r2, r3, #5
  400812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400814:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400816:	6a3b      	ldr	r3, [r7, #32]
  400818:	f003 031f 	and.w	r3, r3, #31
  40081c:	2101      	movs	r1, #1
  40081e:	fa01 f303 	lsl.w	r3, r1, r3
  400822:	61fa      	str	r2, [r7, #28]
  400824:	61bb      	str	r3, [r7, #24]
  400826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40082a:	75fb      	strb	r3, [r7, #23]
  40082c:	69fb      	ldr	r3, [r7, #28]
  40082e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400830:	693a      	ldr	r2, [r7, #16]
  400832:	4b23      	ldr	r3, [pc, #140]	; (4008c0 <ioport_set_pin_sense_mode+0xcc>)
  400834:	4413      	add	r3, r2
  400836:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400838:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40083a:	7dfb      	ldrb	r3, [r7, #23]
  40083c:	3b01      	subs	r3, #1
  40083e:	2b03      	cmp	r3, #3
  400840:	d82e      	bhi.n	4008a0 <ioport_set_pin_sense_mode+0xac>
  400842:	a201      	add	r2, pc, #4	; (adr r2, 400848 <ioport_set_pin_sense_mode+0x54>)
  400844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400848:	0040087d 	.word	0x0040087d
  40084c:	0040088f 	.word	0x0040088f
  400850:	00400859 	.word	0x00400859
  400854:	0040086b 	.word	0x0040086b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400858:	68fb      	ldr	r3, [r7, #12]
  40085a:	69ba      	ldr	r2, [r7, #24]
  40085c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	69ba      	ldr	r2, [r7, #24]
  400864:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400868:	e01f      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	69ba      	ldr	r2, [r7, #24]
  40086e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	69ba      	ldr	r2, [r7, #24]
  400876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087a:	e016      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	69ba      	ldr	r2, [r7, #24]
  400880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	69ba      	ldr	r2, [r7, #24]
  400888:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40088c:	e00d      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	69ba      	ldr	r2, [r7, #24]
  400892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	69ba      	ldr	r2, [r7, #24]
  40089a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40089e:	e004      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4008a0:	68fb      	ldr	r3, [r7, #12]
  4008a2:	69ba      	ldr	r2, [r7, #24]
  4008a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4008a8:	e003      	b.n	4008b2 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	69ba      	ldr	r2, [r7, #24]
  4008ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4008b2:	bf00      	nop
  4008b4:	3734      	adds	r7, #52	; 0x34
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	00200707 	.word	0x00200707

004008c4 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4008c4:	b480      	push	{r7}
  4008c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008cc:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4008d0:	4a0c      	ldr	r2, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d2:	4b0c      	ldr	r3, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4008d8:	f023 0301 	bic.w	r3, r3, #1
  4008dc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008e0:	4a08      	ldr	r2, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4008e8:	f023 0301 	bic.w	r3, r3, #1
  4008ec:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  4008f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008f4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4008f8:	bf00      	nop
  4008fa:	46bd      	mov	sp, r7
  4008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	e000ed00 	.word	0xe000ed00

00400908 <board_init>:
#endif

void board_init(void)
{
  400908:	b580      	push	{r7, lr}
  40090a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40090c:	4b2e      	ldr	r3, [pc, #184]	; (4009c8 <board_init+0xc0>)
  40090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400912:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400914:	4b2d      	ldr	r3, [pc, #180]	; (4009cc <board_init+0xc4>)
  400916:	4a2e      	ldr	r2, [pc, #184]	; (4009d0 <board_init+0xc8>)
  400918:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40091a:	4b2c      	ldr	r3, [pc, #176]	; (4009cc <board_init+0xc4>)
  40091c:	4a2d      	ldr	r2, [pc, #180]	; (4009d4 <board_init+0xcc>)
  40091e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400920:	4b2d      	ldr	r3, [pc, #180]	; (4009d8 <board_init+0xd0>)
  400922:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400924:	4b2d      	ldr	r3, [pc, #180]	; (4009dc <board_init+0xd4>)
  400926:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400928:	2101      	movs	r1, #1
  40092a:	2048      	movs	r0, #72	; 0x48
  40092c:	4b2c      	ldr	r3, [pc, #176]	; (4009e0 <board_init+0xd8>)
  40092e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400930:	2101      	movs	r1, #1
  400932:	2048      	movs	r0, #72	; 0x48
  400934:	4b2b      	ldr	r3, [pc, #172]	; (4009e4 <board_init+0xdc>)
  400936:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400938:	2100      	movs	r1, #0
  40093a:	200b      	movs	r0, #11
  40093c:	4b28      	ldr	r3, [pc, #160]	; (4009e0 <board_init+0xd8>)
  40093e:	4798      	blx	r3
  400940:	2188      	movs	r1, #136	; 0x88
  400942:	200b      	movs	r0, #11
  400944:	4b28      	ldr	r3, [pc, #160]	; (4009e8 <board_init+0xe0>)
  400946:	4798      	blx	r3
  400948:	2102      	movs	r1, #2
  40094a:	200b      	movs	r0, #11
  40094c:	4b27      	ldr	r3, [pc, #156]	; (4009ec <board_init+0xe4>)
  40094e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400950:	2100      	movs	r1, #0
  400952:	2015      	movs	r0, #21
  400954:	4b24      	ldr	r3, [pc, #144]	; (4009e8 <board_init+0xe0>)
  400956:	4798      	blx	r3
  400958:	2015      	movs	r0, #21
  40095a:	4b25      	ldr	r3, [pc, #148]	; (4009f0 <board_init+0xe8>)
  40095c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40095e:	4a25      	ldr	r2, [pc, #148]	; (4009f4 <board_init+0xec>)
  400960:	4b24      	ldr	r3, [pc, #144]	; (4009f4 <board_init+0xec>)
  400962:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400966:	f043 0310 	orr.w	r3, r3, #16
  40096a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  40096e:	2103      	movs	r1, #3
  400970:	2024      	movs	r0, #36	; 0x24
  400972:	4b1d      	ldr	r3, [pc, #116]	; (4009e8 <board_init+0xe0>)
  400974:	4798      	blx	r3
  400976:	2024      	movs	r0, #36	; 0x24
  400978:	4b1d      	ldr	r3, [pc, #116]	; (4009f0 <board_init+0xe8>)
  40097a:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	ioport_set_pin_peripheral_mode(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
  40097c:	2100      	movs	r1, #0
  40097e:	2023      	movs	r0, #35	; 0x23
  400980:	4b19      	ldr	r3, [pc, #100]	; (4009e8 <board_init+0xe0>)
  400982:	4798      	blx	r3
  400984:	2023      	movs	r0, #35	; 0x23
  400986:	4b1a      	ldr	r3, [pc, #104]	; (4009f0 <board_init+0xe8>)
  400988:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
  40098a:	2100      	movs	r1, #0
  40098c:	2022      	movs	r0, #34	; 0x22
  40098e:	4b16      	ldr	r3, [pc, #88]	; (4009e8 <board_init+0xe0>)
  400990:	4798      	blx	r3
  400992:	2022      	movs	r0, #34	; 0x22
  400994:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <board_init+0xe8>)
  400996:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN0_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  400998:	2101      	movs	r1, #1
  40099a:	2080      	movs	r0, #128	; 0x80
  40099c:	4b10      	ldr	r3, [pc, #64]	; (4009e0 <board_init+0xd8>)
  40099e:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN0_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  4009a0:	2101      	movs	r1, #1
  4009a2:	2081      	movs	r0, #129	; 0x81
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <board_init+0xd8>)
  4009a6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  4009a8:	2102      	movs	r1, #2
  4009aa:	204c      	movs	r0, #76	; 0x4c
  4009ac:	4b0e      	ldr	r3, [pc, #56]	; (4009e8 <board_init+0xe0>)
  4009ae:	4798      	blx	r3
  4009b0:	204c      	movs	r0, #76	; 0x4c
  4009b2:	4b0f      	ldr	r3, [pc, #60]	; (4009f0 <board_init+0xe8>)
  4009b4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  4009b6:	2102      	movs	r1, #2
  4009b8:	204e      	movs	r0, #78	; 0x4e
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <board_init+0xe0>)
  4009bc:	4798      	blx	r3
  4009be:	204e      	movs	r0, #78	; 0x4e
  4009c0:	4b0b      	ldr	r3, [pc, #44]	; (4009f0 <board_init+0xe8>)
  4009c2:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  4009c4:	bf00      	nop
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	400e1850 	.word	0x400e1850
  4009cc:	400e0c00 	.word	0x400e0c00
  4009d0:	5a00080c 	.word	0x5a00080c
  4009d4:	5a00070c 	.word	0x5a00070c
  4009d8:	004008c5 	.word	0x004008c5
  4009dc:	0040056d 	.word	0x0040056d
  4009e0:	00400701 	.word	0x00400701
  4009e4:	00400789 	.word	0x00400789
  4009e8:	004005e5 	.word	0x004005e5
  4009ec:	004007f5 	.word	0x004007f5
  4009f0:	00400599 	.word	0x00400599
  4009f4:	40088000 	.word	0x40088000

004009f8 <_mcan_message_memory_init>:
 *
 * \param hw  Base address of the MCAN
 *
 */
static void _mcan_message_memory_init(Mcan *hw)
{
  4009f8:	b480      	push	{r7}
  4009fa:	b083      	sub	sp, #12
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	6078      	str	r0, [r7, #4]
	if (hw == MCAN0) {
  400a00:	687b      	ldr	r3, [r7, #4]
  400a02:	4a48      	ldr	r2, [pc, #288]	; (400b24 <_mcan_message_memory_init+0x12c>)
  400a04:	4293      	cmp	r3, r2
  400a06:	d13d      	bne.n	400a84 <_mcan_message_memory_init+0x8c>
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a08:	4a47      	ldr	r2, [pc, #284]	; (400b28 <_mcan_message_memory_init+0x130>)
  400a0a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a0e:	4013      	ands	r3, r2
  400a10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a1a:	4a44      	ldr	r2, [pc, #272]	; (400b2c <_mcan_message_memory_init+0x134>)
  400a1c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a20:	4013      	ands	r3, r2
  400a22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400a2c:	4a40      	ldr	r2, [pc, #256]	; (400b30 <_mcan_message_memory_init+0x138>)
  400a2e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a32:	4013      	ands	r3, r2
  400a34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN0_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400a3e:	4a3d      	ldr	r2, [pc, #244]	; (400b34 <_mcan_message_memory_init+0x13c>)
  400a40:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a44:	4013      	ands	r3, r2
  400a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a4a:	687b      	ldr	r3, [r7, #4]
  400a4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN0_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400a50:	4a39      	ldr	r2, [pc, #228]	; (400b38 <_mcan_message_memory_init+0x140>)
  400a52:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a56:	4013      	ands	r3, r2
  400a58:	687a      	ldr	r2, [r7, #4]
  400a5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a5e:	4b37      	ldr	r3, [pc, #220]	; (400b3c <_mcan_message_memory_init+0x144>)
  400a60:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400a64:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400a66:	4b36      	ldr	r3, [pc, #216]	; (400b40 <_mcan_message_memory_init+0x148>)
  400a68:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a6a:	687a      	ldr	r2, [r7, #4]
  400a6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN0_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a70:	4a34      	ldr	r2, [pc, #208]	; (400b44 <_mcan_message_memory_init+0x14c>)
  400a72:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a76:	4013      	ands	r3, r2
  400a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400a7c:	687b      	ldr	r3, [r7, #4]
  400a7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400a82:	e040      	b.n	400b06 <_mcan_message_memory_init+0x10e>
				MCAN_TXEFC_EFS(CONF_MCAN0_TX_EVENT_FIFO);
	} else if (hw == MCAN1) {
  400a84:	687b      	ldr	r3, [r7, #4]
  400a86:	4a30      	ldr	r2, [pc, #192]	; (400b48 <_mcan_message_memory_init+0x150>)
  400a88:	4293      	cmp	r3, r2
  400a8a:	d13c      	bne.n	400b06 <_mcan_message_memory_init+0x10e>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a8c:	4a2f      	ldr	r2, [pc, #188]	; (400b4c <_mcan_message_memory_init+0x154>)
  400a8e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a92:	4013      	ands	r3, r2
  400a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a9e:	4a2c      	ldr	r2, [pc, #176]	; (400b50 <_mcan_message_memory_init+0x158>)
  400aa0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400aa4:	4013      	ands	r3, r2
  400aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400ab0:	4a28      	ldr	r2, [pc, #160]	; (400b54 <_mcan_message_memory_init+0x15c>)
  400ab2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ab6:	4013      	ands	r3, r2
  400ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400abc:	687b      	ldr	r3, [r7, #4]
  400abe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN1_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400ac2:	4a25      	ldr	r2, [pc, #148]	; (400b58 <_mcan_message_memory_init+0x160>)
  400ac4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ac8:	4013      	ands	r3, r2
  400aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400ace:	687b      	ldr	r3, [r7, #4]
  400ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN1_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400ad4:	4a21      	ldr	r2, [pc, #132]	; (400b5c <_mcan_message_memory_init+0x164>)
  400ad6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ada:	4013      	ands	r3, r2
  400adc:	687a      	ldr	r2, [r7, #4]
  400ade:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400ae2:	4b1f      	ldr	r3, [pc, #124]	; (400b60 <_mcan_message_memory_init+0x168>)
  400ae4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400ae8:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400aea:	4b15      	ldr	r3, [pc, #84]	; (400b40 <_mcan_message_memory_init+0x148>)
  400aec:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400aee:	687a      	ldr	r2, [r7, #4]
  400af0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN1_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400af4:	4a1b      	ldr	r2, [pc, #108]	; (400b64 <_mcan_message_memory_init+0x16c>)
  400af6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400afa:	4013      	ands	r3, r2
  400afc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_MCAN_ELEMENT_DATA_SIZE <= 24) {
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2200      	movs	r2, #0
  400b0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400b0e:	687b      	ldr	r3, [r7, #4]
  400b10:	2200      	movs	r2, #0
  400b12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
	}
}
  400b16:	bf00      	nop
  400b18:	370c      	adds	r7, #12
  400b1a:	46bd      	mov	sp, r7
  400b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	40030000 	.word	0x40030000
  400b28:	20400d0c 	.word	0x20400d0c
  400b2c:	20400d8c 	.word	0x20400d8c
  400b30:	20400adc 	.word	0x20400adc
  400b34:	20400bdc 	.word	0x20400bdc
  400b38:	204009dc 	.word	0x204009dc
  400b3c:	20400cdc 	.word	0x20400cdc
  400b40:	01010000 	.word	0x01010000
  400b44:	20400cfc 	.word	0x20400cfc
  400b48:	40034000 	.word	0x40034000
  400b4c:	2040113c 	.word	0x2040113c
  400b50:	204011bc 	.word	0x204011bc
  400b54:	20400f0c 	.word	0x20400f0c
  400b58:	2040100c 	.word	0x2040100c
  400b5c:	20400e0c 	.word	0x20400e0c
  400b60:	2040110c 	.word	0x2040110c
  400b64:	2040112c 	.word	0x2040112c

00400b68 <_mcan_set_configuration>:
 *
 * \param hw  Base address of the MCAN
 * \param config  default configuration parameters.
 */
static void _mcan_set_configuration(Mcan *hw, struct mcan_config *config)
{
  400b68:	b480      	push	{r7}
  400b6a:	b083      	sub	sp, #12
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
  400b70:	6039      	str	r1, [r7, #0]
	if (config->tdc_enable) {
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
	}
#else
	/* Timing setting. */
	hw->MCAN_BTP = MCAN_BTP_BRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	4a65      	ldr	r2, [pc, #404]	; (400d0c <_mcan_set_configuration+0x1a4>)
  400b76:	61da      	str	r2, [r3, #28]
			MCAN_BTP_TSEG2(CONF_MCAN_NBTP_NTSEG2_VALUE);
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
			MCAN_FBTP_FSJW(CONF_MCAN_FBTP_FSJW_VALUE) |
			MCAN_FBTP_FTSEG1(CONF_MCAN_FBTP_FTSEG1_VALUE) |
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
			MCAN_FBTP_TDCO(config->delay_compensation_offset);
  400b78:	683b      	ldr	r3, [r7, #0]
  400b7a:	7bdb      	ldrb	r3, [r3, #15]
  400b7c:	061b      	lsls	r3, r3, #24
  400b7e:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
  400b82:	4b63      	ldr	r3, [pc, #396]	; (400d10 <_mcan_set_configuration+0x1a8>)
  400b84:	4313      	orrs	r3, r2
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400b86:	687a      	ldr	r2, [r7, #4]
  400b88:	60d3      	str	r3, [r2, #12]

	if (config->tdc_enable) {
  400b8a:	683b      	ldr	r3, [r7, #0]
  400b8c:	7b9b      	ldrb	r3, [r3, #14]
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d005      	beq.n	400b9e <_mcan_set_configuration+0x36>
		hw->MCAN_FBTP |= MCAN_FBTP_TDC_ENABLED;
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	68db      	ldr	r3, [r3, #12]
  400b96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
  400b9a:	687b      	ldr	r3, [r7, #4]
  400b9c:	60da      	str	r2, [r3, #12]
	}
#endif
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400b9e:	687b      	ldr	r3, [r7, #4]
  400ba0:	695b      	ldr	r3, [r3, #20]
  400ba2:	683a      	ldr	r2, [r7, #0]
  400ba4:	7852      	ldrb	r2, [r2, #1]
  400ba6:	431a      	orrs	r2, r3
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	615a      	str	r2, [r3, #20]

	if (config->transmit_pause) {
  400bac:	683b      	ldr	r3, [r7, #0]
  400bae:	789b      	ldrb	r3, [r3, #2]
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d005      	beq.n	400bc0 <_mcan_set_configuration+0x58>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	699b      	ldr	r3, [r3, #24]
  400bb8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	619a      	str	r2, [r3, #24]
	}

	if (!config->automatic_retransmission) {
  400bc0:	683b      	ldr	r3, [r7, #0]
  400bc2:	795b      	ldrb	r3, [r3, #5]
  400bc4:	f083 0301 	eor.w	r3, r3, #1
  400bc8:	b2db      	uxtb	r3, r3
  400bca:	2b00      	cmp	r3, #0
  400bcc:	d005      	beq.n	400bda <_mcan_set_configuration+0x72>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	699b      	ldr	r3, [r3, #24]
  400bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
  400bd6:	687b      	ldr	r3, [r7, #4]
  400bd8:	619a      	str	r2, [r3, #24]
	}

	if (config->clock_stop_request) {
  400bda:	683b      	ldr	r3, [r7, #0]
  400bdc:	799b      	ldrb	r3, [r3, #6]
  400bde:	2b00      	cmp	r3, #0
  400be0:	d005      	beq.n	400bee <_mcan_set_configuration+0x86>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400be2:	687b      	ldr	r3, [r7, #4]
  400be4:	699b      	ldr	r3, [r3, #24]
  400be6:	f043 0210 	orr.w	r2, r3, #16
  400bea:	687b      	ldr	r3, [r7, #4]
  400bec:	619a      	str	r2, [r3, #24]
	}

	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400bee:	683b      	ldr	r3, [r7, #0]
  400bf0:	7a1b      	ldrb	r3, [r3, #8]
  400bf2:	041b      	lsls	r3, r3, #16
  400bf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400bf8:	f043 0201 	orr.w	r2, r3, #1
  400bfc:	687b      	ldr	r3, [r7, #4]
  400bfe:	621a      	str	r2, [r3, #32]
			MCAN_TSCC_TSS_TCP_INC;

	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c00:	683b      	ldr	r3, [r7, #0]
  400c02:	895b      	ldrh	r3, [r3, #10]
  400c04:	041b      	lsls	r3, r3, #16
  400c06:	461a      	mov	r2, r3
			config->timeout_mode | config->timeout_enable;
  400c08:	683b      	ldr	r3, [r7, #0]
  400c0a:	7b1b      	ldrb	r3, [r3, #12]
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c0c:	4313      	orrs	r3, r2
			config->timeout_mode | config->timeout_enable;
  400c0e:	683a      	ldr	r2, [r7, #0]
  400c10:	7b52      	ldrb	r2, [r2, #13]
  400c12:	431a      	orrs	r2, r3
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c14:	687b      	ldr	r3, [r7, #4]
  400c16:	629a      	str	r2, [r3, #40]	; 0x28

	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400c18:	683b      	ldr	r3, [r7, #0]
  400c1a:	7c1b      	ldrb	r3, [r3, #16]
  400c1c:	011b      	lsls	r3, r3, #4
  400c1e:	f003 0230 	and.w	r2, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400c22:	683b      	ldr	r3, [r7, #0]
  400c24:	7c5b      	ldrb	r3, [r3, #17]
  400c26:	009b      	lsls	r3, r3, #2
  400c28:	f003 030c 	and.w	r3, r3, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400c2c:	431a      	orrs	r2, r3
  400c2e:	687b      	ldr	r3, [r7, #4]
  400c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400c34:	683b      	ldr	r3, [r7, #0]
  400c36:	7c9b      	ldrb	r3, [r3, #18]
  400c38:	2b00      	cmp	r3, #0
  400c3a:	d007      	beq.n	400c4c <_mcan_set_configuration+0xe4>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400c42:	f043 0202 	orr.w	r2, r3, #2
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
	if (config->remote_frames_extended_reject) {
  400c4c:	683b      	ldr	r3, [r7, #0]
  400c4e:	7cdb      	ldrb	r3, [r3, #19]
  400c50:	2b00      	cmp	r3, #0
  400c52:	d007      	beq.n	400c64 <_mcan_set_configuration+0xfc>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400c5a:	f043 0201 	orr.w	r2, r3, #1
  400c5e:	687b      	ldr	r3, [r7, #4]
  400c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	hw->MCAN_XIDAM = config->extended_id_mask;
  400c64:	683b      	ldr	r3, [r7, #0]
  400c66:	695a      	ldr	r2, [r3, #20]
  400c68:	687b      	ldr	r3, [r7, #4]
  400c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	if (config->rx_fifo_0_overwrite) {
  400c6e:	683b      	ldr	r3, [r7, #0]
  400c70:	7e1b      	ldrb	r3, [r3, #24]
  400c72:	2b00      	cmp	r3, #0
  400c74:	d007      	beq.n	400c86 <_mcan_set_configuration+0x11e>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400c76:	687b      	ldr	r3, [r7, #4]
  400c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  400c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400c80:	687b      	ldr	r3, [r7, #4]
  400c82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400c8c:	683b      	ldr	r3, [r7, #0]
  400c8e:	7e5b      	ldrb	r3, [r3, #25]
  400c90:	061b      	lsls	r3, r3, #24
  400c92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400c96:	431a      	orrs	r2, r3
  400c98:	687b      	ldr	r3, [r7, #4]
  400c9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if (config->rx_fifo_1_overwrite) {
  400c9e:	683b      	ldr	r3, [r7, #0]
  400ca0:	7e9b      	ldrb	r3, [r3, #26]
  400ca2:	2b00      	cmp	r3, #0
  400ca4:	d007      	beq.n	400cb6 <_mcan_set_configuration+0x14e>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400ca6:	687b      	ldr	r3, [r7, #4]
  400ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  400cac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400cb6:	687b      	ldr	r3, [r7, #4]
  400cb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400cbc:	683b      	ldr	r3, [r7, #0]
  400cbe:	7edb      	ldrb	r3, [r3, #27]
  400cc0:	061b      	lsls	r3, r3, #24
  400cc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400cc6:	431a      	orrs	r2, r3
  400cc8:	687b      	ldr	r3, [r7, #4]
  400cca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	if (config->tx_queue_mode) {
  400cce:	683b      	ldr	r3, [r7, #0]
  400cd0:	7f1b      	ldrb	r3, [r3, #28]
  400cd2:	2b00      	cmp	r3, #0
  400cd4:	d007      	beq.n	400ce6 <_mcan_set_configuration+0x17e>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400cd6:	687b      	ldr	r3, [r7, #4]
  400cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  400cdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  400ce0:	687b      	ldr	r3, [r7, #4]
  400ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}

	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  400cec:	683b      	ldr	r3, [r7, #0]
  400cee:	7f5b      	ldrb	r3, [r3, #29]
  400cf0:	061b      	lsls	r3, r3, #24
  400cf2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400cf6:	431a      	orrs	r2, r3
  400cf8:	687b      	ldr	r3, [r7, #4]
  400cfa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
  400cfe:	bf00      	nop
  400d00:	370c      	adds	r7, #12
  400d02:	46bd      	mov	sp, r7
  400d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop
  400d0c:	00070a73 	.word	0x00070a73
  400d10:	00050a73 	.word	0x00050a73

00400d14 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400d14:	b580      	push	{r7, lr}
  400d16:	b082      	sub	sp, #8
  400d18:	af00      	add	r7, sp, #0
  400d1a:	6078      	str	r0, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	681b      	ldr	r3, [r3, #0]
  400d20:	4a09      	ldr	r2, [pc, #36]	; (400d48 <_mcan_enable_peripheral_clock+0x34>)
  400d22:	4293      	cmp	r3, r2
  400d24:	d103      	bne.n	400d2e <_mcan_enable_peripheral_clock+0x1a>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
  400d26:	2023      	movs	r0, #35	; 0x23
  400d28:	4b08      	ldr	r3, [pc, #32]	; (400d4c <_mcan_enable_peripheral_clock+0x38>)
  400d2a:	4798      	blx	r3
	} else if (module_inst->hw == MCAN1) {
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
	}
}
  400d2c:	e007      	b.n	400d3e <_mcan_enable_peripheral_clock+0x2a>
	} else if (module_inst->hw == MCAN1) {
  400d2e:	687b      	ldr	r3, [r7, #4]
  400d30:	681b      	ldr	r3, [r3, #0]
  400d32:	4a07      	ldr	r2, [pc, #28]	; (400d50 <_mcan_enable_peripheral_clock+0x3c>)
  400d34:	4293      	cmp	r3, r2
  400d36:	d102      	bne.n	400d3e <_mcan_enable_peripheral_clock+0x2a>
		pmc_enable_periph_clk(ID_MCAN1);
  400d38:	2025      	movs	r0, #37	; 0x25
  400d3a:	4b04      	ldr	r3, [pc, #16]	; (400d4c <_mcan_enable_peripheral_clock+0x38>)
  400d3c:	4798      	blx	r3
}
  400d3e:	bf00      	nop
  400d40:	3708      	adds	r7, #8
  400d42:	46bd      	mov	sp, r7
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	40030000 	.word	0x40030000
  400d4c:	00401645 	.word	0x00401645
  400d50:	40034000 	.word	0x40034000

00400d54 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400d54:	b580      	push	{r7, lr}
  400d56:	b084      	sub	sp, #16
  400d58:	af00      	add	r7, sp, #0
  400d5a:	60f8      	str	r0, [r7, #12]
  400d5c:	60b9      	str	r1, [r7, #8]
  400d5e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400d60:	68fb      	ldr	r3, [r7, #12]
  400d62:	68ba      	ldr	r2, [r7, #8]
  400d64:	601a      	str	r2, [r3, #0]

	pmc_disable_pck(PMC_PCK_5);
  400d66:	2005      	movs	r0, #5
  400d68:	4b14      	ldr	r3, [pc, #80]	; (400dbc <mcan_init+0x68>)
  400d6a:	4798      	blx	r3
	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400d6c:	2190      	movs	r1, #144	; 0x90
  400d6e:	2005      	movs	r0, #5
  400d70:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <mcan_init+0x6c>)
  400d72:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400d74:	2005      	movs	r0, #5
  400d76:	4b13      	ldr	r3, [pc, #76]	; (400dc4 <mcan_init+0x70>)
  400d78:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400d7a:	68f8      	ldr	r0, [r7, #12]
  400d7c:	4b12      	ldr	r3, [pc, #72]	; (400dc8 <mcan_init+0x74>)
  400d7e:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400d80:	68bb      	ldr	r3, [r7, #8]
  400d82:	699b      	ldr	r3, [r3, #24]
  400d84:	f043 0202 	orr.w	r2, r3, #2
  400d88:	68bb      	ldr	r3, [r7, #8]
  400d8a:	619a      	str	r2, [r3, #24]
	
	/* Initialize the message memory address. */
	_mcan_message_memory_init(hw);
  400d8c:	68b8      	ldr	r0, [r7, #8]
  400d8e:	4b0f      	ldr	r3, [pc, #60]	; (400dcc <mcan_init+0x78>)
  400d90:	4798      	blx	r3

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);
  400d92:	6879      	ldr	r1, [r7, #4]
  400d94:	68b8      	ldr	r0, [r7, #8]
  400d96:	4b0e      	ldr	r3, [pc, #56]	; (400dd0 <mcan_init+0x7c>)
  400d98:	4798      	blx	r3

	
	
	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400d9a:	68bb      	ldr	r3, [r7, #8]
  400d9c:	2203      	movs	r2, #3
  400d9e:	65da      	str	r2, [r3, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400da0:	68bb      	ldr	r3, [r7, #8]
  400da2:	f04f 32ff 	mov.w	r2, #4294967295
  400da6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400daa:	68bb      	ldr	r3, [r7, #8]
  400dac:	f04f 32ff 	mov.w	r2, #4294967295
  400db0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400db4:	bf00      	nop
  400db6:	3710      	adds	r7, #16
  400db8:	46bd      	mov	sp, r7
  400dba:	bd80      	pop	{r7, pc}
  400dbc:	00401759 	.word	0x00401759
  400dc0:	00401681 	.word	0x00401681
  400dc4:	00401731 	.word	0x00401731
  400dc8:	00400d15 	.word	0x00400d15
  400dcc:	004009f9 	.word	0x004009f9
  400dd0:	00400b69 	.word	0x00400b69

00400dd4 <mcan_start>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
  400dd4:	b480      	push	{r7}
  400dd6:	b083      	sub	sp, #12
  400dd8:	af00      	add	r7, sp, #0
  400dda:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400ddc:	687b      	ldr	r3, [r7, #4]
  400dde:	681b      	ldr	r3, [r3, #0]
  400de0:	687a      	ldr	r2, [r7, #4]
  400de2:	6812      	ldr	r2, [r2, #0]
  400de4:	6992      	ldr	r2, [r2, #24]
  400de6:	f022 0201 	bic.w	r2, r2, #1
  400dea:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400dec:	bf00      	nop
  400dee:	687b      	ldr	r3, [r7, #4]
  400df0:	681b      	ldr	r3, [r3, #0]
  400df2:	699b      	ldr	r3, [r3, #24]
  400df4:	f003 0301 	and.w	r3, r3, #1
  400df8:	2b00      	cmp	r3, #0
  400dfa:	d1f8      	bne.n	400dee <mcan_start+0x1a>
}
  400dfc:	bf00      	nop
  400dfe:	370c      	adds	r7, #12
  400e00:	46bd      	mov	sp, r7
  400e02:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e06:	4770      	bx	lr

00400e08 <mcan_stop>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
  400e08:	b480      	push	{r7}
  400e0a:	b083      	sub	sp, #12
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400e10:	687b      	ldr	r3, [r7, #4]
  400e12:	681b      	ldr	r3, [r3, #0]
  400e14:	687a      	ldr	r2, [r7, #4]
  400e16:	6812      	ldr	r2, [r2, #0]
  400e18:	6992      	ldr	r2, [r2, #24]
  400e1a:	f042 0201 	orr.w	r2, r2, #1
  400e1e:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400e20:	bf00      	nop
  400e22:	687b      	ldr	r3, [r7, #4]
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	699b      	ldr	r3, [r3, #24]
  400e28:	f003 0301 	and.w	r3, r3, #1
  400e2c:	2b00      	cmp	r3, #0
  400e2e:	d0f8      	beq.n	400e22 <mcan_stop+0x1a>
}
  400e30:	bf00      	nop
  400e32:	370c      	adds	r7, #12
  400e34:	46bd      	mov	sp, r7
  400e36:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e3a:	4770      	bx	lr

00400e3c <mcan_set_rx_standard_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_standard_filter(
		struct mcan_module *const module_inst,
		struct mcan_standard_message_filter_element *sd_filter, uint32_t index)
{
  400e3c:	b480      	push	{r7}
  400e3e:	b085      	sub	sp, #20
  400e40:	af00      	add	r7, sp, #0
  400e42:	60f8      	str	r0, [r7, #12]
  400e44:	60b9      	str	r1, [r7, #8]
  400e46:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400e48:	68fb      	ldr	r3, [r7, #12]
  400e4a:	681b      	ldr	r3, [r3, #0]
  400e4c:	4a0f      	ldr	r2, [pc, #60]	; (400e8c <mcan_set_rx_standard_filter+0x50>)
  400e4e:	4293      	cmp	r3, r2
  400e50:	d107      	bne.n	400e62 <mcan_set_rx_standard_filter+0x26>
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400e52:	68bb      	ldr	r3, [r7, #8]
  400e54:	681a      	ldr	r2, [r3, #0]
  400e56:	490e      	ldr	r1, [pc, #56]	; (400e90 <mcan_set_rx_standard_filter+0x54>)
  400e58:	687b      	ldr	r3, [r7, #4]
  400e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  400e5e:	2300      	movs	r3, #0
  400e60:	e00e      	b.n	400e80 <mcan_set_rx_standard_filter+0x44>
	} else if (module_inst->hw == MCAN1) {
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	681b      	ldr	r3, [r3, #0]
  400e66:	4a0b      	ldr	r2, [pc, #44]	; (400e94 <mcan_set_rx_standard_filter+0x58>)
  400e68:	4293      	cmp	r3, r2
  400e6a:	d107      	bne.n	400e7c <mcan_set_rx_standard_filter+0x40>
		mcan1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400e6c:	68bb      	ldr	r3, [r7, #8]
  400e6e:	681a      	ldr	r2, [r3, #0]
  400e70:	4909      	ldr	r1, [pc, #36]	; (400e98 <mcan_set_rx_standard_filter+0x5c>)
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  400e78:	2300      	movs	r3, #0
  400e7a:	e001      	b.n	400e80 <mcan_set_rx_standard_filter+0x44>
	}
	return ERR_INVALID_ARG;
  400e7c:	f06f 0307 	mvn.w	r3, #7
}
  400e80:	4618      	mov	r0, r3
  400e82:	3714      	adds	r7, #20
  400e84:	46bd      	mov	sp, r7
  400e86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e8a:	4770      	bx	lr
  400e8c:	40030000 	.word	0x40030000
  400e90:	20400d0c 	.word	0x20400d0c
  400e94:	40034000 	.word	0x40034000
  400e98:	2040113c 	.word	0x2040113c

00400e9c <mcan_set_rx_extended_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_extended_filter(
		struct mcan_module *const module_inst,
		struct mcan_extended_message_filter_element *et_filter, uint32_t index)
{
  400e9c:	b480      	push	{r7}
  400e9e:	b085      	sub	sp, #20
  400ea0:	af00      	add	r7, sp, #0
  400ea2:	60f8      	str	r0, [r7, #12]
  400ea4:	60b9      	str	r1, [r7, #8]
  400ea6:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400ea8:	68fb      	ldr	r3, [r7, #12]
  400eaa:	681b      	ldr	r3, [r3, #0]
  400eac:	4a16      	ldr	r2, [pc, #88]	; (400f08 <mcan_set_rx_extended_filter+0x6c>)
  400eae:	4293      	cmp	r3, r2
  400eb0:	d10e      	bne.n	400ed0 <mcan_set_rx_extended_filter+0x34>
		mcan0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  400eb2:	68bb      	ldr	r3, [r7, #8]
  400eb4:	681a      	ldr	r2, [r3, #0]
  400eb6:	4915      	ldr	r1, [pc, #84]	; (400f0c <mcan_set_rx_extended_filter+0x70>)
  400eb8:	687b      	ldr	r3, [r7, #4]
  400eba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  400ebe:	68bb      	ldr	r3, [r7, #8]
  400ec0:	685a      	ldr	r2, [r3, #4]
  400ec2:	4912      	ldr	r1, [pc, #72]	; (400f0c <mcan_set_rx_extended_filter+0x70>)
  400ec4:	687b      	ldr	r3, [r7, #4]
  400ec6:	00db      	lsls	r3, r3, #3
  400ec8:	440b      	add	r3, r1
  400eca:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  400ecc:	2300      	movs	r3, #0
  400ece:	e015      	b.n	400efc <mcan_set_rx_extended_filter+0x60>
	} else if (module_inst->hw == MCAN1) {
  400ed0:	68fb      	ldr	r3, [r7, #12]
  400ed2:	681b      	ldr	r3, [r3, #0]
  400ed4:	4a0e      	ldr	r2, [pc, #56]	; (400f10 <mcan_set_rx_extended_filter+0x74>)
  400ed6:	4293      	cmp	r3, r2
  400ed8:	d10e      	bne.n	400ef8 <mcan_set_rx_extended_filter+0x5c>
		mcan1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  400eda:	68bb      	ldr	r3, [r7, #8]
  400edc:	681a      	ldr	r2, [r3, #0]
  400ede:	490d      	ldr	r1, [pc, #52]	; (400f14 <mcan_set_rx_extended_filter+0x78>)
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  400ee6:	68bb      	ldr	r3, [r7, #8]
  400ee8:	685a      	ldr	r2, [r3, #4]
  400eea:	490a      	ldr	r1, [pc, #40]	; (400f14 <mcan_set_rx_extended_filter+0x78>)
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	00db      	lsls	r3, r3, #3
  400ef0:	440b      	add	r3, r1
  400ef2:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  400ef4:	2300      	movs	r3, #0
  400ef6:	e001      	b.n	400efc <mcan_set_rx_extended_filter+0x60>
	}
	return ERR_INVALID_ARG;
  400ef8:	f06f 0307 	mvn.w	r3, #7
}
  400efc:	4618      	mov	r0, r3
  400efe:	3714      	adds	r7, #20
  400f00:	46bd      	mov	sp, r7
  400f02:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f06:	4770      	bx	lr
  400f08:	40030000 	.word	0x40030000
  400f0c:	20400d8c 	.word	0x20400d8c
  400f10:	40034000 	.word	0x40034000
  400f14:	204011bc 	.word	0x204011bc

00400f18 <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  400f18:	b580      	push	{r7, lr}
  400f1a:	b084      	sub	sp, #16
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	681b      	ldr	r3, [r3, #0]
  400f28:	4a11      	ldr	r2, [pc, #68]	; (400f70 <mcan_get_rx_buffer_element+0x58>)
  400f2a:	4293      	cmp	r3, r2
  400f2c:	d10a      	bne.n	400f44 <mcan_get_rx_buffer_element+0x2c>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	011b      	lsls	r3, r3, #4
  400f32:	4a10      	ldr	r2, [pc, #64]	; (400f74 <mcan_get_rx_buffer_element+0x5c>)
  400f34:	4413      	add	r3, r2
  400f36:	2210      	movs	r2, #16
  400f38:	4619      	mov	r1, r3
  400f3a:	68b8      	ldr	r0, [r7, #8]
  400f3c:	4b0e      	ldr	r3, [pc, #56]	; (400f78 <mcan_get_rx_buffer_element+0x60>)
  400f3e:	4798      	blx	r3
		return STATUS_OK;
  400f40:	2300      	movs	r3, #0
  400f42:	e011      	b.n	400f68 <mcan_get_rx_buffer_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  400f44:	68fb      	ldr	r3, [r7, #12]
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	4a0c      	ldr	r2, [pc, #48]	; (400f7c <mcan_get_rx_buffer_element+0x64>)
  400f4a:	4293      	cmp	r3, r2
  400f4c:	d10a      	bne.n	400f64 <mcan_get_rx_buffer_element+0x4c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400f4e:	687b      	ldr	r3, [r7, #4]
  400f50:	011b      	lsls	r3, r3, #4
  400f52:	4a0b      	ldr	r2, [pc, #44]	; (400f80 <mcan_get_rx_buffer_element+0x68>)
  400f54:	4413      	add	r3, r2
  400f56:	2210      	movs	r2, #16
  400f58:	4619      	mov	r1, r3
  400f5a:	68b8      	ldr	r0, [r7, #8]
  400f5c:	4b06      	ldr	r3, [pc, #24]	; (400f78 <mcan_get_rx_buffer_element+0x60>)
  400f5e:	4798      	blx	r3
		return STATUS_OK;
  400f60:	2300      	movs	r3, #0
  400f62:	e001      	b.n	400f68 <mcan_get_rx_buffer_element+0x50>
	}
	return ERR_INVALID_ARG;
  400f64:	f06f 0307 	mvn.w	r3, #7
}
  400f68:	4618      	mov	r0, r3
  400f6a:	3710      	adds	r7, #16
  400f6c:	46bd      	mov	sp, r7
  400f6e:	bd80      	pop	{r7, pc}
  400f70:	40030000 	.word	0x40030000
  400f74:	204009dc 	.word	0x204009dc
  400f78:	00403f6d 	.word	0x00403f6d
  400f7c:	40034000 	.word	0x40034000
  400f80:	20400e0c 	.word	0x20400e0c

00400f84 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  400f84:	b580      	push	{r7, lr}
  400f86:	b084      	sub	sp, #16
  400f88:	af00      	add	r7, sp, #0
  400f8a:	60f8      	str	r0, [r7, #12]
  400f8c:	60b9      	str	r1, [r7, #8]
  400f8e:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400f90:	68fb      	ldr	r3, [r7, #12]
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	4a11      	ldr	r2, [pc, #68]	; (400fdc <mcan_get_rx_fifo_0_element+0x58>)
  400f96:	4293      	cmp	r3, r2
  400f98:	d10a      	bne.n	400fb0 <mcan_get_rx_fifo_0_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400f9a:	687b      	ldr	r3, [r7, #4]
  400f9c:	011b      	lsls	r3, r3, #4
  400f9e:	4a10      	ldr	r2, [pc, #64]	; (400fe0 <mcan_get_rx_fifo_0_element+0x5c>)
  400fa0:	4413      	add	r3, r2
  400fa2:	2210      	movs	r2, #16
  400fa4:	4619      	mov	r1, r3
  400fa6:	68b8      	ldr	r0, [r7, #8]
  400fa8:	4b0e      	ldr	r3, [pc, #56]	; (400fe4 <mcan_get_rx_fifo_0_element+0x60>)
  400faa:	4798      	blx	r3
		return STATUS_OK;
  400fac:	2300      	movs	r3, #0
  400fae:	e011      	b.n	400fd4 <mcan_get_rx_fifo_0_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  400fb0:	68fb      	ldr	r3, [r7, #12]
  400fb2:	681b      	ldr	r3, [r3, #0]
  400fb4:	4a0c      	ldr	r2, [pc, #48]	; (400fe8 <mcan_get_rx_fifo_0_element+0x64>)
  400fb6:	4293      	cmp	r3, r2
  400fb8:	d10a      	bne.n	400fd0 <mcan_get_rx_fifo_0_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	011b      	lsls	r3, r3, #4
  400fbe:	4a0b      	ldr	r2, [pc, #44]	; (400fec <mcan_get_rx_fifo_0_element+0x68>)
  400fc0:	4413      	add	r3, r2
  400fc2:	2210      	movs	r2, #16
  400fc4:	4619      	mov	r1, r3
  400fc6:	68b8      	ldr	r0, [r7, #8]
  400fc8:	4b06      	ldr	r3, [pc, #24]	; (400fe4 <mcan_get_rx_fifo_0_element+0x60>)
  400fca:	4798      	blx	r3
		return STATUS_OK;
  400fcc:	2300      	movs	r3, #0
  400fce:	e001      	b.n	400fd4 <mcan_get_rx_fifo_0_element+0x50>
	}
	return ERR_INVALID_ARG;
  400fd0:	f06f 0307 	mvn.w	r3, #7
}
  400fd4:	4618      	mov	r0, r3
  400fd6:	3710      	adds	r7, #16
  400fd8:	46bd      	mov	sp, r7
  400fda:	bd80      	pop	{r7, pc}
  400fdc:	40030000 	.word	0x40030000
  400fe0:	20400adc 	.word	0x20400adc
  400fe4:	00403f6d 	.word	0x00403f6d
  400fe8:	40034000 	.word	0x40034000
  400fec:	20400f0c 	.word	0x20400f0c

00400ff0 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  400ff0:	b580      	push	{r7, lr}
  400ff2:	b084      	sub	sp, #16
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	60f8      	str	r0, [r7, #12]
  400ff8:	60b9      	str	r1, [r7, #8]
  400ffa:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400ffc:	68fb      	ldr	r3, [r7, #12]
  400ffe:	681b      	ldr	r3, [r3, #0]
  401000:	4a11      	ldr	r2, [pc, #68]	; (401048 <mcan_get_rx_fifo_1_element+0x58>)
  401002:	4293      	cmp	r3, r2
  401004:	d10a      	bne.n	40101c <mcan_get_rx_fifo_1_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	011b      	lsls	r3, r3, #4
  40100a:	4a10      	ldr	r2, [pc, #64]	; (40104c <mcan_get_rx_fifo_1_element+0x5c>)
  40100c:	4413      	add	r3, r2
  40100e:	2210      	movs	r2, #16
  401010:	4619      	mov	r1, r3
  401012:	68b8      	ldr	r0, [r7, #8]
  401014:	4b0e      	ldr	r3, [pc, #56]	; (401050 <mcan_get_rx_fifo_1_element+0x60>)
  401016:	4798      	blx	r3
		return STATUS_OK;
  401018:	2300      	movs	r3, #0
  40101a:	e011      	b.n	401040 <mcan_get_rx_fifo_1_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  40101c:	68fb      	ldr	r3, [r7, #12]
  40101e:	681b      	ldr	r3, [r3, #0]
  401020:	4a0c      	ldr	r2, [pc, #48]	; (401054 <mcan_get_rx_fifo_1_element+0x64>)
  401022:	4293      	cmp	r3, r2
  401024:	d10a      	bne.n	40103c <mcan_get_rx_fifo_1_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401026:	687b      	ldr	r3, [r7, #4]
  401028:	011b      	lsls	r3, r3, #4
  40102a:	4a0b      	ldr	r2, [pc, #44]	; (401058 <mcan_get_rx_fifo_1_element+0x68>)
  40102c:	4413      	add	r3, r2
  40102e:	2210      	movs	r2, #16
  401030:	4619      	mov	r1, r3
  401032:	68b8      	ldr	r0, [r7, #8]
  401034:	4b06      	ldr	r3, [pc, #24]	; (401050 <mcan_get_rx_fifo_1_element+0x60>)
  401036:	4798      	blx	r3
		return STATUS_OK;
  401038:	2300      	movs	r3, #0
  40103a:	e001      	b.n	401040 <mcan_get_rx_fifo_1_element+0x50>
	}
	return ERR_INVALID_ARG;
  40103c:	f06f 0307 	mvn.w	r3, #7
}
  401040:	4618      	mov	r0, r3
  401042:	3710      	adds	r7, #16
  401044:	46bd      	mov	sp, r7
  401046:	bd80      	pop	{r7, pc}
  401048:	40030000 	.word	0x40030000
  40104c:	20400bdc 	.word	0x20400bdc
  401050:	00403f6d 	.word	0x00403f6d
  401054:	40034000 	.word	0x40034000
  401058:	2040100c 	.word	0x2040100c

0040105c <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  40105c:	b480      	push	{r7}
  40105e:	b087      	sub	sp, #28
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  401068:	68fb      	ldr	r3, [r7, #12]
  40106a:	681b      	ldr	r3, [r3, #0]
  40106c:	4a2f      	ldr	r2, [pc, #188]	; (40112c <mcan_set_tx_buffer_element+0xd0>)
  40106e:	4293      	cmp	r3, r2
  401070:	d127      	bne.n	4010c2 <mcan_set_tx_buffer_element+0x66>
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401072:	68bb      	ldr	r3, [r7, #8]
  401074:	681a      	ldr	r2, [r3, #0]
  401076:	492e      	ldr	r1, [pc, #184]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	011b      	lsls	r3, r3, #4
  40107c:	440b      	add	r3, r1
  40107e:	601a      	str	r2, [r3, #0]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401080:	68bb      	ldr	r3, [r7, #8]
  401082:	685a      	ldr	r2, [r3, #4]
  401084:	492a      	ldr	r1, [pc, #168]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	011b      	lsls	r3, r3, #4
  40108a:	440b      	add	r3, r1
  40108c:	3304      	adds	r3, #4
  40108e:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401090:	2300      	movs	r3, #0
  401092:	617b      	str	r3, [r7, #20]
  401094:	e010      	b.n	4010b8 <mcan_set_tx_buffer_element+0x5c>
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  401096:	68ba      	ldr	r2, [r7, #8]
  401098:	697b      	ldr	r3, [r7, #20]
  40109a:	4413      	add	r3, r2
  40109c:	3308      	adds	r3, #8
  40109e:	7819      	ldrb	r1, [r3, #0]
  4010a0:	4a23      	ldr	r2, [pc, #140]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  4010a2:	687b      	ldr	r3, [r7, #4]
  4010a4:	011b      	lsls	r3, r3, #4
  4010a6:	441a      	add	r2, r3
  4010a8:	697b      	ldr	r3, [r7, #20]
  4010aa:	4413      	add	r3, r2
  4010ac:	3308      	adds	r3, #8
  4010ae:	460a      	mov	r2, r1
  4010b0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4010b2:	697b      	ldr	r3, [r7, #20]
  4010b4:	3301      	adds	r3, #1
  4010b6:	617b      	str	r3, [r7, #20]
  4010b8:	697b      	ldr	r3, [r7, #20]
  4010ba:	2b07      	cmp	r3, #7
  4010bc:	d9eb      	bls.n	401096 <mcan_set_tx_buffer_element+0x3a>
		}
		return STATUS_OK;
  4010be:	2300      	movs	r3, #0
  4010c0:	e02e      	b.n	401120 <mcan_set_tx_buffer_element+0xc4>
	} else if (module_inst->hw == MCAN1) {
  4010c2:	68fb      	ldr	r3, [r7, #12]
  4010c4:	681b      	ldr	r3, [r3, #0]
  4010c6:	4a1b      	ldr	r2, [pc, #108]	; (401134 <mcan_set_tx_buffer_element+0xd8>)
  4010c8:	4293      	cmp	r3, r2
  4010ca:	d127      	bne.n	40111c <mcan_set_tx_buffer_element+0xc0>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  4010cc:	68bb      	ldr	r3, [r7, #8]
  4010ce:	681a      	ldr	r2, [r3, #0]
  4010d0:	4919      	ldr	r1, [pc, #100]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010d2:	687b      	ldr	r3, [r7, #4]
  4010d4:	011b      	lsls	r3, r3, #4
  4010d6:	440b      	add	r3, r1
  4010d8:	601a      	str	r2, [r3, #0]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  4010da:	68bb      	ldr	r3, [r7, #8]
  4010dc:	685a      	ldr	r2, [r3, #4]
  4010de:	4916      	ldr	r1, [pc, #88]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	011b      	lsls	r3, r3, #4
  4010e4:	440b      	add	r3, r1
  4010e6:	3304      	adds	r3, #4
  4010e8:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4010ea:	2300      	movs	r3, #0
  4010ec:	617b      	str	r3, [r7, #20]
  4010ee:	e010      	b.n	401112 <mcan_set_tx_buffer_element+0xb6>
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  4010f0:	68ba      	ldr	r2, [r7, #8]
  4010f2:	697b      	ldr	r3, [r7, #20]
  4010f4:	4413      	add	r3, r2
  4010f6:	3308      	adds	r3, #8
  4010f8:	7819      	ldrb	r1, [r3, #0]
  4010fa:	4a0f      	ldr	r2, [pc, #60]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010fc:	687b      	ldr	r3, [r7, #4]
  4010fe:	011b      	lsls	r3, r3, #4
  401100:	441a      	add	r2, r3
  401102:	697b      	ldr	r3, [r7, #20]
  401104:	4413      	add	r3, r2
  401106:	3308      	adds	r3, #8
  401108:	460a      	mov	r2, r1
  40110a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	3301      	adds	r3, #1
  401110:	617b      	str	r3, [r7, #20]
  401112:	697b      	ldr	r3, [r7, #20]
  401114:	2b07      	cmp	r3, #7
  401116:	d9eb      	bls.n	4010f0 <mcan_set_tx_buffer_element+0x94>
		}
		return STATUS_OK;
  401118:	2300      	movs	r3, #0
  40111a:	e001      	b.n	401120 <mcan_set_tx_buffer_element+0xc4>
	}
	return ERR_INVALID_ARG;
  40111c:	f06f 0307 	mvn.w	r3, #7
}
  401120:	4618      	mov	r0, r3
  401122:	371c      	adds	r7, #28
  401124:	46bd      	mov	sp, r7
  401126:	f85d 7b04 	ldr.w	r7, [sp], #4
  40112a:	4770      	bx	lr
  40112c:	40030000 	.word	0x40030000
  401130:	20400cdc 	.word	0x20400cdc
  401134:	40034000 	.word	0x40034000
  401138:	2040110c 	.word	0x2040110c

0040113c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	b086      	sub	sp, #24
  401140:	af00      	add	r7, sp, #0
  401142:	60f8      	str	r0, [r7, #12]
  401144:	60b9      	str	r1, [r7, #8]
  401146:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401148:	2300      	movs	r3, #0
  40114a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40114c:	68fb      	ldr	r3, [r7, #12]
  40114e:	2b00      	cmp	r3, #0
  401150:	d012      	beq.n	401178 <_read+0x3c>
		return -1;
  401152:	f04f 33ff 	mov.w	r3, #4294967295
  401156:	e013      	b.n	401180 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  401158:	4b0b      	ldr	r3, [pc, #44]	; (401188 <_read+0x4c>)
  40115a:	681b      	ldr	r3, [r3, #0]
  40115c:	4a0b      	ldr	r2, [pc, #44]	; (40118c <_read+0x50>)
  40115e:	6812      	ldr	r2, [r2, #0]
  401160:	68b9      	ldr	r1, [r7, #8]
  401162:	4610      	mov	r0, r2
  401164:	4798      	blx	r3
		ptr++;
  401166:	68bb      	ldr	r3, [r7, #8]
  401168:	3301      	adds	r3, #1
  40116a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40116c:	697b      	ldr	r3, [r7, #20]
  40116e:	3301      	adds	r3, #1
  401170:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	3b01      	subs	r3, #1
  401176:	607b      	str	r3, [r7, #4]
  401178:	687b      	ldr	r3, [r7, #4]
  40117a:	2b00      	cmp	r3, #0
  40117c:	dcec      	bgt.n	401158 <_read+0x1c>
	}
	return nChars;
  40117e:	697b      	ldr	r3, [r7, #20]
}
  401180:	4618      	mov	r0, r3
  401182:	3718      	adds	r7, #24
  401184:	46bd      	mov	sp, r7
  401186:	bd80      	pop	{r7, pc}
  401188:	204012fc 	.word	0x204012fc
  40118c:	20401304 	.word	0x20401304

00401190 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401190:	b580      	push	{r7, lr}
  401192:	b086      	sub	sp, #24
  401194:	af00      	add	r7, sp, #0
  401196:	60f8      	str	r0, [r7, #12]
  401198:	60b9      	str	r1, [r7, #8]
  40119a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40119c:	2300      	movs	r3, #0
  40119e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	2b01      	cmp	r3, #1
  4011a4:	d01e      	beq.n	4011e4 <_write+0x54>
  4011a6:	68fb      	ldr	r3, [r7, #12]
  4011a8:	2b02      	cmp	r3, #2
  4011aa:	d01b      	beq.n	4011e4 <_write+0x54>
  4011ac:	68fb      	ldr	r3, [r7, #12]
  4011ae:	2b03      	cmp	r3, #3
  4011b0:	d018      	beq.n	4011e4 <_write+0x54>
		return -1;
  4011b2:	f04f 33ff 	mov.w	r3, #4294967295
  4011b6:	e019      	b.n	4011ec <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4011b8:	4b0e      	ldr	r3, [pc, #56]	; (4011f4 <_write+0x64>)
  4011ba:	681a      	ldr	r2, [r3, #0]
  4011bc:	4b0e      	ldr	r3, [pc, #56]	; (4011f8 <_write+0x68>)
  4011be:	6818      	ldr	r0, [r3, #0]
  4011c0:	68bb      	ldr	r3, [r7, #8]
  4011c2:	1c59      	adds	r1, r3, #1
  4011c4:	60b9      	str	r1, [r7, #8]
  4011c6:	781b      	ldrb	r3, [r3, #0]
  4011c8:	4619      	mov	r1, r3
  4011ca:	4790      	blx	r2
  4011cc:	4603      	mov	r3, r0
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	da02      	bge.n	4011d8 <_write+0x48>
			return -1;
  4011d2:	f04f 33ff 	mov.w	r3, #4294967295
  4011d6:	e009      	b.n	4011ec <_write+0x5c>
		}
		++nChars;
  4011d8:	697b      	ldr	r3, [r7, #20]
  4011da:	3301      	adds	r3, #1
  4011dc:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4011de:	687b      	ldr	r3, [r7, #4]
  4011e0:	3b01      	subs	r3, #1
  4011e2:	607b      	str	r3, [r7, #4]
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d1e6      	bne.n	4011b8 <_write+0x28>
	}
	return nChars;
  4011ea:	697b      	ldr	r3, [r7, #20]
}
  4011ec:	4618      	mov	r0, r3
  4011ee:	3718      	adds	r7, #24
  4011f0:	46bd      	mov	sp, r7
  4011f2:	bd80      	pop	{r7, pc}
  4011f4:	20401300 	.word	0x20401300
  4011f8:	20401304 	.word	0x20401304

004011fc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401204:	687b      	ldr	r3, [r7, #4]
  401206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401208:	4618      	mov	r0, r3
  40120a:	370c      	adds	r7, #12
  40120c:	46bd      	mov	sp, r7
  40120e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401212:	4770      	bx	lr

00401214 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401214:	b480      	push	{r7}
  401216:	b083      	sub	sp, #12
  401218:	af00      	add	r7, sp, #0
  40121a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40121c:	687b      	ldr	r3, [r7, #4]
  40121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401220:	4618      	mov	r0, r3
  401222:	370c      	adds	r7, #12
  401224:	46bd      	mov	sp, r7
  401226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122a:	4770      	bx	lr

0040122c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40122c:	b580      	push	{r7, lr}
  40122e:	b084      	sub	sp, #16
  401230:	af00      	add	r7, sp, #0
  401232:	6078      	str	r0, [r7, #4]
  401234:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401236:	6878      	ldr	r0, [r7, #4]
  401238:	4b26      	ldr	r3, [pc, #152]	; (4012d4 <pio_handler_process+0xa8>)
  40123a:	4798      	blx	r3
  40123c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40123e:	6878      	ldr	r0, [r7, #4]
  401240:	4b25      	ldr	r3, [pc, #148]	; (4012d8 <pio_handler_process+0xac>)
  401242:	4798      	blx	r3
  401244:	4602      	mov	r2, r0
  401246:	68fb      	ldr	r3, [r7, #12]
  401248:	4013      	ands	r3, r2
  40124a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40124c:	68fb      	ldr	r3, [r7, #12]
  40124e:	2b00      	cmp	r3, #0
  401250:	d03c      	beq.n	4012cc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401252:	2300      	movs	r3, #0
  401254:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401256:	e034      	b.n	4012c2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401258:	4a20      	ldr	r2, [pc, #128]	; (4012dc <pio_handler_process+0xb0>)
  40125a:	68bb      	ldr	r3, [r7, #8]
  40125c:	011b      	lsls	r3, r3, #4
  40125e:	4413      	add	r3, r2
  401260:	681a      	ldr	r2, [r3, #0]
  401262:	683b      	ldr	r3, [r7, #0]
  401264:	429a      	cmp	r2, r3
  401266:	d126      	bne.n	4012b6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401268:	4a1c      	ldr	r2, [pc, #112]	; (4012dc <pio_handler_process+0xb0>)
  40126a:	68bb      	ldr	r3, [r7, #8]
  40126c:	011b      	lsls	r3, r3, #4
  40126e:	4413      	add	r3, r2
  401270:	3304      	adds	r3, #4
  401272:	681a      	ldr	r2, [r3, #0]
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	4013      	ands	r3, r2
  401278:	2b00      	cmp	r3, #0
  40127a:	d01c      	beq.n	4012b6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40127c:	4a17      	ldr	r2, [pc, #92]	; (4012dc <pio_handler_process+0xb0>)
  40127e:	68bb      	ldr	r3, [r7, #8]
  401280:	011b      	lsls	r3, r3, #4
  401282:	4413      	add	r3, r2
  401284:	330c      	adds	r3, #12
  401286:	681b      	ldr	r3, [r3, #0]
  401288:	4914      	ldr	r1, [pc, #80]	; (4012dc <pio_handler_process+0xb0>)
  40128a:	68ba      	ldr	r2, [r7, #8]
  40128c:	0112      	lsls	r2, r2, #4
  40128e:	440a      	add	r2, r1
  401290:	6810      	ldr	r0, [r2, #0]
  401292:	4912      	ldr	r1, [pc, #72]	; (4012dc <pio_handler_process+0xb0>)
  401294:	68ba      	ldr	r2, [r7, #8]
  401296:	0112      	lsls	r2, r2, #4
  401298:	440a      	add	r2, r1
  40129a:	3204      	adds	r2, #4
  40129c:	6812      	ldr	r2, [r2, #0]
  40129e:	4611      	mov	r1, r2
  4012a0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4012a2:	4a0e      	ldr	r2, [pc, #56]	; (4012dc <pio_handler_process+0xb0>)
  4012a4:	68bb      	ldr	r3, [r7, #8]
  4012a6:	011b      	lsls	r3, r3, #4
  4012a8:	4413      	add	r3, r2
  4012aa:	3304      	adds	r3, #4
  4012ac:	681b      	ldr	r3, [r3, #0]
  4012ae:	43db      	mvns	r3, r3
  4012b0:	68fa      	ldr	r2, [r7, #12]
  4012b2:	4013      	ands	r3, r2
  4012b4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4012b6:	68bb      	ldr	r3, [r7, #8]
  4012b8:	3301      	adds	r3, #1
  4012ba:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012bc:	68bb      	ldr	r3, [r7, #8]
  4012be:	2b06      	cmp	r3, #6
  4012c0:	d803      	bhi.n	4012ca <pio_handler_process+0x9e>
		while (status != 0) {
  4012c2:	68fb      	ldr	r3, [r7, #12]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d1c7      	bne.n	401258 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4012c8:	e000      	b.n	4012cc <pio_handler_process+0xa0>
				break;
  4012ca:	bf00      	nop
}
  4012cc:	bf00      	nop
  4012ce:	3710      	adds	r7, #16
  4012d0:	46bd      	mov	sp, r7
  4012d2:	bd80      	pop	{r7, pc}
  4012d4:	004011fd 	.word	0x004011fd
  4012d8:	00401215 	.word	0x00401215
  4012dc:	2040123c 	.word	0x2040123c

004012e0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4012e0:	b580      	push	{r7, lr}
  4012e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4012e4:	210a      	movs	r1, #10
  4012e6:	4802      	ldr	r0, [pc, #8]	; (4012f0 <PIOA_Handler+0x10>)
  4012e8:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <PIOA_Handler+0x14>)
  4012ea:	4798      	blx	r3
}
  4012ec:	bf00      	nop
  4012ee:	bd80      	pop	{r7, pc}
  4012f0:	400e0e00 	.word	0x400e0e00
  4012f4:	0040122d 	.word	0x0040122d

004012f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012f8:	b580      	push	{r7, lr}
  4012fa:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4012fc:	210b      	movs	r1, #11
  4012fe:	4802      	ldr	r0, [pc, #8]	; (401308 <PIOB_Handler+0x10>)
  401300:	4b02      	ldr	r3, [pc, #8]	; (40130c <PIOB_Handler+0x14>)
  401302:	4798      	blx	r3
}
  401304:	bf00      	nop
  401306:	bd80      	pop	{r7, pc}
  401308:	400e1000 	.word	0x400e1000
  40130c:	0040122d 	.word	0x0040122d

00401310 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401310:	b580      	push	{r7, lr}
  401312:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401314:	210c      	movs	r1, #12
  401316:	4802      	ldr	r0, [pc, #8]	; (401320 <PIOC_Handler+0x10>)
  401318:	4b02      	ldr	r3, [pc, #8]	; (401324 <PIOC_Handler+0x14>)
  40131a:	4798      	blx	r3
}
  40131c:	bf00      	nop
  40131e:	bd80      	pop	{r7, pc}
  401320:	400e1200 	.word	0x400e1200
  401324:	0040122d 	.word	0x0040122d

00401328 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401328:	b580      	push	{r7, lr}
  40132a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40132c:	2110      	movs	r1, #16
  40132e:	4802      	ldr	r0, [pc, #8]	; (401338 <PIOD_Handler+0x10>)
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <PIOD_Handler+0x14>)
  401332:	4798      	blx	r3
}
  401334:	bf00      	nop
  401336:	bd80      	pop	{r7, pc}
  401338:	400e1400 	.word	0x400e1400
  40133c:	0040122d 	.word	0x0040122d

00401340 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401340:	b580      	push	{r7, lr}
  401342:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401344:	2111      	movs	r1, #17
  401346:	4802      	ldr	r0, [pc, #8]	; (401350 <PIOE_Handler+0x10>)
  401348:	4b02      	ldr	r3, [pc, #8]	; (401354 <PIOE_Handler+0x14>)
  40134a:	4798      	blx	r3
}
  40134c:	bf00      	nop
  40134e:	bd80      	pop	{r7, pc}
  401350:	400e1600 	.word	0x400e1600
  401354:	0040122d 	.word	0x0040122d

00401358 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401358:	b480      	push	{r7}
  40135a:	b083      	sub	sp, #12
  40135c:	af00      	add	r7, sp, #0
  40135e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401360:	687b      	ldr	r3, [r7, #4]
  401362:	3b01      	subs	r3, #1
  401364:	2b03      	cmp	r3, #3
  401366:	d81a      	bhi.n	40139e <pmc_mck_set_division+0x46>
  401368:	a201      	add	r2, pc, #4	; (adr r2, 401370 <pmc_mck_set_division+0x18>)
  40136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40136e:	bf00      	nop
  401370:	00401381 	.word	0x00401381
  401374:	00401387 	.word	0x00401387
  401378:	0040138f 	.word	0x0040138f
  40137c:	00401397 	.word	0x00401397
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401380:	2300      	movs	r3, #0
  401382:	607b      	str	r3, [r7, #4]
			break;
  401384:	e00e      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401386:	f44f 7380 	mov.w	r3, #256	; 0x100
  40138a:	607b      	str	r3, [r7, #4]
			break;
  40138c:	e00a      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40138e:	f44f 7340 	mov.w	r3, #768	; 0x300
  401392:	607b      	str	r3, [r7, #4]
			break;
  401394:	e006      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401396:	f44f 7300 	mov.w	r3, #512	; 0x200
  40139a:	607b      	str	r3, [r7, #4]
			break;
  40139c:	e002      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40139e:	2300      	movs	r3, #0
  4013a0:	607b      	str	r3, [r7, #4]
			break;
  4013a2:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4013a4:	490a      	ldr	r1, [pc, #40]	; (4013d0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013a6:	4b0a      	ldr	r3, [pc, #40]	; (4013d0 <pmc_mck_set_division+0x78>)
  4013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4013b2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013b4:	bf00      	nop
  4013b6:	4b06      	ldr	r3, [pc, #24]	; (4013d0 <pmc_mck_set_division+0x78>)
  4013b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013ba:	f003 0308 	and.w	r3, r3, #8
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d0f9      	beq.n	4013b6 <pmc_mck_set_division+0x5e>
}
  4013c2:	bf00      	nop
  4013c4:	370c      	adds	r7, #12
  4013c6:	46bd      	mov	sp, r7
  4013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e0600 	.word	0x400e0600

004013d4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4013d4:	b480      	push	{r7}
  4013d6:	b085      	sub	sp, #20
  4013d8:	af00      	add	r7, sp, #0
  4013da:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013dc:	491d      	ldr	r1, [pc, #116]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  4013de:	4b1d      	ldr	r3, [pc, #116]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  4013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4013e6:	687b      	ldr	r3, [r7, #4]
  4013e8:	4313      	orrs	r3, r2
  4013ea:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013f0:	60fb      	str	r3, [r7, #12]
  4013f2:	e007      	b.n	401404 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013f4:	68fb      	ldr	r3, [r7, #12]
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d101      	bne.n	4013fe <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4013fa:	2301      	movs	r3, #1
  4013fc:	e023      	b.n	401446 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	3b01      	subs	r3, #1
  401402:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401404:	4b13      	ldr	r3, [pc, #76]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401408:	f003 0308 	and.w	r3, r3, #8
  40140c:	2b00      	cmp	r3, #0
  40140e:	d0f1      	beq.n	4013f4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401410:	4a10      	ldr	r2, [pc, #64]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401412:	4b10      	ldr	r3, [pc, #64]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401416:	f023 0303 	bic.w	r3, r3, #3
  40141a:	f043 0302 	orr.w	r3, r3, #2
  40141e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401424:	60fb      	str	r3, [r7, #12]
  401426:	e007      	b.n	401438 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401428:	68fb      	ldr	r3, [r7, #12]
  40142a:	2b00      	cmp	r3, #0
  40142c:	d101      	bne.n	401432 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40142e:	2301      	movs	r3, #1
  401430:	e009      	b.n	401446 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401432:	68fb      	ldr	r3, [r7, #12]
  401434:	3b01      	subs	r3, #1
  401436:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401438:	4b06      	ldr	r3, [pc, #24]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  40143a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40143c:	f003 0308 	and.w	r3, r3, #8
  401440:	2b00      	cmp	r3, #0
  401442:	d0f1      	beq.n	401428 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401444:	2300      	movs	r3, #0
}
  401446:	4618      	mov	r0, r3
  401448:	3714      	adds	r7, #20
  40144a:	46bd      	mov	sp, r7
  40144c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600

00401458 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401458:	b480      	push	{r7}
  40145a:	b083      	sub	sp, #12
  40145c:	af00      	add	r7, sp, #0
  40145e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401460:	687b      	ldr	r3, [r7, #4]
  401462:	2b01      	cmp	r3, #1
  401464:	d105      	bne.n	401472 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401466:	4907      	ldr	r1, [pc, #28]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401468:	4b06      	ldr	r3, [pc, #24]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40146a:	689a      	ldr	r2, [r3, #8]
  40146c:	4b06      	ldr	r3, [pc, #24]	; (401488 <pmc_switch_sclk_to_32kxtal+0x30>)
  40146e:	4313      	orrs	r3, r2
  401470:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401472:	4b04      	ldr	r3, [pc, #16]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401474:	4a05      	ldr	r2, [pc, #20]	; (40148c <pmc_switch_sclk_to_32kxtal+0x34>)
  401476:	601a      	str	r2, [r3, #0]
}
  401478:	bf00      	nop
  40147a:	370c      	adds	r7, #12
  40147c:	46bd      	mov	sp, r7
  40147e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401482:	4770      	bx	lr
  401484:	400e1810 	.word	0x400e1810
  401488:	a5100000 	.word	0xa5100000
  40148c:	a5000008 	.word	0xa5000008

00401490 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401490:	b480      	push	{r7}
  401492:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401494:	4b09      	ldr	r3, [pc, #36]	; (4014bc <pmc_osc_is_ready_32kxtal+0x2c>)
  401496:	695b      	ldr	r3, [r3, #20]
  401498:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40149c:	2b00      	cmp	r3, #0
  40149e:	d007      	beq.n	4014b0 <pmc_osc_is_ready_32kxtal+0x20>
  4014a0:	4b07      	ldr	r3, [pc, #28]	; (4014c0 <pmc_osc_is_ready_32kxtal+0x30>)
  4014a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014a8:	2b00      	cmp	r3, #0
  4014aa:	d001      	beq.n	4014b0 <pmc_osc_is_ready_32kxtal+0x20>
  4014ac:	2301      	movs	r3, #1
  4014ae:	e000      	b.n	4014b2 <pmc_osc_is_ready_32kxtal+0x22>
  4014b0:	2300      	movs	r3, #0
}
  4014b2:	4618      	mov	r0, r3
  4014b4:	46bd      	mov	sp, r7
  4014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ba:	4770      	bx	lr
  4014bc:	400e1810 	.word	0x400e1810
  4014c0:	400e0600 	.word	0x400e0600

004014c4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4014c4:	b480      	push	{r7}
  4014c6:	b083      	sub	sp, #12
  4014c8:	af00      	add	r7, sp, #0
  4014ca:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4014cc:	4915      	ldr	r1, [pc, #84]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014ce:	4b15      	ldr	r3, [pc, #84]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014d0:	6a1a      	ldr	r2, [r3, #32]
  4014d2:	4b15      	ldr	r3, [pc, #84]	; (401528 <pmc_switch_mainck_to_fastrc+0x64>)
  4014d4:	4313      	orrs	r3, r2
  4014d6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014d8:	bf00      	nop
  4014da:	4b12      	ldr	r3, [pc, #72]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d0f9      	beq.n	4014da <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014e6:	490f      	ldr	r1, [pc, #60]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014e8:	4b0e      	ldr	r3, [pc, #56]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014ea:	6a1a      	ldr	r2, [r3, #32]
  4014ec:	4b0f      	ldr	r3, [pc, #60]	; (40152c <pmc_switch_mainck_to_fastrc+0x68>)
  4014ee:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4014f0:	687a      	ldr	r2, [r7, #4]
  4014f2:	4313      	orrs	r3, r2
  4014f4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014f8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014fa:	bf00      	nop
  4014fc:	4b09      	ldr	r3, [pc, #36]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401504:	2b00      	cmp	r3, #0
  401506:	d0f9      	beq.n	4014fc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401508:	4906      	ldr	r1, [pc, #24]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  40150a:	4b06      	ldr	r3, [pc, #24]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  40150c:	6a1a      	ldr	r2, [r3, #32]
  40150e:	4b08      	ldr	r3, [pc, #32]	; (401530 <pmc_switch_mainck_to_fastrc+0x6c>)
  401510:	4013      	ands	r3, r2
  401512:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401516:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401518:	bf00      	nop
  40151a:	370c      	adds	r7, #12
  40151c:	46bd      	mov	sp, r7
  40151e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401522:	4770      	bx	lr
  401524:	400e0600 	.word	0x400e0600
  401528:	00370008 	.word	0x00370008
  40152c:	ffc8ff8f 	.word	0xffc8ff8f
  401530:	fec8ffff 	.word	0xfec8ffff

00401534 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401534:	b480      	push	{r7}
  401536:	b083      	sub	sp, #12
  401538:	af00      	add	r7, sp, #0
  40153a:	6078      	str	r0, [r7, #4]
  40153c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40153e:	687b      	ldr	r3, [r7, #4]
  401540:	2b00      	cmp	r3, #0
  401542:	d008      	beq.n	401556 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401544:	4913      	ldr	r1, [pc, #76]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401546:	4b13      	ldr	r3, [pc, #76]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401548:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40154a:	4a13      	ldr	r2, [pc, #76]	; (401598 <pmc_switch_mainck_to_xtal+0x64>)
  40154c:	401a      	ands	r2, r3
  40154e:	4b13      	ldr	r3, [pc, #76]	; (40159c <pmc_switch_mainck_to_xtal+0x68>)
  401550:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401552:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401554:	e018      	b.n	401588 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401556:	490f      	ldr	r1, [pc, #60]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401558:	4b0e      	ldr	r3, [pc, #56]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  40155a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40155c:	4b10      	ldr	r3, [pc, #64]	; (4015a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40155e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401560:	683a      	ldr	r2, [r7, #0]
  401562:	0212      	lsls	r2, r2, #8
  401564:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401566:	431a      	orrs	r2, r3
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <pmc_switch_mainck_to_xtal+0x70>)
  40156a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40156c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40156e:	bf00      	nop
  401570:	4b08      	ldr	r3, [pc, #32]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401574:	f003 0301 	and.w	r3, r3, #1
  401578:	2b00      	cmp	r3, #0
  40157a:	d0f9      	beq.n	401570 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40157c:	4905      	ldr	r1, [pc, #20]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  40157e:	4b05      	ldr	r3, [pc, #20]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401580:	6a1a      	ldr	r2, [r3, #32]
  401582:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <pmc_switch_mainck_to_xtal+0x74>)
  401584:	4313      	orrs	r3, r2
  401586:	620b      	str	r3, [r1, #32]
}
  401588:	bf00      	nop
  40158a:	370c      	adds	r7, #12
  40158c:	46bd      	mov	sp, r7
  40158e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401592:	4770      	bx	lr
  401594:	400e0600 	.word	0x400e0600
  401598:	fec8fffc 	.word	0xfec8fffc
  40159c:	01370002 	.word	0x01370002
  4015a0:	ffc8fffc 	.word	0xffc8fffc
  4015a4:	00370001 	.word	0x00370001
  4015a8:	01370000 	.word	0x01370000

004015ac <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4015ac:	b480      	push	{r7}
  4015ae:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015b0:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <pmc_osc_is_ready_mainck+0x18>)
  4015b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4015b8:	4618      	mov	r0, r3
  4015ba:	46bd      	mov	sp, r7
  4015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015c0:	4770      	bx	lr
  4015c2:	bf00      	nop
  4015c4:	400e0600 	.word	0x400e0600

004015c8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4015c8:	b480      	push	{r7}
  4015ca:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015cc:	4b04      	ldr	r3, [pc, #16]	; (4015e0 <pmc_disable_pllack+0x18>)
  4015ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4015d4:	bf00      	nop
  4015d6:	46bd      	mov	sp, r7
  4015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop
  4015e0:	400e0600 	.word	0x400e0600

004015e4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4015e4:	b480      	push	{r7}
  4015e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015e8:	4b04      	ldr	r3, [pc, #16]	; (4015fc <pmc_is_locked_pllack+0x18>)
  4015ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015ec:	f003 0302 	and.w	r3, r3, #2
}
  4015f0:	4618      	mov	r0, r3
  4015f2:	46bd      	mov	sp, r7
  4015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f8:	4770      	bx	lr
  4015fa:	bf00      	nop
  4015fc:	400e0600 	.word	0x400e0600

00401600 <pmc_enable_upll_clock>:
#if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
  401600:	b480      	push	{r7}
  401602:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  401604:	4b07      	ldr	r3, [pc, #28]	; (401624 <pmc_enable_upll_clock+0x24>)
  401606:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  40160a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  40160c:	bf00      	nop
  40160e:	4b05      	ldr	r3, [pc, #20]	; (401624 <pmc_enable_upll_clock+0x24>)
  401610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401612:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401616:	2b00      	cmp	r3, #0
  401618:	d0f9      	beq.n	40160e <pmc_enable_upll_clock+0xe>
}
  40161a:	bf00      	nop
  40161c:	46bd      	mov	sp, r7
  40161e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401622:	4770      	bx	lr
  401624:	400e0600 	.word	0x400e0600

00401628 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401628:	b480      	push	{r7}
  40162a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <pmc_is_locked_upll+0x18>)
  40162e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401630:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401634:	4618      	mov	r0, r3
  401636:	46bd      	mov	sp, r7
  401638:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163c:	4770      	bx	lr
  40163e:	bf00      	nop
  401640:	400e0600 	.word	0x400e0600

00401644 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401644:	b480      	push	{r7}
  401646:	b085      	sub	sp, #20
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40164c:	4a0b      	ldr	r2, [pc, #44]	; (40167c <pmc_enable_periph_clk+0x38>)
  40164e:	687b      	ldr	r3, [r7, #4]
  401650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401654:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401658:	4b08      	ldr	r3, [pc, #32]	; (40167c <pmc_enable_periph_clk+0x38>)
  40165a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  40165e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  401662:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  401664:	4a05      	ldr	r2, [pc, #20]	; (40167c <pmc_enable_periph_clk+0x38>)
  401666:	68fb      	ldr	r3, [r7, #12]
  401668:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  40166c:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40166e:	4618      	mov	r0, r3
  401670:	3714      	adds	r7, #20
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_switch_pck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
  401680:	b480      	push	{r7}
  401682:	b085      	sub	sp, #20
  401684:	af00      	add	r7, sp, #0
  401686:	6078      	str	r0, [r7, #4]
  401688:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  40168a:	4912      	ldr	r1, [pc, #72]	; (4016d4 <pmc_switch_pck_to_pllack+0x54>)
  40168c:	683b      	ldr	r3, [r7, #0]
  40168e:	f043 0202 	orr.w	r2, r3, #2
  401692:	687b      	ldr	r3, [r7, #4]
  401694:	3310      	adds	r3, #16
  401696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  40169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40169e:	60fb      	str	r3, [r7, #12]
  4016a0:	e007      	b.n	4016b2 <pmc_switch_pck_to_pllack+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4016a2:	68fb      	ldr	r3, [r7, #12]
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	d101      	bne.n	4016ac <pmc_switch_pck_to_pllack+0x2c>
			return 1;
  4016a8:	2301      	movs	r3, #1
  4016aa:	e00d      	b.n	4016c8 <pmc_switch_pck_to_pllack+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4016ac:	68fb      	ldr	r3, [r7, #12]
  4016ae:	3b01      	subs	r3, #1
  4016b0:	60fb      	str	r3, [r7, #12]
  4016b2:	4b08      	ldr	r3, [pc, #32]	; (4016d4 <pmc_switch_pck_to_pllack+0x54>)
  4016b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4016ba:	687b      	ldr	r3, [r7, #4]
  4016bc:	fa01 f303 	lsl.w	r3, r1, r3
  4016c0:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4016c2:	2b00      	cmp	r3, #0
  4016c4:	d0ed      	beq.n	4016a2 <pmc_switch_pck_to_pllack+0x22>
		}
	}

	return 0;
  4016c6:	2300      	movs	r3, #0
}
  4016c8:	4618      	mov	r0, r3
  4016ca:	3714      	adds	r7, #20
  4016cc:	46bd      	mov	sp, r7
  4016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d2:	4770      	bx	lr
  4016d4:	400e0600 	.word	0x400e0600

004016d8 <pmc_switch_pck_to_upllck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
{
  4016d8:	b480      	push	{r7}
  4016da:	b085      	sub	sp, #20
  4016dc:	af00      	add	r7, sp, #0
  4016de:	6078      	str	r0, [r7, #4]
  4016e0:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
  4016e2:	4912      	ldr	r1, [pc, #72]	; (40172c <pmc_switch_pck_to_upllck+0x54>)
  4016e4:	683b      	ldr	r3, [r7, #0]
  4016e6:	f043 0203 	orr.w	r2, r3, #3
  4016ea:	687b      	ldr	r3, [r7, #4]
  4016ec:	3310      	adds	r3, #16
  4016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  4016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4016f6:	60fb      	str	r3, [r7, #12]
  4016f8:	e007      	b.n	40170a <pmc_switch_pck_to_upllck+0x32>
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
			--ul_timeout) {
		if (ul_timeout == 0) {
  4016fa:	68fb      	ldr	r3, [r7, #12]
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d101      	bne.n	401704 <pmc_switch_pck_to_upllck+0x2c>
			return 1;
  401700:	2301      	movs	r3, #1
  401702:	e00d      	b.n	401720 <pmc_switch_pck_to_upllck+0x48>
			--ul_timeout) {
  401704:	68fb      	ldr	r3, [r7, #12]
  401706:	3b01      	subs	r3, #1
  401708:	60fb      	str	r3, [r7, #12]
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  40170a:	4b08      	ldr	r3, [pc, #32]	; (40172c <pmc_switch_pck_to_upllck+0x54>)
  40170c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40170e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401712:	687b      	ldr	r3, [r7, #4]
  401714:	fa01 f303 	lsl.w	r3, r1, r3
  401718:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  40171a:	2b00      	cmp	r3, #0
  40171c:	d0ed      	beq.n	4016fa <pmc_switch_pck_to_upllck+0x22>
		}
	}

	return 0;
  40171e:	2300      	movs	r3, #0
}
  401720:	4618      	mov	r0, r3
  401722:	3714      	adds	r7, #20
  401724:	46bd      	mov	sp, r7
  401726:	f85d 7b04 	ldr.w	r7, [sp], #4
  40172a:	4770      	bx	lr
  40172c:	400e0600 	.word	0x400e0600

00401730 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  401730:	b480      	push	{r7}
  401732:	b083      	sub	sp, #12
  401734:	af00      	add	r7, sp, #0
  401736:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  401738:	4a06      	ldr	r2, [pc, #24]	; (401754 <pmc_enable_pck+0x24>)
  40173a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40173e:	687b      	ldr	r3, [r7, #4]
  401740:	fa01 f303 	lsl.w	r3, r1, r3
  401744:	6013      	str	r3, [r2, #0]
}
  401746:	bf00      	nop
  401748:	370c      	adds	r7, #12
  40174a:	46bd      	mov	sp, r7
  40174c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401750:	4770      	bx	lr
  401752:	bf00      	nop
  401754:	400e0600 	.word	0x400e0600

00401758 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  401758:	b480      	push	{r7}
  40175a:	b083      	sub	sp, #12
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401760:	4a06      	ldr	r2, [pc, #24]	; (40177c <pmc_disable_pck+0x24>)
  401762:	f44f 7180 	mov.w	r1, #256	; 0x100
  401766:	687b      	ldr	r3, [r7, #4]
  401768:	fa01 f303 	lsl.w	r3, r1, r3
  40176c:	6053      	str	r3, [r2, #4]
}
  40176e:	bf00      	nop
  401770:	370c      	adds	r7, #12
  401772:	46bd      	mov	sp, r7
  401774:	f85d 7b04 	ldr.w	r7, [sp], #4
  401778:	4770      	bx	lr
  40177a:	bf00      	nop
  40177c:	400e0600 	.word	0x400e0600

00401780 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401780:	b480      	push	{r7}
  401782:	b085      	sub	sp, #20
  401784:	af00      	add	r7, sp, #0
  401786:	6078      	str	r0, [r7, #4]
  401788:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40178a:	2300      	movs	r3, #0
  40178c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	22ac      	movs	r2, #172	; 0xac
  401792:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401794:	683b      	ldr	r3, [r7, #0]
  401796:	681a      	ldr	r2, [r3, #0]
  401798:	683b      	ldr	r3, [r7, #0]
  40179a:	685b      	ldr	r3, [r3, #4]
  40179c:	fbb2 f3f3 	udiv	r3, r2, r3
  4017a0:	091b      	lsrs	r3, r3, #4
  4017a2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4017a4:	68fb      	ldr	r3, [r7, #12]
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	d003      	beq.n	4017b2 <uart_init+0x32>
  4017aa:	68fb      	ldr	r3, [r7, #12]
  4017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4017b0:	d301      	bcc.n	4017b6 <uart_init+0x36>
		return 1;
  4017b2:	2301      	movs	r3, #1
  4017b4:	e00a      	b.n	4017cc <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4017b6:	687b      	ldr	r3, [r7, #4]
  4017b8:	68fa      	ldr	r2, [r7, #12]
  4017ba:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4017bc:	683b      	ldr	r3, [r7, #0]
  4017be:	689a      	ldr	r2, [r3, #8]
  4017c0:	687b      	ldr	r3, [r7, #4]
  4017c2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4017c4:	687b      	ldr	r3, [r7, #4]
  4017c6:	2250      	movs	r2, #80	; 0x50
  4017c8:	601a      	str	r2, [r3, #0]

	return 0;
  4017ca:	2300      	movs	r3, #0
}
  4017cc:	4618      	mov	r0, r3
  4017ce:	3714      	adds	r7, #20
  4017d0:	46bd      	mov	sp, r7
  4017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017d6:	4770      	bx	lr

004017d8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4017d8:	b480      	push	{r7}
  4017da:	b083      	sub	sp, #12
  4017dc:	af00      	add	r7, sp, #0
  4017de:	6078      	str	r0, [r7, #4]
  4017e0:	460b      	mov	r3, r1
  4017e2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4017e4:	687b      	ldr	r3, [r7, #4]
  4017e6:	695b      	ldr	r3, [r3, #20]
  4017e8:	f003 0302 	and.w	r3, r3, #2
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d101      	bne.n	4017f4 <uart_write+0x1c>
		return 1;
  4017f0:	2301      	movs	r3, #1
  4017f2:	e003      	b.n	4017fc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4017f4:	78fa      	ldrb	r2, [r7, #3]
  4017f6:	687b      	ldr	r3, [r7, #4]
  4017f8:	61da      	str	r2, [r3, #28]
	return 0;
  4017fa:	2300      	movs	r3, #0
}
  4017fc:	4618      	mov	r0, r3
  4017fe:	370c      	adds	r7, #12
  401800:	46bd      	mov	sp, r7
  401802:	f85d 7b04 	ldr.w	r7, [sp], #4
  401806:	4770      	bx	lr

00401808 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401808:	b480      	push	{r7}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	6078      	str	r0, [r7, #4]
  401810:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401812:	687b      	ldr	r3, [r7, #4]
  401814:	695b      	ldr	r3, [r3, #20]
  401816:	f003 0301 	and.w	r3, r3, #1
  40181a:	2b00      	cmp	r3, #0
  40181c:	d101      	bne.n	401822 <uart_read+0x1a>
		return 1;
  40181e:	2301      	movs	r3, #1
  401820:	e005      	b.n	40182e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401822:	687b      	ldr	r3, [r7, #4]
  401824:	699b      	ldr	r3, [r3, #24]
  401826:	b2da      	uxtb	r2, r3
  401828:	683b      	ldr	r3, [r7, #0]
  40182a:	701a      	strb	r2, [r3, #0]
	return 0;
  40182c:	2300      	movs	r3, #0
}
  40182e:	4618      	mov	r0, r3
  401830:	370c      	adds	r7, #12
  401832:	46bd      	mov	sp, r7
  401834:	f85d 7b04 	ldr.w	r7, [sp], #4
  401838:	4770      	bx	lr

0040183a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40183a:	b480      	push	{r7}
  40183c:	b089      	sub	sp, #36	; 0x24
  40183e:	af00      	add	r7, sp, #0
  401840:	60f8      	str	r0, [r7, #12]
  401842:	60b9      	str	r1, [r7, #8]
  401844:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401846:	68bb      	ldr	r3, [r7, #8]
  401848:	011a      	lsls	r2, r3, #4
  40184a:	687b      	ldr	r3, [r7, #4]
  40184c:	429a      	cmp	r2, r3
  40184e:	d802      	bhi.n	401856 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401850:	2310      	movs	r3, #16
  401852:	61fb      	str	r3, [r7, #28]
  401854:	e001      	b.n	40185a <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401856:	2308      	movs	r3, #8
  401858:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	00da      	lsls	r2, r3, #3
  40185e:	69fb      	ldr	r3, [r7, #28]
  401860:	68b9      	ldr	r1, [r7, #8]
  401862:	fb01 f303 	mul.w	r3, r1, r3
  401866:	085b      	lsrs	r3, r3, #1
  401868:	441a      	add	r2, r3
  40186a:	69fb      	ldr	r3, [r7, #28]
  40186c:	68b9      	ldr	r1, [r7, #8]
  40186e:	fb01 f303 	mul.w	r3, r1, r3
  401872:	fbb2 f3f3 	udiv	r3, r2, r3
  401876:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401878:	69bb      	ldr	r3, [r7, #24]
  40187a:	08db      	lsrs	r3, r3, #3
  40187c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40187e:	69bb      	ldr	r3, [r7, #24]
  401880:	f003 0307 	and.w	r3, r3, #7
  401884:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401886:	697b      	ldr	r3, [r7, #20]
  401888:	2b00      	cmp	r3, #0
  40188a:	d003      	beq.n	401894 <usart_set_async_baudrate+0x5a>
  40188c:	697b      	ldr	r3, [r7, #20]
  40188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401892:	d301      	bcc.n	401898 <usart_set_async_baudrate+0x5e>
		return 1;
  401894:	2301      	movs	r3, #1
  401896:	e00f      	b.n	4018b8 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401898:	69fb      	ldr	r3, [r7, #28]
  40189a:	2b08      	cmp	r3, #8
  40189c:	d105      	bne.n	4018aa <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	685b      	ldr	r3, [r3, #4]
  4018a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4018a6:	68fb      	ldr	r3, [r7, #12]
  4018a8:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4018aa:	693b      	ldr	r3, [r7, #16]
  4018ac:	041a      	lsls	r2, r3, #16
  4018ae:	697b      	ldr	r3, [r7, #20]
  4018b0:	431a      	orrs	r2, r3
  4018b2:	68fb      	ldr	r3, [r7, #12]
  4018b4:	621a      	str	r2, [r3, #32]

	return 0;
  4018b6:	2300      	movs	r3, #0
}
  4018b8:	4618      	mov	r0, r3
  4018ba:	3724      	adds	r7, #36	; 0x24
  4018bc:	46bd      	mov	sp, r7
  4018be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018c2:	4770      	bx	lr

004018c4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4018c4:	b580      	push	{r7, lr}
  4018c6:	b082      	sub	sp, #8
  4018c8:	af00      	add	r7, sp, #0
  4018ca:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4018cc:	6878      	ldr	r0, [r7, #4]
  4018ce:	4b0d      	ldr	r3, [pc, #52]	; (401904 <usart_reset+0x40>)
  4018d0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4018d2:	687b      	ldr	r3, [r7, #4]
  4018d4:	2200      	movs	r2, #0
  4018d6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	2200      	movs	r2, #0
  4018dc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	2200      	movs	r2, #0
  4018e2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4018e4:	6878      	ldr	r0, [r7, #4]
  4018e6:	4b08      	ldr	r3, [pc, #32]	; (401908 <usart_reset+0x44>)
  4018e8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4018ea:	6878      	ldr	r0, [r7, #4]
  4018ec:	4b07      	ldr	r3, [pc, #28]	; (40190c <usart_reset+0x48>)
  4018ee:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4018f0:	6878      	ldr	r0, [r7, #4]
  4018f2:	4b07      	ldr	r3, [pc, #28]	; (401910 <usart_reset+0x4c>)
  4018f4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4018f6:	6878      	ldr	r0, [r7, #4]
  4018f8:	4b06      	ldr	r3, [pc, #24]	; (401914 <usart_reset+0x50>)
  4018fa:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4018fc:	bf00      	nop
  4018fe:	3708      	adds	r7, #8
  401900:	46bd      	mov	sp, r7
  401902:	bd80      	pop	{r7, pc}
  401904:	00401aa5 	.word	0x00401aa5
  401908:	004019b7 	.word	0x004019b7
  40190c:	004019eb 	.word	0x004019eb
  401910:	00401a05 	.word	0x00401a05
  401914:	00401a21 	.word	0x00401a21

00401918 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b084      	sub	sp, #16
  40191c:	af00      	add	r7, sp, #0
  40191e:	60f8      	str	r0, [r7, #12]
  401920:	60b9      	str	r1, [r7, #8]
  401922:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401924:	68f8      	ldr	r0, [r7, #12]
  401926:	4b1a      	ldr	r3, [pc, #104]	; (401990 <usart_init_rs232+0x78>)
  401928:	4798      	blx	r3

	ul_reg_val = 0;
  40192a:	4b1a      	ldr	r3, [pc, #104]	; (401994 <usart_init_rs232+0x7c>)
  40192c:	2200      	movs	r2, #0
  40192e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401930:	68bb      	ldr	r3, [r7, #8]
  401932:	2b00      	cmp	r3, #0
  401934:	d009      	beq.n	40194a <usart_init_rs232+0x32>
  401936:	68bb      	ldr	r3, [r7, #8]
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	687a      	ldr	r2, [r7, #4]
  40193c:	4619      	mov	r1, r3
  40193e:	68f8      	ldr	r0, [r7, #12]
  401940:	4b15      	ldr	r3, [pc, #84]	; (401998 <usart_init_rs232+0x80>)
  401942:	4798      	blx	r3
  401944:	4603      	mov	r3, r0
  401946:	2b00      	cmp	r3, #0
  401948:	d001      	beq.n	40194e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40194a:	2301      	movs	r3, #1
  40194c:	e01b      	b.n	401986 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40194e:	68bb      	ldr	r3, [r7, #8]
  401950:	685a      	ldr	r2, [r3, #4]
  401952:	68bb      	ldr	r3, [r7, #8]
  401954:	689b      	ldr	r3, [r3, #8]
  401956:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401958:	68bb      	ldr	r3, [r7, #8]
  40195a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40195c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40195e:	68bb      	ldr	r3, [r7, #8]
  401960:	68db      	ldr	r3, [r3, #12]
  401962:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401964:	4b0b      	ldr	r3, [pc, #44]	; (401994 <usart_init_rs232+0x7c>)
  401966:	681b      	ldr	r3, [r3, #0]
  401968:	4313      	orrs	r3, r2
  40196a:	4a0a      	ldr	r2, [pc, #40]	; (401994 <usart_init_rs232+0x7c>)
  40196c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40196e:	4b09      	ldr	r3, [pc, #36]	; (401994 <usart_init_rs232+0x7c>)
  401970:	681b      	ldr	r3, [r3, #0]
  401972:	4a08      	ldr	r2, [pc, #32]	; (401994 <usart_init_rs232+0x7c>)
  401974:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401976:	68fb      	ldr	r3, [r7, #12]
  401978:	685a      	ldr	r2, [r3, #4]
  40197a:	4b06      	ldr	r3, [pc, #24]	; (401994 <usart_init_rs232+0x7c>)
  40197c:	681b      	ldr	r3, [r3, #0]
  40197e:	431a      	orrs	r2, r3
  401980:	68fb      	ldr	r3, [r7, #12]
  401982:	605a      	str	r2, [r3, #4]

	return 0;
  401984:	2300      	movs	r3, #0
}
  401986:	4618      	mov	r0, r3
  401988:	3710      	adds	r7, #16
  40198a:	46bd      	mov	sp, r7
  40198c:	bd80      	pop	{r7, pc}
  40198e:	bf00      	nop
  401990:	004018c5 	.word	0x004018c5
  401994:	204012ac 	.word	0x204012ac
  401998:	0040183b 	.word	0x0040183b

0040199c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40199c:	b480      	push	{r7}
  40199e:	b083      	sub	sp, #12
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	2240      	movs	r2, #64	; 0x40
  4019a8:	601a      	str	r2, [r3, #0]
}
  4019aa:	bf00      	nop
  4019ac:	370c      	adds	r7, #12
  4019ae:	46bd      	mov	sp, r7
  4019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b4:	4770      	bx	lr

004019b6 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4019b6:	b480      	push	{r7}
  4019b8:	b083      	sub	sp, #12
  4019ba:	af00      	add	r7, sp, #0
  4019bc:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	2288      	movs	r2, #136	; 0x88
  4019c2:	601a      	str	r2, [r3, #0]
}
  4019c4:	bf00      	nop
  4019c6:	370c      	adds	r7, #12
  4019c8:	46bd      	mov	sp, r7
  4019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ce:	4770      	bx	lr

004019d0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4019d0:	b480      	push	{r7}
  4019d2:	b083      	sub	sp, #12
  4019d4:	af00      	add	r7, sp, #0
  4019d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4019d8:	687b      	ldr	r3, [r7, #4]
  4019da:	2210      	movs	r2, #16
  4019dc:	601a      	str	r2, [r3, #0]
}
  4019de:	bf00      	nop
  4019e0:	370c      	adds	r7, #12
  4019e2:	46bd      	mov	sp, r7
  4019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019e8:	4770      	bx	lr

004019ea <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4019ea:	b480      	push	{r7}
  4019ec:	b083      	sub	sp, #12
  4019ee:	af00      	add	r7, sp, #0
  4019f0:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	2224      	movs	r2, #36	; 0x24
  4019f6:	601a      	str	r2, [r3, #0]
}
  4019f8:	bf00      	nop
  4019fa:	370c      	adds	r7, #12
  4019fc:	46bd      	mov	sp, r7
  4019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a02:	4770      	bx	lr

00401a04 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401a04:	b480      	push	{r7}
  401a06:	b083      	sub	sp, #12
  401a08:	af00      	add	r7, sp, #0
  401a0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a12:	601a      	str	r2, [r3, #0]
}
  401a14:	bf00      	nop
  401a16:	370c      	adds	r7, #12
  401a18:	46bd      	mov	sp, r7
  401a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a1e:	4770      	bx	lr

00401a20 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401a20:	b480      	push	{r7}
  401a22:	b083      	sub	sp, #12
  401a24:	af00      	add	r7, sp, #0
  401a26:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401a2e:	601a      	str	r2, [r3, #0]
}
  401a30:	bf00      	nop
  401a32:	370c      	adds	r7, #12
  401a34:	46bd      	mov	sp, r7
  401a36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3a:	4770      	bx	lr

00401a3c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401a3c:	b480      	push	{r7}
  401a3e:	b083      	sub	sp, #12
  401a40:	af00      	add	r7, sp, #0
  401a42:	6078      	str	r0, [r7, #4]
  401a44:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	695b      	ldr	r3, [r3, #20]
  401a4a:	f003 0302 	and.w	r3, r3, #2
  401a4e:	2b00      	cmp	r3, #0
  401a50:	d101      	bne.n	401a56 <usart_write+0x1a>
		return 1;
  401a52:	2301      	movs	r3, #1
  401a54:	e005      	b.n	401a62 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401a56:	683b      	ldr	r3, [r7, #0]
  401a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	61da      	str	r2, [r3, #28]
	return 0;
  401a60:	2300      	movs	r3, #0
}
  401a62:	4618      	mov	r0, r3
  401a64:	370c      	adds	r7, #12
  401a66:	46bd      	mov	sp, r7
  401a68:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a6c:	4770      	bx	lr

00401a6e <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401a6e:	b480      	push	{r7}
  401a70:	b083      	sub	sp, #12
  401a72:	af00      	add	r7, sp, #0
  401a74:	6078      	str	r0, [r7, #4]
  401a76:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401a78:	687b      	ldr	r3, [r7, #4]
  401a7a:	695b      	ldr	r3, [r3, #20]
  401a7c:	f003 0301 	and.w	r3, r3, #1
  401a80:	2b00      	cmp	r3, #0
  401a82:	d101      	bne.n	401a88 <usart_read+0x1a>
		return 1;
  401a84:	2301      	movs	r3, #1
  401a86:	e006      	b.n	401a96 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	699b      	ldr	r3, [r3, #24]
  401a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a90:	683b      	ldr	r3, [r7, #0]
  401a92:	601a      	str	r2, [r3, #0]

	return 0;
  401a94:	2300      	movs	r3, #0
}
  401a96:	4618      	mov	r0, r3
  401a98:	370c      	adds	r7, #12
  401a9a:	46bd      	mov	sp, r7
  401a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aa0:	4770      	bx	lr
	...

00401aa4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401aa4:	b480      	push	{r7}
  401aa6:	b083      	sub	sp, #12
  401aa8:	af00      	add	r7, sp, #0
  401aaa:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	4a04      	ldr	r2, [pc, #16]	; (401ac0 <usart_disable_writeprotect+0x1c>)
  401ab0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401ab4:	bf00      	nop
  401ab6:	370c      	adds	r7, #12
  401ab8:	46bd      	mov	sp, r7
  401aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401abe:	4770      	bx	lr
  401ac0:	55534100 	.word	0x55534100

00401ac4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401ac4:	b480      	push	{r7}
  401ac6:	b083      	sub	sp, #12
  401ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401aca:	f3ef 8310 	mrs	r3, PRIMASK
  401ace:	607b      	str	r3, [r7, #4]
  return(result);
  401ad0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ad2:	2b00      	cmp	r3, #0
  401ad4:	bf0c      	ite	eq
  401ad6:	2301      	moveq	r3, #1
  401ad8:	2300      	movne	r3, #0
  401ada:	b2db      	uxtb	r3, r3
  401adc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ade:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401ae0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ae4:	4b04      	ldr	r3, [pc, #16]	; (401af8 <cpu_irq_save+0x34>)
  401ae6:	2200      	movs	r2, #0
  401ae8:	701a      	strb	r2, [r3, #0]
	return flags;
  401aea:	683b      	ldr	r3, [r7, #0]
}
  401aec:	4618      	mov	r0, r3
  401aee:	370c      	adds	r7, #12
  401af0:	46bd      	mov	sp, r7
  401af2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401af6:	4770      	bx	lr
  401af8:	20400000 	.word	0x20400000

00401afc <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401afc:	b480      	push	{r7}
  401afe:	b083      	sub	sp, #12
  401b00:	af00      	add	r7, sp, #0
  401b02:	6078      	str	r0, [r7, #4]
	return (flags);
  401b04:	687b      	ldr	r3, [r7, #4]
  401b06:	2b00      	cmp	r3, #0
  401b08:	bf14      	ite	ne
  401b0a:	2301      	movne	r3, #1
  401b0c:	2300      	moveq	r3, #0
  401b0e:	b2db      	uxtb	r3, r3
}
  401b10:	4618      	mov	r0, r3
  401b12:	370c      	adds	r7, #12
  401b14:	46bd      	mov	sp, r7
  401b16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1a:	4770      	bx	lr

00401b1c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401b1c:	b580      	push	{r7, lr}
  401b1e:	b082      	sub	sp, #8
  401b20:	af00      	add	r7, sp, #0
  401b22:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401b24:	6878      	ldr	r0, [r7, #4]
  401b26:	4b07      	ldr	r3, [pc, #28]	; (401b44 <cpu_irq_restore+0x28>)
  401b28:	4798      	blx	r3
  401b2a:	4603      	mov	r3, r0
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d005      	beq.n	401b3c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401b30:	4b05      	ldr	r3, [pc, #20]	; (401b48 <cpu_irq_restore+0x2c>)
  401b32:	2201      	movs	r2, #1
  401b34:	701a      	strb	r2, [r3, #0]
  401b36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b3a:	b662      	cpsie	i
}
  401b3c:	bf00      	nop
  401b3e:	3708      	adds	r7, #8
  401b40:	46bd      	mov	sp, r7
  401b42:	bd80      	pop	{r7, pc}
  401b44:	00401afd 	.word	0x00401afd
  401b48:	20400000 	.word	0x20400000

00401b4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401b4c:	b580      	push	{r7, lr}
  401b4e:	b084      	sub	sp, #16
  401b50:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401b52:	4b1e      	ldr	r3, [pc, #120]	; (401bcc <Reset_Handler+0x80>)
  401b54:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401b56:	4b1e      	ldr	r3, [pc, #120]	; (401bd0 <Reset_Handler+0x84>)
  401b58:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401b5a:	68fa      	ldr	r2, [r7, #12]
  401b5c:	68bb      	ldr	r3, [r7, #8]
  401b5e:	429a      	cmp	r2, r3
  401b60:	d00c      	beq.n	401b7c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401b62:	e007      	b.n	401b74 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401b64:	68bb      	ldr	r3, [r7, #8]
  401b66:	1d1a      	adds	r2, r3, #4
  401b68:	60ba      	str	r2, [r7, #8]
  401b6a:	68fa      	ldr	r2, [r7, #12]
  401b6c:	1d11      	adds	r1, r2, #4
  401b6e:	60f9      	str	r1, [r7, #12]
  401b70:	6812      	ldr	r2, [r2, #0]
  401b72:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401b74:	68bb      	ldr	r3, [r7, #8]
  401b76:	4a17      	ldr	r2, [pc, #92]	; (401bd4 <Reset_Handler+0x88>)
  401b78:	4293      	cmp	r3, r2
  401b7a:	d3f3      	bcc.n	401b64 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401b7c:	4b16      	ldr	r3, [pc, #88]	; (401bd8 <Reset_Handler+0x8c>)
  401b7e:	60bb      	str	r3, [r7, #8]
  401b80:	e004      	b.n	401b8c <Reset_Handler+0x40>
                *pDest++ = 0;
  401b82:	68bb      	ldr	r3, [r7, #8]
  401b84:	1d1a      	adds	r2, r3, #4
  401b86:	60ba      	str	r2, [r7, #8]
  401b88:	2200      	movs	r2, #0
  401b8a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401b8c:	68bb      	ldr	r3, [r7, #8]
  401b8e:	4a13      	ldr	r2, [pc, #76]	; (401bdc <Reset_Handler+0x90>)
  401b90:	4293      	cmp	r3, r2
  401b92:	d3f6      	bcc.n	401b82 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401b94:	4b12      	ldr	r3, [pc, #72]	; (401be0 <Reset_Handler+0x94>)
  401b96:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b98:	4a12      	ldr	r2, [pc, #72]	; (401be4 <Reset_Handler+0x98>)
  401b9a:	68fb      	ldr	r3, [r7, #12]
  401b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ba0:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401ba2:	4b11      	ldr	r3, [pc, #68]	; (401be8 <Reset_Handler+0x9c>)
  401ba4:	4798      	blx	r3
  401ba6:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401ba8:	4a10      	ldr	r2, [pc, #64]	; (401bec <Reset_Handler+0xa0>)
  401baa:	4b10      	ldr	r3, [pc, #64]	; (401bec <Reset_Handler+0xa0>)
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401bb2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401bb8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401bbc:	6878      	ldr	r0, [r7, #4]
  401bbe:	4b0c      	ldr	r3, [pc, #48]	; (401bf0 <Reset_Handler+0xa4>)
  401bc0:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401bc2:	4b0c      	ldr	r3, [pc, #48]	; (401bf4 <Reset_Handler+0xa8>)
  401bc4:	4798      	blx	r3

        /* Branch to main function */
        main();
  401bc6:	4b0c      	ldr	r3, [pc, #48]	; (401bf8 <Reset_Handler+0xac>)
  401bc8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401bca:	e7fe      	b.n	401bca <Reset_Handler+0x7e>
  401bcc:	00406d70 	.word	0x00406d70
  401bd0:	20400000 	.word	0x20400000
  401bd4:	204009c0 	.word	0x204009c0
  401bd8:	204009c0 	.word	0x204009c0
  401bdc:	20401410 	.word	0x20401410
  401be0:	00400000 	.word	0x00400000
  401be4:	e000ed00 	.word	0xe000ed00
  401be8:	00401ac5 	.word	0x00401ac5
  401bec:	e000ed88 	.word	0xe000ed88
  401bf0:	00401b1d 	.word	0x00401b1d
  401bf4:	00403985 	.word	0x00403985
  401bf8:	00403829 	.word	0x00403829

00401bfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bfc:	b480      	push	{r7}
  401bfe:	af00      	add	r7, sp, #0
        while (1) {
  401c00:	e7fe      	b.n	401c00 <Dummy_Handler+0x4>
	...

00401c04 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401c04:	b480      	push	{r7}
  401c06:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401c08:	4b52      	ldr	r3, [pc, #328]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c0c:	f003 0303 	and.w	r3, r3, #3
  401c10:	2b01      	cmp	r3, #1
  401c12:	d014      	beq.n	401c3e <SystemCoreClockUpdate+0x3a>
  401c14:	2b01      	cmp	r3, #1
  401c16:	d302      	bcc.n	401c1e <SystemCoreClockUpdate+0x1a>
  401c18:	2b02      	cmp	r3, #2
  401c1a:	d038      	beq.n	401c8e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401c1c:	e07a      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401c1e:	4b4e      	ldr	r3, [pc, #312]	; (401d58 <SystemCoreClockUpdate+0x154>)
  401c20:	695b      	ldr	r3, [r3, #20]
  401c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c26:	2b00      	cmp	r3, #0
  401c28:	d004      	beq.n	401c34 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401c2a:	4b4c      	ldr	r3, [pc, #304]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c30:	601a      	str	r2, [r3, #0]
    break;
  401c32:	e06f      	b.n	401d14 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401c34:	4b49      	ldr	r3, [pc, #292]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c36:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401c3a:	601a      	str	r2, [r3, #0]
    break;
  401c3c:	e06a      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c3e:	4b45      	ldr	r3, [pc, #276]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c40:	6a1b      	ldr	r3, [r3, #32]
  401c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c46:	2b00      	cmp	r3, #0
  401c48:	d003      	beq.n	401c52 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401c4a:	4b44      	ldr	r3, [pc, #272]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c4c:	4a44      	ldr	r2, [pc, #272]	; (401d60 <SystemCoreClockUpdate+0x15c>)
  401c4e:	601a      	str	r2, [r3, #0]
    break;
  401c50:	e060      	b.n	401d14 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c52:	4b42      	ldr	r3, [pc, #264]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c54:	4a43      	ldr	r2, [pc, #268]	; (401d64 <SystemCoreClockUpdate+0x160>)
  401c56:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c58:	4b3e      	ldr	r3, [pc, #248]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c5a:	6a1b      	ldr	r3, [r3, #32]
  401c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c60:	2b10      	cmp	r3, #16
  401c62:	d004      	beq.n	401c6e <SystemCoreClockUpdate+0x6a>
  401c64:	2b20      	cmp	r3, #32
  401c66:	d008      	beq.n	401c7a <SystemCoreClockUpdate+0x76>
  401c68:	2b00      	cmp	r3, #0
  401c6a:	d00e      	beq.n	401c8a <SystemCoreClockUpdate+0x86>
          break;
  401c6c:	e00e      	b.n	401c8c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401c6e:	4b3b      	ldr	r3, [pc, #236]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c70:	681b      	ldr	r3, [r3, #0]
  401c72:	005b      	lsls	r3, r3, #1
  401c74:	4a39      	ldr	r2, [pc, #228]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c76:	6013      	str	r3, [r2, #0]
          break;
  401c78:	e008      	b.n	401c8c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401c7a:	4b38      	ldr	r3, [pc, #224]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c7c:	681a      	ldr	r2, [r3, #0]
  401c7e:	4613      	mov	r3, r2
  401c80:	005b      	lsls	r3, r3, #1
  401c82:	4413      	add	r3, r2
  401c84:	4a35      	ldr	r2, [pc, #212]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c86:	6013      	str	r3, [r2, #0]
          break;
  401c88:	e000      	b.n	401c8c <SystemCoreClockUpdate+0x88>
          break;
  401c8a:	bf00      	nop
    break;
  401c8c:	e042      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c8e:	4b31      	ldr	r3, [pc, #196]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c90:	6a1b      	ldr	r3, [r3, #32]
  401c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c96:	2b00      	cmp	r3, #0
  401c98:	d003      	beq.n	401ca2 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c9a:	4b30      	ldr	r3, [pc, #192]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c9c:	4a30      	ldr	r2, [pc, #192]	; (401d60 <SystemCoreClockUpdate+0x15c>)
  401c9e:	601a      	str	r2, [r3, #0]
  401ca0:	e01c      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ca2:	4b2e      	ldr	r3, [pc, #184]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401ca4:	4a2f      	ldr	r2, [pc, #188]	; (401d64 <SystemCoreClockUpdate+0x160>)
  401ca6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401ca8:	4b2a      	ldr	r3, [pc, #168]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401caa:	6a1b      	ldr	r3, [r3, #32]
  401cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cb0:	2b10      	cmp	r3, #16
  401cb2:	d004      	beq.n	401cbe <SystemCoreClockUpdate+0xba>
  401cb4:	2b20      	cmp	r3, #32
  401cb6:	d008      	beq.n	401cca <SystemCoreClockUpdate+0xc6>
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d00e      	beq.n	401cda <SystemCoreClockUpdate+0xd6>
          break;
  401cbc:	e00e      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401cbe:	4b27      	ldr	r3, [pc, #156]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cc0:	681b      	ldr	r3, [r3, #0]
  401cc2:	005b      	lsls	r3, r3, #1
  401cc4:	4a25      	ldr	r2, [pc, #148]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cc6:	6013      	str	r3, [r2, #0]
          break;
  401cc8:	e008      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401cca:	4b24      	ldr	r3, [pc, #144]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401ccc:	681a      	ldr	r2, [r3, #0]
  401cce:	4613      	mov	r3, r2
  401cd0:	005b      	lsls	r3, r3, #1
  401cd2:	4413      	add	r3, r2
  401cd4:	4a21      	ldr	r2, [pc, #132]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cd6:	6013      	str	r3, [r2, #0]
          break;
  401cd8:	e000      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
          break;
  401cda:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401cdc:	4b1d      	ldr	r3, [pc, #116]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ce0:	f003 0303 	and.w	r3, r3, #3
  401ce4:	2b02      	cmp	r3, #2
  401ce6:	d114      	bne.n	401d12 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401ce8:	4b1a      	ldr	r3, [pc, #104]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401cec:	0c1b      	lsrs	r3, r3, #16
  401cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401cf2:	3301      	adds	r3, #1
  401cf4:	4a19      	ldr	r2, [pc, #100]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cf6:	6812      	ldr	r2, [r2, #0]
  401cf8:	fb02 f303 	mul.w	r3, r2, r3
  401cfc:	4a17      	ldr	r2, [pc, #92]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cfe:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d00:	4b14      	ldr	r3, [pc, #80]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401d04:	b2db      	uxtb	r3, r3
  401d06:	4a15      	ldr	r2, [pc, #84]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d08:	6812      	ldr	r2, [r2, #0]
  401d0a:	fbb2 f3f3 	udiv	r3, r2, r3
  401d0e:	4a13      	ldr	r2, [pc, #76]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d10:	6013      	str	r3, [r2, #0]
    break;
  401d12:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401d14:	4b0f      	ldr	r3, [pc, #60]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d1c:	2b70      	cmp	r3, #112	; 0x70
  401d1e:	d108      	bne.n	401d32 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401d20:	4b0e      	ldr	r3, [pc, #56]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d22:	681b      	ldr	r3, [r3, #0]
  401d24:	4a10      	ldr	r2, [pc, #64]	; (401d68 <SystemCoreClockUpdate+0x164>)
  401d26:	fba2 2303 	umull	r2, r3, r2, r3
  401d2a:	085b      	lsrs	r3, r3, #1
  401d2c:	4a0b      	ldr	r2, [pc, #44]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d2e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401d30:	e00a      	b.n	401d48 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d32:	4b08      	ldr	r3, [pc, #32]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d36:	091b      	lsrs	r3, r3, #4
  401d38:	f003 0307 	and.w	r3, r3, #7
  401d3c:	4a07      	ldr	r2, [pc, #28]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d3e:	6812      	ldr	r2, [r2, #0]
  401d40:	fa22 f303 	lsr.w	r3, r2, r3
  401d44:	4a05      	ldr	r2, [pc, #20]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d46:	6013      	str	r3, [r2, #0]
}
  401d48:	bf00      	nop
  401d4a:	46bd      	mov	sp, r7
  401d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d50:	4770      	bx	lr
  401d52:	bf00      	nop
  401d54:	400e0600 	.word	0x400e0600
  401d58:	400e1810 	.word	0x400e1810
  401d5c:	20400004 	.word	0x20400004
  401d60:	00b71b00 	.word	0x00b71b00
  401d64:	003d0900 	.word	0x003d0900
  401d68:	aaaaaaab 	.word	0xaaaaaaab

00401d6c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401d6c:	b480      	push	{r7}
  401d6e:	b083      	sub	sp, #12
  401d70:	af00      	add	r7, sp, #0
  401d72:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	4a1d      	ldr	r2, [pc, #116]	; (401dec <system_init_flash+0x80>)
  401d78:	4293      	cmp	r3, r2
  401d7a:	d804      	bhi.n	401d86 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d7c:	4b1c      	ldr	r3, [pc, #112]	; (401df0 <system_init_flash+0x84>)
  401d7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d82:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d84:	e02b      	b.n	401dde <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401d86:	687b      	ldr	r3, [r7, #4]
  401d88:	4a1a      	ldr	r2, [pc, #104]	; (401df4 <system_init_flash+0x88>)
  401d8a:	4293      	cmp	r3, r2
  401d8c:	d803      	bhi.n	401d96 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d8e:	4b18      	ldr	r3, [pc, #96]	; (401df0 <system_init_flash+0x84>)
  401d90:	4a19      	ldr	r2, [pc, #100]	; (401df8 <system_init_flash+0x8c>)
  401d92:	601a      	str	r2, [r3, #0]
}
  401d94:	e023      	b.n	401dde <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	4a18      	ldr	r2, [pc, #96]	; (401dfc <system_init_flash+0x90>)
  401d9a:	4293      	cmp	r3, r2
  401d9c:	d803      	bhi.n	401da6 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d9e:	4b14      	ldr	r3, [pc, #80]	; (401df0 <system_init_flash+0x84>)
  401da0:	4a17      	ldr	r2, [pc, #92]	; (401e00 <system_init_flash+0x94>)
  401da2:	601a      	str	r2, [r3, #0]
}
  401da4:	e01b      	b.n	401dde <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401da6:	687b      	ldr	r3, [r7, #4]
  401da8:	4a16      	ldr	r2, [pc, #88]	; (401e04 <system_init_flash+0x98>)
  401daa:	4293      	cmp	r3, r2
  401dac:	d803      	bhi.n	401db6 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dae:	4b10      	ldr	r3, [pc, #64]	; (401df0 <system_init_flash+0x84>)
  401db0:	4a15      	ldr	r2, [pc, #84]	; (401e08 <system_init_flash+0x9c>)
  401db2:	601a      	str	r2, [r3, #0]
}
  401db4:	e013      	b.n	401dde <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401db6:	687b      	ldr	r3, [r7, #4]
  401db8:	4a14      	ldr	r2, [pc, #80]	; (401e0c <system_init_flash+0xa0>)
  401dba:	4293      	cmp	r3, r2
  401dbc:	d804      	bhi.n	401dc8 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dbe:	4b0c      	ldr	r3, [pc, #48]	; (401df0 <system_init_flash+0x84>)
  401dc0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401dc4:	601a      	str	r2, [r3, #0]
}
  401dc6:	e00a      	b.n	401dde <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401dc8:	687b      	ldr	r3, [r7, #4]
  401dca:	4a11      	ldr	r2, [pc, #68]	; (401e10 <system_init_flash+0xa4>)
  401dcc:	4293      	cmp	r3, r2
  401dce:	d803      	bhi.n	401dd8 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dd0:	4b07      	ldr	r3, [pc, #28]	; (401df0 <system_init_flash+0x84>)
  401dd2:	4a10      	ldr	r2, [pc, #64]	; (401e14 <system_init_flash+0xa8>)
  401dd4:	601a      	str	r2, [r3, #0]
}
  401dd6:	e002      	b.n	401dde <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401dd8:	4b05      	ldr	r3, [pc, #20]	; (401df0 <system_init_flash+0x84>)
  401dda:	4a0f      	ldr	r2, [pc, #60]	; (401e18 <system_init_flash+0xac>)
  401ddc:	601a      	str	r2, [r3, #0]
}
  401dde:	bf00      	nop
  401de0:	370c      	adds	r7, #12
  401de2:	46bd      	mov	sp, r7
  401de4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401de8:	4770      	bx	lr
  401dea:	bf00      	nop
  401dec:	015ef3bf 	.word	0x015ef3bf
  401df0:	400e0c00 	.word	0x400e0c00
  401df4:	02bde77f 	.word	0x02bde77f
  401df8:	04000100 	.word	0x04000100
  401dfc:	041cdb3f 	.word	0x041cdb3f
  401e00:	04000200 	.word	0x04000200
  401e04:	057bceff 	.word	0x057bceff
  401e08:	04000300 	.word	0x04000300
  401e0c:	06dac2bf 	.word	0x06dac2bf
  401e10:	0839b67f 	.word	0x0839b67f
  401e14:	04000500 	.word	0x04000500
  401e18:	04000600 	.word	0x04000600

00401e1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401e1c:	b480      	push	{r7}
  401e1e:	b085      	sub	sp, #20
  401e20:	af00      	add	r7, sp, #0
  401e22:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401e24:	4b10      	ldr	r3, [pc, #64]	; (401e68 <_sbrk+0x4c>)
  401e26:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401e28:	4b10      	ldr	r3, [pc, #64]	; (401e6c <_sbrk+0x50>)
  401e2a:	681b      	ldr	r3, [r3, #0]
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d102      	bne.n	401e36 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401e30:	4b0e      	ldr	r3, [pc, #56]	; (401e6c <_sbrk+0x50>)
  401e32:	4a0f      	ldr	r2, [pc, #60]	; (401e70 <_sbrk+0x54>)
  401e34:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401e36:	4b0d      	ldr	r3, [pc, #52]	; (401e6c <_sbrk+0x50>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401e3c:	68ba      	ldr	r2, [r7, #8]
  401e3e:	687b      	ldr	r3, [r7, #4]
  401e40:	441a      	add	r2, r3
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	429a      	cmp	r2, r3
  401e46:	dd02      	ble.n	401e4e <_sbrk+0x32>
		return (caddr_t) -1;	
  401e48:	f04f 33ff 	mov.w	r3, #4294967295
  401e4c:	e006      	b.n	401e5c <_sbrk+0x40>
	}

	heap += incr;
  401e4e:	4b07      	ldr	r3, [pc, #28]	; (401e6c <_sbrk+0x50>)
  401e50:	681a      	ldr	r2, [r3, #0]
  401e52:	687b      	ldr	r3, [r7, #4]
  401e54:	4413      	add	r3, r2
  401e56:	4a05      	ldr	r2, [pc, #20]	; (401e6c <_sbrk+0x50>)
  401e58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401e5a:	68bb      	ldr	r3, [r7, #8]
}
  401e5c:	4618      	mov	r0, r3
  401e5e:	3714      	adds	r7, #20
  401e60:	46bd      	mov	sp, r7
  401e62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e66:	4770      	bx	lr
  401e68:	2045fffc 	.word	0x2045fffc
  401e6c:	204012b0 	.word	0x204012b0
  401e70:	20403610 	.word	0x20403610

00401e74 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401e74:	b480      	push	{r7}
  401e76:	b083      	sub	sp, #12
  401e78:	af00      	add	r7, sp, #0
  401e7a:	6078      	str	r0, [r7, #4]
	return -1;
  401e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
  401e80:	4618      	mov	r0, r3
  401e82:	370c      	adds	r7, #12
  401e84:	46bd      	mov	sp, r7
  401e86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e8a:	4770      	bx	lr

00401e8c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401e8c:	b480      	push	{r7}
  401e8e:	b083      	sub	sp, #12
  401e90:	af00      	add	r7, sp, #0
  401e92:	6078      	str	r0, [r7, #4]
  401e94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e9c:	605a      	str	r2, [r3, #4]

	return 0;
  401e9e:	2300      	movs	r3, #0
}
  401ea0:	4618      	mov	r0, r3
  401ea2:	370c      	adds	r7, #12
  401ea4:	46bd      	mov	sp, r7
  401ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eaa:	4770      	bx	lr

00401eac <_isatty>:

extern int _isatty(int file)
{
  401eac:	b480      	push	{r7}
  401eae:	b083      	sub	sp, #12
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
	return 1;
  401eb4:	2301      	movs	r3, #1
}
  401eb6:	4618      	mov	r0, r3
  401eb8:	370c      	adds	r7, #12
  401eba:	46bd      	mov	sp, r7
  401ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ec0:	4770      	bx	lr

00401ec2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401ec2:	b480      	push	{r7}
  401ec4:	b085      	sub	sp, #20
  401ec6:	af00      	add	r7, sp, #0
  401ec8:	60f8      	str	r0, [r7, #12]
  401eca:	60b9      	str	r1, [r7, #8]
  401ecc:	607a      	str	r2, [r7, #4]
	return 0;
  401ece:	2300      	movs	r3, #0
}
  401ed0:	4618      	mov	r0, r3
  401ed2:	3714      	adds	r7, #20
  401ed4:	46bd      	mov	sp, r7
  401ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eda:	4770      	bx	lr

00401edc <circ_buf_flex_init_buffer>:
#include "circular-buffer-flex.h"

void circ_buf_flex_init_buffer(circ_buf_flex_t *buf, const uint32_t capacity, const uint16_t element_size)
{
  401edc:	b5b0      	push	{r4, r5, r7, lr}
  401ede:	b08a      	sub	sp, #40	; 0x28
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	60f8      	str	r0, [r7, #12]
  401ee4:	60b9      	str	r1, [r7, #8]
  401ee6:	4613      	mov	r3, r2
  401ee8:	80fb      	strh	r3, [r7, #6]
    circ_buf_flex_t temp_buffer;
    temp_buffer.buffer = (void *) malloc(capacity * element_size);
  401eea:	88fb      	ldrh	r3, [r7, #6]
  401eec:	68ba      	ldr	r2, [r7, #8]
  401eee:	fb02 f303 	mul.w	r3, r2, r3
  401ef2:	4618      	mov	r0, r3
  401ef4:	4b0e      	ldr	r3, [pc, #56]	; (401f30 <circ_buf_flex_init_buffer+0x54>)
  401ef6:	4798      	blx	r3
  401ef8:	4603      	mov	r3, r0
  401efa:	613b      	str	r3, [r7, #16]
    temp_buffer.buffer_element_size = element_size;
  401efc:	88fb      	ldrh	r3, [r7, #6]
  401efe:	82bb      	strh	r3, [r7, #20]
    temp_buffer.capacity = capacity;
  401f00:	68bb      	ldr	r3, [r7, #8]
  401f02:	623b      	str	r3, [r7, #32]
    temp_buffer.buffer_status = CB_BUFFER_EMPTY;
  401f04:	2301      	movs	r3, #1
  401f06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    temp_buffer.head = 0;
  401f0a:	2300      	movs	r3, #0
  401f0c:	61bb      	str	r3, [r7, #24]
    temp_buffer.tail = 0;
  401f0e:	2300      	movs	r3, #0
  401f10:	61fb      	str	r3, [r7, #28]

    *buf = temp_buffer;
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	461d      	mov	r5, r3
  401f16:	f107 0410 	add.w	r4, r7, #16
  401f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
  401f22:	e885 0003 	stmia.w	r5, {r0, r1}
}
  401f26:	bf00      	nop
  401f28:	3728      	adds	r7, #40	; 0x28
  401f2a:	46bd      	mov	sp, r7
  401f2c:	bdb0      	pop	{r4, r5, r7, pc}
  401f2e:	bf00      	nop
  401f30:	004039fd 	.word	0x004039fd

00401f34 <circ_buf_flex_available_elements_to_read>:
    circ_buf_flex_free(buf);
    circ_buf_flex_init_buffer(buf, buf->capacity, buf->buffer_element_size);
}

uint32_t circ_buf_flex_available_elements_to_read(circ_buf_flex_t *buf)
{
  401f34:	b480      	push	{r7}
  401f36:	b085      	sub	sp, #20
  401f38:	af00      	add	r7, sp, #0
  401f3a:	6078      	str	r0, [r7, #4]
    uint32_t elements_to_read = 0;
  401f3c:	2300      	movs	r3, #0
  401f3e:	60fb      	str	r3, [r7, #12]

    if (buf->tail > buf->head)
  401f40:	687b      	ldr	r3, [r7, #4]
  401f42:	68da      	ldr	r2, [r3, #12]
  401f44:	687b      	ldr	r3, [r7, #4]
  401f46:	689b      	ldr	r3, [r3, #8]
  401f48:	429a      	cmp	r2, r3
  401f4a:	d909      	bls.n	401f60 <circ_buf_flex_available_elements_to_read+0x2c>
    {
        elements_to_read = buf->capacity - buf->tail + buf->head;
  401f4c:	687b      	ldr	r3, [r7, #4]
  401f4e:	691a      	ldr	r2, [r3, #16]
  401f50:	687b      	ldr	r3, [r7, #4]
  401f52:	68db      	ldr	r3, [r3, #12]
  401f54:	1ad2      	subs	r2, r2, r3
  401f56:	687b      	ldr	r3, [r7, #4]
  401f58:	689b      	ldr	r3, [r3, #8]
  401f5a:	4413      	add	r3, r2
  401f5c:	60fb      	str	r3, [r7, #12]
  401f5e:	e013      	b.n	401f88 <circ_buf_flex_available_elements_to_read+0x54>
    }else if (buf->head == buf->tail && buf->buffer_status == CB_BUFFER_FULL)
  401f60:	687b      	ldr	r3, [r7, #4]
  401f62:	689a      	ldr	r2, [r3, #8]
  401f64:	687b      	ldr	r3, [r7, #4]
  401f66:	68db      	ldr	r3, [r3, #12]
  401f68:	429a      	cmp	r2, r3
  401f6a:	d107      	bne.n	401f7c <circ_buf_flex_available_elements_to_read+0x48>
  401f6c:	687b      	ldr	r3, [r7, #4]
  401f6e:	7d1b      	ldrb	r3, [r3, #20]
  401f70:	2b02      	cmp	r3, #2
  401f72:	d103      	bne.n	401f7c <circ_buf_flex_available_elements_to_read+0x48>
    {
        elements_to_read = buf->capacity;
  401f74:	687b      	ldr	r3, [r7, #4]
  401f76:	691b      	ldr	r3, [r3, #16]
  401f78:	60fb      	str	r3, [r7, #12]
  401f7a:	e005      	b.n	401f88 <circ_buf_flex_available_elements_to_read+0x54>
    }else
    {
        elements_to_read = buf->head - buf->tail;
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	689a      	ldr	r2, [r3, #8]
  401f80:	687b      	ldr	r3, [r7, #4]
  401f82:	68db      	ldr	r3, [r3, #12]
  401f84:	1ad3      	subs	r3, r2, r3
  401f86:	60fb      	str	r3, [r7, #12]
    }

    return elements_to_read;
  401f88:	68fb      	ldr	r3, [r7, #12]
}
  401f8a:	4618      	mov	r0, r3
  401f8c:	3714      	adds	r7, #20
  401f8e:	46bd      	mov	sp, r7
  401f90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f94:	4770      	bx	lr

00401f96 <circ_buf_flex_is_empty>:
{
    return buf->capacity - circ_buf_flex_available_elements_to_read(buf);
}

uint8_t circ_buf_flex_is_empty(circ_buf_flex_t *buf)
{
  401f96:	b480      	push	{r7}
  401f98:	b083      	sub	sp, #12
  401f9a:	af00      	add	r7, sp, #0
  401f9c:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CB_BUFFER_EMPTY;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	7d1b      	ldrb	r3, [r3, #20]
  401fa2:	2b01      	cmp	r3, #1
  401fa4:	bf0c      	ite	eq
  401fa6:	2301      	moveq	r3, #1
  401fa8:	2300      	movne	r3, #0
  401faa:	b2db      	uxtb	r3, r3
}
  401fac:	4618      	mov	r0, r3
  401fae:	370c      	adds	r7, #12
  401fb0:	46bd      	mov	sp, r7
  401fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fb6:	4770      	bx	lr

00401fb8 <circ_buf_flex_is_full>:

uint8_t circ_buf_flex_is_full(circ_buf_flex_t *buf)
{
  401fb8:	b480      	push	{r7}
  401fba:	b083      	sub	sp, #12
  401fbc:	af00      	add	r7, sp, #0
  401fbe:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CB_BUFFER_FULL;
  401fc0:	687b      	ldr	r3, [r7, #4]
  401fc2:	7d1b      	ldrb	r3, [r3, #20]
  401fc4:	2b02      	cmp	r3, #2
  401fc6:	bf0c      	ite	eq
  401fc8:	2301      	moveq	r3, #1
  401fca:	2300      	movne	r3, #0
  401fcc:	b2db      	uxtb	r3, r3
}
  401fce:	4618      	mov	r0, r3
  401fd0:	370c      	adds	r7, #12
  401fd2:	46bd      	mov	sp, r7
  401fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fd8:	4770      	bx	lr
	...

00401fdc <circ_buf_flex_push>:

uint8_t circ_buf_flex_push(circ_buf_flex_t* buf, void* data)
{
  401fdc:	b580      	push	{r7, lr}
  401fde:	b084      	sub	sp, #16
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	6078      	str	r0, [r7, #4]
  401fe4:	6039      	str	r1, [r7, #0]
    uint8_t result = CB_SUCCESS;
  401fe6:	2300      	movs	r3, #0
  401fe8:	73fb      	strb	r3, [r7, #15]

    if(!circ_buf_flex_is_full(buf))
  401fea:	6878      	ldr	r0, [r7, #4]
  401fec:	4b1b      	ldr	r3, [pc, #108]	; (40205c <circ_buf_flex_push+0x80>)
  401fee:	4798      	blx	r3
  401ff0:	4603      	mov	r3, r0
  401ff2:	2b00      	cmp	r3, #0
  401ff4:	d11e      	bne.n	402034 <circ_buf_flex_push+0x58>
    {
        memcpy((buf->buffer) + (buf->head++) * (buf->buffer_element_size), data, buf->buffer_element_size);
  401ff6:	687b      	ldr	r3, [r7, #4]
  401ff8:	681a      	ldr	r2, [r3, #0]
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	689b      	ldr	r3, [r3, #8]
  401ffe:	1c58      	adds	r0, r3, #1
  402000:	6879      	ldr	r1, [r7, #4]
  402002:	6088      	str	r0, [r1, #8]
  402004:	6879      	ldr	r1, [r7, #4]
  402006:	8889      	ldrh	r1, [r1, #4]
  402008:	fb01 f303 	mul.w	r3, r1, r3
  40200c:	18d0      	adds	r0, r2, r3
  40200e:	687b      	ldr	r3, [r7, #4]
  402010:	889b      	ldrh	r3, [r3, #4]
  402012:	461a      	mov	r2, r3
  402014:	6839      	ldr	r1, [r7, #0]
  402016:	4b12      	ldr	r3, [pc, #72]	; (402060 <circ_buf_flex_push+0x84>)
  402018:	4798      	blx	r3
        //buf->buffer[buf->head++] = *data;
        buf->buffer_status = CB_BUFFER_FILLING;
  40201a:	687b      	ldr	r3, [r7, #4]
  40201c:	2203      	movs	r2, #3
  40201e:	751a      	strb	r2, [r3, #20]
        // Reset the head if reaching the size of the buffer
        if(buf->head >= buf->capacity) buf->head = 0;
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	689a      	ldr	r2, [r3, #8]
  402024:	687b      	ldr	r3, [r7, #4]
  402026:	691b      	ldr	r3, [r3, #16]
  402028:	429a      	cmp	r2, r3
  40202a:	d305      	bcc.n	402038 <circ_buf_flex_push+0x5c>
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	2200      	movs	r2, #0
  402030:	609a      	str	r2, [r3, #8]
  402032:	e001      	b.n	402038 <circ_buf_flex_push+0x5c>
    }
    else
    {
        result = CB_BUFFER_FULL;
  402034:	2302      	movs	r3, #2
  402036:	73fb      	strb	r3, [r7, #15]
    }

    // If head is joining the tail, all the buffer has been filled.
    if(buf->head == buf->tail && buf->buffer_status == CB_BUFFER_FILLING) buf->buffer_status = CB_BUFFER_FULL;
  402038:	687b      	ldr	r3, [r7, #4]
  40203a:	689a      	ldr	r2, [r3, #8]
  40203c:	687b      	ldr	r3, [r7, #4]
  40203e:	68db      	ldr	r3, [r3, #12]
  402040:	429a      	cmp	r2, r3
  402042:	d106      	bne.n	402052 <circ_buf_flex_push+0x76>
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	7d1b      	ldrb	r3, [r3, #20]
  402048:	2b03      	cmp	r3, #3
  40204a:	d102      	bne.n	402052 <circ_buf_flex_push+0x76>
  40204c:	687b      	ldr	r3, [r7, #4]
  40204e:	2202      	movs	r2, #2
  402050:	751a      	strb	r2, [r3, #20]

    return result;
  402052:	7bfb      	ldrb	r3, [r7, #15]
}
  402054:	4618      	mov	r0, r3
  402056:	3710      	adds	r7, #16
  402058:	46bd      	mov	sp, r7
  40205a:	bd80      	pop	{r7, pc}
  40205c:	00401fb9 	.word	0x00401fb9
  402060:	00403f6d 	.word	0x00403f6d

00402064 <circ_buf_flex_pop>:

uint8_t circ_buf_flex_pop(circ_buf_flex_t *buf, void* data)
{
  402064:	b580      	push	{r7, lr}
  402066:	b084      	sub	sp, #16
  402068:	af00      	add	r7, sp, #0
  40206a:	6078      	str	r0, [r7, #4]
  40206c:	6039      	str	r1, [r7, #0]
    uint8_t result = CB_SUCCESS;
  40206e:	2300      	movs	r3, #0
  402070:	73fb      	strb	r3, [r7, #15]

    if (!circ_buf_flex_is_empty(buf))
  402072:	6878      	ldr	r0, [r7, #4]
  402074:	4b1b      	ldr	r3, [pc, #108]	; (4020e4 <circ_buf_flex_pop+0x80>)
  402076:	4798      	blx	r3
  402078:	4603      	mov	r3, r0
  40207a:	2b00      	cmp	r3, #0
  40207c:	d11e      	bne.n	4020bc <circ_buf_flex_pop+0x58>
    {
        memcpy(data, (buf->buffer)+(buf->tail++)*(buf->buffer_element_size), buf->buffer_element_size);
  40207e:	687b      	ldr	r3, [r7, #4]
  402080:	681a      	ldr	r2, [r3, #0]
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	68db      	ldr	r3, [r3, #12]
  402086:	1c58      	adds	r0, r3, #1
  402088:	6879      	ldr	r1, [r7, #4]
  40208a:	60c8      	str	r0, [r1, #12]
  40208c:	6879      	ldr	r1, [r7, #4]
  40208e:	8889      	ldrh	r1, [r1, #4]
  402090:	fb01 f303 	mul.w	r3, r1, r3
  402094:	18d1      	adds	r1, r2, r3
  402096:	687b      	ldr	r3, [r7, #4]
  402098:	889b      	ldrh	r3, [r3, #4]
  40209a:	461a      	mov	r2, r3
  40209c:	6838      	ldr	r0, [r7, #0]
  40209e:	4b12      	ldr	r3, [pc, #72]	; (4020e8 <circ_buf_flex_pop+0x84>)
  4020a0:	4798      	blx	r3
        //memcpy((uint8_t*)data, buf->buffer[buf->tail], buf->buffer_element_size);
        buf->buffer_status = CB_BUFFER_FILLING;
  4020a2:	687b      	ldr	r3, [r7, #4]
  4020a4:	2203      	movs	r2, #3
  4020a6:	751a      	strb	r2, [r3, #20]
        
        // Reset the tail if reaching the size of the buffer
        if (buf->tail >= buf->capacity) buf->tail = 0;
  4020a8:	687b      	ldr	r3, [r7, #4]
  4020aa:	68da      	ldr	r2, [r3, #12]
  4020ac:	687b      	ldr	r3, [r7, #4]
  4020ae:	691b      	ldr	r3, [r3, #16]
  4020b0:	429a      	cmp	r2, r3
  4020b2:	d305      	bcc.n	4020c0 <circ_buf_flex_pop+0x5c>
  4020b4:	687b      	ldr	r3, [r7, #4]
  4020b6:	2200      	movs	r2, #0
  4020b8:	60da      	str	r2, [r3, #12]
  4020ba:	e001      	b.n	4020c0 <circ_buf_flex_pop+0x5c>
    }
    else
    {
        result = CB_BUFFER_EMPTY;
  4020bc:	2301      	movs	r3, #1
  4020be:	73fb      	strb	r3, [r7, #15]
    }
    
    // If tail is joining the head, all the buffer has been read.
    if (buf->head == buf->tail && buf->buffer_status == CB_BUFFER_FILLING) buf->buffer_status = CB_BUFFER_EMPTY;
  4020c0:	687b      	ldr	r3, [r7, #4]
  4020c2:	689a      	ldr	r2, [r3, #8]
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	68db      	ldr	r3, [r3, #12]
  4020c8:	429a      	cmp	r2, r3
  4020ca:	d106      	bne.n	4020da <circ_buf_flex_pop+0x76>
  4020cc:	687b      	ldr	r3, [r7, #4]
  4020ce:	7d1b      	ldrb	r3, [r3, #20]
  4020d0:	2b03      	cmp	r3, #3
  4020d2:	d102      	bne.n	4020da <circ_buf_flex_pop+0x76>
  4020d4:	687b      	ldr	r3, [r7, #4]
  4020d6:	2201      	movs	r2, #1
  4020d8:	751a      	strb	r2, [r3, #20]

    return result;
  4020da:	7bfb      	ldrb	r3, [r7, #15]
}
  4020dc:	4618      	mov	r0, r3
  4020de:	3710      	adds	r7, #16
  4020e0:	46bd      	mov	sp, r7
  4020e2:	bd80      	pop	{r7, pc}
  4020e4:	00401f97 	.word	0x00401f97
  4020e8:	00403f6d 	.word	0x00403f6d

004020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4020ec:	b480      	push	{r7}
  4020ee:	b083      	sub	sp, #12
  4020f0:	af00      	add	r7, sp, #0
  4020f2:	4603      	mov	r3, r0
  4020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	db0b      	blt.n	402116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4020fe:	4909      	ldr	r1, [pc, #36]	; (402124 <__NVIC_EnableIRQ+0x38>)
  402100:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402104:	095b      	lsrs	r3, r3, #5
  402106:	79fa      	ldrb	r2, [r7, #7]
  402108:	f002 021f 	and.w	r2, r2, #31
  40210c:	2001      	movs	r0, #1
  40210e:	fa00 f202 	lsl.w	r2, r0, r2
  402112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  402116:	bf00      	nop
  402118:	370c      	adds	r7, #12
  40211a:	46bd      	mov	sp, r7
  40211c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402120:	4770      	bx	lr
  402122:	bf00      	nop
  402124:	e000e100 	.word	0xe000e100

00402128 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402128:	b480      	push	{r7}
  40212a:	b083      	sub	sp, #12
  40212c:	af00      	add	r7, sp, #0
  40212e:	4603      	mov	r3, r0
  402130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402132:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402136:	2b00      	cmp	r3, #0
  402138:	db0c      	blt.n	402154 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40213a:	4909      	ldr	r1, [pc, #36]	; (402160 <__NVIC_ClearPendingIRQ+0x38>)
  40213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402140:	095b      	lsrs	r3, r3, #5
  402142:	79fa      	ldrb	r2, [r7, #7]
  402144:	f002 021f 	and.w	r2, r2, #31
  402148:	2001      	movs	r0, #1
  40214a:	fa00 f202 	lsl.w	r2, r0, r2
  40214e:	3360      	adds	r3, #96	; 0x60
  402150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  402154:	bf00      	nop
  402156:	370c      	adds	r7, #12
  402158:	46bd      	mov	sp, r7
  40215a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40215e:	4770      	bx	lr
  402160:	e000e100 	.word	0xe000e100

00402164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402164:	b480      	push	{r7}
  402166:	b083      	sub	sp, #12
  402168:	af00      	add	r7, sp, #0
  40216a:	4603      	mov	r3, r0
  40216c:	6039      	str	r1, [r7, #0]
  40216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402170:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402174:	2b00      	cmp	r3, #0
  402176:	db0a      	blt.n	40218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  402178:	490d      	ldr	r1, [pc, #52]	; (4021b0 <__NVIC_SetPriority+0x4c>)
  40217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40217e:	683a      	ldr	r2, [r7, #0]
  402180:	b2d2      	uxtb	r2, r2
  402182:	0152      	lsls	r2, r2, #5
  402184:	b2d2      	uxtb	r2, r2
  402186:	440b      	add	r3, r1
  402188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  40218c:	e00a      	b.n	4021a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40218e:	4909      	ldr	r1, [pc, #36]	; (4021b4 <__NVIC_SetPriority+0x50>)
  402190:	79fb      	ldrb	r3, [r7, #7]
  402192:	f003 030f 	and.w	r3, r3, #15
  402196:	3b04      	subs	r3, #4
  402198:	683a      	ldr	r2, [r7, #0]
  40219a:	b2d2      	uxtb	r2, r2
  40219c:	0152      	lsls	r2, r2, #5
  40219e:	b2d2      	uxtb	r2, r2
  4021a0:	440b      	add	r3, r1
  4021a2:	761a      	strb	r2, [r3, #24]
}
  4021a4:	bf00      	nop
  4021a6:	370c      	adds	r7, #12
  4021a8:	46bd      	mov	sp, r7
  4021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ae:	4770      	bx	lr
  4021b0:	e000e100 	.word	0xe000e100
  4021b4:	e000ed00 	.word	0xe000ed00

004021b8 <mcan_get_config_defaults>:
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void mcan_get_config_defaults(
		struct mcan_config *const config)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4021c0:	687b      	ldr	r3, [r7, #4]
  4021c2:	2200      	movs	r2, #0
  4021c4:	701a      	strb	r2, [r3, #0]
	config->watchdog_configuration = 0x00;
  4021c6:	687b      	ldr	r3, [r7, #4]
  4021c8:	2200      	movs	r2, #0
  4021ca:	705a      	strb	r2, [r3, #1]
	config->transmit_pause = true;
  4021cc:	687b      	ldr	r3, [r7, #4]
  4021ce:	2201      	movs	r2, #1
  4021d0:	709a      	strb	r2, [r3, #2]
	config->edge_filtering = true;
  4021d2:	687b      	ldr	r3, [r7, #4]
  4021d4:	2201      	movs	r2, #1
  4021d6:	70da      	strb	r2, [r3, #3]
	config->protocol_exception_handling = true;
  4021d8:	687b      	ldr	r3, [r7, #4]
  4021da:	2201      	movs	r2, #1
  4021dc:	711a      	strb	r2, [r3, #4]
	config->automatic_retransmission = true;
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	2201      	movs	r2, #1
  4021e2:	715a      	strb	r2, [r3, #5]
	config->clock_stop_request = false;
  4021e4:	687b      	ldr	r3, [r7, #4]
  4021e6:	2200      	movs	r2, #0
  4021e8:	719a      	strb	r2, [r3, #6]
	config->clock_stop_acknowledge = false;
  4021ea:	687b      	ldr	r3, [r7, #4]
  4021ec:	2200      	movs	r2, #0
  4021ee:	71da      	strb	r2, [r3, #7]
	config->timestamp_prescaler = 0;
  4021f0:	687b      	ldr	r3, [r7, #4]
  4021f2:	2200      	movs	r2, #0
  4021f4:	721a      	strb	r2, [r3, #8]
	config->timeout_period = 0xFFFF;
  4021f6:	687b      	ldr	r3, [r7, #4]
  4021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4021fc:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  4021fe:	687b      	ldr	r3, [r7, #4]
  402200:	2200      	movs	r2, #0
  402202:	731a      	strb	r2, [r3, #12]
	config->timeout_enable = false;
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	2200      	movs	r2, #0
  402208:	735a      	strb	r2, [r3, #13]
	config->tdc_enable = false;
  40220a:	687b      	ldr	r3, [r7, #4]
  40220c:	2200      	movs	r2, #0
  40220e:	739a      	strb	r2, [r3, #14]
	config->delay_compensation_offset = 0;
  402210:	687b      	ldr	r3, [r7, #4]
  402212:	2200      	movs	r2, #0
  402214:	73da      	strb	r2, [r3, #15]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_FIFO_0;
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	2200      	movs	r2, #0
  40221a:	741a      	strb	r2, [r3, #16]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40221c:	687b      	ldr	r3, [r7, #4]
  40221e:	2202      	movs	r2, #2
  402220:	745a      	strb	r2, [r3, #17]
	config->remote_frames_standard_reject = false;
  402222:	687b      	ldr	r3, [r7, #4]
  402224:	2200      	movs	r2, #0
  402226:	749a      	strb	r2, [r3, #18]
	config->remote_frames_extended_reject = true;
  402228:	687b      	ldr	r3, [r7, #4]
  40222a:	2201      	movs	r2, #1
  40222c:	74da      	strb	r2, [r3, #19]
	config->extended_id_mask = 0x1FFFFFFF;
  40222e:	687b      	ldr	r3, [r7, #4]
  402230:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
  402234:	615a      	str	r2, [r3, #20]
	config->rx_fifo_0_overwrite = true;
  402236:	687b      	ldr	r3, [r7, #4]
  402238:	2201      	movs	r2, #1
  40223a:	761a      	strb	r2, [r3, #24]
	config->rx_fifo_0_watermark = 0;
  40223c:	687b      	ldr	r3, [r7, #4]
  40223e:	2200      	movs	r2, #0
  402240:	765a      	strb	r2, [r3, #25]
	config->rx_fifo_1_overwrite = true;
  402242:	687b      	ldr	r3, [r7, #4]
  402244:	2201      	movs	r2, #1
  402246:	769a      	strb	r2, [r3, #26]
	config->rx_fifo_1_watermark = 0;
  402248:	687b      	ldr	r3, [r7, #4]
  40224a:	2200      	movs	r2, #0
  40224c:	76da      	strb	r2, [r3, #27]
	config->tx_queue_mode = false;
  40224e:	687b      	ldr	r3, [r7, #4]
  402250:	2200      	movs	r2, #0
  402252:	771a      	strb	r2, [r3, #28]
	config->tx_event_fifo_watermark = 0;
  402254:	687b      	ldr	r3, [r7, #4]
  402256:	2200      	movs	r2, #0
  402258:	775a      	strb	r2, [r3, #29]
}
  40225a:	bf00      	nop
  40225c:	370c      	adds	r7, #12
  40225e:	46bd      	mov	sp, r7
  402260:	f85d 7b04 	ldr.w	r7, [sp], #4
  402264:	4770      	bx	lr

00402266 <mcan_rx_get_buffer_status>:
 *  \retval true Rx Buffer updated from new message.
 *  \retval false Rx Buffer not updated.
 */
static inline bool mcan_rx_get_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  402266:	b480      	push	{r7}
  402268:	b083      	sub	sp, #12
  40226a:	af00      	add	r7, sp, #0
  40226c:	6078      	str	r0, [r7, #4]
  40226e:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  402270:	683b      	ldr	r3, [r7, #0]
  402272:	2b1f      	cmp	r3, #31
  402274:	d80e      	bhi.n	402294 <mcan_rx_get_buffer_status+0x2e>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  402276:	687b      	ldr	r3, [r7, #4]
  402278:	681b      	ldr	r3, [r3, #0]
  40227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  40227e:	2101      	movs	r1, #1
  402280:	683a      	ldr	r2, [r7, #0]
  402282:	fa01 f202 	lsl.w	r2, r1, r2
  402286:	4013      	ands	r3, r2
  402288:	2b00      	cmp	r3, #0
  40228a:	d001      	beq.n	402290 <mcan_rx_get_buffer_status+0x2a>
			return true;
  40228c:	2301      	movs	r3, #1
  40228e:	e012      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  402290:	2300      	movs	r3, #0
  402292:	e010      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		}
	} else {
		index -= 32;
  402294:	683b      	ldr	r3, [r7, #0]
  402296:	3b20      	subs	r3, #32
  402298:	603b      	str	r3, [r7, #0]
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  40229a:	687b      	ldr	r3, [r7, #4]
  40229c:	681b      	ldr	r3, [r3, #0]
  40229e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  4022a2:	2101      	movs	r1, #1
  4022a4:	683a      	ldr	r2, [r7, #0]
  4022a6:	fa01 f202 	lsl.w	r2, r1, r2
  4022aa:	4013      	ands	r3, r2
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	d001      	beq.n	4022b4 <mcan_rx_get_buffer_status+0x4e>
			return true;
  4022b0:	2301      	movs	r3, #1
  4022b2:	e000      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  4022b4:	2300      	movs	r3, #0
		}
	}
}
  4022b6:	4618      	mov	r0, r3
  4022b8:	370c      	adds	r7, #12
  4022ba:	46bd      	mov	sp, r7
  4022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022c0:	4770      	bx	lr

004022c2 <mcan_rx_clear_buffer_status>:
 * \param[in] index  Index offset in Rx buffer
 *
 */
static inline void mcan_rx_clear_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  4022c2:	b480      	push	{r7}
  4022c4:	b083      	sub	sp, #12
  4022c6:	af00      	add	r7, sp, #0
  4022c8:	6078      	str	r0, [r7, #4]
  4022ca:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  4022cc:	683b      	ldr	r3, [r7, #0]
  4022ce:	2b1f      	cmp	r3, #31
  4022d0:	d808      	bhi.n	4022e4 <mcan_rx_clear_buffer_status+0x22>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  4022d2:	687b      	ldr	r3, [r7, #4]
  4022d4:	681b      	ldr	r3, [r3, #0]
  4022d6:	2101      	movs	r1, #1
  4022d8:	683a      	ldr	r2, [r7, #0]
  4022da:	fa01 f202 	lsl.w	r2, r1, r2
  4022de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	} else {
		index -= 32;
		module_inst->hw->MCAN_NDAT2 = (1 << index);
	}
}
  4022e2:	e00a      	b.n	4022fa <mcan_rx_clear_buffer_status+0x38>
		index -= 32;
  4022e4:	683b      	ldr	r3, [r7, #0]
  4022e6:	3b20      	subs	r3, #32
  4022e8:	603b      	str	r3, [r7, #0]
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4022ea:	687b      	ldr	r3, [r7, #4]
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	2101      	movs	r1, #1
  4022f0:	683a      	ldr	r2, [r7, #0]
  4022f2:	fa01 f202 	lsl.w	r2, r1, r2
  4022f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
  4022fa:	bf00      	nop
  4022fc:	370c      	adds	r7, #12
  4022fe:	46bd      	mov	sp, r7
  402300:	f85d 7b04 	ldr.w	r7, [sp], #4
  402304:	4770      	bx	lr

00402306 <mcan_rx_fifo_acknowledge>:
 * \param[in] fifo_number  Rx FIFO 0 or 1
 * \param[in] index  Index offset in FIFO
 */
static inline void mcan_rx_fifo_acknowledge(
		struct mcan_module *const module_inst, bool fifo_number, uint32_t index)
{
  402306:	b480      	push	{r7}
  402308:	b085      	sub	sp, #20
  40230a:	af00      	add	r7, sp, #0
  40230c:	60f8      	str	r0, [r7, #12]
  40230e:	460b      	mov	r3, r1
  402310:	607a      	str	r2, [r7, #4]
  402312:	72fb      	strb	r3, [r7, #11]
	if (!fifo_number) {
  402314:	7afb      	ldrb	r3, [r7, #11]
  402316:	f083 0301 	eor.w	r3, r3, #1
  40231a:	b2db      	uxtb	r3, r3
  40231c:	2b00      	cmp	r3, #0
  40231e:	d007      	beq.n	402330 <mcan_rx_fifo_acknowledge+0x2a>
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  402320:	68fb      	ldr	r3, [r7, #12]
  402322:	681b      	ldr	r3, [r3, #0]
  402324:	687a      	ldr	r2, [r7, #4]
  402326:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40232a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	} else {
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
	}
}
  40232e:	e006      	b.n	40233e <mcan_rx_fifo_acknowledge+0x38>
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
  402330:	68fb      	ldr	r3, [r7, #12]
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	687a      	ldr	r2, [r7, #4]
  402336:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40233a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
  40233e:	bf00      	nop
  402340:	3714      	adds	r7, #20
  402342:	46bd      	mov	sp, r7
  402344:	f85d 7b04 	ldr.w	r7, [sp], #4
  402348:	4770      	bx	lr
	...

0040234c <mcan_get_standard_message_filter_element_default>:
 *
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void mcan_get_standard_message_filter_element_default(
		struct mcan_standard_message_filter_element *sd_filter)
{
  40234c:	b480      	push	{r7}
  40234e:	b083      	sub	sp, #12
  402350:	af00      	add	r7, sp, #0
  402352:	6078      	str	r0, [r7, #4]
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  402354:	687b      	ldr	r3, [r7, #4]
  402356:	4a04      	ldr	r2, [pc, #16]	; (402368 <mcan_get_standard_message_filter_element_default+0x1c>)
  402358:	601a      	str	r2, [r3, #0]
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID1(0) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC(
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFT_CLASSIC;
}
  40235a:	bf00      	nop
  40235c:	370c      	adds	r7, #12
  40235e:	46bd      	mov	sp, r7
  402360:	f85d 7b04 	ldr.w	r7, [sp], #4
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	880007ff 	.word	0x880007ff

0040236c <mcan_get_extended_message_filter_element_default>:
 *
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void mcan_get_extended_message_filter_element_default(
		struct mcan_extended_message_filter_element *et_filter)
{
  40236c:	b480      	push	{r7}
  40236e:	b083      	sub	sp, #12
  402370:	af00      	add	r7, sp, #0
  402372:	6078      	str	r0, [r7, #4]
	et_filter->F0.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
  402374:	687b      	ldr	r3, [r7, #4]
  402376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40237a:	601a      	str	r2, [r3, #0]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
  40237c:	687b      	ldr	r3, [r7, #4]
  40237e:	f06f 42c0 	mvn.w	r2, #1610612736	; 0x60000000
  402382:	605a      	str	r2, [r3, #4]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFT_CLASSIC;
}
  402384:	bf00      	nop
  402386:	370c      	adds	r7, #12
  402388:	46bd      	mov	sp, r7
  40238a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40238e:	4770      	bx	lr

00402390 <mcan_tx_transfer_request>:
 *  \retval STATUS_OK   Set the transfer request.
 *  \retval STATUS_ERR_BUSY The module is in configuration.
 */
static inline enum status_code mcan_tx_transfer_request(
		struct mcan_module *const module_inst, uint32_t trig_mask)
{
  402390:	b480      	push	{r7}
  402392:	b083      	sub	sp, #12
  402394:	af00      	add	r7, sp, #0
  402396:	6078      	str	r0, [r7, #4]
  402398:	6039      	str	r1, [r7, #0]
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  40239a:	687b      	ldr	r3, [r7, #4]
  40239c:	681b      	ldr	r3, [r3, #0]
  40239e:	699b      	ldr	r3, [r3, #24]
  4023a0:	f003 0302 	and.w	r3, r3, #2
  4023a4:	2b00      	cmp	r3, #0
  4023a6:	d002      	beq.n	4023ae <mcan_tx_transfer_request+0x1e>
		return ERR_BUSY;
  4023a8:	f06f 0309 	mvn.w	r3, #9
  4023ac:	e005      	b.n	4023ba <mcan_tx_transfer_request+0x2a>
	}
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4023ae:	687b      	ldr	r3, [r7, #4]
  4023b0:	681b      	ldr	r3, [r3, #0]
  4023b2:	683a      	ldr	r2, [r7, #0]
  4023b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return STATUS_OK;
  4023b8:	2300      	movs	r3, #0
}
  4023ba:	4618      	mov	r0, r3
  4023bc:	370c      	adds	r7, #12
  4023be:	46bd      	mov	sp, r7
  4023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023c4:	4770      	bx	lr

004023c6 <mcan_tx_get_event_fifo_status>:
 *
 * \return Tx event FIFO status value.
 */
static inline uint32_t mcan_tx_get_event_fifo_status(
		struct mcan_module *const module_inst)
{
  4023c6:	b480      	push	{r7}
  4023c8:	b083      	sub	sp, #12
  4023ca:	af00      	add	r7, sp, #0
  4023cc:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_TXEFS;
  4023ce:	687b      	ldr	r3, [r7, #4]
  4023d0:	681b      	ldr	r3, [r3, #0]
  4023d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
}
  4023d6:	4618      	mov	r0, r3
  4023d8:	370c      	adds	r7, #12
  4023da:	46bd      	mov	sp, r7
  4023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023e0:	4770      	bx	lr

004023e2 <mcan_tx_event_fifo_acknowledge>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] index  Index for the transfer FIFO
 */
static inline void mcan_tx_event_fifo_acknowledge(
		struct mcan_module *const module_inst, uint32_t index)
{
  4023e2:	b480      	push	{r7}
  4023e4:	b083      	sub	sp, #12
  4023e6:	af00      	add	r7, sp, #0
  4023e8:	6078      	str	r0, [r7, #4]
  4023ea:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_TXEFA = MCAN_TXEFA_EFAI(index);
  4023ec:	687b      	ldr	r3, [r7, #4]
  4023ee:	681b      	ldr	r3, [r3, #0]
  4023f0:	683a      	ldr	r2, [r7, #0]
  4023f2:	f002 021f 	and.w	r2, r2, #31
  4023f6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
  4023fa:	bf00      	nop
  4023fc:	370c      	adds	r7, #12
  4023fe:	46bd      	mov	sp, r7
  402400:	f85d 7b04 	ldr.w	r7, [sp], #4
  402404:	4770      	bx	lr

00402406 <mcan_get_tx_buffer_element_defaults>:
 *
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void mcan_get_tx_buffer_element_defaults(
		struct mcan_tx_element *tx_element)
{
  402406:	b480      	push	{r7}
  402408:	b083      	sub	sp, #12
  40240a:	af00      	add	r7, sp, #0
  40240c:	6078      	str	r0, [r7, #4]
	tx_element->T0.reg = 0;
  40240e:	687b      	ldr	r3, [r7, #4]
  402410:	2200      	movs	r2, #0
  402412:	601a      	str	r2, [r3, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  402414:	687b      	ldr	r3, [r7, #4]
  402416:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  40241a:	605a      	str	r2, [r3, #4]
			MCAN_TX_ELEMENT_T1_DLC(MCAN_TX_ELEMENT_T1_DLC_DATA8_Val);
}
  40241c:	bf00      	nop
  40241e:	370c      	adds	r7, #12
  402420:	46bd      	mov	sp, r7
  402422:	f85d 7b04 	ldr.w	r7, [sp], #4
  402426:	4770      	bx	lr

00402428 <mcan_enable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  402428:	b480      	push	{r7}
  40242a:	b083      	sub	sp, #12
  40242c:	af00      	add	r7, sp, #0
  40242e:	6078      	str	r0, [r7, #4]
  402430:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE |= source;
  402432:	687b      	ldr	r3, [r7, #4]
  402434:	681b      	ldr	r3, [r3, #0]
  402436:	687a      	ldr	r2, [r7, #4]
  402438:	6812      	ldr	r2, [r2, #0]
  40243a:	6d51      	ldr	r1, [r2, #84]	; 0x54
  40243c:	683a      	ldr	r2, [r7, #0]
  40243e:	430a      	orrs	r2, r1
  402440:	655a      	str	r2, [r3, #84]	; 0x54
}
  402442:	bf00      	nop
  402444:	370c      	adds	r7, #12
  402446:	46bd      	mov	sp, r7
  402448:	f85d 7b04 	ldr.w	r7, [sp], #4
  40244c:	4770      	bx	lr

0040244e <mcan_disable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_disable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  40244e:	b480      	push	{r7}
  402450:	b083      	sub	sp, #12
  402452:	af00      	add	r7, sp, #0
  402454:	6078      	str	r0, [r7, #4]
  402456:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE &= ~source;
  402458:	687b      	ldr	r3, [r7, #4]
  40245a:	681b      	ldr	r3, [r3, #0]
  40245c:	687a      	ldr	r2, [r7, #4]
  40245e:	6812      	ldr	r2, [r2, #0]
  402460:	6d51      	ldr	r1, [r2, #84]	; 0x54
  402462:	683a      	ldr	r2, [r7, #0]
  402464:	43d2      	mvns	r2, r2
  402466:	400a      	ands	r2, r1
  402468:	655a      	str	r2, [r3, #84]	; 0x54
}
  40246a:	bf00      	nop
  40246c:	370c      	adds	r7, #12
  40246e:	46bd      	mov	sp, r7
  402470:	f85d 7b04 	ldr.w	r7, [sp], #4
  402474:	4770      	bx	lr

00402476 <mcan_read_interrupt_status>:
 *
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
  402476:	b480      	push	{r7}
  402478:	b083      	sub	sp, #12
  40247a:	af00      	add	r7, sp, #0
  40247c:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_IR;
  40247e:	687b      	ldr	r3, [r7, #4]
  402480:	681b      	ldr	r3, [r3, #0]
  402482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
  402484:	4618      	mov	r0, r3
  402486:	370c      	adds	r7, #12
  402488:	46bd      	mov	sp, r7
  40248a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248e:	4770      	bx	lr

00402490 <mcan_clear_interrupt_status>:
 * \return Bit mask of interrupt status value.
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IR = source;
  40249a:	687b      	ldr	r3, [r7, #4]
  40249c:	681b      	ldr	r3, [r3, #0]
  40249e:	683a      	ldr	r2, [r7, #0]
  4024a0:	651a      	str	r2, [r3, #80]	; 0x50
}
  4024a2:	bf00      	nop
  4024a4:	370c      	adds	r7, #12
  4024a6:	46bd      	mov	sp, r7
  4024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ac:	4770      	bx	lr
	...

004024b0 <_mcan_configure_rx_fifo_to_accept_all>:

/**
 * \brief Configure FIFO0/1 on the peripheral to accept all standard/extended messages
 */
void _mcan_configure_rx_fifo_to_accept_all(struct mcan_module* mcan_mod)
{
  4024b0:	b580      	push	{r7, lr}
  4024b2:	b086      	sub	sp, #24
  4024b4:	af00      	add	r7, sp, #0
  4024b6:	6078      	str	r0, [r7, #4]
	 *  Setup rx filtering to accept messages into FIFO1 with extended format
	 *  this accepts all messages
	 */
	struct mcan_extended_message_filter_element et_filter;

	mcan_get_extended_message_filter_element_default(&et_filter);
  4024b8:	f107 0310 	add.w	r3, r7, #16
  4024bc:	4618      	mov	r0, r3
  4024be:	4b1e      	ldr	r3, [pc, #120]	; (402538 <_mcan_configure_rx_fifo_to_accept_all+0x88>)
  4024c0:	4798      	blx	r3
	et_filter.F0.bit.EFID1 = 0;//id
  4024c2:	693b      	ldr	r3, [r7, #16]
  4024c4:	f36f 031c 	bfc	r3, #0, #29
  4024c8:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFID2 = 0;//mask
  4024ca:	697b      	ldr	r3, [r7, #20]
  4024cc:	f36f 031c 	bfc	r3, #0, #29
  4024d0:	617b      	str	r3, [r7, #20]

	et_filter.F0.bit.EFEC = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val;//Put in fifo1
  4024d2:	693b      	ldr	r3, [r7, #16]
  4024d4:	2202      	movs	r2, #2
  4024d6:	f362 735f 	bfi	r3, r2, #29, #3
  4024da:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFT = 2;//classic filter
  4024dc:	697b      	ldr	r3, [r7, #20]
  4024de:	2202      	movs	r2, #2
  4024e0:	f362 739f 	bfi	r3, r2, #30, #2
  4024e4:	617b      	str	r3, [r7, #20]

	mcan_set_rx_extended_filter(mcan_mod, &et_filter, 0);
  4024e6:	f107 0310 	add.w	r3, r7, #16
  4024ea:	2200      	movs	r2, #0
  4024ec:	4619      	mov	r1, r3
  4024ee:	6878      	ldr	r0, [r7, #4]
  4024f0:	4b12      	ldr	r3, [pc, #72]	; (40253c <_mcan_configure_rx_fifo_to_accept_all+0x8c>)
  4024f2:	4798      	blx	r3
	/*  
	 *  Setup rx filtering to accept messages into FIFO0 with standard format
	 *  this accepts all messages
	 */
	struct mcan_standard_message_filter_element sd_filter;
	mcan_get_standard_message_filter_element_default(&sd_filter);
  4024f4:	f107 030c 	add.w	r3, r7, #12
  4024f8:	4618      	mov	r0, r3
  4024fa:	4b11      	ldr	r3, [pc, #68]	; (402540 <_mcan_configure_rx_fifo_to_accept_all+0x90>)
  4024fc:	4798      	blx	r3
	sd_filter.S0.bit.SFID1 = 0;//ID
  4024fe:	68fb      	ldr	r3, [r7, #12]
  402500:	f36f 431a 	bfc	r3, #16, #11
  402504:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFID2 = 0;//Mask
  402506:	68fb      	ldr	r3, [r7, #12]
  402508:	f36f 030a 	bfc	r3, #0, #11
  40250c:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFEC = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;//Put in fifo0
  40250e:	68fb      	ldr	r3, [r7, #12]
  402510:	2201      	movs	r2, #1
  402512:	f362 63dd 	bfi	r3, r2, #27, #3
  402516:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFT = 2;//classic filter
  402518:	68fb      	ldr	r3, [r7, #12]
  40251a:	2202      	movs	r2, #2
  40251c:	f362 739f 	bfi	r3, r2, #30, #2
  402520:	60fb      	str	r3, [r7, #12]
	mcan_set_rx_standard_filter(mcan_mod, &sd_filter, 0);
  402522:	f107 030c 	add.w	r3, r7, #12
  402526:	2200      	movs	r2, #0
  402528:	4619      	mov	r1, r3
  40252a:	6878      	ldr	r0, [r7, #4]
  40252c:	4b05      	ldr	r3, [pc, #20]	; (402544 <_mcan_configure_rx_fifo_to_accept_all+0x94>)
  40252e:	4798      	blx	r3
}
  402530:	bf00      	nop
  402532:	3718      	adds	r7, #24
  402534:	46bd      	mov	sp, r7
  402536:	bd80      	pop	{r7, pc}
  402538:	0040236d 	.word	0x0040236d
  40253c:	00400e9d 	.word	0x00400e9d
  402540:	0040234d 	.word	0x0040234d
  402544:	00400e3d 	.word	0x00400e3d

00402548 <configure_mcan0>:

void configure_mcan0(void)
{	/**/
  402548:	b580      	push	{r7, lr}
  40254a:	b088      	sub	sp, #32
  40254c:	af00      	add	r7, sp, #0
	mcan0_standard_receive_index = 0;
  40254e:	4b34      	ldr	r3, [pc, #208]	; (402620 <configure_mcan0+0xd8>)
  402550:	2200      	movs	r2, #0
  402552:	601a      	str	r2, [r3, #0]
	mcan0_extended_receive_index = 0;
  402554:	4b33      	ldr	r3, [pc, #204]	; (402624 <configure_mcan0+0xdc>)
  402556:	2200      	movs	r2, #0
  402558:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_rx, CAN_RX_BUFFER_SIZE, sizeof(mcan_timestamped_rx_message_t));
  40255a:	2220      	movs	r2, #32
  40255c:	2140      	movs	r1, #64	; 0x40
  40255e:	4832      	ldr	r0, [pc, #200]	; (402628 <configure_mcan0+0xe0>)
  402560:	4b32      	ldr	r3, [pc, #200]	; (40262c <configure_mcan0+0xe4>)
  402562:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_tx, CAN_TX_BUFFER_SIZE, sizeof(mcan_tx_message_t));
  402564:	2214      	movs	r2, #20
  402566:	2140      	movs	r1, #64	; 0x40
  402568:	4831      	ldr	r0, [pc, #196]	; (402630 <configure_mcan0+0xe8>)
  40256a:	4b30      	ldr	r3, [pc, #192]	; (40262c <configure_mcan0+0xe4>)
  40256c:	4798      	blx	r3
	
	mcan0_buffer.adding_in_tx_buffer = false;
  40256e:	4b2e      	ldr	r3, [pc, #184]	; (402628 <configure_mcan0+0xe0>)
  402570:	2200      	movs	r2, #0
  402572:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  402576:	4b2c      	ldr	r3, [pc, #176]	; (402628 <configure_mcan0+0xe0>)
  402578:	2200      	movs	r2, #0
  40257a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan0_buffer.buffer_being_emptied_by_interruption = false;
  40257e:	4b2a      	ldr	r3, [pc, #168]	; (402628 <configure_mcan0+0xe0>)
  402580:	2200      	movs	r2, #0
  402582:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  402586:	463b      	mov	r3, r7
  402588:	4618      	mov	r0, r3
  40258a:	4b2a      	ldr	r3, [pc, #168]	; (402634 <configure_mcan0+0xec>)
  40258c:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  40258e:	2302      	movs	r3, #2
  402590:	743b      	strb	r3, [r7, #16]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  402592:	2302      	movs	r3, #2
  402594:	747b      	strb	r3, [r7, #17]

	mcan_init(&mcan0_instance, MCAN0, &config_mcan);
  402596:	463b      	mov	r3, r7
  402598:	461a      	mov	r2, r3
  40259a:	4927      	ldr	r1, [pc, #156]	; (402638 <configure_mcan0+0xf0>)
  40259c:	4827      	ldr	r0, [pc, #156]	; (40263c <configure_mcan0+0xf4>)
  40259e:	4b28      	ldr	r3, [pc, #160]	; (402640 <configure_mcan0+0xf8>)
  4025a0:	4798      	blx	r3
	
	if(!has_UPLL_been_set)
  4025a2:	4b28      	ldr	r3, [pc, #160]	; (402644 <configure_mcan0+0xfc>)
  4025a4:	781b      	ldrb	r3, [r3, #0]
  4025a6:	2b00      	cmp	r3, #0
  4025a8:	d10e      	bne.n	4025c8 <configure_mcan0+0x80>
	{
		//Enabling the upll clock 
		//NEED TO HAVE THE RIGHT conf_mcan.h !
		pmc_enable_upll_clock();
  4025aa:	4b27      	ldr	r3, [pc, #156]	; (402648 <configure_mcan0+0x100>)
  4025ac:	4798      	blx	r3
		// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
		//It is recomendedd in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
		pmc_disable_pck(PMC_PCK_5);
  4025ae:	2005      	movs	r0, #5
  4025b0:	4b26      	ldr	r3, [pc, #152]	; (40264c <configure_mcan0+0x104>)
  4025b2:	4798      	blx	r3
		//deviding uppl by 6 to get a 80 Mhz signal which is again devided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
		pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  4025b4:	2150      	movs	r1, #80	; 0x50
  4025b6:	2005      	movs	r0, #5
  4025b8:	4b25      	ldr	r3, [pc, #148]	; (402650 <configure_mcan0+0x108>)
  4025ba:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_5);
  4025bc:	2005      	movs	r0, #5
  4025be:	4b25      	ldr	r3, [pc, #148]	; (402654 <configure_mcan0+0x10c>)
  4025c0:	4798      	blx	r3

		has_UPLL_been_set = 1;
  4025c2:	4b20      	ldr	r3, [pc, #128]	; (402644 <configure_mcan0+0xfc>)
  4025c4:	2201      	movs	r2, #1
  4025c6:	701a      	strb	r2, [r3, #0]
	}

	//chosing what interruption to activate
	mcan_enable_interrupt(&mcan0_instance,
  4025c8:	4923      	ldr	r1, [pc, #140]	; (402658 <configure_mcan0+0x110>)
  4025ca:	481c      	ldr	r0, [pc, #112]	; (40263c <configure_mcan0+0xf4>)
  4025cc:	4b23      	ldr	r3, [pc, #140]	; (40265c <configure_mcan0+0x114>)
  4025ce:	4798      	blx	r3
		MCAN_TX_CANCELLATION_FINISH | MCAN_TX_FIFO_EMPTY |
		MCAN_TX_EVENT_FIFO_NEW_ENTRY |
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	mcan_disable_interrupt(&mcan0_instance, MCAN_TIMESTAMP_WRAPAROUND);
  4025d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4025d4:	4819      	ldr	r0, [pc, #100]	; (40263c <configure_mcan0+0xf4>)
  4025d6:	4b22      	ldr	r3, [pc, #136]	; (402660 <configure_mcan0+0x118>)
  4025d8:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan0_instance.hw->MCAN_ILS = 0x0000FF00ul;
  4025da:	4b18      	ldr	r3, [pc, #96]	; (40263c <configure_mcan0+0xf4>)
  4025dc:	681b      	ldr	r3, [r3, #0]
  4025de:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  4025e2:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	
	irq_register_handler(MCAN0_INT0_IRQn, 1);
  4025e4:	2023      	movs	r0, #35	; 0x23
  4025e6:	4b1f      	ldr	r3, [pc, #124]	; (402664 <configure_mcan0+0x11c>)
  4025e8:	4798      	blx	r3
  4025ea:	2101      	movs	r1, #1
  4025ec:	2023      	movs	r0, #35	; 0x23
  4025ee:	4b1e      	ldr	r3, [pc, #120]	; (402668 <configure_mcan0+0x120>)
  4025f0:	4798      	blx	r3
  4025f2:	2023      	movs	r0, #35	; 0x23
  4025f4:	4b1d      	ldr	r3, [pc, #116]	; (40266c <configure_mcan0+0x124>)
  4025f6:	4798      	blx	r3
	irq_register_handler(MCAN0_INT1_IRQn, 2);
  4025f8:	2024      	movs	r0, #36	; 0x24
  4025fa:	4b1a      	ldr	r3, [pc, #104]	; (402664 <configure_mcan0+0x11c>)
  4025fc:	4798      	blx	r3
  4025fe:	2102      	movs	r1, #2
  402600:	2024      	movs	r0, #36	; 0x24
  402602:	4b19      	ldr	r3, [pc, #100]	; (402668 <configure_mcan0+0x120>)
  402604:	4798      	blx	r3
  402606:	2024      	movs	r0, #36	; 0x24
  402608:	4b18      	ldr	r3, [pc, #96]	; (40266c <configure_mcan0+0x124>)
  40260a:	4798      	blx	r3
	
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan0_instance);
  40260c:	480b      	ldr	r0, [pc, #44]	; (40263c <configure_mcan0+0xf4>)
  40260e:	4b18      	ldr	r3, [pc, #96]	; (402670 <configure_mcan0+0x128>)
  402610:	4798      	blx	r3

    mcan_start(&mcan0_instance);
  402612:	480a      	ldr	r0, [pc, #40]	; (40263c <configure_mcan0+0xf4>)
  402614:	4b17      	ldr	r3, [pc, #92]	; (402674 <configure_mcan0+0x12c>)
  402616:	4798      	blx	r3
}
  402618:	bf00      	nop
  40261a:	3720      	adds	r7, #32
  40261c:	46bd      	mov	sp, r7
  40261e:	bd80      	pop	{r7, pc}
  402620:	2040138c 	.word	0x2040138c
  402624:	20401374 	.word	0x20401374
  402628:	20401340 	.word	0x20401340
  40262c:	00401edd 	.word	0x00401edd
  402630:	20401358 	.word	0x20401358
  402634:	004021b9 	.word	0x004021b9
  402638:	40030000 	.word	0x40030000
  40263c:	2040132c 	.word	0x2040132c
  402640:	00400d55 	.word	0x00400d55
  402644:	204012b4 	.word	0x204012b4
  402648:	00401601 	.word	0x00401601
  40264c:	00401759 	.word	0x00401759
  402650:	004016d9 	.word	0x004016d9
  402654:	00401731 	.word	0x00401731
  402658:	6208fe11 	.word	0x6208fe11
  40265c:	00402429 	.word	0x00402429
  402660:	0040244f 	.word	0x0040244f
  402664:	00402129 	.word	0x00402129
  402668:	00402165 	.word	0x00402165
  40266c:	004020ed 	.word	0x004020ed
  402670:	004024b1 	.word	0x004024b1
  402674:	00400dd5 	.word	0x00400dd5

00402678 <configure_mcan1>:

void configure_mcan1(void)
{	/**/
  402678:	b580      	push	{r7, lr}
  40267a:	b088      	sub	sp, #32
  40267c:	af00      	add	r7, sp, #0
	mcan1_standard_receive_index = 0;
  40267e:	4b35      	ldr	r3, [pc, #212]	; (402754 <configure_mcan1+0xdc>)
  402680:	2200      	movs	r2, #0
  402682:	601a      	str	r2, [r3, #0]
	mcan1_extended_receive_index = 0;
  402684:	4b34      	ldr	r3, [pc, #208]	; (402758 <configure_mcan1+0xe0>)
  402686:	2200      	movs	r2, #0
  402688:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_rx, CAN_RX_BUFFER_SIZE, sizeof(mcan_timestamped_rx_message_t));
  40268a:	2220      	movs	r2, #32
  40268c:	2140      	movs	r1, #64	; 0x40
  40268e:	4833      	ldr	r0, [pc, #204]	; (40275c <configure_mcan1+0xe4>)
  402690:	4b33      	ldr	r3, [pc, #204]	; (402760 <configure_mcan1+0xe8>)
  402692:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_tx, CAN_TX_BUFFER_SIZE, sizeof(mcan_tx_message_t));
  402694:	2214      	movs	r2, #20
  402696:	2140      	movs	r1, #64	; 0x40
  402698:	4832      	ldr	r0, [pc, #200]	; (402764 <configure_mcan1+0xec>)
  40269a:	4b31      	ldr	r3, [pc, #196]	; (402760 <configure_mcan1+0xe8>)
  40269c:	4798      	blx	r3

	mcan1_buffer.adding_in_tx_buffer = false;
  40269e:	4b2f      	ldr	r3, [pc, #188]	; (40275c <configure_mcan1+0xe4>)
  4026a0:	2200      	movs	r2, #0
  4026a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan1_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  4026a6:	4b2d      	ldr	r3, [pc, #180]	; (40275c <configure_mcan1+0xe4>)
  4026a8:	2200      	movs	r2, #0
  4026aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan1_buffer.buffer_being_emptied_by_interruption = false;
  4026ae:	4b2b      	ldr	r3, [pc, #172]	; (40275c <configure_mcan1+0xe4>)
  4026b0:	2200      	movs	r2, #0
  4026b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  4026b6:	463b      	mov	r3, r7
  4026b8:	4618      	mov	r0, r3
  4026ba:	4b2b      	ldr	r3, [pc, #172]	; (402768 <configure_mcan1+0xf0>)
  4026bc:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  4026be:	2302      	movs	r3, #2
  4026c0:	743b      	strb	r3, [r7, #16]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  4026c2:	2302      	movs	r3, #2
  4026c4:	747b      	strb	r3, [r7, #17]
	config_mcan.tx_queue_mode = false;
  4026c6:	2300      	movs	r3, #0
  4026c8:	773b      	strb	r3, [r7, #28]

	mcan_init(&mcan1_instance, MCAN1, &config_mcan);
  4026ca:	463b      	mov	r3, r7
  4026cc:	461a      	mov	r2, r3
  4026ce:	4927      	ldr	r1, [pc, #156]	; (40276c <configure_mcan1+0xf4>)
  4026d0:	4827      	ldr	r0, [pc, #156]	; (402770 <configure_mcan1+0xf8>)
  4026d2:	4b28      	ldr	r3, [pc, #160]	; (402774 <configure_mcan1+0xfc>)
  4026d4:	4798      	blx	r3
	
	if(!has_UPLL_been_set)
  4026d6:	4b28      	ldr	r3, [pc, #160]	; (402778 <configure_mcan1+0x100>)
  4026d8:	781b      	ldrb	r3, [r3, #0]
  4026da:	2b00      	cmp	r3, #0
  4026dc:	d10e      	bne.n	4026fc <configure_mcan1+0x84>
	{
		//Enabling the upll clock 
		//NEED TO HAVE THE RIGHT conf_mcan.h !
		pmc_enable_upll_clock();
  4026de:	4b27      	ldr	r3, [pc, #156]	; (40277c <configure_mcan1+0x104>)
  4026e0:	4798      	blx	r3
		// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
		//It is recomendedd in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
		pmc_disable_pck(PMC_PCK_5);
  4026e2:	2005      	movs	r0, #5
  4026e4:	4b26      	ldr	r3, [pc, #152]	; (402780 <configure_mcan1+0x108>)
  4026e6:	4798      	blx	r3
		//deviding uppl by 6 to get a 80 Mhz signal which is again devided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
		pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  4026e8:	2150      	movs	r1, #80	; 0x50
  4026ea:	2005      	movs	r0, #5
  4026ec:	4b25      	ldr	r3, [pc, #148]	; (402784 <configure_mcan1+0x10c>)
  4026ee:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_5);
  4026f0:	2005      	movs	r0, #5
  4026f2:	4b25      	ldr	r3, [pc, #148]	; (402788 <configure_mcan1+0x110>)
  4026f4:	4798      	blx	r3

		has_UPLL_been_set = 1;
  4026f6:	4b20      	ldr	r3, [pc, #128]	; (402778 <configure_mcan1+0x100>)
  4026f8:	2201      	movs	r2, #1
  4026fa:	701a      	strb	r2, [r3, #0]
	}	

	//chosing what interruption to activate
	mcan_enable_interrupt(&mcan1_instance,
  4026fc:	4923      	ldr	r1, [pc, #140]	; (40278c <configure_mcan1+0x114>)
  4026fe:	481c      	ldr	r0, [pc, #112]	; (402770 <configure_mcan1+0xf8>)
  402700:	4b23      	ldr	r3, [pc, #140]	; (402790 <configure_mcan1+0x118>)
  402702:	4798      	blx	r3
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	
	//TODO understand why I have put this line.
	mcan_disable_interrupt(&mcan1_instance, MCAN_TIMESTAMP_WRAPAROUND);
  402704:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402708:	4819      	ldr	r0, [pc, #100]	; (402770 <configure_mcan1+0xf8>)
  40270a:	4b22      	ldr	r3, [pc, #136]	; (402794 <configure_mcan1+0x11c>)
  40270c:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan1_instance.hw->MCAN_ILS = 0x0000FF00ul;
  40270e:	4b18      	ldr	r3, [pc, #96]	; (402770 <configure_mcan1+0xf8>)
  402710:	681b      	ldr	r3, [r3, #0]
  402712:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  402716:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	irq_register_handler(MCAN1_INT0_IRQn, 1);
  402718:	2025      	movs	r0, #37	; 0x25
  40271a:	4b1f      	ldr	r3, [pc, #124]	; (402798 <configure_mcan1+0x120>)
  40271c:	4798      	blx	r3
  40271e:	2101      	movs	r1, #1
  402720:	2025      	movs	r0, #37	; 0x25
  402722:	4b1e      	ldr	r3, [pc, #120]	; (40279c <configure_mcan1+0x124>)
  402724:	4798      	blx	r3
  402726:	2025      	movs	r0, #37	; 0x25
  402728:	4b1d      	ldr	r3, [pc, #116]	; (4027a0 <configure_mcan1+0x128>)
  40272a:	4798      	blx	r3
	irq_register_handler(MCAN1_INT1_IRQn, 2);
  40272c:	2026      	movs	r0, #38	; 0x26
  40272e:	4b1a      	ldr	r3, [pc, #104]	; (402798 <configure_mcan1+0x120>)
  402730:	4798      	blx	r3
  402732:	2102      	movs	r1, #2
  402734:	2026      	movs	r0, #38	; 0x26
  402736:	4b19      	ldr	r3, [pc, #100]	; (40279c <configure_mcan1+0x124>)
  402738:	4798      	blx	r3
  40273a:	2026      	movs	r0, #38	; 0x26
  40273c:	4b18      	ldr	r3, [pc, #96]	; (4027a0 <configure_mcan1+0x128>)
  40273e:	4798      	blx	r3
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan1_instance);
  402740:	480b      	ldr	r0, [pc, #44]	; (402770 <configure_mcan1+0xf8>)
  402742:	4b18      	ldr	r3, [pc, #96]	; (4027a4 <configure_mcan1+0x12c>)
  402744:	4798      	blx	r3

    mcan_start(&mcan1_instance);
  402746:	480a      	ldr	r0, [pc, #40]	; (402770 <configure_mcan1+0xf8>)
  402748:	4b17      	ldr	r3, [pc, #92]	; (4027a8 <configure_mcan1+0x130>)
  40274a:	4798      	blx	r3
}
  40274c:	bf00      	nop
  40274e:	3720      	adds	r7, #32
  402750:	46bd      	mov	sp, r7
  402752:	bd80      	pop	{r7, pc}
  402754:	20401388 	.word	0x20401388
  402758:	20401308 	.word	0x20401308
  40275c:	204013b4 	.word	0x204013b4
  402760:	00401edd 	.word	0x00401edd
  402764:	204013cc 	.word	0x204013cc
  402768:	004021b9 	.word	0x004021b9
  40276c:	40034000 	.word	0x40034000
  402770:	204013a0 	.word	0x204013a0
  402774:	00400d55 	.word	0x00400d55
  402778:	204012b4 	.word	0x204012b4
  40277c:	00401601 	.word	0x00401601
  402780:	00401759 	.word	0x00401759
  402784:	004016d9 	.word	0x004016d9
  402788:	00401731 	.word	0x00401731
  40278c:	6208fe11 	.word	0x6208fe11
  402790:	00402429 	.word	0x00402429
  402794:	0040244f 	.word	0x0040244f
  402798:	00402129 	.word	0x00402129
  40279c:	00402165 	.word	0x00402165
  4027a0:	004020ed 	.word	0x004020ed
  4027a4:	004024b1 	.word	0x004024b1
  4027a8:	00400dd5 	.word	0x00400dd5

004027ac <_mcan0_push_message>:
	 
}


void _mcan0_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  4027ac:	b5b0      	push	{r4, r5, r7, lr}
  4027ae:	b094      	sub	sp, #80	; 0x50
  4027b0:	af00      	add	r7, sp, #0
  4027b2:	60f8      	str	r0, [r7, #12]
  4027b4:	60b9      	str	r1, [r7, #8]
  4027b6:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  4027b8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  4027bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  4027c0:	2300      	movs	r3, #0
  4027c2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  4027c4:	7bfb      	ldrb	r3, [r7, #15]
  4027c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4027ca:	b2da      	uxtb	r2, r3
  4027cc:	7d3b      	ldrb	r3, [r7, #20]
  4027ce:	f362 13c7 	bfi	r3, r2, #7, #1
  4027d2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  4027d4:	7bfb      	ldrb	r3, [r7, #15]
  4027d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4027da:	b2da      	uxtb	r2, r3
  4027dc:	7d3b      	ldrb	r3, [r7, #20]
  4027de:	f362 1386 	bfi	r3, r2, #6, #1
  4027e2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  4027e4:	7bfb      	ldrb	r3, [r7, #15]
  4027e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4027ea:	b2da      	uxtb	r2, r3
  4027ec:	7d3b      	ldrb	r3, [r7, #20]
  4027ee:	f362 1345 	bfi	r3, r2, #5, #1
  4027f2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  4027f4:	7abb      	ldrb	r3, [r7, #10]
  4027f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4027fa:	b2da      	uxtb	r2, r3
  4027fc:	7d3b      	ldrb	r3, [r7, #20]
  4027fe:	f362 1304 	bfi	r3, r2, #4, #1
  402802:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  402804:	7abb      	ldrb	r3, [r7, #10]
  402806:	f3c3 1300 	ubfx	r3, r3, #4, #1
  40280a:	b2da      	uxtb	r2, r3
  40280c:	7d3b      	ldrb	r3, [r7, #20]
  40280e:	f362 03c3 	bfi	r3, r2, #3, #1
  402812:	753b      	strb	r3, [r7, #20]

	if(message.message_info.bit.is_extended)
  402814:	7d3b      	ldrb	r3, [r7, #20]
  402816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40281a:	b2db      	uxtb	r3, r3
  40281c:	2b00      	cmp	r3, #0
  40281e:	d004      	beq.n	40282a <_mcan0_push_message+0x7e>
	{
		message.id = r0.bit.ID;
  402820:	68fb      	ldr	r3, [r7, #12]
  402822:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402826:	61bb      	str	r3, [r7, #24]
  402828:	e006      	b.n	402838 <_mcan0_push_message+0x8c>
	}
	else
	{
		message.id = GET_BITS(r0.bit.ID, 18, 29);
  40282a:	68fb      	ldr	r3, [r7, #12]
  40282c:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402830:	149b      	asrs	r3, r3, #18
  402832:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402836:	61bb      	str	r3, [r7, #24]
	}
	message.dlc = r1.bit.DLC;
  402838:	7abb      	ldrb	r3, [r7, #10]
  40283a:	f3c3 0303 	ubfx	r3, r3, #0, #4
  40283e:	b2db      	uxtb	r3, r3
  402840:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  402842:	2300      	movs	r3, #0
  402844:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402848:	e010      	b.n	40286c <_mcan0_push_message+0xc0>
	{
		message.data[i] = data[i];
  40284a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40284e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402852:	6879      	ldr	r1, [r7, #4]
  402854:	440a      	add	r2, r1
  402856:	7812      	ldrb	r2, [r2, #0]
  402858:	f107 0150 	add.w	r1, r7, #80	; 0x50
  40285c:	440b      	add	r3, r1
  40285e:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  402862:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402866:	3301      	adds	r3, #1
  402868:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  40286c:	7f3b      	ldrb	r3, [r7, #28]
  40286e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402872:	429a      	cmp	r2, r3
  402874:	d3e9      	bcc.n	40284a <_mcan0_push_message+0x9e>
	}
	

	time_message.rx_message = message;
  402876:	f107 0430 	add.w	r4, r7, #48	; 0x30
  40287a:	f107 0514 	add.w	r5, r7, #20
  40287e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402882:	682b      	ldr	r3, [r5, #0]
  402884:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan0_buffer.buffer_rx, &time_message) != CB_SUCCESS)
  402886:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40288a:	4619      	mov	r1, r3
  40288c:	4803      	ldr	r0, [pc, #12]	; (40289c <_mcan0_push_message+0xf0>)
  40288e:	4b04      	ldr	r3, [pc, #16]	; (4028a0 <_mcan0_push_message+0xf4>)
  402890:	4798      	blx	r3
	{
		//TODO HANDLE ERROR 
	}
}
  402892:	bf00      	nop
  402894:	3750      	adds	r7, #80	; 0x50
  402896:	46bd      	mov	sp, r7
  402898:	bdb0      	pop	{r4, r5, r7, pc}
  40289a:	bf00      	nop
  40289c:	20401340 	.word	0x20401340
  4028a0:	00401fdd 	.word	0x00401fdd

004028a4 <_mcan1_push_message>:

void _mcan1_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  4028a4:	b5b0      	push	{r4, r5, r7, lr}
  4028a6:	b094      	sub	sp, #80	; 0x50
  4028a8:	af00      	add	r7, sp, #0
  4028aa:	60f8      	str	r0, [r7, #12]
  4028ac:	60b9      	str	r1, [r7, #8]
  4028ae:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  4028b0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  4028b4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  4028b8:	2300      	movs	r3, #0
  4028ba:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  4028bc:	7bfb      	ldrb	r3, [r7, #15]
  4028be:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4028c2:	b2da      	uxtb	r2, r3
  4028c4:	7d3b      	ldrb	r3, [r7, #20]
  4028c6:	f362 13c7 	bfi	r3, r2, #7, #1
  4028ca:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  4028cc:	7bfb      	ldrb	r3, [r7, #15]
  4028ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4028d2:	b2da      	uxtb	r2, r3
  4028d4:	7d3b      	ldrb	r3, [r7, #20]
  4028d6:	f362 1386 	bfi	r3, r2, #6, #1
  4028da:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  4028dc:	7bfb      	ldrb	r3, [r7, #15]
  4028de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4028e2:	b2da      	uxtb	r2, r3
  4028e4:	7d3b      	ldrb	r3, [r7, #20]
  4028e6:	f362 1345 	bfi	r3, r2, #5, #1
  4028ea:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  4028ec:	7abb      	ldrb	r3, [r7, #10]
  4028ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4028f2:	b2da      	uxtb	r2, r3
  4028f4:	7d3b      	ldrb	r3, [r7, #20]
  4028f6:	f362 1304 	bfi	r3, r2, #4, #1
  4028fa:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  4028fc:	7abb      	ldrb	r3, [r7, #10]
  4028fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402902:	b2da      	uxtb	r2, r3
  402904:	7d3b      	ldrb	r3, [r7, #20]
  402906:	f362 03c3 	bfi	r3, r2, #3, #1
  40290a:	753b      	strb	r3, [r7, #20]

	
	message.id = r0.bit.ID;
  40290c:	68fb      	ldr	r3, [r7, #12]
  40290e:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402912:	61bb      	str	r3, [r7, #24]
	message.dlc = r1.bit.DLC;
  402914:	7abb      	ldrb	r3, [r7, #10]
  402916:	f3c3 0303 	ubfx	r3, r3, #0, #4
  40291a:	b2db      	uxtb	r3, r3
  40291c:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  40291e:	2300      	movs	r3, #0
  402920:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402924:	e010      	b.n	402948 <_mcan1_push_message+0xa4>
	{
		message.data[i] = data[i];
  402926:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40292a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  40292e:	6879      	ldr	r1, [r7, #4]
  402930:	440a      	add	r2, r1
  402932:	7812      	ldrb	r2, [r2, #0]
  402934:	f107 0150 	add.w	r1, r7, #80	; 0x50
  402938:	440b      	add	r3, r1
  40293a:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  40293e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402942:	3301      	adds	r3, #1
  402944:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402948:	7f3b      	ldrb	r3, [r7, #28]
  40294a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  40294e:	429a      	cmp	r2, r3
  402950:	d3e9      	bcc.n	402926 <_mcan1_push_message+0x82>
	}
	

	time_message.rx_message = message;
  402952:	f107 0430 	add.w	r4, r7, #48	; 0x30
  402956:	f107 0514 	add.w	r5, r7, #20
  40295a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40295c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40295e:	682b      	ldr	r3, [r5, #0]
  402960:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan1_buffer.buffer_rx, &time_message) != CB_SUCCESS)
  402962:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402966:	4619      	mov	r1, r3
  402968:	4803      	ldr	r0, [pc, #12]	; (402978 <_mcan1_push_message+0xd4>)
  40296a:	4b04      	ldr	r3, [pc, #16]	; (40297c <_mcan1_push_message+0xd8>)
  40296c:	4798      	blx	r3
	{
		//HANDLE ERROR TODO
	}
}
  40296e:	bf00      	nop
  402970:	3750      	adds	r7, #80	; 0x50
  402972:	46bd      	mov	sp, r7
  402974:	bdb0      	pop	{r4, r5, r7, pc}
  402976:	bf00      	nop
  402978:	204013b4 	.word	0x204013b4
  40297c:	00401fdd 	.word	0x00401fdd

00402980 <MCAN0_INT0_Handler>:

void MCAN0_INT0_Handler(void)
{
  402980:	b590      	push	{r4, r7, lr}
  402982:	b087      	sub	sp, #28
  402984:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan0_instance);
  402986:	4868      	ldr	r0, [pc, #416]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402988:	4b68      	ldr	r3, [pc, #416]	; (402b2c <MCAN0_INT0_Handler+0x1ac>)
  40298a:	4798      	blx	r3
  40298c:	4603      	mov	r3, r0
  40298e:	60fb      	str	r3, [r7, #12]
	
	if (status & MCAN_RX_BUFFER_NEW_MESSAGE)
  402990:	68fb      	ldr	r3, [r7, #12]
  402992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402996:	2b00      	cmp	r3, #0
  402998:	d031      	beq.n	4029fe <MCAN0_INT0_Handler+0x7e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  40299a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40299e:	4862      	ldr	r0, [pc, #392]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  4029a0:	4b63      	ldr	r3, [pc, #396]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  4029a2:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Message stored to Dedicated Rx Buffer Interrupt\r\n");
  4029a4:	4863      	ldr	r0, [pc, #396]	; (402b34 <MCAN0_INT0_Handler+0x1b4>)
  4029a6:	4b64      	ldr	r3, [pc, #400]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  4029a8:	4798      	blx	r3
		#endif

		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  4029aa:	2300      	movs	r3, #0
  4029ac:	60bb      	str	r3, [r7, #8]
  4029ae:	e023      	b.n	4029f8 <MCAN0_INT0_Handler+0x78>
		{
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  4029b0:	68bb      	ldr	r3, [r7, #8]
  4029b2:	4619      	mov	r1, r3
  4029b4:	485c      	ldr	r0, [pc, #368]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  4029b6:	4b61      	ldr	r3, [pc, #388]	; (402b3c <MCAN0_INT0_Handler+0x1bc>)
  4029b8:	4798      	blx	r3
  4029ba:	4603      	mov	r3, r0
  4029bc:	2b00      	cmp	r3, #0
  4029be:	d018      	beq.n	4029f2 <MCAN0_INT0_Handler+0x72>
			{
				rx_buffer_index = i;
  4029c0:	68bb      	ldr	r3, [r7, #8]
  4029c2:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan0_instance, i);
  4029c4:	68bb      	ldr	r3, [r7, #8]
  4029c6:	4619      	mov	r1, r3
  4029c8:	4857      	ldr	r0, [pc, #348]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  4029ca:	4b5d      	ldr	r3, [pc, #372]	; (402b40 <MCAN0_INT0_Handler+0x1c0>)
  4029cc:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan0_instance, &mcan0_rx_element_buffer, rx_buffer_index);
  4029ce:	687b      	ldr	r3, [r7, #4]
  4029d0:	461a      	mov	r2, r3
  4029d2:	495c      	ldr	r1, [pc, #368]	; (402b44 <MCAN0_INT0_Handler+0x1c4>)
  4029d4:	4854      	ldr	r0, [pc, #336]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  4029d6:	4b5c      	ldr	r3, [pc, #368]	; (402b48 <MCAN0_INT0_Handler+0x1c8>)
  4029d8:	4798      	blx	r3
				
				_mcan0_push_message(mcan0_rx_element_buffer.R0, mcan0_rx_element_buffer.R1, mcan0_rx_element_buffer.data, unix_timestamp_ms);
  4029da:	4b5c      	ldr	r3, [pc, #368]	; (402b4c <MCAN0_INT0_Handler+0x1cc>)
  4029dc:	e9d3 3400 	ldrd	r3, r4, [r3]
  4029e0:	4958      	ldr	r1, [pc, #352]	; (402b44 <MCAN0_INT0_Handler+0x1c4>)
  4029e2:	4858      	ldr	r0, [pc, #352]	; (402b44 <MCAN0_INT0_Handler+0x1c4>)
  4029e4:	e9cd 3400 	strd	r3, r4, [sp]
  4029e8:	4a59      	ldr	r2, [pc, #356]	; (402b50 <MCAN0_INT0_Handler+0x1d0>)
  4029ea:	6849      	ldr	r1, [r1, #4]
  4029ec:	6800      	ldr	r0, [r0, #0]
  4029ee:	4b59      	ldr	r3, [pc, #356]	; (402b54 <MCAN0_INT0_Handler+0x1d4>)
  4029f0:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  4029f2:	68bb      	ldr	r3, [r7, #8]
  4029f4:	3301      	adds	r3, #1
  4029f6:	60bb      	str	r3, [r7, #8]
  4029f8:	68bb      	ldr	r3, [r7, #8]
  4029fa:	2b0f      	cmp	r3, #15
  4029fc:	d9d8      	bls.n	4029b0 <MCAN0_INT0_Handler+0x30>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE)
  4029fe:	68fb      	ldr	r3, [r7, #12]
  402a00:	f003 0301 	and.w	r3, r3, #1
  402a04:	2b00      	cmp	r3, #0
  402a06:	d02c      	beq.n	402a62 <MCAN0_INT0_Handler+0xe2>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402a08:	2101      	movs	r1, #1
  402a0a:	4847      	ldr	r0, [pc, #284]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a0c:	4b48      	ldr	r3, [pc, #288]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  402a0e:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 0 New Message Interrupt\r\n");
  402a10:	4851      	ldr	r0, [pc, #324]	; (402b58 <MCAN0_INT0_Handler+0x1d8>)
  402a12:	4b49      	ldr	r3, [pc, #292]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  402a14:	4798      	blx	r3
		#endif

		mcan_get_rx_fifo_0_element(&mcan0_instance, &mcan0_rx_element_fifo_0, mcan0_standard_receive_index);
  402a16:	4b51      	ldr	r3, [pc, #324]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a18:	681b      	ldr	r3, [r3, #0]
  402a1a:	461a      	mov	r2, r3
  402a1c:	4950      	ldr	r1, [pc, #320]	; (402b60 <MCAN0_INT0_Handler+0x1e0>)
  402a1e:	4842      	ldr	r0, [pc, #264]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a20:	4b50      	ldr	r3, [pc, #320]	; (402b64 <MCAN0_INT0_Handler+0x1e4>)
  402a22:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 0, mcan0_standard_receive_index);
  402a24:	4b4d      	ldr	r3, [pc, #308]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	461a      	mov	r2, r3
  402a2a:	2100      	movs	r1, #0
  402a2c:	483e      	ldr	r0, [pc, #248]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a2e:	4b4e      	ldr	r3, [pc, #312]	; (402b68 <MCAN0_INT0_Handler+0x1e8>)
  402a30:	4798      	blx	r3

		mcan0_standard_receive_index++;
  402a32:	4b4a      	ldr	r3, [pc, #296]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a34:	681b      	ldr	r3, [r3, #0]
  402a36:	3301      	adds	r3, #1
  402a38:	4a48      	ldr	r2, [pc, #288]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a3a:	6013      	str	r3, [r2, #0]

		if (mcan0_standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM)
  402a3c:	4b47      	ldr	r3, [pc, #284]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a3e:	681b      	ldr	r3, [r3, #0]
  402a40:	2b10      	cmp	r3, #16
  402a42:	d102      	bne.n	402a4a <MCAN0_INT0_Handler+0xca>
		{
			mcan0_standard_receive_index = 0;
  402a44:	4b45      	ldr	r3, [pc, #276]	; (402b5c <MCAN0_INT0_Handler+0x1dc>)
  402a46:	2200      	movs	r2, #0
  402a48:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_0.R0, mcan0_rx_element_fifo_0.R1, mcan0_rx_element_fifo_0.data, unix_timestamp_ms);
  402a4a:	4b40      	ldr	r3, [pc, #256]	; (402b4c <MCAN0_INT0_Handler+0x1cc>)
  402a4c:	e9d3 3400 	ldrd	r3, r4, [r3]
  402a50:	4943      	ldr	r1, [pc, #268]	; (402b60 <MCAN0_INT0_Handler+0x1e0>)
  402a52:	4843      	ldr	r0, [pc, #268]	; (402b60 <MCAN0_INT0_Handler+0x1e0>)
  402a54:	e9cd 3400 	strd	r3, r4, [sp]
  402a58:	4a44      	ldr	r2, [pc, #272]	; (402b6c <MCAN0_INT0_Handler+0x1ec>)
  402a5a:	6849      	ldr	r1, [r1, #4]
  402a5c:	6800      	ldr	r0, [r0, #0]
  402a5e:	4b3d      	ldr	r3, [pc, #244]	; (402b54 <MCAN0_INT0_Handler+0x1d4>)
  402a60:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  402a62:	68fb      	ldr	r3, [r7, #12]
  402a64:	f003 0310 	and.w	r3, r3, #16
  402a68:	2b00      	cmp	r3, #0
  402a6a:	d02c      	beq.n	402ac6 <MCAN0_INT0_Handler+0x146>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  402a6c:	2110      	movs	r1, #16
  402a6e:	482e      	ldr	r0, [pc, #184]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a70:	4b2f      	ldr	r3, [pc, #188]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  402a72:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 1 New Message Interrupt\r\n");
  402a74:	483e      	ldr	r0, [pc, #248]	; (402b70 <MCAN0_INT0_Handler+0x1f0>)
  402a76:	4b30      	ldr	r3, [pc, #192]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  402a78:	4798      	blx	r3
		#endif

		mcan_get_rx_fifo_1_element(&mcan0_instance, &mcan0_rx_element_fifo_1, mcan0_extended_receive_index);
  402a7a:	4b3e      	ldr	r3, [pc, #248]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402a7c:	681b      	ldr	r3, [r3, #0]
  402a7e:	461a      	mov	r2, r3
  402a80:	493d      	ldr	r1, [pc, #244]	; (402b78 <MCAN0_INT0_Handler+0x1f8>)
  402a82:	4829      	ldr	r0, [pc, #164]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a84:	4b3d      	ldr	r3, [pc, #244]	; (402b7c <MCAN0_INT0_Handler+0x1fc>)
  402a86:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 1, mcan0_extended_receive_index);
  402a88:	4b3a      	ldr	r3, [pc, #232]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402a8a:	681b      	ldr	r3, [r3, #0]
  402a8c:	461a      	mov	r2, r3
  402a8e:	2101      	movs	r1, #1
  402a90:	4825      	ldr	r0, [pc, #148]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402a92:	4b35      	ldr	r3, [pc, #212]	; (402b68 <MCAN0_INT0_Handler+0x1e8>)
  402a94:	4798      	blx	r3

		mcan0_extended_receive_index++;
  402a96:	4b37      	ldr	r3, [pc, #220]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402a98:	681b      	ldr	r3, [r3, #0]
  402a9a:	3301      	adds	r3, #1
  402a9c:	4a35      	ldr	r2, [pc, #212]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402a9e:	6013      	str	r3, [r2, #0]

		if (mcan0_extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) 
  402aa0:	4b34      	ldr	r3, [pc, #208]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402aa2:	681b      	ldr	r3, [r3, #0]
  402aa4:	2b10      	cmp	r3, #16
  402aa6:	d102      	bne.n	402aae <MCAN0_INT0_Handler+0x12e>
		{
			mcan0_extended_receive_index = 0;
  402aa8:	4b32      	ldr	r3, [pc, #200]	; (402b74 <MCAN0_INT0_Handler+0x1f4>)
  402aaa:	2200      	movs	r2, #0
  402aac:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_1.R0, mcan0_rx_element_fifo_1.R1, mcan0_rx_element_fifo_1.data, unix_timestamp_ms);
  402aae:	4b27      	ldr	r3, [pc, #156]	; (402b4c <MCAN0_INT0_Handler+0x1cc>)
  402ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
  402ab4:	4930      	ldr	r1, [pc, #192]	; (402b78 <MCAN0_INT0_Handler+0x1f8>)
  402ab6:	4830      	ldr	r0, [pc, #192]	; (402b78 <MCAN0_INT0_Handler+0x1f8>)
  402ab8:	e9cd 3400 	strd	r3, r4, [sp]
  402abc:	4a30      	ldr	r2, [pc, #192]	; (402b80 <MCAN0_INT0_Handler+0x200>)
  402abe:	6849      	ldr	r1, [r1, #4]
  402ac0:	6800      	ldr	r0, [r0, #0]
  402ac2:	4b24      	ldr	r3, [pc, #144]	; (402b54 <MCAN0_INT0_Handler+0x1d4>)
  402ac4:	4798      	blx	r3
	}
	
	//Usually occures if can tx pin is not connected to transciever or to a tranciever not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  402ac6:	68fb      	ldr	r3, [r7, #12]
  402ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  402acc:	2b00      	cmp	r3, #0
  402ace:	d00c      	beq.n	402aea <MCAN0_INT0_Handler+0x16a>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_BUS_OFF);
  402ad0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402ad4:	4814      	ldr	r0, [pc, #80]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402ad6:	4b16      	ldr	r3, [pc, #88]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  402ad8:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\r CAN0 Bus Off Status \r\n");
  402ada:	482a      	ldr	r0, [pc, #168]	; (402b84 <MCAN0_INT0_Handler+0x204>)
  402adc:	4b16      	ldr	r3, [pc, #88]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  402ade:	4798      	blx	r3
		#endif
		
		mcan_stop(&mcan0_instance);
  402ae0:	4811      	ldr	r0, [pc, #68]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402ae2:	4b29      	ldr	r3, [pc, #164]	; (402b88 <MCAN0_INT0_Handler+0x208>)
  402ae4:	4798      	blx	r3
		configure_mcan0();
  402ae6:	4b29      	ldr	r3, [pc, #164]	; (402b8c <MCAN0_INT0_Handler+0x20c>)
  402ae8:	4798      	blx	r3
		
	}

	//Usually occures when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  402aea:	68fb      	ldr	r3, [r7, #12]
  402aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  402af0:	2b00      	cmp	r3, #0
  402af2:	d007      	beq.n	402b04 <MCAN0_INT0_Handler+0x184>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_ACKNOWLEDGE_ERROR);
  402af4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402af8:	480b      	ldr	r0, [pc, #44]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402afa:	4b0d      	ldr	r3, [pc, #52]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  402afc:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\rCAN0 Acknowledge Error \r\n");
  402afe:	4824      	ldr	r0, [pc, #144]	; (402b90 <MCAN0_INT0_Handler+0x210>)
  402b00:	4b0d      	ldr	r3, [pc, #52]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  402b02:	4798      	blx	r3
		#endif
	}

	//Usually occures if can rx pin is not connected to transciever or recieving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  402b04:	68fb      	ldr	r3, [r7, #12]
  402b06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402b0a:	2b00      	cmp	r3, #0
  402b0c:	d007      	beq.n	402b1e <MCAN0_INT0_Handler+0x19e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_FORMAT_ERROR);
  402b0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402b12:	4805      	ldr	r0, [pc, #20]	; (402b28 <MCAN0_INT0_Handler+0x1a8>)
  402b14:	4b06      	ldr	r3, [pc, #24]	; (402b30 <MCAN0_INT0_Handler+0x1b0>)
  402b16:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\rCAN0 Format Error \r\n");
  402b18:	481e      	ldr	r0, [pc, #120]	; (402b94 <MCAN0_INT0_Handler+0x214>)
  402b1a:	4b07      	ldr	r3, [pc, #28]	; (402b38 <MCAN0_INT0_Handler+0x1b8>)
  402b1c:	4798      	blx	r3
		#endif
	}
}
  402b1e:	bf00      	nop
  402b20:	3714      	adds	r7, #20
  402b22:	46bd      	mov	sp, r7
  402b24:	bd90      	pop	{r4, r7, pc}
  402b26:	bf00      	nop
  402b28:	2040132c 	.word	0x2040132c
  402b2c:	00402477 	.word	0x00402477
  402b30:	00402491 	.word	0x00402491
  402b34:	00406908 	.word	0x00406908
  402b38:	004039d5 	.word	0x004039d5
  402b3c:	00402267 	.word	0x00402267
  402b40:	004022c3 	.word	0x004022c3
  402b44:	20401390 	.word	0x20401390
  402b48:	00400f19 	.word	0x00400f19
  402b4c:	204012b8 	.word	0x204012b8
  402b50:	20401398 	.word	0x20401398
  402b54:	004027ad 	.word	0x004027ad
  402b58:	00406940 	.word	0x00406940
  402b5c:	2040138c 	.word	0x2040138c
  402b60:	20401378 	.word	0x20401378
  402b64:	00400f85 	.word	0x00400f85
  402b68:	00402307 	.word	0x00402307
  402b6c:	20401380 	.word	0x20401380
  402b70:	00406968 	.word	0x00406968
  402b74:	20401374 	.word	0x20401374
  402b78:	20401330 	.word	0x20401330
  402b7c:	00400ff1 	.word	0x00400ff1
  402b80:	20401338 	.word	0x20401338
  402b84:	00406990 	.word	0x00406990
  402b88:	00400e09 	.word	0x00400e09
  402b8c:	00402549 	.word	0x00402549
  402b90:	004069ac 	.word	0x004069ac
  402b94:	004069c8 	.word	0x004069c8

00402b98 <MCAN0_INT1_Handler>:

void MCAN0_INT1_Handler(void)
{
  402b98:	b580      	push	{r7, lr}
  402b9a:	b088      	sub	sp, #32
  402b9c:	af00      	add	r7, sp, #0
	volatile uint32_t status, i;
	status = mcan_read_interrupt_status(&mcan0_instance);
  402b9e:	4840      	ldr	r0, [pc, #256]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402ba0:	4b40      	ldr	r3, [pc, #256]	; (402ca4 <MCAN0_INT1_Handler+0x10c>)
  402ba2:	4798      	blx	r3
  402ba4:	4603      	mov	r3, r0
  402ba6:	617b      	str	r3, [r7, #20]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  402ba8:	697b      	ldr	r3, [r7, #20]
  402baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402bae:	2b00      	cmp	r3, #0
  402bb0:	d029      	beq.n	402c06 <MCAN0_INT1_Handler+0x6e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TIMESTAMP_COMPLETE);
  402bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
  402bb6:	483a      	ldr	r0, [pc, #232]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402bb8:	4b3b      	ldr	r3, [pc, #236]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402bba:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Completed Interrupt\r\n");
		#endif
		if(!mcan0_buffer.adding_in_tx_buffer)
  402bbc:	4b3b      	ldr	r3, [pc, #236]	; (402cac <MCAN0_INT1_Handler+0x114>)
  402bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402bc2:	b2db      	uxtb	r3, r3
  402bc4:	2b00      	cmp	r3, #0
  402bc6:	d11a      	bne.n	402bfe <MCAN0_INT1_Handler+0x66>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx)>0)
  402bc8:	4839      	ldr	r0, [pc, #228]	; (402cb0 <MCAN0_INT1_Handler+0x118>)
  402bca:	4b3a      	ldr	r3, [pc, #232]	; (402cb4 <MCAN0_INT1_Handler+0x11c>)
  402bcc:	4798      	blx	r3
  402bce:	4603      	mov	r3, r0
  402bd0:	2b00      	cmp	r3, #0
  402bd2:	d00f      	beq.n	402bf4 <MCAN0_INT1_Handler+0x5c>
			{
				struct mcan_tx_element tx_elem;

				circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  402bd4:	463b      	mov	r3, r7
  402bd6:	4619      	mov	r1, r3
  402bd8:	4835      	ldr	r0, [pc, #212]	; (402cb0 <MCAN0_INT1_Handler+0x118>)
  402bda:	4b37      	ldr	r3, [pc, #220]	; (402cb8 <MCAN0_INT1_Handler+0x120>)
  402bdc:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN0_TX_BUFFER_NUM);
  402bde:	463b      	mov	r3, r7
  402be0:	2201      	movs	r2, #1
  402be2:	4619      	mov	r1, r3
  402be4:	482e      	ldr	r0, [pc, #184]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402be6:	4b35      	ldr	r3, [pc, #212]	; (402cbc <MCAN0_INT1_Handler+0x124>)
  402be8:	4798      	blx	r3
				mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN0_TX_BUFFER_NUM);
  402bea:	2102      	movs	r1, #2
  402bec:	482c      	ldr	r0, [pc, #176]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402bee:	4b34      	ldr	r3, [pc, #208]	; (402cc0 <MCAN0_INT1_Handler+0x128>)
  402bf0:	4798      	blx	r3
  402bf2:	e008      	b.n	402c06 <MCAN0_INT1_Handler+0x6e>
			}
			else
			{
				mcan0_buffer.buffer_being_emptied_by_interruption = false;
  402bf4:	4b2d      	ldr	r3, [pc, #180]	; (402cac <MCAN0_INT1_Handler+0x114>)
  402bf6:	2200      	movs	r2, #0
  402bf8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402bfc:	e003      	b.n	402c06 <MCAN0_INT1_Handler+0x6e>
			}
		}
		else mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = true;
  402bfe:	4b2b      	ldr	r3, [pc, #172]	; (402cac <MCAN0_INT1_Handler+0x114>)
  402c00:	2201      	movs	r2, #1
  402c02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  402c06:	697b      	ldr	r3, [r7, #20]
  402c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402c0c:	2b00      	cmp	r3, #0
  402c0e:	d004      	beq.n	402c1a <MCAN0_INT1_Handler+0x82>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_CANCELLATION_FINISH);
  402c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402c14:	4822      	ldr	r0, [pc, #136]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c16:	4b24      	ldr	r3, [pc, #144]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c18:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Cancellation Finished Interrupt \r\n");
		#endif
	}

	if (status & MCAN_TX_FIFO_EMPTY)
  402c1a:	697b      	ldr	r3, [r7, #20]
  402c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  402c20:	2b00      	cmp	r3, #0
  402c22:	d004      	beq.n	402c2e <MCAN0_INT1_Handler+0x96>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_FIFO_EMPTY);
  402c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402c28:	481d      	ldr	r0, [pc, #116]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c2a:	4b1f      	ldr	r3, [pc, #124]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c2c:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx FIFO Empty Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  402c2e:	697b      	ldr	r3, [r7, #20]
  402c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402c34:	2b00      	cmp	r3, #0
  402c36:	d011      	beq.n	402c5c <MCAN0_INT1_Handler+0xc4>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  402c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402c3c:	4818      	ldr	r0, [pc, #96]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c3e:	4b1a      	ldr	r3, [pc, #104]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c40:	4798      	blx	r3
		printf("CAN0 Tx Event FIFO New Entry Interrupt \r\n");
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan0_instance);
  402c42:	4817      	ldr	r0, [pc, #92]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c44:	4b1f      	ldr	r3, [pc, #124]	; (402cc4 <MCAN0_INT1_Handler+0x12c>)
  402c46:	4798      	blx	r3
  402c48:	61f8      	str	r0, [r7, #28]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  402c4a:	69fb      	ldr	r3, [r7, #28]
  402c4c:	0a1b      	lsrs	r3, r3, #8
  402c4e:	f003 031f 	and.w	r3, r3, #31
  402c52:	61bb      	str	r3, [r7, #24]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan0_instance, fifo_get_index);
  402c54:	69b9      	ldr	r1, [r7, #24]
  402c56:	4812      	ldr	r0, [pc, #72]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c58:	4b1b      	ldr	r3, [pc, #108]	; (402cc8 <MCAN0_INT1_Handler+0x130>)
  402c5a:	4798      	blx	r3
	}

	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  402c5c:	697b      	ldr	r3, [r7, #20]
  402c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402c62:	2b00      	cmp	r3, #0
  402c64:	d004      	beq.n	402c70 <MCAN0_INT1_Handler+0xd8>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  402c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402c6a:	480d      	ldr	r0, [pc, #52]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c6c:	4b0e      	ldr	r3, [pc, #56]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c6e:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Watermark Reached Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_FULL)
  402c70:	697b      	ldr	r3, [r7, #20]
  402c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402c76:	2b00      	cmp	r3, #0
  402c78:	d004      	beq.n	402c84 <MCAN0_INT1_Handler+0xec>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_FULL);
  402c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402c7e:	4808      	ldr	r0, [pc, #32]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c80:	4b09      	ldr	r3, [pc, #36]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c82:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Full Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  402c84:	697b      	ldr	r3, [r7, #20]
  402c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402c8a:	2b00      	cmp	r3, #0
  402c8c:	d004      	beq.n	402c98 <MCAN0_INT1_Handler+0x100>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  402c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  402c92:	4803      	ldr	r0, [pc, #12]	; (402ca0 <MCAN0_INT1_Handler+0x108>)
  402c94:	4b04      	ldr	r3, [pc, #16]	; (402ca8 <MCAN0_INT1_Handler+0x110>)
  402c96:	4798      	blx	r3

		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Element Lost Interrupt\r\n");
		#endif
	}
}
  402c98:	bf00      	nop
  402c9a:	3720      	adds	r7, #32
  402c9c:	46bd      	mov	sp, r7
  402c9e:	bd80      	pop	{r7, pc}
  402ca0:	2040132c 	.word	0x2040132c
  402ca4:	00402477 	.word	0x00402477
  402ca8:	00402491 	.word	0x00402491
  402cac:	20401340 	.word	0x20401340
  402cb0:	20401358 	.word	0x20401358
  402cb4:	00401f35 	.word	0x00401f35
  402cb8:	00402065 	.word	0x00402065
  402cbc:	0040105d 	.word	0x0040105d
  402cc0:	00402391 	.word	0x00402391
  402cc4:	004023c7 	.word	0x004023c7
  402cc8:	004023e3 	.word	0x004023e3

00402ccc <MCAN1_INT0_Handler>:

void MCAN1_INT0_Handler(void)
{
  402ccc:	b590      	push	{r4, r7, lr}
  402cce:	b087      	sub	sp, #28
  402cd0:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan1_instance);
  402cd2:	485f      	ldr	r0, [pc, #380]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402cd4:	4b5f      	ldr	r3, [pc, #380]	; (402e54 <MCAN1_INT0_Handler+0x188>)
  402cd6:	4798      	blx	r3
  402cd8:	4603      	mov	r3, r0
  402cda:	60fb      	str	r3, [r7, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) 
  402cdc:	68fb      	ldr	r3, [r7, #12]
  402cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402ce2:	2b00      	cmp	r3, #0
  402ce4:	d02e      	beq.n	402d44 <MCAN1_INT0_Handler+0x78>
	{	
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  402ce6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402cea:	4859      	ldr	r0, [pc, #356]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402cec:	4b5a      	ldr	r3, [pc, #360]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402cee:	4798      	blx	r3
		
		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Message stored to Dedicated Rx Buffer Interrupt\r\n");
		#endif

		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402cf0:	2300      	movs	r3, #0
  402cf2:	60bb      	str	r3, [r7, #8]
  402cf4:	e023      	b.n	402d3e <MCAN1_INT0_Handler+0x72>
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  402cf6:	68bb      	ldr	r3, [r7, #8]
  402cf8:	4619      	mov	r1, r3
  402cfa:	4858      	ldr	r0, [pc, #352]	; (402e5c <MCAN1_INT0_Handler+0x190>)
  402cfc:	4b58      	ldr	r3, [pc, #352]	; (402e60 <MCAN1_INT0_Handler+0x194>)
  402cfe:	4798      	blx	r3
  402d00:	4603      	mov	r3, r0
  402d02:	2b00      	cmp	r3, #0
  402d04:	d018      	beq.n	402d38 <MCAN1_INT0_Handler+0x6c>
			{
				rx_buffer_index = i;
  402d06:	68bb      	ldr	r3, [r7, #8]
  402d08:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan1_instance, i);
  402d0a:	68bb      	ldr	r3, [r7, #8]
  402d0c:	4619      	mov	r1, r3
  402d0e:	4850      	ldr	r0, [pc, #320]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402d10:	4b54      	ldr	r3, [pc, #336]	; (402e64 <MCAN1_INT0_Handler+0x198>)
  402d12:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan1_instance, &mcan1_rx_element_buffer, rx_buffer_index);
  402d14:	687b      	ldr	r3, [r7, #4]
  402d16:	461a      	mov	r2, r3
  402d18:	4953      	ldr	r1, [pc, #332]	; (402e68 <MCAN1_INT0_Handler+0x19c>)
  402d1a:	484d      	ldr	r0, [pc, #308]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402d1c:	4b53      	ldr	r3, [pc, #332]	; (402e6c <MCAN1_INT0_Handler+0x1a0>)
  402d1e:	4798      	blx	r3
				
				_mcan1_push_message(mcan1_rx_element_buffer.R0, mcan1_rx_element_buffer.R1, mcan1_rx_element_buffer.data, unix_timestamp_ms);
  402d20:	4b53      	ldr	r3, [pc, #332]	; (402e70 <MCAN1_INT0_Handler+0x1a4>)
  402d22:	e9d3 3400 	ldrd	r3, r4, [r3]
  402d26:	4950      	ldr	r1, [pc, #320]	; (402e68 <MCAN1_INT0_Handler+0x19c>)
  402d28:	484f      	ldr	r0, [pc, #316]	; (402e68 <MCAN1_INT0_Handler+0x19c>)
  402d2a:	e9cd 3400 	strd	r3, r4, [sp]
  402d2e:	4a51      	ldr	r2, [pc, #324]	; (402e74 <MCAN1_INT0_Handler+0x1a8>)
  402d30:	6849      	ldr	r1, [r1, #4]
  402d32:	6800      	ldr	r0, [r0, #0]
  402d34:	4b50      	ldr	r3, [pc, #320]	; (402e78 <MCAN1_INT0_Handler+0x1ac>)
  402d36:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402d38:	68bb      	ldr	r3, [r7, #8]
  402d3a:	3301      	adds	r3, #1
  402d3c:	60bb      	str	r3, [r7, #8]
  402d3e:	68bb      	ldr	r3, [r7, #8]
  402d40:	2b0f      	cmp	r3, #15
  402d42:	d9d8      	bls.n	402cf6 <MCAN1_INT0_Handler+0x2a>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) 
  402d44:	68fb      	ldr	r3, [r7, #12]
  402d46:	f003 0301 	and.w	r3, r3, #1
  402d4a:	2b00      	cmp	r3, #0
  402d4c:	d029      	beq.n	402da2 <MCAN1_INT0_Handler+0xd6>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402d4e:	2101      	movs	r1, #1
  402d50:	483f      	ldr	r0, [pc, #252]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402d52:	4b41      	ldr	r3, [pc, #260]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402d54:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 0 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_0_element(&mcan1_instance, &mcan1_rx_element_fifo_0, mcan1_standard_receive_index);
  402d56:	4b49      	ldr	r3, [pc, #292]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d58:	681b      	ldr	r3, [r3, #0]
  402d5a:	461a      	mov	r2, r3
  402d5c:	4948      	ldr	r1, [pc, #288]	; (402e80 <MCAN1_INT0_Handler+0x1b4>)
  402d5e:	483c      	ldr	r0, [pc, #240]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402d60:	4b48      	ldr	r3, [pc, #288]	; (402e84 <MCAN1_INT0_Handler+0x1b8>)
  402d62:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 0, mcan1_standard_receive_index);
  402d64:	4b45      	ldr	r3, [pc, #276]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d66:	681b      	ldr	r3, [r3, #0]
  402d68:	461a      	mov	r2, r3
  402d6a:	2100      	movs	r1, #0
  402d6c:	4838      	ldr	r0, [pc, #224]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402d6e:	4b46      	ldr	r3, [pc, #280]	; (402e88 <MCAN1_INT0_Handler+0x1bc>)
  402d70:	4798      	blx	r3
		
		mcan1_standard_receive_index++;
  402d72:	4b42      	ldr	r3, [pc, #264]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d74:	681b      	ldr	r3, [r3, #0]
  402d76:	3301      	adds	r3, #1
  402d78:	4a40      	ldr	r2, [pc, #256]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d7a:	6013      	str	r3, [r2, #0]
		
		if (mcan1_standard_receive_index == CONF_MCAN1_RX_FIFO_0_NUM)
  402d7c:	4b3f      	ldr	r3, [pc, #252]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d7e:	681b      	ldr	r3, [r3, #0]
  402d80:	2b10      	cmp	r3, #16
  402d82:	d102      	bne.n	402d8a <MCAN1_INT0_Handler+0xbe>
		{
			mcan1_standard_receive_index = 0;
  402d84:	4b3d      	ldr	r3, [pc, #244]	; (402e7c <MCAN1_INT0_Handler+0x1b0>)
  402d86:	2200      	movs	r2, #0
  402d88:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_0.R0, mcan1_rx_element_fifo_0.R1, mcan1_rx_element_fifo_0.data, unix_timestamp_ms);
  402d8a:	4b39      	ldr	r3, [pc, #228]	; (402e70 <MCAN1_INT0_Handler+0x1a4>)
  402d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
  402d90:	493b      	ldr	r1, [pc, #236]	; (402e80 <MCAN1_INT0_Handler+0x1b4>)
  402d92:	483b      	ldr	r0, [pc, #236]	; (402e80 <MCAN1_INT0_Handler+0x1b4>)
  402d94:	e9cd 3400 	strd	r3, r4, [sp]
  402d98:	4a3c      	ldr	r2, [pc, #240]	; (402e8c <MCAN1_INT0_Handler+0x1c0>)
  402d9a:	6849      	ldr	r1, [r1, #4]
  402d9c:	6800      	ldr	r0, [r0, #0]
  402d9e:	4b36      	ldr	r3, [pc, #216]	; (402e78 <MCAN1_INT0_Handler+0x1ac>)
  402da0:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  402da2:	68fb      	ldr	r3, [r7, #12]
  402da4:	f003 0310 	and.w	r3, r3, #16
  402da8:	2b00      	cmp	r3, #0
  402daa:	d029      	beq.n	402e00 <MCAN1_INT0_Handler+0x134>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  402dac:	2110      	movs	r1, #16
  402dae:	4828      	ldr	r0, [pc, #160]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402db0:	4b29      	ldr	r3, [pc, #164]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402db2:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 1 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_1_element(&mcan1_instance, &mcan1_rx_element_fifo_1, mcan1_extended_receive_index);
  402db4:	4b36      	ldr	r3, [pc, #216]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402db6:	681b      	ldr	r3, [r3, #0]
  402db8:	461a      	mov	r2, r3
  402dba:	4936      	ldr	r1, [pc, #216]	; (402e94 <MCAN1_INT0_Handler+0x1c8>)
  402dbc:	4824      	ldr	r0, [pc, #144]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402dbe:	4b36      	ldr	r3, [pc, #216]	; (402e98 <MCAN1_INT0_Handler+0x1cc>)
  402dc0:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 1, mcan1_extended_receive_index);
  402dc2:	4b33      	ldr	r3, [pc, #204]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402dc4:	681b      	ldr	r3, [r3, #0]
  402dc6:	461a      	mov	r2, r3
  402dc8:	2101      	movs	r1, #1
  402dca:	4821      	ldr	r0, [pc, #132]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402dcc:	4b2e      	ldr	r3, [pc, #184]	; (402e88 <MCAN1_INT0_Handler+0x1bc>)
  402dce:	4798      	blx	r3
		
		mcan1_extended_receive_index++;
  402dd0:	4b2f      	ldr	r3, [pc, #188]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402dd2:	681b      	ldr	r3, [r3, #0]
  402dd4:	3301      	adds	r3, #1
  402dd6:	4a2e      	ldr	r2, [pc, #184]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402dd8:	6013      	str	r3, [r2, #0]

		if (mcan1_extended_receive_index == CONF_MCAN1_RX_FIFO_1_NUM) 
  402dda:	4b2d      	ldr	r3, [pc, #180]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402ddc:	681b      	ldr	r3, [r3, #0]
  402dde:	2b10      	cmp	r3, #16
  402de0:	d102      	bne.n	402de8 <MCAN1_INT0_Handler+0x11c>
		{
			mcan1_extended_receive_index = 0;
  402de2:	4b2b      	ldr	r3, [pc, #172]	; (402e90 <MCAN1_INT0_Handler+0x1c4>)
  402de4:	2200      	movs	r2, #0
  402de6:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_1.R0, mcan1_rx_element_fifo_1.R1, mcan1_rx_element_fifo_1.data, unix_timestamp_ms);
  402de8:	4b21      	ldr	r3, [pc, #132]	; (402e70 <MCAN1_INT0_Handler+0x1a4>)
  402dea:	e9d3 3400 	ldrd	r3, r4, [r3]
  402dee:	4929      	ldr	r1, [pc, #164]	; (402e94 <MCAN1_INT0_Handler+0x1c8>)
  402df0:	4828      	ldr	r0, [pc, #160]	; (402e94 <MCAN1_INT0_Handler+0x1c8>)
  402df2:	e9cd 3400 	strd	r3, r4, [sp]
  402df6:	4a29      	ldr	r2, [pc, #164]	; (402e9c <MCAN1_INT0_Handler+0x1d0>)
  402df8:	6849      	ldr	r1, [r1, #4]
  402dfa:	6800      	ldr	r0, [r0, #0]
  402dfc:	4b1e      	ldr	r3, [pc, #120]	; (402e78 <MCAN1_INT0_Handler+0x1ac>)
  402dfe:	4798      	blx	r3
	}
	
	//Usually occures if can tx pin is not connected to transciever or to a tranciever not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  402e00:	68fb      	ldr	r3, [r7, #12]
  402e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  402e06:	2b00      	cmp	r3, #0
  402e08:	d009      	beq.n	402e1e <MCAN1_INT0_Handler+0x152>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_BUS_OFF);
  402e0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402e0e:	4810      	ldr	r0, [pc, #64]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402e10:	4b11      	ldr	r3, [pc, #68]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402e12:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Bus Off Status \r\n");
		#endif
		
		mcan_stop(&mcan1_instance);
  402e14:	480e      	ldr	r0, [pc, #56]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402e16:	4b22      	ldr	r3, [pc, #136]	; (402ea0 <MCAN1_INT0_Handler+0x1d4>)
  402e18:	4798      	blx	r3
		configure_mcan1();
  402e1a:	4b22      	ldr	r3, [pc, #136]	; (402ea4 <MCAN1_INT0_Handler+0x1d8>)
  402e1c:	4798      	blx	r3
		
	}

	//Usually occures when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  402e1e:	68fb      	ldr	r3, [r7, #12]
  402e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  402e24:	2b00      	cmp	r3, #0
  402e26:	d004      	beq.n	402e32 <MCAN1_INT0_Handler+0x166>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_ACKNOWLEDGE_ERROR);
  402e28:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e2c:	4808      	ldr	r0, [pc, #32]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402e2e:	4b0a      	ldr	r3, [pc, #40]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402e30:	4798      	blx	r3
		printf("\n\rCAN1 Acknowledge Error \r\n");
		#endif
	}
	
	//Usually occures if can rx pin is not connected to transciever or recieving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  402e32:	68fb      	ldr	r3, [r7, #12]
  402e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402e38:	2b00      	cmp	r3, #0
  402e3a:	d004      	beq.n	402e46 <MCAN1_INT0_Handler+0x17a>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_FORMAT_ERROR);
  402e3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e40:	4803      	ldr	r0, [pc, #12]	; (402e50 <MCAN1_INT0_Handler+0x184>)
  402e42:	4b05      	ldr	r3, [pc, #20]	; (402e58 <MCAN1_INT0_Handler+0x18c>)
  402e44:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Format Error \r\n");
		#endif	
	}
}
  402e46:	bf00      	nop
  402e48:	3714      	adds	r7, #20
  402e4a:	46bd      	mov	sp, r7
  402e4c:	bd90      	pop	{r4, r7, pc}
  402e4e:	bf00      	nop
  402e50:	204013a0 	.word	0x204013a0
  402e54:	00402477 	.word	0x00402477
  402e58:	00402491 	.word	0x00402491
  402e5c:	2040132c 	.word	0x2040132c
  402e60:	00402267 	.word	0x00402267
  402e64:	004022c3 	.word	0x004022c3
  402e68:	2040131c 	.word	0x2040131c
  402e6c:	00400f19 	.word	0x00400f19
  402e70:	204012b8 	.word	0x204012b8
  402e74:	20401324 	.word	0x20401324
  402e78:	004028a5 	.word	0x004028a5
  402e7c:	20401388 	.word	0x20401388
  402e80:	204013a4 	.word	0x204013a4
  402e84:	00400f85 	.word	0x00400f85
  402e88:	00402307 	.word	0x00402307
  402e8c:	204013ac 	.word	0x204013ac
  402e90:	20401308 	.word	0x20401308
  402e94:	2040130c 	.word	0x2040130c
  402e98:	00400ff1 	.word	0x00400ff1
  402e9c:	20401314 	.word	0x20401314
  402ea0:	00400e09 	.word	0x00400e09
  402ea4:	00402679 	.word	0x00402679

00402ea8 <MCAN1_INT1_Handler>:

void MCAN1_INT1_Handler(void)
{
  402ea8:	b580      	push	{r7, lr}
  402eaa:	b088      	sub	sp, #32
  402eac:	af00      	add	r7, sp, #0
	volatile uint32_t status, i;
	status = mcan_read_interrupt_status(&mcan1_instance);
  402eae:	484b      	ldr	r0, [pc, #300]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402eb0:	4b4b      	ldr	r3, [pc, #300]	; (402fe0 <MCAN1_INT1_Handler+0x138>)
  402eb2:	4798      	blx	r3
  402eb4:	4603      	mov	r3, r0
  402eb6:	617b      	str	r3, [r7, #20]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  402eb8:	697b      	ldr	r3, [r7, #20]
  402eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402ebe:	2b00      	cmp	r3, #0
  402ec0:	d02c      	beq.n	402f1c <MCAN1_INT1_Handler+0x74>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TIMESTAMP_COMPLETE);
  402ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
  402ec6:	4845      	ldr	r0, [pc, #276]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402ec8:	4b46      	ldr	r3, [pc, #280]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402eca:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Completed Interrupt\r\n");
  402ecc:	4846      	ldr	r0, [pc, #280]	; (402fe8 <MCAN1_INT1_Handler+0x140>)
  402ece:	4b47      	ldr	r3, [pc, #284]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402ed0:	4798      	blx	r3
		#endif

		if(!mcan1_buffer.adding_in_tx_buffer)
  402ed2:	4b47      	ldr	r3, [pc, #284]	; (402ff0 <MCAN1_INT1_Handler+0x148>)
  402ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402ed8:	b2db      	uxtb	r3, r3
  402eda:	2b00      	cmp	r3, #0
  402edc:	d11a      	bne.n	402f14 <MCAN1_INT1_Handler+0x6c>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_tx)>0)
  402ede:	4845      	ldr	r0, [pc, #276]	; (402ff4 <MCAN1_INT1_Handler+0x14c>)
  402ee0:	4b45      	ldr	r3, [pc, #276]	; (402ff8 <MCAN1_INT1_Handler+0x150>)
  402ee2:	4798      	blx	r3
  402ee4:	4603      	mov	r3, r0
  402ee6:	2b00      	cmp	r3, #0
  402ee8:	d00f      	beq.n	402f0a <MCAN1_INT1_Handler+0x62>
			{
				struct mcan_tx_element tx_elem;
				circ_buf_flex_pop(&mcan1_buffer.buffer_tx, &tx_elem);
  402eea:	463b      	mov	r3, r7
  402eec:	4619      	mov	r1, r3
  402eee:	4841      	ldr	r0, [pc, #260]	; (402ff4 <MCAN1_INT1_Handler+0x14c>)
  402ef0:	4b42      	ldr	r3, [pc, #264]	; (402ffc <MCAN1_INT1_Handler+0x154>)
  402ef2:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan1_instance, &tx_elem, CONF_MCAN1_TX_BUFFER_NUM);
  402ef4:	463b      	mov	r3, r7
  402ef6:	2201      	movs	r2, #1
  402ef8:	4619      	mov	r1, r3
  402efa:	4838      	ldr	r0, [pc, #224]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402efc:	4b40      	ldr	r3, [pc, #256]	; (403000 <MCAN1_INT1_Handler+0x158>)
  402efe:	4798      	blx	r3
				mcan_tx_transfer_request(&mcan1_instance, 1 << CONF_MCAN1_TX_BUFFER_NUM);
  402f00:	2102      	movs	r1, #2
  402f02:	4836      	ldr	r0, [pc, #216]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f04:	4b3f      	ldr	r3, [pc, #252]	; (403004 <MCAN1_INT1_Handler+0x15c>)
  402f06:	4798      	blx	r3
  402f08:	e008      	b.n	402f1c <MCAN1_INT1_Handler+0x74>
			}
			else
			{
				mcan1_buffer.buffer_being_emptied_by_interruption = false;
  402f0a:	4b39      	ldr	r3, [pc, #228]	; (402ff0 <MCAN1_INT1_Handler+0x148>)
  402f0c:	2200      	movs	r2, #0
  402f0e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402f12:	e003      	b.n	402f1c <MCAN1_INT1_Handler+0x74>
			}
		}
		else mcan1_buffer.interruption_occured_while_adding_in_tx_buffer = true;
  402f14:	4b36      	ldr	r3, [pc, #216]	; (402ff0 <MCAN1_INT1_Handler+0x148>)
  402f16:	2201      	movs	r2, #1
  402f18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  402f1c:	697b      	ldr	r3, [r7, #20]
  402f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402f22:	2b00      	cmp	r3, #0
  402f24:	d007      	beq.n	402f36 <MCAN1_INT1_Handler+0x8e>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_CANCELLATION_FINISH);
  402f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402f2a:	482c      	ldr	r0, [pc, #176]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f2c:	4b2d      	ldr	r3, [pc, #180]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402f2e:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Cancellation Finished Interrupt \r\n");
  402f30:	4835      	ldr	r0, [pc, #212]	; (403008 <MCAN1_INT1_Handler+0x160>)
  402f32:	4b2e      	ldr	r3, [pc, #184]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402f34:	4798      	blx	r3
		#endif
	}
	if (status & MCAN_TX_FIFO_EMPTY)
  402f36:	697b      	ldr	r3, [r7, #20]
  402f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d007      	beq.n	402f50 <MCAN1_INT1_Handler+0xa8>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_FIFO_EMPTY);
  402f40:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402f44:	4825      	ldr	r0, [pc, #148]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f46:	4b27      	ldr	r3, [pc, #156]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402f48:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx FIFO Empty Interrupt\r\n");
  402f4a:	4830      	ldr	r0, [pc, #192]	; (40300c <MCAN1_INT1_Handler+0x164>)
  402f4c:	4b27      	ldr	r3, [pc, #156]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402f4e:	4798      	blx	r3
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  402f50:	697b      	ldr	r3, [r7, #20]
  402f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402f56:	2b00      	cmp	r3, #0
  402f58:	d014      	beq.n	402f84 <MCAN1_INT1_Handler+0xdc>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  402f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402f5e:	481f      	ldr	r0, [pc, #124]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f60:	4b20      	ldr	r3, [pc, #128]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402f62:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO New Entry Interrupt \r\n");
  402f64:	482a      	ldr	r0, [pc, #168]	; (403010 <MCAN1_INT1_Handler+0x168>)
  402f66:	4b21      	ldr	r3, [pc, #132]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402f68:	4798      	blx	r3
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan1_instance);
  402f6a:	481c      	ldr	r0, [pc, #112]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f6c:	4b29      	ldr	r3, [pc, #164]	; (403014 <MCAN1_INT1_Handler+0x16c>)
  402f6e:	4798      	blx	r3
  402f70:	61f8      	str	r0, [r7, #28]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  402f72:	69fb      	ldr	r3, [r7, #28]
  402f74:	0a1b      	lsrs	r3, r3, #8
  402f76:	f003 031f 	and.w	r3, r3, #31
  402f7a:	61bb      	str	r3, [r7, #24]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan1_instance, fifo_get_index);
  402f7c:	69b9      	ldr	r1, [r7, #24]
  402f7e:	4817      	ldr	r0, [pc, #92]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f80:	4b25      	ldr	r3, [pc, #148]	; (403018 <MCAN1_INT1_Handler+0x170>)
  402f82:	4798      	blx	r3
	}
	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  402f84:	697b      	ldr	r3, [r7, #20]
  402f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402f8a:	2b00      	cmp	r3, #0
  402f8c:	d007      	beq.n	402f9e <MCAN1_INT1_Handler+0xf6>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  402f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402f92:	4812      	ldr	r0, [pc, #72]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402f94:	4b13      	ldr	r3, [pc, #76]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402f96:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Watermark Reached Interrupt\r\n");
  402f98:	4820      	ldr	r0, [pc, #128]	; (40301c <MCAN1_INT1_Handler+0x174>)
  402f9a:	4b14      	ldr	r3, [pc, #80]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402f9c:	4798      	blx	r3
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_FULL)
  402f9e:	697b      	ldr	r3, [r7, #20]
  402fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402fa4:	2b00      	cmp	r3, #0
  402fa6:	d007      	beq.n	402fb8 <MCAN1_INT1_Handler+0x110>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_FULL);
  402fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402fac:	480b      	ldr	r0, [pc, #44]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402fae:	4b0d      	ldr	r3, [pc, #52]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402fb0:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Full Interrupt\r\n");
  402fb2:	481b      	ldr	r0, [pc, #108]	; (403020 <MCAN1_INT1_Handler+0x178>)
  402fb4:	4b0d      	ldr	r3, [pc, #52]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402fb6:	4798      	blx	r3
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  402fb8:	697b      	ldr	r3, [r7, #20]
  402fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402fbe:	2b00      	cmp	r3, #0
  402fc0:	d007      	beq.n	402fd2 <MCAN1_INT1_Handler+0x12a>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  402fc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  402fc6:	4805      	ldr	r0, [pc, #20]	; (402fdc <MCAN1_INT1_Handler+0x134>)
  402fc8:	4b06      	ldr	r3, [pc, #24]	; (402fe4 <MCAN1_INT1_Handler+0x13c>)
  402fca:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Element Lost Interrupt\r\n");
  402fcc:	4815      	ldr	r0, [pc, #84]	; (403024 <MCAN1_INT1_Handler+0x17c>)
  402fce:	4b07      	ldr	r3, [pc, #28]	; (402fec <MCAN1_INT1_Handler+0x144>)
  402fd0:	4798      	blx	r3
		#endif
	}
}
  402fd2:	bf00      	nop
  402fd4:	3720      	adds	r7, #32
  402fd6:	46bd      	mov	sp, r7
  402fd8:	bd80      	pop	{r7, pc}
  402fda:	bf00      	nop
  402fdc:	204013a0 	.word	0x204013a0
  402fe0:	00402477 	.word	0x00402477
  402fe4:	00402491 	.word	0x00402491
  402fe8:	004069e0 	.word	0x004069e0
  402fec:	004039d5 	.word	0x004039d5
  402ff0:	204013b4 	.word	0x204013b4
  402ff4:	204013cc 	.word	0x204013cc
  402ff8:	00401f35 	.word	0x00401f35
  402ffc:	00402065 	.word	0x00402065
  403000:	0040105d 	.word	0x0040105d
  403004:	00402391 	.word	0x00402391
  403008:	00406a08 	.word	0x00406a08
  40300c:	00406a40 	.word	0x00406a40
  403010:	00406a60 	.word	0x00406a60
  403014:	004023c7 	.word	0x004023c7
  403018:	004023e3 	.word	0x004023e3
  40301c:	00406a8c 	.word	0x00406a8c
  403020:	00406ac0 	.word	0x00406ac0
  403024:	00406ae4 	.word	0x00406ae4

00403028 <mcan0_send_message>:
	return EXTRACT_X(module_inst->hw->MCAN_IE, source);
}

void mcan0_send_message(uint32_t id_value, uint8_t *data,
		uint32_t data_length, bool is_extended, bool is_remote_transmition)
{
  403028:	b580      	push	{r7, lr}
  40302a:	b08e      	sub	sp, #56	; 0x38
  40302c:	af00      	add	r7, sp, #0
  40302e:	60f8      	str	r0, [r7, #12]
  403030:	60b9      	str	r1, [r7, #8]
  403032:	607a      	str	r2, [r7, #4]
  403034:	70fb      	strb	r3, [r7, #3]
	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
  403036:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40303a:	4618      	mov	r0, r3
  40303c:	4b3e      	ldr	r3, [pc, #248]	; (403138 <mcan0_send_message+0x110>)
  40303e:	4798      	blx	r3
	if (is_extended)
  403040:	78fb      	ldrb	r3, [r7, #3]
  403042:	2b00      	cmp	r3, #0
  403044:	d008      	beq.n	403058 <mcan0_send_message+0x30>
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
  403046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403048:	68fb      	ldr	r3, [r7, #12]
  40304a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  40304e:	4313      	orrs	r3, r2
  403050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403054:	627b      	str	r3, [r7, #36]	; 0x24
  403056:	e006      	b.n	403066 <mcan0_send_message+0x3e>
			MCAN_TX_ELEMENT_T0_XTD;
	}
	else
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  403058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40305a:	68fb      	ldr	r3, [r7, #12]
  40305c:	0499      	lsls	r1, r3, #18
  40305e:	4b37      	ldr	r3, [pc, #220]	; (40313c <mcan0_send_message+0x114>)
  403060:	400b      	ands	r3, r1
  403062:	4313      	orrs	r3, r2
  403064:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(is_remote_transmition)
  403066:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  40306a:	2b00      	cmp	r3, #0
  40306c:	d003      	beq.n	403076 <mcan0_send_message+0x4e>
	{
		tx_element.T0.bit.RTR = 1;
  40306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403074:	627b      	str	r3, [r7, #36]	; 0x24
	}

	tx_element.T1.bit.DLC = data_length;
  403076:	687b      	ldr	r3, [r7, #4]
  403078:	b2db      	uxtb	r3, r3
  40307a:	f003 030f 	and.w	r3, r3, #15
  40307e:	b2da      	uxtb	r2, r3
  403080:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403082:	f362 4313 	bfi	r3, r2, #16, #4
  403086:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < data_length; i++) {
  403088:	2300      	movs	r3, #0
  40308a:	637b      	str	r3, [r7, #52]	; 0x34
  40308c:	e00d      	b.n	4030aa <mcan0_send_message+0x82>
		tx_element.data[i] = *data; 
  40308e:	68bb      	ldr	r3, [r7, #8]
  403090:	7819      	ldrb	r1, [r3, #0]
  403092:	f107 022c 	add.w	r2, r7, #44	; 0x2c
  403096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403098:	4413      	add	r3, r2
  40309a:	460a      	mov	r2, r1
  40309c:	701a      	strb	r2, [r3, #0]
		data++;
  40309e:	68bb      	ldr	r3, [r7, #8]
  4030a0:	3301      	adds	r3, #1
  4030a2:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < data_length; i++) {
  4030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4030a6:	3301      	adds	r3, #1
  4030a8:	637b      	str	r3, [r7, #52]	; 0x34
  4030aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4030ac:	687b      	ldr	r3, [r7, #4]
  4030ae:	429a      	cmp	r2, r3
  4030b0:	d3ed      	bcc.n	40308e <mcan0_send_message+0x66>
	}

	//Set it to prevent problem with interruption
	mcan0_buffer.adding_in_tx_buffer = true;
  4030b2:	4b23      	ldr	r3, [pc, #140]	; (403140 <mcan0_send_message+0x118>)
  4030b4:	2201      	movs	r2, #1
  4030b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	circ_buf_flex_push(&mcan0_buffer.buffer_tx, &tx_element);
  4030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4030be:	4619      	mov	r1, r3
  4030c0:	4820      	ldr	r0, [pc, #128]	; (403144 <mcan0_send_message+0x11c>)
  4030c2:	4b21      	ldr	r3, [pc, #132]	; (403148 <mcan0_send_message+0x120>)
  4030c4:	4798      	blx	r3
	mcan0_buffer.adding_in_tx_buffer = false;
  4030c6:	4b1e      	ldr	r3, [pc, #120]	; (403140 <mcan0_send_message+0x118>)
  4030c8:	2200      	movs	r2, #0
  4030ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if(mcan0_buffer.interruption_occured_while_adding_in_tx_buffer | !mcan0_buffer.buffer_being_emptied_by_interruption)
  4030ce:	4b1c      	ldr	r3, [pc, #112]	; (403140 <mcan0_send_message+0x118>)
  4030d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  4030d4:	b2db      	uxtb	r3, r3
  4030d6:	461a      	mov	r2, r3
  4030d8:	4b19      	ldr	r3, [pc, #100]	; (403140 <mcan0_send_message+0x118>)
  4030da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  4030de:	b2db      	uxtb	r3, r3
  4030e0:	2b00      	cmp	r3, #0
  4030e2:	bf0c      	ite	eq
  4030e4:	2301      	moveq	r3, #1
  4030e6:	2300      	movne	r3, #0
  4030e8:	b2db      	uxtb	r3, r3
  4030ea:	4313      	orrs	r3, r2
  4030ec:	2b00      	cmp	r3, #0
  4030ee:	d01e      	beq.n	40312e <mcan0_send_message+0x106>
	{
		//TODO
		//No need of this if we just added a message to the buffer and prevent interruption to deal with messages !
		//We know for sure that there is at least the message in our buffer.
		if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx)>0)
  4030f0:	4814      	ldr	r0, [pc, #80]	; (403144 <mcan0_send_message+0x11c>)
  4030f2:	4b16      	ldr	r3, [pc, #88]	; (40314c <mcan0_send_message+0x124>)
  4030f4:	4798      	blx	r3
  4030f6:	4603      	mov	r3, r0
  4030f8:	2b00      	cmp	r3, #0
  4030fa:	d018      	beq.n	40312e <mcan0_send_message+0x106>
		{
			struct mcan_tx_element tx_elem;
			circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  4030fc:	f107 0314 	add.w	r3, r7, #20
  403100:	4619      	mov	r1, r3
  403102:	4810      	ldr	r0, [pc, #64]	; (403144 <mcan0_send_message+0x11c>)
  403104:	4b12      	ldr	r3, [pc, #72]	; (403150 <mcan0_send_message+0x128>)
  403106:	4798      	blx	r3
			//we have to offset the buffer number in order to write in the fifo memory.
			mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN1_TX_BUFFER_NUM);
  403108:	f107 0314 	add.w	r3, r7, #20
  40310c:	2201      	movs	r2, #1
  40310e:	4619      	mov	r1, r3
  403110:	4810      	ldr	r0, [pc, #64]	; (403154 <mcan0_send_message+0x12c>)
  403112:	4b11      	ldr	r3, [pc, #68]	; (403158 <mcan0_send_message+0x130>)
  403114:	4798      	blx	r3
			mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN1_TX_BUFFER_NUM);
  403116:	2102      	movs	r1, #2
  403118:	480e      	ldr	r0, [pc, #56]	; (403154 <mcan0_send_message+0x12c>)
  40311a:	4b10      	ldr	r3, [pc, #64]	; (40315c <mcan0_send_message+0x134>)
  40311c:	4798      	blx	r3
			mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  40311e:	4b08      	ldr	r3, [pc, #32]	; (403140 <mcan0_send_message+0x118>)
  403120:	2200      	movs	r2, #0
  403122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			mcan0_buffer.buffer_being_emptied_by_interruption = true;
  403126:	4b06      	ldr	r3, [pc, #24]	; (403140 <mcan0_send_message+0x118>)
  403128:	2201      	movs	r2, #1
  40312a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		}
	}
	
}
  40312e:	bf00      	nop
  403130:	3738      	adds	r7, #56	; 0x38
  403132:	46bd      	mov	sp, r7
  403134:	bd80      	pop	{r7, pc}
  403136:	bf00      	nop
  403138:	00402407 	.word	0x00402407
  40313c:	1ffc0000 	.word	0x1ffc0000
  403140:	20401340 	.word	0x20401340
  403144:	20401358 	.word	0x20401358
  403148:	00401fdd 	.word	0x00401fdd
  40314c:	00401f35 	.word	0x00401f35
  403150:	00402065 	.word	0x00402065
  403154:	2040132c 	.word	0x2040132c
  403158:	0040105d 	.word	0x0040105d
  40315c:	00402391 	.word	0x00402391

00403160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403160:	b480      	push	{r7}
  403162:	b083      	sub	sp, #12
  403164:	af00      	add	r7, sp, #0
  403166:	4603      	mov	r3, r0
  403168:	6039      	str	r1, [r7, #0]
  40316a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403170:	2b00      	cmp	r3, #0
  403172:	db0a      	blt.n	40318a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403174:	490d      	ldr	r1, [pc, #52]	; (4031ac <__NVIC_SetPriority+0x4c>)
  403176:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40317a:	683a      	ldr	r2, [r7, #0]
  40317c:	b2d2      	uxtb	r2, r2
  40317e:	0152      	lsls	r2, r2, #5
  403180:	b2d2      	uxtb	r2, r2
  403182:	440b      	add	r3, r1
  403184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  403188:	e00a      	b.n	4031a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40318a:	4909      	ldr	r1, [pc, #36]	; (4031b0 <__NVIC_SetPriority+0x50>)
  40318c:	79fb      	ldrb	r3, [r7, #7]
  40318e:	f003 030f 	and.w	r3, r3, #15
  403192:	3b04      	subs	r3, #4
  403194:	683a      	ldr	r2, [r7, #0]
  403196:	b2d2      	uxtb	r2, r2
  403198:	0152      	lsls	r2, r2, #5
  40319a:	b2d2      	uxtb	r2, r2
  40319c:	440b      	add	r3, r1
  40319e:	761a      	strb	r2, [r3, #24]
}
  4031a0:	bf00      	nop
  4031a2:	370c      	adds	r7, #12
  4031a4:	46bd      	mov	sp, r7
  4031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031aa:	4770      	bx	lr
  4031ac:	e000e100 	.word	0xe000e100
  4031b0:	e000ed00 	.word	0xe000ed00

004031b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  4031b4:	b580      	push	{r7, lr}
  4031b6:	b082      	sub	sp, #8
  4031b8:	af00      	add	r7, sp, #0
  4031ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  4031bc:	687b      	ldr	r3, [r7, #4]
  4031be:	3b01      	subs	r3, #1
  4031c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4031c4:	d301      	bcc.n	4031ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
  4031c6:	2301      	movs	r3, #1
  4031c8:	e00f      	b.n	4031ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  4031ca:	4a0a      	ldr	r2, [pc, #40]	; (4031f4 <SysTick_Config+0x40>)
  4031cc:	687b      	ldr	r3, [r7, #4]
  4031ce:	3b01      	subs	r3, #1
  4031d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  4031d2:	2107      	movs	r1, #7
  4031d4:	f04f 30ff 	mov.w	r0, #4294967295
  4031d8:	4b07      	ldr	r3, [pc, #28]	; (4031f8 <SysTick_Config+0x44>)
  4031da:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  4031dc:	4b05      	ldr	r3, [pc, #20]	; (4031f4 <SysTick_Config+0x40>)
  4031de:	2200      	movs	r2, #0
  4031e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4031e2:	4b04      	ldr	r3, [pc, #16]	; (4031f4 <SysTick_Config+0x40>)
  4031e4:	2207      	movs	r2, #7
  4031e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
  4031e8:	2300      	movs	r3, #0
}
  4031ea:	4618      	mov	r0, r3
  4031ec:	3708      	adds	r7, #8
  4031ee:	46bd      	mov	sp, r7
  4031f0:	bd80      	pop	{r7, pc}
  4031f2:	bf00      	nop
  4031f4:	e000e010 	.word	0xe000e010
  4031f8:	00403161 	.word	0x00403161

004031fc <mcan_tx_get_fifo_queue_status>:
 *
 * \return Tx FIFO/Queue status value.
 */
static inline uint32_t mcan_tx_get_fifo_queue_status(
		struct mcan_module *const module_inst)
{
  4031fc:	b480      	push	{r7}
  4031fe:	b083      	sub	sp, #12
  403200:	af00      	add	r7, sp, #0
  403202:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_TXFQS;
  403204:	687b      	ldr	r3, [r7, #4]
  403206:	681b      	ldr	r3, [r3, #0]
  403208:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
  40320c:	4618      	mov	r0, r3
  40320e:	370c      	adds	r7, #12
  403210:	46bd      	mov	sp, r7
  403212:	f85d 7b04 	ldr.w	r7, [sp], #4
  403216:	4770      	bx	lr

00403218 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  403218:	b480      	push	{r7}
  40321a:	b083      	sub	sp, #12
  40321c:	af00      	add	r7, sp, #0
  40321e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403220:	687b      	ldr	r3, [r7, #4]
  403222:	2b07      	cmp	r3, #7
  403224:	d825      	bhi.n	403272 <osc_get_rate+0x5a>
  403226:	a201      	add	r2, pc, #4	; (adr r2, 40322c <osc_get_rate+0x14>)
  403228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40322c:	0040324d 	.word	0x0040324d
  403230:	00403253 	.word	0x00403253
  403234:	00403259 	.word	0x00403259
  403238:	0040325f 	.word	0x0040325f
  40323c:	00403263 	.word	0x00403263
  403240:	00403267 	.word	0x00403267
  403244:	0040326b 	.word	0x0040326b
  403248:	0040326f 	.word	0x0040326f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40324c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403250:	e010      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  403252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403256:	e00d      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  403258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40325c:	e00a      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40325e:	4b08      	ldr	r3, [pc, #32]	; (403280 <osc_get_rate+0x68>)
  403260:	e008      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  403262:	4b08      	ldr	r3, [pc, #32]	; (403284 <osc_get_rate+0x6c>)
  403264:	e006      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  403266:	4b08      	ldr	r3, [pc, #32]	; (403288 <osc_get_rate+0x70>)
  403268:	e004      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40326a:	4b07      	ldr	r3, [pc, #28]	; (403288 <osc_get_rate+0x70>)
  40326c:	e002      	b.n	403274 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40326e:	4b06      	ldr	r3, [pc, #24]	; (403288 <osc_get_rate+0x70>)
  403270:	e000      	b.n	403274 <osc_get_rate+0x5c>
	}

	return 0;
  403272:	2300      	movs	r3, #0
}
  403274:	4618      	mov	r0, r3
  403276:	370c      	adds	r7, #12
  403278:	46bd      	mov	sp, r7
  40327a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40327e:	4770      	bx	lr
  403280:	003d0900 	.word	0x003d0900
  403284:	007a1200 	.word	0x007a1200
  403288:	00b71b00 	.word	0x00b71b00

0040328c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40328c:	b580      	push	{r7, lr}
  40328e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  403290:	2006      	movs	r0, #6
  403292:	4b05      	ldr	r3, [pc, #20]	; (4032a8 <sysclk_get_main_hz+0x1c>)
  403294:	4798      	blx	r3
  403296:	4602      	mov	r2, r0
  403298:	4613      	mov	r3, r2
  40329a:	009b      	lsls	r3, r3, #2
  40329c:	4413      	add	r3, r2
  40329e:	009a      	lsls	r2, r3, #2
  4032a0:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4032a2:	4618      	mov	r0, r3
  4032a4:	bd80      	pop	{r7, pc}
  4032a6:	bf00      	nop
  4032a8:	00403219 	.word	0x00403219

004032ac <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4032ac:	b580      	push	{r7, lr}
  4032ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4032b0:	4b02      	ldr	r3, [pc, #8]	; (4032bc <sysclk_get_cpu_hz+0x10>)
  4032b2:	4798      	blx	r3
  4032b4:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4032b6:	4618      	mov	r0, r3
  4032b8:	bd80      	pop	{r7, pc}
  4032ba:	bf00      	nop
  4032bc:	0040328d 	.word	0x0040328d

004032c0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4032c0:	b580      	push	{r7, lr}
  4032c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4032c4:	4b02      	ldr	r3, [pc, #8]	; (4032d0 <sysclk_get_peripheral_hz+0x10>)
  4032c6:	4798      	blx	r3
  4032c8:	4603      	mov	r3, r0
  4032ca:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  4032cc:	4618      	mov	r0, r3
  4032ce:	bd80      	pop	{r7, pc}
  4032d0:	0040328d 	.word	0x0040328d

004032d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4032d4:	b580      	push	{r7, lr}
  4032d6:	b082      	sub	sp, #8
  4032d8:	af00      	add	r7, sp, #0
  4032da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4032dc:	6878      	ldr	r0, [r7, #4]
  4032de:	4b03      	ldr	r3, [pc, #12]	; (4032ec <sysclk_enable_peripheral_clock+0x18>)
  4032e0:	4798      	blx	r3
}
  4032e2:	bf00      	nop
  4032e4:	3708      	adds	r7, #8
  4032e6:	46bd      	mov	sp, r7
  4032e8:	bd80      	pop	{r7, pc}
  4032ea:	bf00      	nop
  4032ec:	00401645 	.word	0x00401645

004032f0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4032f0:	b580      	push	{r7, lr}
  4032f2:	b08c      	sub	sp, #48	; 0x30
  4032f4:	af00      	add	r7, sp, #0
  4032f6:	6078      	str	r0, [r7, #4]
  4032f8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4032fa:	4b4f      	ldr	r3, [pc, #316]	; (403438 <usart_serial_init+0x148>)
  4032fc:	4798      	blx	r3
  4032fe:	4603      	mov	r3, r0
  403300:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  403302:	683b      	ldr	r3, [r7, #0]
  403304:	681b      	ldr	r3, [r3, #0]
  403306:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403308:	683b      	ldr	r3, [r7, #0]
  40330a:	689b      	ldr	r3, [r3, #8]
  40330c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  40330e:	683b      	ldr	r3, [r7, #0]
  403310:	681b      	ldr	r3, [r3, #0]
  403312:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  403314:	683b      	ldr	r3, [r7, #0]
  403316:	685b      	ldr	r3, [r3, #4]
  403318:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  40331a:	683b      	ldr	r3, [r7, #0]
  40331c:	689b      	ldr	r3, [r3, #8]
  40331e:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  403320:	683b      	ldr	r3, [r7, #0]
  403322:	68db      	ldr	r3, [r3, #12]
  403324:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403326:	2300      	movs	r3, #0
  403328:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40332a:	687b      	ldr	r3, [r7, #4]
  40332c:	4a43      	ldr	r2, [pc, #268]	; (40343c <usart_serial_init+0x14c>)
  40332e:	4293      	cmp	r3, r2
  403330:	d108      	bne.n	403344 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  403332:	2007      	movs	r0, #7
  403334:	4b42      	ldr	r3, [pc, #264]	; (403440 <usart_serial_init+0x150>)
  403336:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403338:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40333c:	4619      	mov	r1, r3
  40333e:	6878      	ldr	r0, [r7, #4]
  403340:	4b40      	ldr	r3, [pc, #256]	; (403444 <usart_serial_init+0x154>)
  403342:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	4a40      	ldr	r2, [pc, #256]	; (403448 <usart_serial_init+0x158>)
  403348:	4293      	cmp	r3, r2
  40334a:	d108      	bne.n	40335e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  40334c:	2008      	movs	r0, #8
  40334e:	4b3c      	ldr	r3, [pc, #240]	; (403440 <usart_serial_init+0x150>)
  403350:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403352:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403356:	4619      	mov	r1, r3
  403358:	6878      	ldr	r0, [r7, #4]
  40335a:	4b3a      	ldr	r3, [pc, #232]	; (403444 <usart_serial_init+0x154>)
  40335c:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40335e:	687b      	ldr	r3, [r7, #4]
  403360:	4a3a      	ldr	r2, [pc, #232]	; (40344c <usart_serial_init+0x15c>)
  403362:	4293      	cmp	r3, r2
  403364:	d108      	bne.n	403378 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  403366:	202c      	movs	r0, #44	; 0x2c
  403368:	4b35      	ldr	r3, [pc, #212]	; (403440 <usart_serial_init+0x150>)
  40336a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40336c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403370:	4619      	mov	r1, r3
  403372:	6878      	ldr	r0, [r7, #4]
  403374:	4b33      	ldr	r3, [pc, #204]	; (403444 <usart_serial_init+0x154>)
  403376:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403378:	687b      	ldr	r3, [r7, #4]
  40337a:	4a35      	ldr	r2, [pc, #212]	; (403450 <usart_serial_init+0x160>)
  40337c:	4293      	cmp	r3, r2
  40337e:	d108      	bne.n	403392 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403380:	202d      	movs	r0, #45	; 0x2d
  403382:	4b2f      	ldr	r3, [pc, #188]	; (403440 <usart_serial_init+0x150>)
  403384:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403386:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40338a:	4619      	mov	r1, r3
  40338c:	6878      	ldr	r0, [r7, #4]
  40338e:	4b2d      	ldr	r3, [pc, #180]	; (403444 <usart_serial_init+0x154>)
  403390:	4798      	blx	r3
	}
# endif
# ifdef UART4
	if (UART4 == (Uart*)p_usart) {
  403392:	687b      	ldr	r3, [r7, #4]
  403394:	4a2f      	ldr	r2, [pc, #188]	; (403454 <usart_serial_init+0x164>)
  403396:	4293      	cmp	r3, r2
  403398:	d108      	bne.n	4033ac <usart_serial_init+0xbc>
		sysclk_enable_peripheral_clock(ID_UART4);
  40339a:	202e      	movs	r0, #46	; 0x2e
  40339c:	4b28      	ldr	r3, [pc, #160]	; (403440 <usart_serial_init+0x150>)
  40339e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4033a4:	4619      	mov	r1, r3
  4033a6:	6878      	ldr	r0, [r7, #4]
  4033a8:	4b26      	ldr	r3, [pc, #152]	; (403444 <usart_serial_init+0x154>)
  4033aa:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4033ac:	687b      	ldr	r3, [r7, #4]
  4033ae:	4a2a      	ldr	r2, [pc, #168]	; (403458 <usart_serial_init+0x168>)
  4033b0:	4293      	cmp	r3, r2
  4033b2:	d111      	bne.n	4033d8 <usart_serial_init+0xe8>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  4033b4:	200d      	movs	r0, #13
  4033b6:	4b22      	ldr	r3, [pc, #136]	; (403440 <usart_serial_init+0x150>)
  4033b8:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4033ba:	4b1f      	ldr	r3, [pc, #124]	; (403438 <usart_serial_init+0x148>)
  4033bc:	4798      	blx	r3
  4033be:	4602      	mov	r2, r0
  4033c0:	f107 030c 	add.w	r3, r7, #12
  4033c4:	4619      	mov	r1, r3
  4033c6:	6878      	ldr	r0, [r7, #4]
  4033c8:	4b24      	ldr	r3, [pc, #144]	; (40345c <usart_serial_init+0x16c>)
  4033ca:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4033cc:	6878      	ldr	r0, [r7, #4]
  4033ce:	4b24      	ldr	r3, [pc, #144]	; (403460 <usart_serial_init+0x170>)
  4033d0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4033d2:	6878      	ldr	r0, [r7, #4]
  4033d4:	4b23      	ldr	r3, [pc, #140]	; (403464 <usart_serial_init+0x174>)
  4033d6:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4033d8:	687b      	ldr	r3, [r7, #4]
  4033da:	4a23      	ldr	r2, [pc, #140]	; (403468 <usart_serial_init+0x178>)
  4033dc:	4293      	cmp	r3, r2
  4033de:	d111      	bne.n	403404 <usart_serial_init+0x114>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  4033e0:	200e      	movs	r0, #14
  4033e2:	4b17      	ldr	r3, [pc, #92]	; (403440 <usart_serial_init+0x150>)
  4033e4:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4033e6:	4b14      	ldr	r3, [pc, #80]	; (403438 <usart_serial_init+0x148>)
  4033e8:	4798      	blx	r3
  4033ea:	4602      	mov	r2, r0
  4033ec:	f107 030c 	add.w	r3, r7, #12
  4033f0:	4619      	mov	r1, r3
  4033f2:	6878      	ldr	r0, [r7, #4]
  4033f4:	4b19      	ldr	r3, [pc, #100]	; (40345c <usart_serial_init+0x16c>)
  4033f6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4033f8:	6878      	ldr	r0, [r7, #4]
  4033fa:	4b19      	ldr	r3, [pc, #100]	; (403460 <usart_serial_init+0x170>)
  4033fc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4033fe:	6878      	ldr	r0, [r7, #4]
  403400:	4b18      	ldr	r3, [pc, #96]	; (403464 <usart_serial_init+0x174>)
  403402:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403404:	687b      	ldr	r3, [r7, #4]
  403406:	4a19      	ldr	r2, [pc, #100]	; (40346c <usart_serial_init+0x17c>)
  403408:	4293      	cmp	r3, r2
  40340a:	d111      	bne.n	403430 <usart_serial_init+0x140>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40340c:	200f      	movs	r0, #15
  40340e:	4b0c      	ldr	r3, [pc, #48]	; (403440 <usart_serial_init+0x150>)
  403410:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403412:	4b09      	ldr	r3, [pc, #36]	; (403438 <usart_serial_init+0x148>)
  403414:	4798      	blx	r3
  403416:	4602      	mov	r2, r0
  403418:	f107 030c 	add.w	r3, r7, #12
  40341c:	4619      	mov	r1, r3
  40341e:	6878      	ldr	r0, [r7, #4]
  403420:	4b0e      	ldr	r3, [pc, #56]	; (40345c <usart_serial_init+0x16c>)
  403422:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403424:	6878      	ldr	r0, [r7, #4]
  403426:	4b0e      	ldr	r3, [pc, #56]	; (403460 <usart_serial_init+0x170>)
  403428:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40342a:	6878      	ldr	r0, [r7, #4]
  40342c:	4b0d      	ldr	r3, [pc, #52]	; (403464 <usart_serial_init+0x174>)
  40342e:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  403430:	bf00      	nop
  403432:	3730      	adds	r7, #48	; 0x30
  403434:	46bd      	mov	sp, r7
  403436:	bd80      	pop	{r7, pc}
  403438:	004032c1 	.word	0x004032c1
  40343c:	400e0800 	.word	0x400e0800
  403440:	004032d5 	.word	0x004032d5
  403444:	00401781 	.word	0x00401781
  403448:	400e0a00 	.word	0x400e0a00
  40344c:	400e1a00 	.word	0x400e1a00
  403450:	400e1c00 	.word	0x400e1c00
  403454:	400e1e00 	.word	0x400e1e00
  403458:	40024000 	.word	0x40024000
  40345c:	00401919 	.word	0x00401919
  403460:	0040199d 	.word	0x0040199d
  403464:	004019d1 	.word	0x004019d1
  403468:	40028000 	.word	0x40028000
  40346c:	4002c000 	.word	0x4002c000

00403470 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403470:	b580      	push	{r7, lr}
  403472:	b082      	sub	sp, #8
  403474:	af00      	add	r7, sp, #0
  403476:	6078      	str	r0, [r7, #4]
  403478:	460b      	mov	r3, r1
  40347a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40347c:	687b      	ldr	r3, [r7, #4]
  40347e:	4a36      	ldr	r2, [pc, #216]	; (403558 <usart_serial_putchar+0xe8>)
  403480:	4293      	cmp	r3, r2
  403482:	d10a      	bne.n	40349a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403484:	bf00      	nop
  403486:	78fb      	ldrb	r3, [r7, #3]
  403488:	4619      	mov	r1, r3
  40348a:	6878      	ldr	r0, [r7, #4]
  40348c:	4b33      	ldr	r3, [pc, #204]	; (40355c <usart_serial_putchar+0xec>)
  40348e:	4798      	blx	r3
  403490:	4603      	mov	r3, r0
  403492:	2b00      	cmp	r3, #0
  403494:	d1f7      	bne.n	403486 <usart_serial_putchar+0x16>
		return 1;
  403496:	2301      	movs	r3, #1
  403498:	e05a      	b.n	403550 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40349a:	687b      	ldr	r3, [r7, #4]
  40349c:	4a30      	ldr	r2, [pc, #192]	; (403560 <usart_serial_putchar+0xf0>)
  40349e:	4293      	cmp	r3, r2
  4034a0:	d10a      	bne.n	4034b8 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4034a2:	bf00      	nop
  4034a4:	78fb      	ldrb	r3, [r7, #3]
  4034a6:	4619      	mov	r1, r3
  4034a8:	6878      	ldr	r0, [r7, #4]
  4034aa:	4b2c      	ldr	r3, [pc, #176]	; (40355c <usart_serial_putchar+0xec>)
  4034ac:	4798      	blx	r3
  4034ae:	4603      	mov	r3, r0
  4034b0:	2b00      	cmp	r3, #0
  4034b2:	d1f7      	bne.n	4034a4 <usart_serial_putchar+0x34>
		return 1;
  4034b4:	2301      	movs	r3, #1
  4034b6:	e04b      	b.n	403550 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4034b8:	687b      	ldr	r3, [r7, #4]
  4034ba:	4a2a      	ldr	r2, [pc, #168]	; (403564 <usart_serial_putchar+0xf4>)
  4034bc:	4293      	cmp	r3, r2
  4034be:	d10a      	bne.n	4034d6 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  4034c0:	bf00      	nop
  4034c2:	78fb      	ldrb	r3, [r7, #3]
  4034c4:	4619      	mov	r1, r3
  4034c6:	6878      	ldr	r0, [r7, #4]
  4034c8:	4b24      	ldr	r3, [pc, #144]	; (40355c <usart_serial_putchar+0xec>)
  4034ca:	4798      	blx	r3
  4034cc:	4603      	mov	r3, r0
  4034ce:	2b00      	cmp	r3, #0
  4034d0:	d1f7      	bne.n	4034c2 <usart_serial_putchar+0x52>
		return 1;
  4034d2:	2301      	movs	r3, #1
  4034d4:	e03c      	b.n	403550 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4034d6:	687b      	ldr	r3, [r7, #4]
  4034d8:	4a23      	ldr	r2, [pc, #140]	; (403568 <usart_serial_putchar+0xf8>)
  4034da:	4293      	cmp	r3, r2
  4034dc:	d10a      	bne.n	4034f4 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  4034de:	bf00      	nop
  4034e0:	78fb      	ldrb	r3, [r7, #3]
  4034e2:	4619      	mov	r1, r3
  4034e4:	6878      	ldr	r0, [r7, #4]
  4034e6:	4b1d      	ldr	r3, [pc, #116]	; (40355c <usart_serial_putchar+0xec>)
  4034e8:	4798      	blx	r3
  4034ea:	4603      	mov	r3, r0
  4034ec:	2b00      	cmp	r3, #0
  4034ee:	d1f7      	bne.n	4034e0 <usart_serial_putchar+0x70>
		return 1;
  4034f0:	2301      	movs	r3, #1
  4034f2:	e02d      	b.n	403550 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4034f4:	687b      	ldr	r3, [r7, #4]
  4034f6:	4a1d      	ldr	r2, [pc, #116]	; (40356c <usart_serial_putchar+0xfc>)
  4034f8:	4293      	cmp	r3, r2
  4034fa:	d10a      	bne.n	403512 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4034fc:	bf00      	nop
  4034fe:	78fb      	ldrb	r3, [r7, #3]
  403500:	4619      	mov	r1, r3
  403502:	6878      	ldr	r0, [r7, #4]
  403504:	4b1a      	ldr	r3, [pc, #104]	; (403570 <usart_serial_putchar+0x100>)
  403506:	4798      	blx	r3
  403508:	4603      	mov	r3, r0
  40350a:	2b00      	cmp	r3, #0
  40350c:	d1f7      	bne.n	4034fe <usart_serial_putchar+0x8e>
		return 1;
  40350e:	2301      	movs	r3, #1
  403510:	e01e      	b.n	403550 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403512:	687b      	ldr	r3, [r7, #4]
  403514:	4a17      	ldr	r2, [pc, #92]	; (403574 <usart_serial_putchar+0x104>)
  403516:	4293      	cmp	r3, r2
  403518:	d10a      	bne.n	403530 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40351a:	bf00      	nop
  40351c:	78fb      	ldrb	r3, [r7, #3]
  40351e:	4619      	mov	r1, r3
  403520:	6878      	ldr	r0, [r7, #4]
  403522:	4b13      	ldr	r3, [pc, #76]	; (403570 <usart_serial_putchar+0x100>)
  403524:	4798      	blx	r3
  403526:	4603      	mov	r3, r0
  403528:	2b00      	cmp	r3, #0
  40352a:	d1f7      	bne.n	40351c <usart_serial_putchar+0xac>
		return 1;
  40352c:	2301      	movs	r3, #1
  40352e:	e00f      	b.n	403550 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403530:	687b      	ldr	r3, [r7, #4]
  403532:	4a11      	ldr	r2, [pc, #68]	; (403578 <usart_serial_putchar+0x108>)
  403534:	4293      	cmp	r3, r2
  403536:	d10a      	bne.n	40354e <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  403538:	bf00      	nop
  40353a:	78fb      	ldrb	r3, [r7, #3]
  40353c:	4619      	mov	r1, r3
  40353e:	6878      	ldr	r0, [r7, #4]
  403540:	4b0b      	ldr	r3, [pc, #44]	; (403570 <usart_serial_putchar+0x100>)
  403542:	4798      	blx	r3
  403544:	4603      	mov	r3, r0
  403546:	2b00      	cmp	r3, #0
  403548:	d1f7      	bne.n	40353a <usart_serial_putchar+0xca>
		return 1;
  40354a:	2301      	movs	r3, #1
  40354c:	e000      	b.n	403550 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40354e:	2300      	movs	r3, #0
}
  403550:	4618      	mov	r0, r3
  403552:	3708      	adds	r7, #8
  403554:	46bd      	mov	sp, r7
  403556:	bd80      	pop	{r7, pc}
  403558:	400e0800 	.word	0x400e0800
  40355c:	004017d9 	.word	0x004017d9
  403560:	400e0a00 	.word	0x400e0a00
  403564:	400e1a00 	.word	0x400e1a00
  403568:	400e1c00 	.word	0x400e1c00
  40356c:	40024000 	.word	0x40024000
  403570:	00401a3d 	.word	0x00401a3d
  403574:	40028000 	.word	0x40028000
  403578:	4002c000 	.word	0x4002c000

0040357c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40357c:	b580      	push	{r7, lr}
  40357e:	b084      	sub	sp, #16
  403580:	af00      	add	r7, sp, #0
  403582:	6078      	str	r0, [r7, #4]
  403584:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  403586:	2300      	movs	r3, #0
  403588:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40358a:	687b      	ldr	r3, [r7, #4]
  40358c:	4a34      	ldr	r2, [pc, #208]	; (403660 <usart_serial_getchar+0xe4>)
  40358e:	4293      	cmp	r3, r2
  403590:	d107      	bne.n	4035a2 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403592:	bf00      	nop
  403594:	6839      	ldr	r1, [r7, #0]
  403596:	6878      	ldr	r0, [r7, #4]
  403598:	4b32      	ldr	r3, [pc, #200]	; (403664 <usart_serial_getchar+0xe8>)
  40359a:	4798      	blx	r3
  40359c:	4603      	mov	r3, r0
  40359e:	2b00      	cmp	r3, #0
  4035a0:	d1f8      	bne.n	403594 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4035a2:	687b      	ldr	r3, [r7, #4]
  4035a4:	4a30      	ldr	r2, [pc, #192]	; (403668 <usart_serial_getchar+0xec>)
  4035a6:	4293      	cmp	r3, r2
  4035a8:	d107      	bne.n	4035ba <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  4035aa:	bf00      	nop
  4035ac:	6839      	ldr	r1, [r7, #0]
  4035ae:	6878      	ldr	r0, [r7, #4]
  4035b0:	4b2c      	ldr	r3, [pc, #176]	; (403664 <usart_serial_getchar+0xe8>)
  4035b2:	4798      	blx	r3
  4035b4:	4603      	mov	r3, r0
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	d1f8      	bne.n	4035ac <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4035ba:	687b      	ldr	r3, [r7, #4]
  4035bc:	4a2b      	ldr	r2, [pc, #172]	; (40366c <usart_serial_getchar+0xf0>)
  4035be:	4293      	cmp	r3, r2
  4035c0:	d107      	bne.n	4035d2 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  4035c2:	bf00      	nop
  4035c4:	6839      	ldr	r1, [r7, #0]
  4035c6:	6878      	ldr	r0, [r7, #4]
  4035c8:	4b26      	ldr	r3, [pc, #152]	; (403664 <usart_serial_getchar+0xe8>)
  4035ca:	4798      	blx	r3
  4035cc:	4603      	mov	r3, r0
  4035ce:	2b00      	cmp	r3, #0
  4035d0:	d1f8      	bne.n	4035c4 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4035d2:	687b      	ldr	r3, [r7, #4]
  4035d4:	4a26      	ldr	r2, [pc, #152]	; (403670 <usart_serial_getchar+0xf4>)
  4035d6:	4293      	cmp	r3, r2
  4035d8:	d107      	bne.n	4035ea <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  4035da:	bf00      	nop
  4035dc:	6839      	ldr	r1, [r7, #0]
  4035de:	6878      	ldr	r0, [r7, #4]
  4035e0:	4b20      	ldr	r3, [pc, #128]	; (403664 <usart_serial_getchar+0xe8>)
  4035e2:	4798      	blx	r3
  4035e4:	4603      	mov	r3, r0
  4035e6:	2b00      	cmp	r3, #0
  4035e8:	d1f8      	bne.n	4035dc <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4035ea:	687b      	ldr	r3, [r7, #4]
  4035ec:	4a21      	ldr	r2, [pc, #132]	; (403674 <usart_serial_getchar+0xf8>)
  4035ee:	4293      	cmp	r3, r2
  4035f0:	d10d      	bne.n	40360e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4035f2:	bf00      	nop
  4035f4:	f107 030c 	add.w	r3, r7, #12
  4035f8:	4619      	mov	r1, r3
  4035fa:	6878      	ldr	r0, [r7, #4]
  4035fc:	4b1e      	ldr	r3, [pc, #120]	; (403678 <usart_serial_getchar+0xfc>)
  4035fe:	4798      	blx	r3
  403600:	4603      	mov	r3, r0
  403602:	2b00      	cmp	r3, #0
  403604:	d1f6      	bne.n	4035f4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  403606:	68fb      	ldr	r3, [r7, #12]
  403608:	b2da      	uxtb	r2, r3
  40360a:	683b      	ldr	r3, [r7, #0]
  40360c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40360e:	687b      	ldr	r3, [r7, #4]
  403610:	4a1a      	ldr	r2, [pc, #104]	; (40367c <usart_serial_getchar+0x100>)
  403612:	4293      	cmp	r3, r2
  403614:	d10d      	bne.n	403632 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  403616:	bf00      	nop
  403618:	f107 030c 	add.w	r3, r7, #12
  40361c:	4619      	mov	r1, r3
  40361e:	6878      	ldr	r0, [r7, #4]
  403620:	4b15      	ldr	r3, [pc, #84]	; (403678 <usart_serial_getchar+0xfc>)
  403622:	4798      	blx	r3
  403624:	4603      	mov	r3, r0
  403626:	2b00      	cmp	r3, #0
  403628:	d1f6      	bne.n	403618 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  40362a:	68fb      	ldr	r3, [r7, #12]
  40362c:	b2da      	uxtb	r2, r3
  40362e:	683b      	ldr	r3, [r7, #0]
  403630:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403632:	687b      	ldr	r3, [r7, #4]
  403634:	4a12      	ldr	r2, [pc, #72]	; (403680 <usart_serial_getchar+0x104>)
  403636:	4293      	cmp	r3, r2
  403638:	d10d      	bne.n	403656 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  40363a:	bf00      	nop
  40363c:	f107 030c 	add.w	r3, r7, #12
  403640:	4619      	mov	r1, r3
  403642:	6878      	ldr	r0, [r7, #4]
  403644:	4b0c      	ldr	r3, [pc, #48]	; (403678 <usart_serial_getchar+0xfc>)
  403646:	4798      	blx	r3
  403648:	4603      	mov	r3, r0
  40364a:	2b00      	cmp	r3, #0
  40364c:	d1f6      	bne.n	40363c <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  40364e:	68fb      	ldr	r3, [r7, #12]
  403650:	b2da      	uxtb	r2, r3
  403652:	683b      	ldr	r3, [r7, #0]
  403654:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403656:	bf00      	nop
  403658:	3710      	adds	r7, #16
  40365a:	46bd      	mov	sp, r7
  40365c:	bd80      	pop	{r7, pc}
  40365e:	bf00      	nop
  403660:	400e0800 	.word	0x400e0800
  403664:	00401809 	.word	0x00401809
  403668:	400e0a00 	.word	0x400e0a00
  40366c:	400e1a00 	.word	0x400e1a00
  403670:	400e1c00 	.word	0x400e1c00
  403674:	40024000 	.word	0x40024000
  403678:	00401a6f 	.word	0x00401a6f
  40367c:	40028000 	.word	0x40028000
  403680:	4002c000 	.word	0x4002c000

00403684 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403684:	b580      	push	{r7, lr}
  403686:	b082      	sub	sp, #8
  403688:	af00      	add	r7, sp, #0
  40368a:	6078      	str	r0, [r7, #4]
  40368c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40368e:	4a0f      	ldr	r2, [pc, #60]	; (4036cc <stdio_serial_init+0x48>)
  403690:	687b      	ldr	r3, [r7, #4]
  403692:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403694:	4b0e      	ldr	r3, [pc, #56]	; (4036d0 <stdio_serial_init+0x4c>)
  403696:	4a0f      	ldr	r2, [pc, #60]	; (4036d4 <stdio_serial_init+0x50>)
  403698:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40369a:	4b0f      	ldr	r3, [pc, #60]	; (4036d8 <stdio_serial_init+0x54>)
  40369c:	4a0f      	ldr	r2, [pc, #60]	; (4036dc <stdio_serial_init+0x58>)
  40369e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  4036a0:	6839      	ldr	r1, [r7, #0]
  4036a2:	6878      	ldr	r0, [r7, #4]
  4036a4:	4b0e      	ldr	r3, [pc, #56]	; (4036e0 <stdio_serial_init+0x5c>)
  4036a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4036a8:	4b0e      	ldr	r3, [pc, #56]	; (4036e4 <stdio_serial_init+0x60>)
  4036aa:	681b      	ldr	r3, [r3, #0]
  4036ac:	689b      	ldr	r3, [r3, #8]
  4036ae:	2100      	movs	r1, #0
  4036b0:	4618      	mov	r0, r3
  4036b2:	4b0d      	ldr	r3, [pc, #52]	; (4036e8 <stdio_serial_init+0x64>)
  4036b4:	4798      	blx	r3
	setbuf(stdin, NULL);
  4036b6:	4b0b      	ldr	r3, [pc, #44]	; (4036e4 <stdio_serial_init+0x60>)
  4036b8:	681b      	ldr	r3, [r3, #0]
  4036ba:	685b      	ldr	r3, [r3, #4]
  4036bc:	2100      	movs	r1, #0
  4036be:	4618      	mov	r0, r3
  4036c0:	4b09      	ldr	r3, [pc, #36]	; (4036e8 <stdio_serial_init+0x64>)
  4036c2:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  4036c4:	bf00      	nop
  4036c6:	3708      	adds	r7, #8
  4036c8:	46bd      	mov	sp, r7
  4036ca:	bd80      	pop	{r7, pc}
  4036cc:	20401304 	.word	0x20401304
  4036d0:	20401300 	.word	0x20401300
  4036d4:	00403471 	.word	0x00403471
  4036d8:	204012fc 	.word	0x204012fc
  4036dc:	0040357d 	.word	0x0040357d
  4036e0:	004032f1 	.word	0x004032f1
  4036e4:	20400010 	.word	0x20400010
  4036e8:	00404179 	.word	0x00404179

004036ec <SysTick_Handler>:

volatile uint64_t unix_timestamp_ms = 0;
volatile uint32_t counter = 0;

void SysTick_Handler(void)
{
  4036ec:	b490      	push	{r4, r7}
  4036ee:	af00      	add	r7, sp, #0
	counter++;
  4036f0:	4b08      	ldr	r3, [pc, #32]	; (403714 <SysTick_Handler+0x28>)
  4036f2:	681b      	ldr	r3, [r3, #0]
  4036f4:	3301      	adds	r3, #1
  4036f6:	4a07      	ldr	r2, [pc, #28]	; (403714 <SysTick_Handler+0x28>)
  4036f8:	6013      	str	r3, [r2, #0]
	unix_timestamp_ms++;
  4036fa:	4b07      	ldr	r3, [pc, #28]	; (403718 <SysTick_Handler+0x2c>)
  4036fc:	e9d3 3400 	ldrd	r3, r4, [r3]
  403700:	3301      	adds	r3, #1
  403702:	f144 0400 	adc.w	r4, r4, #0
  403706:	4a04      	ldr	r2, [pc, #16]	; (403718 <SysTick_Handler+0x2c>)
  403708:	e9c2 3400 	strd	r3, r4, [r2]
}
  40370c:	bf00      	nop
  40370e:	46bd      	mov	sp, r7
  403710:	bc90      	pop	{r4, r7}
  403712:	4770      	bx	lr
  403714:	204012c0 	.word	0x204012c0
  403718:	204012b8 	.word	0x204012b8

0040371c <mdelay>:

static void mdelay(uint32_t delay)
{
  40371c:	b480      	push	{r7}
  40371e:	b085      	sub	sp, #20
  403720:	af00      	add	r7, sp, #0
  403722:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	
	ticks = counter;
  403724:	4b08      	ldr	r3, [pc, #32]	; (403748 <mdelay+0x2c>)
  403726:	681b      	ldr	r3, [r3, #0]
  403728:	60fb      	str	r3, [r7, #12]
	while ((counter - ticks) < delay);
  40372a:	bf00      	nop
  40372c:	4b06      	ldr	r3, [pc, #24]	; (403748 <mdelay+0x2c>)
  40372e:	681a      	ldr	r2, [r3, #0]
  403730:	68fb      	ldr	r3, [r7, #12]
  403732:	1ad2      	subs	r2, r2, r3
  403734:	687b      	ldr	r3, [r7, #4]
  403736:	429a      	cmp	r2, r3
  403738:	d3f8      	bcc.n	40372c <mdelay+0x10>
}
  40373a:	bf00      	nop
  40373c:	3714      	adds	r7, #20
  40373e:	46bd      	mov	sp, r7
  403740:	f85d 7b04 	ldr.w	r7, [sp], #4
  403744:	4770      	bx	lr
  403746:	bf00      	nop
  403748:	204012c0 	.word	0x204012c0

0040374c <configure_console>:
/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
  40374c:	b590      	push	{r4, r7, lr}
  40374e:	b085      	sub	sp, #20
  403750:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403752:	4b08      	ldr	r3, [pc, #32]	; (403774 <configure_console+0x28>)
  403754:	463c      	mov	r4, r7
  403756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40375c:	200e      	movs	r0, #14
  40375e:	4b06      	ldr	r3, [pc, #24]	; (403778 <configure_console+0x2c>)
  403760:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403762:	463b      	mov	r3, r7
  403764:	4619      	mov	r1, r3
  403766:	4805      	ldr	r0, [pc, #20]	; (40377c <configure_console+0x30>)
  403768:	4b05      	ldr	r3, [pc, #20]	; (403780 <configure_console+0x34>)
  40376a:	4798      	blx	r3
}
  40376c:	bf00      	nop
  40376e:	3714      	adds	r7, #20
  403770:	46bd      	mov	sp, r7
  403772:	bd90      	pop	{r4, r7, pc}
  403774:	00406b10 	.word	0x00406b10
  403778:	004032d5 	.word	0x004032d5
  40377c:	40028000 	.word	0x40028000
  403780:	00403685 	.word	0x00403685

00403784 <mcan1_get_message_available>:
		
	}
}

void mcan1_get_message_available()
{
  403784:	b590      	push	{r4, r7, lr}
  403786:	b08b      	sub	sp, #44	; 0x2c
  403788:	af00      	add	r7, sp, #0
	uint8_t i = 0;
  40378a:	2300      	movs	r3, #0
  40378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_rx) > 0)
  403790:	e02f      	b.n	4037f2 <mcan1_get_message_available+0x6e>
	{
		mcan_timestamped_rx_message_t time_message;

		circ_buf_flex_pop(&mcan1_buffer.buffer_rx, &time_message);
  403792:	463b      	mov	r3, r7
  403794:	4619      	mov	r1, r3
  403796:	481c      	ldr	r0, [pc, #112]	; (403808 <mcan1_get_message_available+0x84>)
  403798:	4b1c      	ldr	r3, [pc, #112]	; (40380c <mcan1_get_message_available+0x88>)
  40379a:	4798      	blx	r3

		printf("[%i][%llu]", i, time_message.timestamp);
  40379c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
  4037a0:	e9d7 3400 	ldrd	r3, r4, [r7]
  4037a4:	461a      	mov	r2, r3
  4037a6:	4623      	mov	r3, r4
  4037a8:	4819      	ldr	r0, [pc, #100]	; (403810 <mcan1_get_message_available+0x8c>)
  4037aa:	4c1a      	ldr	r4, [pc, #104]	; (403814 <mcan1_get_message_available+0x90>)
  4037ac:	47a0      	blx	r4
		i++;
  4037ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4037b2:	3301      	adds	r3, #1
  4037b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		printf("(%X)", time_message.rx_message.id);
  4037b8:	68fb      	ldr	r3, [r7, #12]
  4037ba:	4619      	mov	r1, r3
  4037bc:	4816      	ldr	r0, [pc, #88]	; (403818 <mcan1_get_message_available+0x94>)
  4037be:	4b15      	ldr	r3, [pc, #84]	; (403814 <mcan1_get_message_available+0x90>)
  4037c0:	4798      	blx	r3

		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  4037c2:	2300      	movs	r3, #0
  4037c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  4037c6:	e00c      	b.n	4037e2 <mcan1_get_message_available+0x5e>
		{
			printf("|0x%2X", time_message.rx_message.data[j]);
  4037c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4037ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
  4037ce:	4413      	add	r3, r2
  4037d0:	f813 3c17 	ldrb.w	r3, [r3, #-23]
  4037d4:	4619      	mov	r1, r3
  4037d6:	4811      	ldr	r0, [pc, #68]	; (40381c <mcan1_get_message_available+0x98>)
  4037d8:	4b0e      	ldr	r3, [pc, #56]	; (403814 <mcan1_get_message_available+0x90>)
  4037da:	4798      	blx	r3
		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  4037dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4037de:	3301      	adds	r3, #1
  4037e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  4037e2:	7c3b      	ldrb	r3, [r7, #16]
  4037e4:	b29b      	uxth	r3, r3
  4037e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  4037e8:	429a      	cmp	r2, r3
  4037ea:	d3ed      	bcc.n	4037c8 <mcan1_get_message_available+0x44>
		}
		printf("|\r\n");
  4037ec:	480c      	ldr	r0, [pc, #48]	; (403820 <mcan1_get_message_available+0x9c>)
  4037ee:	4b09      	ldr	r3, [pc, #36]	; (403814 <mcan1_get_message_available+0x90>)
  4037f0:	4798      	blx	r3
	while(circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_rx) > 0)
  4037f2:	4805      	ldr	r0, [pc, #20]	; (403808 <mcan1_get_message_available+0x84>)
  4037f4:	4b0b      	ldr	r3, [pc, #44]	; (403824 <mcan1_get_message_available+0xa0>)
  4037f6:	4798      	blx	r3
  4037f8:	4603      	mov	r3, r0
  4037fa:	2b00      	cmp	r3, #0
  4037fc:	d1c9      	bne.n	403792 <mcan1_get_message_available+0xe>
		
	}
}
  4037fe:	bf00      	nop
  403800:	372c      	adds	r7, #44	; 0x2c
  403802:	46bd      	mov	sp, r7
  403804:	bd90      	pop	{r4, r7, pc}
  403806:	bf00      	nop
  403808:	204013b4 	.word	0x204013b4
  40380c:	00402065 	.word	0x00402065
  403810:	00406b20 	.word	0x00406b20
  403814:	004039d5 	.word	0x004039d5
  403818:	00406b2c 	.word	0x00406b2c
  40381c:	00406b34 	.word	0x00406b34
  403820:	00406b3c 	.word	0x00406b3c
  403824:	00401f35 	.word	0x00401f35

00403828 <main>:
	uint16_t 				a2[16];
}a_t;


int main(void)
{
  403828:	b590      	push	{r4, r7, lr}
  40382a:	b08d      	sub	sp, #52	; 0x34
  40382c:	af02      	add	r7, sp, #8
	sysclk_init();
  40382e:	4b41      	ldr	r3, [pc, #260]	; (403934 <main+0x10c>)
  403830:	4798      	blx	r3
	board_init();
  403832:	4b41      	ldr	r3, [pc, #260]	; (403938 <main+0x110>)
  403834:	4798      	blx	r3

	configure_console();
  403836:	4b41      	ldr	r3, [pc, #260]	; (40393c <main+0x114>)
  403838:	4798      	blx	r3
    configure_mcan0();
  40383a:	4b41      	ldr	r3, [pc, #260]	; (403940 <main+0x118>)
  40383c:	4798      	blx	r3
    configure_mcan1();
  40383e:	4b41      	ldr	r3, [pc, #260]	; (403944 <main+0x11c>)
  403840:	4798      	blx	r3
	
	SysTick_Config(sysclk_get_cpu_hz() / 1000);
  403842:	4b41      	ldr	r3, [pc, #260]	; (403948 <main+0x120>)
  403844:	4798      	blx	r3
  403846:	4602      	mov	r2, r0
  403848:	4b40      	ldr	r3, [pc, #256]	; (40394c <main+0x124>)
  40384a:	fba3 2302 	umull	r2, r3, r3, r2
  40384e:	099b      	lsrs	r3, r3, #6
  403850:	4618      	mov	r0, r3
  403852:	4b3f      	ldr	r3, [pc, #252]	; (403950 <main+0x128>)
  403854:	4798      	blx	r3
	printf("________________________START_____________________________________\r\n");
  403856:	483f      	ldr	r0, [pc, #252]	; (403954 <main+0x12c>)
  403858:	4b3f      	ldr	r3, [pc, #252]	; (403958 <main+0x130>)
  40385a:	4798      	blx	r3
	//mcan_tx_transfer_request(&mcan1_instance, 1<<1);
	test_t t;
	while (1)
	{
		printf("---------------------------------%i--------------------------------\r\n", a);
  40385c:	4b3f      	ldr	r3, [pc, #252]	; (40395c <main+0x134>)
  40385e:	781b      	ldrb	r3, [r3, #0]
  403860:	4619      	mov	r1, r3
  403862:	483f      	ldr	r0, [pc, #252]	; (403960 <main+0x138>)
  403864:	4b3c      	ldr	r3, [pc, #240]	; (403958 <main+0x130>)
  403866:	4798      	blx	r3
		a++;
  403868:	4b3c      	ldr	r3, [pc, #240]	; (40395c <main+0x134>)
  40386a:	781b      	ldrb	r3, [r3, #0]
  40386c:	3301      	adds	r3, #1
  40386e:	b2da      	uxtb	r2, r3
  403870:	4b3a      	ldr	r3, [pc, #232]	; (40395c <main+0x134>)
  403872:	701a      	strb	r2, [r3, #0]
		
		printf("[%i][%i]\r\n", mcan0_buffer.buffer_being_emptied_by_interruption, mcan0_buffer.interruption_occured_while_adding_in_tx_buffer);
  403874:	4b3b      	ldr	r3, [pc, #236]	; (403964 <main+0x13c>)
  403876:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  40387a:	b2db      	uxtb	r3, r3
  40387c:	4619      	mov	r1, r3
  40387e:	4b39      	ldr	r3, [pc, #228]	; (403964 <main+0x13c>)
  403880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  403884:	b2db      	uxtb	r3, r3
  403886:	461a      	mov	r2, r3
  403888:	4837      	ldr	r0, [pc, #220]	; (403968 <main+0x140>)
  40388a:	4b33      	ldr	r3, [pc, #204]	; (403958 <main+0x130>)
  40388c:	4798      	blx	r3
		uint32_t reg;
		
		//reg = mcan_tx_get_fifo_queue_status(&mcan1_instance);
		//printf("1FREE %i[%i]: %i:%i\r\n", reg&0b111111, GET_BITS(reg, 21, 21),GET_BITS(reg, 8, 12), GET_BITS(reg, 16, 20));
		mdelay(50);
  40388e:	2032      	movs	r0, #50	; 0x32
  403890:	4b36      	ldr	r3, [pc, #216]	; (40396c <main+0x144>)
  403892:	4798      	blx	r3
		uint32_t status = mcan_tx_get_fifo_queue_status(&mcan1_instance);
  403894:	4836      	ldr	r0, [pc, #216]	; (403970 <main+0x148>)
  403896:	4b37      	ldr	r3, [pc, #220]	; (403974 <main+0x14c>)
  403898:	4798      	blx	r3
  40389a:	61f8      	str	r0, [r7, #28]
		bool is_full = (status& (0x1u<<25))>>25;
  40389c:	69fb      	ldr	r3, [r7, #28]
  40389e:	0e5b      	lsrs	r3, r3, #25
  4038a0:	f003 0301 	and.w	r3, r3, #1
  4038a4:	2b00      	cmp	r3, #0
  4038a6:	bf14      	ite	ne
  4038a8:	2301      	movne	r3, #1
  4038aa:	2300      	moveq	r3, #0
  4038ac:	76fb      	strb	r3, [r7, #27]
		uint32_t fifo_put_index = (status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
  4038ae:	69fb      	ldr	r3, [r7, #28]
  4038b0:	0c1b      	lsrs	r3, r3, #16
  4038b2:	f003 031f 	and.w	r3, r3, #31
  4038b6:	617b      	str	r3, [r7, #20]
		uint32_t fifo_get_index = (status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  4038b8:	69fb      	ldr	r3, [r7, #28]
  4038ba:	0a1b      	lsrs	r3, r3, #8
  4038bc:	f003 031f 	and.w	r3, r3, #31
  4038c0:	613b      	str	r3, [r7, #16]
		uint32_t fifo_fill_level = (status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
  4038c2:	69fb      	ldr	r3, [r7, #28]
  4038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4038c8:	60fb      	str	r3, [r7, #12]
		
		reg = mcan_tx_get_fifo_queue_status(&mcan1_instance);
  4038ca:	4829      	ldr	r0, [pc, #164]	; (403970 <main+0x148>)
  4038cc:	4b29      	ldr	r3, [pc, #164]	; (403974 <main+0x14c>)
  4038ce:	4798      	blx	r3
  4038d0:	60b8      	str	r0, [r7, #8]
		//printf("2FREE %i[%i]: %i:%i\r\n", reg&0b111111, GET_BITS(reg, 21, 21), GET_BITS(reg, 8, 12), GET_BITS(reg, 16, 20));
		//printf("FIFO %iG  %iP %iF\r\n", fifo_get_index, fifo_put_index, mcan0_message_transmited);
		mcan1_get_message_available();
  4038d2:	4b29      	ldr	r3, [pc, #164]	; (403978 <main+0x150>)
  4038d4:	4798      	blx	r3
		
		

		#define data_len 4
		for (uint8_t i = 0; i < 64; i++)
  4038d6:	2300      	movs	r3, #0
  4038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4038dc:	e00d      	b.n	4038fa <main+0xd2>
		{
			mcan0_send_message(i, tx_message, data_len, true, false);
  4038de:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
  4038e2:	2300      	movs	r3, #0
  4038e4:	9300      	str	r3, [sp, #0]
  4038e6:	2301      	movs	r3, #1
  4038e8:	2204      	movs	r2, #4
  4038ea:	4924      	ldr	r1, [pc, #144]	; (40397c <main+0x154>)
  4038ec:	4c24      	ldr	r4, [pc, #144]	; (403980 <main+0x158>)
  4038ee:	47a0      	blx	r4
		for (uint8_t i = 0; i < 64; i++)
  4038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4038f4:	3301      	adds	r3, #1
  4038f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4038fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4038fe:	2b3f      	cmp	r3, #63	; 0x3f
  403900:	d9ed      	bls.n	4038de <main+0xb6>
		}
		
		//_mcan_send_standard_message(&mcan1_instance, 0b00000010100, tx_message, data_len);
		
		reg = mcan_tx_get_fifo_queue_status(&mcan1_instance);
  403902:	481b      	ldr	r0, [pc, #108]	; (403970 <main+0x148>)
  403904:	4b1b      	ldr	r3, [pc, #108]	; (403974 <main+0x14c>)
  403906:	4798      	blx	r3
  403908:	60b8      	str	r0, [r7, #8]
		//printf("3FREE %i[%i]: %i:%i\r\n", reg&0b111111, GET_BITS(reg, 21, 21), GET_BITS(reg, 8, 12), GET_BITS(reg, 16, 20));
		for (uint32_t i = 0; i < data_len; i++)
  40390a:	2300      	movs	r3, #0
  40390c:	623b      	str	r3, [r7, #32]
  40390e:	e00d      	b.n	40392c <main+0x104>
		{
			tx_message[i]++;
  403910:	4a1a      	ldr	r2, [pc, #104]	; (40397c <main+0x154>)
  403912:	6a3b      	ldr	r3, [r7, #32]
  403914:	4413      	add	r3, r2
  403916:	781b      	ldrb	r3, [r3, #0]
  403918:	3301      	adds	r3, #1
  40391a:	b2d9      	uxtb	r1, r3
  40391c:	4a17      	ldr	r2, [pc, #92]	; (40397c <main+0x154>)
  40391e:	6a3b      	ldr	r3, [r7, #32]
  403920:	4413      	add	r3, r2
  403922:	460a      	mov	r2, r1
  403924:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < data_len; i++)
  403926:	6a3b      	ldr	r3, [r7, #32]
  403928:	3301      	adds	r3, #1
  40392a:	623b      	str	r3, [r7, #32]
  40392c:	6a3b      	ldr	r3, [r7, #32]
  40392e:	2b03      	cmp	r3, #3
  403930:	d9ee      	bls.n	403910 <main+0xe8>
	{
  403932:	e793      	b.n	40385c <main+0x34>
  403934:	004004d5 	.word	0x004004d5
  403938:	00400909 	.word	0x00400909
  40393c:	0040374d 	.word	0x0040374d
  403940:	00402549 	.word	0x00402549
  403944:	00402679 	.word	0x00402679
  403948:	004032ad 	.word	0x004032ad
  40394c:	10624dd3 	.word	0x10624dd3
  403950:	004031b5 	.word	0x004031b5
  403954:	00406b40 	.word	0x00406b40
  403958:	004039d5 	.word	0x004039d5
  40395c:	204012c4 	.word	0x204012c4
  403960:	00406b88 	.word	0x00406b88
  403964:	20401340 	.word	0x20401340
  403968:	00406bd0 	.word	0x00406bd0
  40396c:	0040371d 	.word	0x0040371d
  403970:	204013a0 	.word	0x204013a0
  403974:	004031fd 	.word	0x004031fd
  403978:	00403785 	.word	0x00403785
  40397c:	20400008 	.word	0x20400008
  403980:	00403029 	.word	0x00403029

00403984 <__libc_init_array>:
  403984:	b570      	push	{r4, r5, r6, lr}
  403986:	4e0f      	ldr	r6, [pc, #60]	; (4039c4 <__libc_init_array+0x40>)
  403988:	4d0f      	ldr	r5, [pc, #60]	; (4039c8 <__libc_init_array+0x44>)
  40398a:	1b76      	subs	r6, r6, r5
  40398c:	10b6      	asrs	r6, r6, #2
  40398e:	bf18      	it	ne
  403990:	2400      	movne	r4, #0
  403992:	d005      	beq.n	4039a0 <__libc_init_array+0x1c>
  403994:	3401      	adds	r4, #1
  403996:	f855 3b04 	ldr.w	r3, [r5], #4
  40399a:	4798      	blx	r3
  40399c:	42a6      	cmp	r6, r4
  40399e:	d1f9      	bne.n	403994 <__libc_init_array+0x10>
  4039a0:	4e0a      	ldr	r6, [pc, #40]	; (4039cc <__libc_init_array+0x48>)
  4039a2:	4d0b      	ldr	r5, [pc, #44]	; (4039d0 <__libc_init_array+0x4c>)
  4039a4:	1b76      	subs	r6, r6, r5
  4039a6:	f003 f9cd 	bl	406d44 <_init>
  4039aa:	10b6      	asrs	r6, r6, #2
  4039ac:	bf18      	it	ne
  4039ae:	2400      	movne	r4, #0
  4039b0:	d006      	beq.n	4039c0 <__libc_init_array+0x3c>
  4039b2:	3401      	adds	r4, #1
  4039b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4039b8:	4798      	blx	r3
  4039ba:	42a6      	cmp	r6, r4
  4039bc:	d1f9      	bne.n	4039b2 <__libc_init_array+0x2e>
  4039be:	bd70      	pop	{r4, r5, r6, pc}
  4039c0:	bd70      	pop	{r4, r5, r6, pc}
  4039c2:	bf00      	nop
  4039c4:	00406d50 	.word	0x00406d50
  4039c8:	00406d50 	.word	0x00406d50
  4039cc:	00406d58 	.word	0x00406d58
  4039d0:	00406d50 	.word	0x00406d50

004039d4 <iprintf>:
  4039d4:	b40f      	push	{r0, r1, r2, r3}
  4039d6:	b500      	push	{lr}
  4039d8:	4907      	ldr	r1, [pc, #28]	; (4039f8 <iprintf+0x24>)
  4039da:	b083      	sub	sp, #12
  4039dc:	ab04      	add	r3, sp, #16
  4039de:	6808      	ldr	r0, [r1, #0]
  4039e0:	f853 2b04 	ldr.w	r2, [r3], #4
  4039e4:	6881      	ldr	r1, [r0, #8]
  4039e6:	9301      	str	r3, [sp, #4]
  4039e8:	f000 fcd6 	bl	404398 <_vfiprintf_r>
  4039ec:	b003      	add	sp, #12
  4039ee:	f85d eb04 	ldr.w	lr, [sp], #4
  4039f2:	b004      	add	sp, #16
  4039f4:	4770      	bx	lr
  4039f6:	bf00      	nop
  4039f8:	20400010 	.word	0x20400010

004039fc <malloc>:
  4039fc:	4b02      	ldr	r3, [pc, #8]	; (403a08 <malloc+0xc>)
  4039fe:	4601      	mov	r1, r0
  403a00:	6818      	ldr	r0, [r3, #0]
  403a02:	f000 b803 	b.w	403a0c <_malloc_r>
  403a06:	bf00      	nop
  403a08:	20400010 	.word	0x20400010

00403a0c <_malloc_r>:
  403a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a10:	f101 060b 	add.w	r6, r1, #11
  403a14:	2e16      	cmp	r6, #22
  403a16:	b083      	sub	sp, #12
  403a18:	4605      	mov	r5, r0
  403a1a:	f240 809e 	bls.w	403b5a <_malloc_r+0x14e>
  403a1e:	f036 0607 	bics.w	r6, r6, #7
  403a22:	f100 80bd 	bmi.w	403ba0 <_malloc_r+0x194>
  403a26:	42b1      	cmp	r1, r6
  403a28:	f200 80ba 	bhi.w	403ba0 <_malloc_r+0x194>
  403a2c:	f000 fb86 	bl	40413c <__malloc_lock>
  403a30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403a34:	f0c0 8293 	bcc.w	403f5e <_malloc_r+0x552>
  403a38:	0a73      	lsrs	r3, r6, #9
  403a3a:	f000 80b8 	beq.w	403bae <_malloc_r+0x1a2>
  403a3e:	2b04      	cmp	r3, #4
  403a40:	f200 8179 	bhi.w	403d36 <_malloc_r+0x32a>
  403a44:	09b3      	lsrs	r3, r6, #6
  403a46:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403a4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403a4e:	00c3      	lsls	r3, r0, #3
  403a50:	4fbf      	ldr	r7, [pc, #764]	; (403d50 <_malloc_r+0x344>)
  403a52:	443b      	add	r3, r7
  403a54:	f1a3 0108 	sub.w	r1, r3, #8
  403a58:	685c      	ldr	r4, [r3, #4]
  403a5a:	42a1      	cmp	r1, r4
  403a5c:	d106      	bne.n	403a6c <_malloc_r+0x60>
  403a5e:	e00c      	b.n	403a7a <_malloc_r+0x6e>
  403a60:	2a00      	cmp	r2, #0
  403a62:	f280 80aa 	bge.w	403bba <_malloc_r+0x1ae>
  403a66:	68e4      	ldr	r4, [r4, #12]
  403a68:	42a1      	cmp	r1, r4
  403a6a:	d006      	beq.n	403a7a <_malloc_r+0x6e>
  403a6c:	6863      	ldr	r3, [r4, #4]
  403a6e:	f023 0303 	bic.w	r3, r3, #3
  403a72:	1b9a      	subs	r2, r3, r6
  403a74:	2a0f      	cmp	r2, #15
  403a76:	ddf3      	ble.n	403a60 <_malloc_r+0x54>
  403a78:	4670      	mov	r0, lr
  403a7a:	693c      	ldr	r4, [r7, #16]
  403a7c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403d64 <_malloc_r+0x358>
  403a80:	4574      	cmp	r4, lr
  403a82:	f000 81ab 	beq.w	403ddc <_malloc_r+0x3d0>
  403a86:	6863      	ldr	r3, [r4, #4]
  403a88:	f023 0303 	bic.w	r3, r3, #3
  403a8c:	1b9a      	subs	r2, r3, r6
  403a8e:	2a0f      	cmp	r2, #15
  403a90:	f300 8190 	bgt.w	403db4 <_malloc_r+0x3a8>
  403a94:	2a00      	cmp	r2, #0
  403a96:	f8c7 e014 	str.w	lr, [r7, #20]
  403a9a:	f8c7 e010 	str.w	lr, [r7, #16]
  403a9e:	f280 809d 	bge.w	403bdc <_malloc_r+0x1d0>
  403aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403aa6:	f080 8161 	bcs.w	403d6c <_malloc_r+0x360>
  403aaa:	08db      	lsrs	r3, r3, #3
  403aac:	f103 0c01 	add.w	ip, r3, #1
  403ab0:	1099      	asrs	r1, r3, #2
  403ab2:	687a      	ldr	r2, [r7, #4]
  403ab4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403ab8:	f8c4 8008 	str.w	r8, [r4, #8]
  403abc:	2301      	movs	r3, #1
  403abe:	408b      	lsls	r3, r1
  403ac0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403ac4:	4313      	orrs	r3, r2
  403ac6:	3908      	subs	r1, #8
  403ac8:	60e1      	str	r1, [r4, #12]
  403aca:	607b      	str	r3, [r7, #4]
  403acc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ad0:	f8c8 400c 	str.w	r4, [r8, #12]
  403ad4:	1082      	asrs	r2, r0, #2
  403ad6:	2401      	movs	r4, #1
  403ad8:	4094      	lsls	r4, r2
  403ada:	429c      	cmp	r4, r3
  403adc:	f200 808b 	bhi.w	403bf6 <_malloc_r+0x1ea>
  403ae0:	421c      	tst	r4, r3
  403ae2:	d106      	bne.n	403af2 <_malloc_r+0xe6>
  403ae4:	f020 0003 	bic.w	r0, r0, #3
  403ae8:	0064      	lsls	r4, r4, #1
  403aea:	421c      	tst	r4, r3
  403aec:	f100 0004 	add.w	r0, r0, #4
  403af0:	d0fa      	beq.n	403ae8 <_malloc_r+0xdc>
  403af2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403af6:	46cc      	mov	ip, r9
  403af8:	4680      	mov	r8, r0
  403afa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403afe:	459c      	cmp	ip, r3
  403b00:	d107      	bne.n	403b12 <_malloc_r+0x106>
  403b02:	e16d      	b.n	403de0 <_malloc_r+0x3d4>
  403b04:	2a00      	cmp	r2, #0
  403b06:	f280 817b 	bge.w	403e00 <_malloc_r+0x3f4>
  403b0a:	68db      	ldr	r3, [r3, #12]
  403b0c:	459c      	cmp	ip, r3
  403b0e:	f000 8167 	beq.w	403de0 <_malloc_r+0x3d4>
  403b12:	6859      	ldr	r1, [r3, #4]
  403b14:	f021 0103 	bic.w	r1, r1, #3
  403b18:	1b8a      	subs	r2, r1, r6
  403b1a:	2a0f      	cmp	r2, #15
  403b1c:	ddf2      	ble.n	403b04 <_malloc_r+0xf8>
  403b1e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403b22:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403b26:	9300      	str	r3, [sp, #0]
  403b28:	199c      	adds	r4, r3, r6
  403b2a:	4628      	mov	r0, r5
  403b2c:	f046 0601 	orr.w	r6, r6, #1
  403b30:	f042 0501 	orr.w	r5, r2, #1
  403b34:	605e      	str	r6, [r3, #4]
  403b36:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b3a:	f8cc 8008 	str.w	r8, [ip, #8]
  403b3e:	617c      	str	r4, [r7, #20]
  403b40:	613c      	str	r4, [r7, #16]
  403b42:	f8c4 e00c 	str.w	lr, [r4, #12]
  403b46:	f8c4 e008 	str.w	lr, [r4, #8]
  403b4a:	6065      	str	r5, [r4, #4]
  403b4c:	505a      	str	r2, [r3, r1]
  403b4e:	f000 fafb 	bl	404148 <__malloc_unlock>
  403b52:	9b00      	ldr	r3, [sp, #0]
  403b54:	f103 0408 	add.w	r4, r3, #8
  403b58:	e01e      	b.n	403b98 <_malloc_r+0x18c>
  403b5a:	2910      	cmp	r1, #16
  403b5c:	d820      	bhi.n	403ba0 <_malloc_r+0x194>
  403b5e:	f000 faed 	bl	40413c <__malloc_lock>
  403b62:	2610      	movs	r6, #16
  403b64:	2318      	movs	r3, #24
  403b66:	2002      	movs	r0, #2
  403b68:	4f79      	ldr	r7, [pc, #484]	; (403d50 <_malloc_r+0x344>)
  403b6a:	443b      	add	r3, r7
  403b6c:	f1a3 0208 	sub.w	r2, r3, #8
  403b70:	685c      	ldr	r4, [r3, #4]
  403b72:	4294      	cmp	r4, r2
  403b74:	f000 813d 	beq.w	403df2 <_malloc_r+0x3e6>
  403b78:	6863      	ldr	r3, [r4, #4]
  403b7a:	68e1      	ldr	r1, [r4, #12]
  403b7c:	68a6      	ldr	r6, [r4, #8]
  403b7e:	f023 0303 	bic.w	r3, r3, #3
  403b82:	4423      	add	r3, r4
  403b84:	4628      	mov	r0, r5
  403b86:	685a      	ldr	r2, [r3, #4]
  403b88:	60f1      	str	r1, [r6, #12]
  403b8a:	f042 0201 	orr.w	r2, r2, #1
  403b8e:	608e      	str	r6, [r1, #8]
  403b90:	605a      	str	r2, [r3, #4]
  403b92:	f000 fad9 	bl	404148 <__malloc_unlock>
  403b96:	3408      	adds	r4, #8
  403b98:	4620      	mov	r0, r4
  403b9a:	b003      	add	sp, #12
  403b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ba0:	2400      	movs	r4, #0
  403ba2:	230c      	movs	r3, #12
  403ba4:	4620      	mov	r0, r4
  403ba6:	602b      	str	r3, [r5, #0]
  403ba8:	b003      	add	sp, #12
  403baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bae:	2040      	movs	r0, #64	; 0x40
  403bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
  403bb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403bb8:	e74a      	b.n	403a50 <_malloc_r+0x44>
  403bba:	4423      	add	r3, r4
  403bbc:	68e1      	ldr	r1, [r4, #12]
  403bbe:	685a      	ldr	r2, [r3, #4]
  403bc0:	68a6      	ldr	r6, [r4, #8]
  403bc2:	f042 0201 	orr.w	r2, r2, #1
  403bc6:	60f1      	str	r1, [r6, #12]
  403bc8:	4628      	mov	r0, r5
  403bca:	608e      	str	r6, [r1, #8]
  403bcc:	605a      	str	r2, [r3, #4]
  403bce:	f000 fabb 	bl	404148 <__malloc_unlock>
  403bd2:	3408      	adds	r4, #8
  403bd4:	4620      	mov	r0, r4
  403bd6:	b003      	add	sp, #12
  403bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bdc:	4423      	add	r3, r4
  403bde:	4628      	mov	r0, r5
  403be0:	685a      	ldr	r2, [r3, #4]
  403be2:	f042 0201 	orr.w	r2, r2, #1
  403be6:	605a      	str	r2, [r3, #4]
  403be8:	f000 faae 	bl	404148 <__malloc_unlock>
  403bec:	3408      	adds	r4, #8
  403bee:	4620      	mov	r0, r4
  403bf0:	b003      	add	sp, #12
  403bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bf6:	68bc      	ldr	r4, [r7, #8]
  403bf8:	6863      	ldr	r3, [r4, #4]
  403bfa:	f023 0803 	bic.w	r8, r3, #3
  403bfe:	45b0      	cmp	r8, r6
  403c00:	d304      	bcc.n	403c0c <_malloc_r+0x200>
  403c02:	eba8 0306 	sub.w	r3, r8, r6
  403c06:	2b0f      	cmp	r3, #15
  403c08:	f300 8085 	bgt.w	403d16 <_malloc_r+0x30a>
  403c0c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403d68 <_malloc_r+0x35c>
  403c10:	4b50      	ldr	r3, [pc, #320]	; (403d54 <_malloc_r+0x348>)
  403c12:	f8d9 2000 	ldr.w	r2, [r9]
  403c16:	681b      	ldr	r3, [r3, #0]
  403c18:	3201      	adds	r2, #1
  403c1a:	4433      	add	r3, r6
  403c1c:	eb04 0a08 	add.w	sl, r4, r8
  403c20:	f000 8155 	beq.w	403ece <_malloc_r+0x4c2>
  403c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403c28:	330f      	adds	r3, #15
  403c2a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403c2e:	f02b 0b0f 	bic.w	fp, fp, #15
  403c32:	4659      	mov	r1, fp
  403c34:	4628      	mov	r0, r5
  403c36:	f000 fa8d 	bl	404154 <_sbrk_r>
  403c3a:	1c41      	adds	r1, r0, #1
  403c3c:	4602      	mov	r2, r0
  403c3e:	f000 80fc 	beq.w	403e3a <_malloc_r+0x42e>
  403c42:	4582      	cmp	sl, r0
  403c44:	f200 80f7 	bhi.w	403e36 <_malloc_r+0x42a>
  403c48:	4b43      	ldr	r3, [pc, #268]	; (403d58 <_malloc_r+0x34c>)
  403c4a:	6819      	ldr	r1, [r3, #0]
  403c4c:	4459      	add	r1, fp
  403c4e:	6019      	str	r1, [r3, #0]
  403c50:	f000 814d 	beq.w	403eee <_malloc_r+0x4e2>
  403c54:	f8d9 0000 	ldr.w	r0, [r9]
  403c58:	3001      	adds	r0, #1
  403c5a:	bf1b      	ittet	ne
  403c5c:	eba2 0a0a 	subne.w	sl, r2, sl
  403c60:	4451      	addne	r1, sl
  403c62:	f8c9 2000 	streq.w	r2, [r9]
  403c66:	6019      	strne	r1, [r3, #0]
  403c68:	f012 0107 	ands.w	r1, r2, #7
  403c6c:	f000 8115 	beq.w	403e9a <_malloc_r+0x48e>
  403c70:	f1c1 0008 	rsb	r0, r1, #8
  403c74:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403c78:	4402      	add	r2, r0
  403c7a:	3108      	adds	r1, #8
  403c7c:	eb02 090b 	add.w	r9, r2, fp
  403c80:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403c84:	eba1 0909 	sub.w	r9, r1, r9
  403c88:	4649      	mov	r1, r9
  403c8a:	4628      	mov	r0, r5
  403c8c:	9301      	str	r3, [sp, #4]
  403c8e:	9200      	str	r2, [sp, #0]
  403c90:	f000 fa60 	bl	404154 <_sbrk_r>
  403c94:	1c43      	adds	r3, r0, #1
  403c96:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403c9a:	f000 8143 	beq.w	403f24 <_malloc_r+0x518>
  403c9e:	1a80      	subs	r0, r0, r2
  403ca0:	4448      	add	r0, r9
  403ca2:	f040 0001 	orr.w	r0, r0, #1
  403ca6:	6819      	ldr	r1, [r3, #0]
  403ca8:	60ba      	str	r2, [r7, #8]
  403caa:	4449      	add	r1, r9
  403cac:	42bc      	cmp	r4, r7
  403cae:	6050      	str	r0, [r2, #4]
  403cb0:	6019      	str	r1, [r3, #0]
  403cb2:	d017      	beq.n	403ce4 <_malloc_r+0x2d8>
  403cb4:	f1b8 0f0f 	cmp.w	r8, #15
  403cb8:	f240 80fb 	bls.w	403eb2 <_malloc_r+0x4a6>
  403cbc:	6860      	ldr	r0, [r4, #4]
  403cbe:	f1a8 020c 	sub.w	r2, r8, #12
  403cc2:	f022 0207 	bic.w	r2, r2, #7
  403cc6:	eb04 0e02 	add.w	lr, r4, r2
  403cca:	f000 0001 	and.w	r0, r0, #1
  403cce:	f04f 0c05 	mov.w	ip, #5
  403cd2:	4310      	orrs	r0, r2
  403cd4:	2a0f      	cmp	r2, #15
  403cd6:	6060      	str	r0, [r4, #4]
  403cd8:	f8ce c004 	str.w	ip, [lr, #4]
  403cdc:	f8ce c008 	str.w	ip, [lr, #8]
  403ce0:	f200 8117 	bhi.w	403f12 <_malloc_r+0x506>
  403ce4:	4b1d      	ldr	r3, [pc, #116]	; (403d5c <_malloc_r+0x350>)
  403ce6:	68bc      	ldr	r4, [r7, #8]
  403ce8:	681a      	ldr	r2, [r3, #0]
  403cea:	4291      	cmp	r1, r2
  403cec:	bf88      	it	hi
  403cee:	6019      	strhi	r1, [r3, #0]
  403cf0:	4b1b      	ldr	r3, [pc, #108]	; (403d60 <_malloc_r+0x354>)
  403cf2:	681a      	ldr	r2, [r3, #0]
  403cf4:	4291      	cmp	r1, r2
  403cf6:	6862      	ldr	r2, [r4, #4]
  403cf8:	bf88      	it	hi
  403cfa:	6019      	strhi	r1, [r3, #0]
  403cfc:	f022 0203 	bic.w	r2, r2, #3
  403d00:	4296      	cmp	r6, r2
  403d02:	eba2 0306 	sub.w	r3, r2, r6
  403d06:	d801      	bhi.n	403d0c <_malloc_r+0x300>
  403d08:	2b0f      	cmp	r3, #15
  403d0a:	dc04      	bgt.n	403d16 <_malloc_r+0x30a>
  403d0c:	4628      	mov	r0, r5
  403d0e:	f000 fa1b 	bl	404148 <__malloc_unlock>
  403d12:	2400      	movs	r4, #0
  403d14:	e740      	b.n	403b98 <_malloc_r+0x18c>
  403d16:	19a2      	adds	r2, r4, r6
  403d18:	f043 0301 	orr.w	r3, r3, #1
  403d1c:	f046 0601 	orr.w	r6, r6, #1
  403d20:	6066      	str	r6, [r4, #4]
  403d22:	4628      	mov	r0, r5
  403d24:	60ba      	str	r2, [r7, #8]
  403d26:	6053      	str	r3, [r2, #4]
  403d28:	f000 fa0e 	bl	404148 <__malloc_unlock>
  403d2c:	3408      	adds	r4, #8
  403d2e:	4620      	mov	r0, r4
  403d30:	b003      	add	sp, #12
  403d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d36:	2b14      	cmp	r3, #20
  403d38:	d971      	bls.n	403e1e <_malloc_r+0x412>
  403d3a:	2b54      	cmp	r3, #84	; 0x54
  403d3c:	f200 80a3 	bhi.w	403e86 <_malloc_r+0x47a>
  403d40:	0b33      	lsrs	r3, r6, #12
  403d42:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403d46:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403d4a:	00c3      	lsls	r3, r0, #3
  403d4c:	e680      	b.n	403a50 <_malloc_r+0x44>
  403d4e:	bf00      	nop
  403d50:	20400440 	.word	0x20400440
  403d54:	204012f8 	.word	0x204012f8
  403d58:	204012c8 	.word	0x204012c8
  403d5c:	204012f0 	.word	0x204012f0
  403d60:	204012f4 	.word	0x204012f4
  403d64:	20400448 	.word	0x20400448
  403d68:	20400848 	.word	0x20400848
  403d6c:	0a5a      	lsrs	r2, r3, #9
  403d6e:	2a04      	cmp	r2, #4
  403d70:	d95b      	bls.n	403e2a <_malloc_r+0x41e>
  403d72:	2a14      	cmp	r2, #20
  403d74:	f200 80ae 	bhi.w	403ed4 <_malloc_r+0x4c8>
  403d78:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403d7c:	00c9      	lsls	r1, r1, #3
  403d7e:	325b      	adds	r2, #91	; 0x5b
  403d80:	eb07 0c01 	add.w	ip, r7, r1
  403d84:	5879      	ldr	r1, [r7, r1]
  403d86:	f1ac 0c08 	sub.w	ip, ip, #8
  403d8a:	458c      	cmp	ip, r1
  403d8c:	f000 8088 	beq.w	403ea0 <_malloc_r+0x494>
  403d90:	684a      	ldr	r2, [r1, #4]
  403d92:	f022 0203 	bic.w	r2, r2, #3
  403d96:	4293      	cmp	r3, r2
  403d98:	d273      	bcs.n	403e82 <_malloc_r+0x476>
  403d9a:	6889      	ldr	r1, [r1, #8]
  403d9c:	458c      	cmp	ip, r1
  403d9e:	d1f7      	bne.n	403d90 <_malloc_r+0x384>
  403da0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403da4:	687b      	ldr	r3, [r7, #4]
  403da6:	60e2      	str	r2, [r4, #12]
  403da8:	f8c4 c008 	str.w	ip, [r4, #8]
  403dac:	6094      	str	r4, [r2, #8]
  403dae:	f8cc 400c 	str.w	r4, [ip, #12]
  403db2:	e68f      	b.n	403ad4 <_malloc_r+0xc8>
  403db4:	19a1      	adds	r1, r4, r6
  403db6:	f046 0c01 	orr.w	ip, r6, #1
  403dba:	f042 0601 	orr.w	r6, r2, #1
  403dbe:	f8c4 c004 	str.w	ip, [r4, #4]
  403dc2:	4628      	mov	r0, r5
  403dc4:	6179      	str	r1, [r7, #20]
  403dc6:	6139      	str	r1, [r7, #16]
  403dc8:	f8c1 e00c 	str.w	lr, [r1, #12]
  403dcc:	f8c1 e008 	str.w	lr, [r1, #8]
  403dd0:	604e      	str	r6, [r1, #4]
  403dd2:	50e2      	str	r2, [r4, r3]
  403dd4:	f000 f9b8 	bl	404148 <__malloc_unlock>
  403dd8:	3408      	adds	r4, #8
  403dda:	e6dd      	b.n	403b98 <_malloc_r+0x18c>
  403ddc:	687b      	ldr	r3, [r7, #4]
  403dde:	e679      	b.n	403ad4 <_malloc_r+0xc8>
  403de0:	f108 0801 	add.w	r8, r8, #1
  403de4:	f018 0f03 	tst.w	r8, #3
  403de8:	f10c 0c08 	add.w	ip, ip, #8
  403dec:	f47f ae85 	bne.w	403afa <_malloc_r+0xee>
  403df0:	e02d      	b.n	403e4e <_malloc_r+0x442>
  403df2:	68dc      	ldr	r4, [r3, #12]
  403df4:	42a3      	cmp	r3, r4
  403df6:	bf08      	it	eq
  403df8:	3002      	addeq	r0, #2
  403dfa:	f43f ae3e 	beq.w	403a7a <_malloc_r+0x6e>
  403dfe:	e6bb      	b.n	403b78 <_malloc_r+0x16c>
  403e00:	4419      	add	r1, r3
  403e02:	461c      	mov	r4, r3
  403e04:	684a      	ldr	r2, [r1, #4]
  403e06:	68db      	ldr	r3, [r3, #12]
  403e08:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e0c:	f042 0201 	orr.w	r2, r2, #1
  403e10:	604a      	str	r2, [r1, #4]
  403e12:	4628      	mov	r0, r5
  403e14:	60f3      	str	r3, [r6, #12]
  403e16:	609e      	str	r6, [r3, #8]
  403e18:	f000 f996 	bl	404148 <__malloc_unlock>
  403e1c:	e6bc      	b.n	403b98 <_malloc_r+0x18c>
  403e1e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403e22:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403e26:	00c3      	lsls	r3, r0, #3
  403e28:	e612      	b.n	403a50 <_malloc_r+0x44>
  403e2a:	099a      	lsrs	r2, r3, #6
  403e2c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e30:	00c9      	lsls	r1, r1, #3
  403e32:	3238      	adds	r2, #56	; 0x38
  403e34:	e7a4      	b.n	403d80 <_malloc_r+0x374>
  403e36:	42bc      	cmp	r4, r7
  403e38:	d054      	beq.n	403ee4 <_malloc_r+0x4d8>
  403e3a:	68bc      	ldr	r4, [r7, #8]
  403e3c:	6862      	ldr	r2, [r4, #4]
  403e3e:	f022 0203 	bic.w	r2, r2, #3
  403e42:	e75d      	b.n	403d00 <_malloc_r+0x2f4>
  403e44:	f859 3908 	ldr.w	r3, [r9], #-8
  403e48:	4599      	cmp	r9, r3
  403e4a:	f040 8086 	bne.w	403f5a <_malloc_r+0x54e>
  403e4e:	f010 0f03 	tst.w	r0, #3
  403e52:	f100 30ff 	add.w	r0, r0, #4294967295
  403e56:	d1f5      	bne.n	403e44 <_malloc_r+0x438>
  403e58:	687b      	ldr	r3, [r7, #4]
  403e5a:	ea23 0304 	bic.w	r3, r3, r4
  403e5e:	607b      	str	r3, [r7, #4]
  403e60:	0064      	lsls	r4, r4, #1
  403e62:	429c      	cmp	r4, r3
  403e64:	f63f aec7 	bhi.w	403bf6 <_malloc_r+0x1ea>
  403e68:	2c00      	cmp	r4, #0
  403e6a:	f43f aec4 	beq.w	403bf6 <_malloc_r+0x1ea>
  403e6e:	421c      	tst	r4, r3
  403e70:	4640      	mov	r0, r8
  403e72:	f47f ae3e 	bne.w	403af2 <_malloc_r+0xe6>
  403e76:	0064      	lsls	r4, r4, #1
  403e78:	421c      	tst	r4, r3
  403e7a:	f100 0004 	add.w	r0, r0, #4
  403e7e:	d0fa      	beq.n	403e76 <_malloc_r+0x46a>
  403e80:	e637      	b.n	403af2 <_malloc_r+0xe6>
  403e82:	468c      	mov	ip, r1
  403e84:	e78c      	b.n	403da0 <_malloc_r+0x394>
  403e86:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403e8a:	d815      	bhi.n	403eb8 <_malloc_r+0x4ac>
  403e8c:	0bf3      	lsrs	r3, r6, #15
  403e8e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403e92:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403e96:	00c3      	lsls	r3, r0, #3
  403e98:	e5da      	b.n	403a50 <_malloc_r+0x44>
  403e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403e9e:	e6ed      	b.n	403c7c <_malloc_r+0x270>
  403ea0:	687b      	ldr	r3, [r7, #4]
  403ea2:	1092      	asrs	r2, r2, #2
  403ea4:	2101      	movs	r1, #1
  403ea6:	fa01 f202 	lsl.w	r2, r1, r2
  403eaa:	4313      	orrs	r3, r2
  403eac:	607b      	str	r3, [r7, #4]
  403eae:	4662      	mov	r2, ip
  403eb0:	e779      	b.n	403da6 <_malloc_r+0x39a>
  403eb2:	2301      	movs	r3, #1
  403eb4:	6053      	str	r3, [r2, #4]
  403eb6:	e729      	b.n	403d0c <_malloc_r+0x300>
  403eb8:	f240 5254 	movw	r2, #1364	; 0x554
  403ebc:	4293      	cmp	r3, r2
  403ebe:	d822      	bhi.n	403f06 <_malloc_r+0x4fa>
  403ec0:	0cb3      	lsrs	r3, r6, #18
  403ec2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403ec6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403eca:	00c3      	lsls	r3, r0, #3
  403ecc:	e5c0      	b.n	403a50 <_malloc_r+0x44>
  403ece:	f103 0b10 	add.w	fp, r3, #16
  403ed2:	e6ae      	b.n	403c32 <_malloc_r+0x226>
  403ed4:	2a54      	cmp	r2, #84	; 0x54
  403ed6:	d829      	bhi.n	403f2c <_malloc_r+0x520>
  403ed8:	0b1a      	lsrs	r2, r3, #12
  403eda:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403ede:	00c9      	lsls	r1, r1, #3
  403ee0:	326e      	adds	r2, #110	; 0x6e
  403ee2:	e74d      	b.n	403d80 <_malloc_r+0x374>
  403ee4:	4b20      	ldr	r3, [pc, #128]	; (403f68 <_malloc_r+0x55c>)
  403ee6:	6819      	ldr	r1, [r3, #0]
  403ee8:	4459      	add	r1, fp
  403eea:	6019      	str	r1, [r3, #0]
  403eec:	e6b2      	b.n	403c54 <_malloc_r+0x248>
  403eee:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403ef2:	2800      	cmp	r0, #0
  403ef4:	f47f aeae 	bne.w	403c54 <_malloc_r+0x248>
  403ef8:	eb08 030b 	add.w	r3, r8, fp
  403efc:	68ba      	ldr	r2, [r7, #8]
  403efe:	f043 0301 	orr.w	r3, r3, #1
  403f02:	6053      	str	r3, [r2, #4]
  403f04:	e6ee      	b.n	403ce4 <_malloc_r+0x2d8>
  403f06:	207f      	movs	r0, #127	; 0x7f
  403f08:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f0c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f10:	e59e      	b.n	403a50 <_malloc_r+0x44>
  403f12:	f104 0108 	add.w	r1, r4, #8
  403f16:	4628      	mov	r0, r5
  403f18:	9300      	str	r3, [sp, #0]
  403f1a:	f001 fb59 	bl	4055d0 <_free_r>
  403f1e:	9b00      	ldr	r3, [sp, #0]
  403f20:	6819      	ldr	r1, [r3, #0]
  403f22:	e6df      	b.n	403ce4 <_malloc_r+0x2d8>
  403f24:	2001      	movs	r0, #1
  403f26:	f04f 0900 	mov.w	r9, #0
  403f2a:	e6bc      	b.n	403ca6 <_malloc_r+0x29a>
  403f2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f30:	d805      	bhi.n	403f3e <_malloc_r+0x532>
  403f32:	0bda      	lsrs	r2, r3, #15
  403f34:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403f38:	00c9      	lsls	r1, r1, #3
  403f3a:	3277      	adds	r2, #119	; 0x77
  403f3c:	e720      	b.n	403d80 <_malloc_r+0x374>
  403f3e:	f240 5154 	movw	r1, #1364	; 0x554
  403f42:	428a      	cmp	r2, r1
  403f44:	d805      	bhi.n	403f52 <_malloc_r+0x546>
  403f46:	0c9a      	lsrs	r2, r3, #18
  403f48:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403f4c:	00c9      	lsls	r1, r1, #3
  403f4e:	327c      	adds	r2, #124	; 0x7c
  403f50:	e716      	b.n	403d80 <_malloc_r+0x374>
  403f52:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403f56:	227e      	movs	r2, #126	; 0x7e
  403f58:	e712      	b.n	403d80 <_malloc_r+0x374>
  403f5a:	687b      	ldr	r3, [r7, #4]
  403f5c:	e780      	b.n	403e60 <_malloc_r+0x454>
  403f5e:	08f0      	lsrs	r0, r6, #3
  403f60:	f106 0308 	add.w	r3, r6, #8
  403f64:	e600      	b.n	403b68 <_malloc_r+0x15c>
  403f66:	bf00      	nop
  403f68:	204012c8 	.word	0x204012c8

00403f6c <memcpy>:
  403f6c:	4684      	mov	ip, r0
  403f6e:	ea41 0300 	orr.w	r3, r1, r0
  403f72:	f013 0303 	ands.w	r3, r3, #3
  403f76:	d16d      	bne.n	404054 <memcpy+0xe8>
  403f78:	3a40      	subs	r2, #64	; 0x40
  403f7a:	d341      	bcc.n	404000 <memcpy+0x94>
  403f7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f80:	f840 3b04 	str.w	r3, [r0], #4
  403f84:	f851 3b04 	ldr.w	r3, [r1], #4
  403f88:	f840 3b04 	str.w	r3, [r0], #4
  403f8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f90:	f840 3b04 	str.w	r3, [r0], #4
  403f94:	f851 3b04 	ldr.w	r3, [r1], #4
  403f98:	f840 3b04 	str.w	r3, [r0], #4
  403f9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa0:	f840 3b04 	str.w	r3, [r0], #4
  403fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa8:	f840 3b04 	str.w	r3, [r0], #4
  403fac:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb0:	f840 3b04 	str.w	r3, [r0], #4
  403fb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb8:	f840 3b04 	str.w	r3, [r0], #4
  403fbc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc0:	f840 3b04 	str.w	r3, [r0], #4
  403fc4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc8:	f840 3b04 	str.w	r3, [r0], #4
  403fcc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd0:	f840 3b04 	str.w	r3, [r0], #4
  403fd4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd8:	f840 3b04 	str.w	r3, [r0], #4
  403fdc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe0:	f840 3b04 	str.w	r3, [r0], #4
  403fe4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe8:	f840 3b04 	str.w	r3, [r0], #4
  403fec:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff0:	f840 3b04 	str.w	r3, [r0], #4
  403ff4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff8:	f840 3b04 	str.w	r3, [r0], #4
  403ffc:	3a40      	subs	r2, #64	; 0x40
  403ffe:	d2bd      	bcs.n	403f7c <memcpy+0x10>
  404000:	3230      	adds	r2, #48	; 0x30
  404002:	d311      	bcc.n	404028 <memcpy+0xbc>
  404004:	f851 3b04 	ldr.w	r3, [r1], #4
  404008:	f840 3b04 	str.w	r3, [r0], #4
  40400c:	f851 3b04 	ldr.w	r3, [r1], #4
  404010:	f840 3b04 	str.w	r3, [r0], #4
  404014:	f851 3b04 	ldr.w	r3, [r1], #4
  404018:	f840 3b04 	str.w	r3, [r0], #4
  40401c:	f851 3b04 	ldr.w	r3, [r1], #4
  404020:	f840 3b04 	str.w	r3, [r0], #4
  404024:	3a10      	subs	r2, #16
  404026:	d2ed      	bcs.n	404004 <memcpy+0x98>
  404028:	320c      	adds	r2, #12
  40402a:	d305      	bcc.n	404038 <memcpy+0xcc>
  40402c:	f851 3b04 	ldr.w	r3, [r1], #4
  404030:	f840 3b04 	str.w	r3, [r0], #4
  404034:	3a04      	subs	r2, #4
  404036:	d2f9      	bcs.n	40402c <memcpy+0xc0>
  404038:	3204      	adds	r2, #4
  40403a:	d008      	beq.n	40404e <memcpy+0xe2>
  40403c:	07d2      	lsls	r2, r2, #31
  40403e:	bf1c      	itt	ne
  404040:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404044:	f800 3b01 	strbne.w	r3, [r0], #1
  404048:	d301      	bcc.n	40404e <memcpy+0xe2>
  40404a:	880b      	ldrh	r3, [r1, #0]
  40404c:	8003      	strh	r3, [r0, #0]
  40404e:	4660      	mov	r0, ip
  404050:	4770      	bx	lr
  404052:	bf00      	nop
  404054:	2a08      	cmp	r2, #8
  404056:	d313      	bcc.n	404080 <memcpy+0x114>
  404058:	078b      	lsls	r3, r1, #30
  40405a:	d08d      	beq.n	403f78 <memcpy+0xc>
  40405c:	f010 0303 	ands.w	r3, r0, #3
  404060:	d08a      	beq.n	403f78 <memcpy+0xc>
  404062:	f1c3 0304 	rsb	r3, r3, #4
  404066:	1ad2      	subs	r2, r2, r3
  404068:	07db      	lsls	r3, r3, #31
  40406a:	bf1c      	itt	ne
  40406c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404070:	f800 3b01 	strbne.w	r3, [r0], #1
  404074:	d380      	bcc.n	403f78 <memcpy+0xc>
  404076:	f831 3b02 	ldrh.w	r3, [r1], #2
  40407a:	f820 3b02 	strh.w	r3, [r0], #2
  40407e:	e77b      	b.n	403f78 <memcpy+0xc>
  404080:	3a04      	subs	r2, #4
  404082:	d3d9      	bcc.n	404038 <memcpy+0xcc>
  404084:	3a01      	subs	r2, #1
  404086:	f811 3b01 	ldrb.w	r3, [r1], #1
  40408a:	f800 3b01 	strb.w	r3, [r0], #1
  40408e:	d2f9      	bcs.n	404084 <memcpy+0x118>
  404090:	780b      	ldrb	r3, [r1, #0]
  404092:	7003      	strb	r3, [r0, #0]
  404094:	784b      	ldrb	r3, [r1, #1]
  404096:	7043      	strb	r3, [r0, #1]
  404098:	788b      	ldrb	r3, [r1, #2]
  40409a:	7083      	strb	r3, [r0, #2]
  40409c:	4660      	mov	r0, ip
  40409e:	4770      	bx	lr

004040a0 <memset>:
  4040a0:	b470      	push	{r4, r5, r6}
  4040a2:	0786      	lsls	r6, r0, #30
  4040a4:	d046      	beq.n	404134 <memset+0x94>
  4040a6:	1e54      	subs	r4, r2, #1
  4040a8:	2a00      	cmp	r2, #0
  4040aa:	d041      	beq.n	404130 <memset+0x90>
  4040ac:	b2ca      	uxtb	r2, r1
  4040ae:	4603      	mov	r3, r0
  4040b0:	e002      	b.n	4040b8 <memset+0x18>
  4040b2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4040b6:	d33b      	bcc.n	404130 <memset+0x90>
  4040b8:	f803 2b01 	strb.w	r2, [r3], #1
  4040bc:	079d      	lsls	r5, r3, #30
  4040be:	d1f8      	bne.n	4040b2 <memset+0x12>
  4040c0:	2c03      	cmp	r4, #3
  4040c2:	d92e      	bls.n	404122 <memset+0x82>
  4040c4:	b2cd      	uxtb	r5, r1
  4040c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4040ca:	2c0f      	cmp	r4, #15
  4040cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4040d0:	d919      	bls.n	404106 <memset+0x66>
  4040d2:	f103 0210 	add.w	r2, r3, #16
  4040d6:	4626      	mov	r6, r4
  4040d8:	3e10      	subs	r6, #16
  4040da:	2e0f      	cmp	r6, #15
  4040dc:	f842 5c10 	str.w	r5, [r2, #-16]
  4040e0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4040e4:	f842 5c08 	str.w	r5, [r2, #-8]
  4040e8:	f842 5c04 	str.w	r5, [r2, #-4]
  4040ec:	f102 0210 	add.w	r2, r2, #16
  4040f0:	d8f2      	bhi.n	4040d8 <memset+0x38>
  4040f2:	f1a4 0210 	sub.w	r2, r4, #16
  4040f6:	f022 020f 	bic.w	r2, r2, #15
  4040fa:	f004 040f 	and.w	r4, r4, #15
  4040fe:	3210      	adds	r2, #16
  404100:	2c03      	cmp	r4, #3
  404102:	4413      	add	r3, r2
  404104:	d90d      	bls.n	404122 <memset+0x82>
  404106:	461e      	mov	r6, r3
  404108:	4622      	mov	r2, r4
  40410a:	3a04      	subs	r2, #4
  40410c:	2a03      	cmp	r2, #3
  40410e:	f846 5b04 	str.w	r5, [r6], #4
  404112:	d8fa      	bhi.n	40410a <memset+0x6a>
  404114:	1f22      	subs	r2, r4, #4
  404116:	f022 0203 	bic.w	r2, r2, #3
  40411a:	3204      	adds	r2, #4
  40411c:	4413      	add	r3, r2
  40411e:	f004 0403 	and.w	r4, r4, #3
  404122:	b12c      	cbz	r4, 404130 <memset+0x90>
  404124:	b2c9      	uxtb	r1, r1
  404126:	441c      	add	r4, r3
  404128:	f803 1b01 	strb.w	r1, [r3], #1
  40412c:	429c      	cmp	r4, r3
  40412e:	d1fb      	bne.n	404128 <memset+0x88>
  404130:	bc70      	pop	{r4, r5, r6}
  404132:	4770      	bx	lr
  404134:	4614      	mov	r4, r2
  404136:	4603      	mov	r3, r0
  404138:	e7c2      	b.n	4040c0 <memset+0x20>
  40413a:	bf00      	nop

0040413c <__malloc_lock>:
  40413c:	4801      	ldr	r0, [pc, #4]	; (404144 <__malloc_lock+0x8>)
  40413e:	f001 bce1 	b.w	405b04 <__retarget_lock_acquire_recursive>
  404142:	bf00      	nop
  404144:	204013f8 	.word	0x204013f8

00404148 <__malloc_unlock>:
  404148:	4801      	ldr	r0, [pc, #4]	; (404150 <__malloc_unlock+0x8>)
  40414a:	f001 bcdd 	b.w	405b08 <__retarget_lock_release_recursive>
  40414e:	bf00      	nop
  404150:	204013f8 	.word	0x204013f8

00404154 <_sbrk_r>:
  404154:	b538      	push	{r3, r4, r5, lr}
  404156:	4c07      	ldr	r4, [pc, #28]	; (404174 <_sbrk_r+0x20>)
  404158:	2300      	movs	r3, #0
  40415a:	4605      	mov	r5, r0
  40415c:	4608      	mov	r0, r1
  40415e:	6023      	str	r3, [r4, #0]
  404160:	f7fd fe5c 	bl	401e1c <_sbrk>
  404164:	1c43      	adds	r3, r0, #1
  404166:	d000      	beq.n	40416a <_sbrk_r+0x16>
  404168:	bd38      	pop	{r3, r4, r5, pc}
  40416a:	6823      	ldr	r3, [r4, #0]
  40416c:	2b00      	cmp	r3, #0
  40416e:	d0fb      	beq.n	404168 <_sbrk_r+0x14>
  404170:	602b      	str	r3, [r5, #0]
  404172:	bd38      	pop	{r3, r4, r5, pc}
  404174:	2040140c 	.word	0x2040140c

00404178 <setbuf>:
  404178:	2900      	cmp	r1, #0
  40417a:	bf0c      	ite	eq
  40417c:	2202      	moveq	r2, #2
  40417e:	2200      	movne	r2, #0
  404180:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404184:	f000 b800 	b.w	404188 <setvbuf>

00404188 <setvbuf>:
  404188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40418c:	4c61      	ldr	r4, [pc, #388]	; (404314 <setvbuf+0x18c>)
  40418e:	6825      	ldr	r5, [r4, #0]
  404190:	b083      	sub	sp, #12
  404192:	4604      	mov	r4, r0
  404194:	460f      	mov	r7, r1
  404196:	4690      	mov	r8, r2
  404198:	461e      	mov	r6, r3
  40419a:	b115      	cbz	r5, 4041a2 <setvbuf+0x1a>
  40419c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40419e:	2b00      	cmp	r3, #0
  4041a0:	d064      	beq.n	40426c <setvbuf+0xe4>
  4041a2:	f1b8 0f02 	cmp.w	r8, #2
  4041a6:	d006      	beq.n	4041b6 <setvbuf+0x2e>
  4041a8:	f1b8 0f01 	cmp.w	r8, #1
  4041ac:	f200 809f 	bhi.w	4042ee <setvbuf+0x166>
  4041b0:	2e00      	cmp	r6, #0
  4041b2:	f2c0 809c 	blt.w	4042ee <setvbuf+0x166>
  4041b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4041b8:	07d8      	lsls	r0, r3, #31
  4041ba:	d534      	bpl.n	404226 <setvbuf+0x9e>
  4041bc:	4621      	mov	r1, r4
  4041be:	4628      	mov	r0, r5
  4041c0:	f001 f888 	bl	4052d4 <_fflush_r>
  4041c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041c6:	b141      	cbz	r1, 4041da <setvbuf+0x52>
  4041c8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4041cc:	4299      	cmp	r1, r3
  4041ce:	d002      	beq.n	4041d6 <setvbuf+0x4e>
  4041d0:	4628      	mov	r0, r5
  4041d2:	f001 f9fd 	bl	4055d0 <_free_r>
  4041d6:	2300      	movs	r3, #0
  4041d8:	6323      	str	r3, [r4, #48]	; 0x30
  4041da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041de:	2200      	movs	r2, #0
  4041e0:	61a2      	str	r2, [r4, #24]
  4041e2:	6062      	str	r2, [r4, #4]
  4041e4:	061a      	lsls	r2, r3, #24
  4041e6:	d43a      	bmi.n	40425e <setvbuf+0xd6>
  4041e8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4041ec:	f023 0303 	bic.w	r3, r3, #3
  4041f0:	f1b8 0f02 	cmp.w	r8, #2
  4041f4:	81a3      	strh	r3, [r4, #12]
  4041f6:	d01d      	beq.n	404234 <setvbuf+0xac>
  4041f8:	ab01      	add	r3, sp, #4
  4041fa:	466a      	mov	r2, sp
  4041fc:	4621      	mov	r1, r4
  4041fe:	4628      	mov	r0, r5
  404200:	f001 fc84 	bl	405b0c <__swhatbuf_r>
  404204:	89a3      	ldrh	r3, [r4, #12]
  404206:	4318      	orrs	r0, r3
  404208:	81a0      	strh	r0, [r4, #12]
  40420a:	2e00      	cmp	r6, #0
  40420c:	d132      	bne.n	404274 <setvbuf+0xec>
  40420e:	9e00      	ldr	r6, [sp, #0]
  404210:	4630      	mov	r0, r6
  404212:	f7ff fbf3 	bl	4039fc <malloc>
  404216:	4607      	mov	r7, r0
  404218:	2800      	cmp	r0, #0
  40421a:	d06b      	beq.n	4042f4 <setvbuf+0x16c>
  40421c:	89a3      	ldrh	r3, [r4, #12]
  40421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404222:	81a3      	strh	r3, [r4, #12]
  404224:	e028      	b.n	404278 <setvbuf+0xf0>
  404226:	89a3      	ldrh	r3, [r4, #12]
  404228:	0599      	lsls	r1, r3, #22
  40422a:	d4c7      	bmi.n	4041bc <setvbuf+0x34>
  40422c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40422e:	f001 fc69 	bl	405b04 <__retarget_lock_acquire_recursive>
  404232:	e7c3      	b.n	4041bc <setvbuf+0x34>
  404234:	2500      	movs	r5, #0
  404236:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404238:	2600      	movs	r6, #0
  40423a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40423e:	f043 0302 	orr.w	r3, r3, #2
  404242:	2001      	movs	r0, #1
  404244:	60a6      	str	r6, [r4, #8]
  404246:	07ce      	lsls	r6, r1, #31
  404248:	81a3      	strh	r3, [r4, #12]
  40424a:	6022      	str	r2, [r4, #0]
  40424c:	6122      	str	r2, [r4, #16]
  40424e:	6160      	str	r0, [r4, #20]
  404250:	d401      	bmi.n	404256 <setvbuf+0xce>
  404252:	0598      	lsls	r0, r3, #22
  404254:	d53e      	bpl.n	4042d4 <setvbuf+0x14c>
  404256:	4628      	mov	r0, r5
  404258:	b003      	add	sp, #12
  40425a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40425e:	6921      	ldr	r1, [r4, #16]
  404260:	4628      	mov	r0, r5
  404262:	f001 f9b5 	bl	4055d0 <_free_r>
  404266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40426a:	e7bd      	b.n	4041e8 <setvbuf+0x60>
  40426c:	4628      	mov	r0, r5
  40426e:	f001 f889 	bl	405384 <__sinit>
  404272:	e796      	b.n	4041a2 <setvbuf+0x1a>
  404274:	2f00      	cmp	r7, #0
  404276:	d0cb      	beq.n	404210 <setvbuf+0x88>
  404278:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40427a:	2b00      	cmp	r3, #0
  40427c:	d033      	beq.n	4042e6 <setvbuf+0x15e>
  40427e:	9b00      	ldr	r3, [sp, #0]
  404280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404284:	6027      	str	r7, [r4, #0]
  404286:	429e      	cmp	r6, r3
  404288:	bf1c      	itt	ne
  40428a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40428e:	81a2      	strhne	r2, [r4, #12]
  404290:	f1b8 0f01 	cmp.w	r8, #1
  404294:	bf04      	itt	eq
  404296:	f042 0201 	orreq.w	r2, r2, #1
  40429a:	81a2      	strheq	r2, [r4, #12]
  40429c:	b292      	uxth	r2, r2
  40429e:	f012 0308 	ands.w	r3, r2, #8
  4042a2:	6127      	str	r7, [r4, #16]
  4042a4:	6166      	str	r6, [r4, #20]
  4042a6:	d00e      	beq.n	4042c6 <setvbuf+0x13e>
  4042a8:	07d1      	lsls	r1, r2, #31
  4042aa:	d51a      	bpl.n	4042e2 <setvbuf+0x15a>
  4042ac:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042ae:	4276      	negs	r6, r6
  4042b0:	2300      	movs	r3, #0
  4042b2:	f015 0501 	ands.w	r5, r5, #1
  4042b6:	61a6      	str	r6, [r4, #24]
  4042b8:	60a3      	str	r3, [r4, #8]
  4042ba:	d009      	beq.n	4042d0 <setvbuf+0x148>
  4042bc:	2500      	movs	r5, #0
  4042be:	4628      	mov	r0, r5
  4042c0:	b003      	add	sp, #12
  4042c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042c6:	60a3      	str	r3, [r4, #8]
  4042c8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042ca:	f015 0501 	ands.w	r5, r5, #1
  4042ce:	d1f5      	bne.n	4042bc <setvbuf+0x134>
  4042d0:	0593      	lsls	r3, r2, #22
  4042d2:	d4c0      	bmi.n	404256 <setvbuf+0xce>
  4042d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042d6:	f001 fc17 	bl	405b08 <__retarget_lock_release_recursive>
  4042da:	4628      	mov	r0, r5
  4042dc:	b003      	add	sp, #12
  4042de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042e2:	60a6      	str	r6, [r4, #8]
  4042e4:	e7f0      	b.n	4042c8 <setvbuf+0x140>
  4042e6:	4628      	mov	r0, r5
  4042e8:	f001 f84c 	bl	405384 <__sinit>
  4042ec:	e7c7      	b.n	40427e <setvbuf+0xf6>
  4042ee:	f04f 35ff 	mov.w	r5, #4294967295
  4042f2:	e7b0      	b.n	404256 <setvbuf+0xce>
  4042f4:	f8dd 9000 	ldr.w	r9, [sp]
  4042f8:	45b1      	cmp	r9, r6
  4042fa:	d004      	beq.n	404306 <setvbuf+0x17e>
  4042fc:	4648      	mov	r0, r9
  4042fe:	f7ff fb7d 	bl	4039fc <malloc>
  404302:	4607      	mov	r7, r0
  404304:	b920      	cbnz	r0, 404310 <setvbuf+0x188>
  404306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40430a:	f04f 35ff 	mov.w	r5, #4294967295
  40430e:	e792      	b.n	404236 <setvbuf+0xae>
  404310:	464e      	mov	r6, r9
  404312:	e783      	b.n	40421c <setvbuf+0x94>
  404314:	20400010 	.word	0x20400010

00404318 <__sprint_r.part.0>:
  404318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40431c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40431e:	049c      	lsls	r4, r3, #18
  404320:	4693      	mov	fp, r2
  404322:	d52f      	bpl.n	404384 <__sprint_r.part.0+0x6c>
  404324:	6893      	ldr	r3, [r2, #8]
  404326:	6812      	ldr	r2, [r2, #0]
  404328:	b353      	cbz	r3, 404380 <__sprint_r.part.0+0x68>
  40432a:	460e      	mov	r6, r1
  40432c:	4607      	mov	r7, r0
  40432e:	f102 0908 	add.w	r9, r2, #8
  404332:	e919 0420 	ldmdb	r9, {r5, sl}
  404336:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40433a:	d017      	beq.n	40436c <__sprint_r.part.0+0x54>
  40433c:	3d04      	subs	r5, #4
  40433e:	2400      	movs	r4, #0
  404340:	e001      	b.n	404346 <__sprint_r.part.0+0x2e>
  404342:	45a0      	cmp	r8, r4
  404344:	d010      	beq.n	404368 <__sprint_r.part.0+0x50>
  404346:	4632      	mov	r2, r6
  404348:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40434c:	4638      	mov	r0, r7
  40434e:	f001 f8bb 	bl	4054c8 <_fputwc_r>
  404352:	1c43      	adds	r3, r0, #1
  404354:	f104 0401 	add.w	r4, r4, #1
  404358:	d1f3      	bne.n	404342 <__sprint_r.part.0+0x2a>
  40435a:	2300      	movs	r3, #0
  40435c:	f8cb 3008 	str.w	r3, [fp, #8]
  404360:	f8cb 3004 	str.w	r3, [fp, #4]
  404364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404368:	f8db 3008 	ldr.w	r3, [fp, #8]
  40436c:	f02a 0a03 	bic.w	sl, sl, #3
  404370:	eba3 030a 	sub.w	r3, r3, sl
  404374:	f8cb 3008 	str.w	r3, [fp, #8]
  404378:	f109 0908 	add.w	r9, r9, #8
  40437c:	2b00      	cmp	r3, #0
  40437e:	d1d8      	bne.n	404332 <__sprint_r.part.0+0x1a>
  404380:	2000      	movs	r0, #0
  404382:	e7ea      	b.n	40435a <__sprint_r.part.0+0x42>
  404384:	f001 fa0a 	bl	40579c <__sfvwrite_r>
  404388:	2300      	movs	r3, #0
  40438a:	f8cb 3008 	str.w	r3, [fp, #8]
  40438e:	f8cb 3004 	str.w	r3, [fp, #4]
  404392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404396:	bf00      	nop

00404398 <_vfiprintf_r>:
  404398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40439c:	b0ad      	sub	sp, #180	; 0xb4
  40439e:	461d      	mov	r5, r3
  4043a0:	468b      	mov	fp, r1
  4043a2:	4690      	mov	r8, r2
  4043a4:	9307      	str	r3, [sp, #28]
  4043a6:	9006      	str	r0, [sp, #24]
  4043a8:	b118      	cbz	r0, 4043b2 <_vfiprintf_r+0x1a>
  4043aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4043ac:	2b00      	cmp	r3, #0
  4043ae:	f000 80f3 	beq.w	404598 <_vfiprintf_r+0x200>
  4043b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4043b6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4043ba:	07df      	lsls	r7, r3, #31
  4043bc:	b281      	uxth	r1, r0
  4043be:	d402      	bmi.n	4043c6 <_vfiprintf_r+0x2e>
  4043c0:	058e      	lsls	r6, r1, #22
  4043c2:	f140 80fc 	bpl.w	4045be <_vfiprintf_r+0x226>
  4043c6:	048c      	lsls	r4, r1, #18
  4043c8:	d40a      	bmi.n	4043e0 <_vfiprintf_r+0x48>
  4043ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4043ce:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4043d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4043d6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4043da:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4043de:	b289      	uxth	r1, r1
  4043e0:	0708      	lsls	r0, r1, #28
  4043e2:	f140 80b3 	bpl.w	40454c <_vfiprintf_r+0x1b4>
  4043e6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4043ea:	2b00      	cmp	r3, #0
  4043ec:	f000 80ae 	beq.w	40454c <_vfiprintf_r+0x1b4>
  4043f0:	f001 031a 	and.w	r3, r1, #26
  4043f4:	2b0a      	cmp	r3, #10
  4043f6:	f000 80b5 	beq.w	404564 <_vfiprintf_r+0x1cc>
  4043fa:	2300      	movs	r3, #0
  4043fc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404400:	930b      	str	r3, [sp, #44]	; 0x2c
  404402:	9311      	str	r3, [sp, #68]	; 0x44
  404404:	9310      	str	r3, [sp, #64]	; 0x40
  404406:	9303      	str	r3, [sp, #12]
  404408:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40440c:	46ca      	mov	sl, r9
  40440e:	f8cd b010 	str.w	fp, [sp, #16]
  404412:	f898 3000 	ldrb.w	r3, [r8]
  404416:	4644      	mov	r4, r8
  404418:	b1fb      	cbz	r3, 40445a <_vfiprintf_r+0xc2>
  40441a:	2b25      	cmp	r3, #37	; 0x25
  40441c:	d102      	bne.n	404424 <_vfiprintf_r+0x8c>
  40441e:	e01c      	b.n	40445a <_vfiprintf_r+0xc2>
  404420:	2b25      	cmp	r3, #37	; 0x25
  404422:	d003      	beq.n	40442c <_vfiprintf_r+0x94>
  404424:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404428:	2b00      	cmp	r3, #0
  40442a:	d1f9      	bne.n	404420 <_vfiprintf_r+0x88>
  40442c:	eba4 0508 	sub.w	r5, r4, r8
  404430:	b19d      	cbz	r5, 40445a <_vfiprintf_r+0xc2>
  404432:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404434:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404436:	f8ca 8000 	str.w	r8, [sl]
  40443a:	3301      	adds	r3, #1
  40443c:	442a      	add	r2, r5
  40443e:	2b07      	cmp	r3, #7
  404440:	f8ca 5004 	str.w	r5, [sl, #4]
  404444:	9211      	str	r2, [sp, #68]	; 0x44
  404446:	9310      	str	r3, [sp, #64]	; 0x40
  404448:	dd7a      	ble.n	404540 <_vfiprintf_r+0x1a8>
  40444a:	2a00      	cmp	r2, #0
  40444c:	f040 84b0 	bne.w	404db0 <_vfiprintf_r+0xa18>
  404450:	9b03      	ldr	r3, [sp, #12]
  404452:	9210      	str	r2, [sp, #64]	; 0x40
  404454:	442b      	add	r3, r5
  404456:	46ca      	mov	sl, r9
  404458:	9303      	str	r3, [sp, #12]
  40445a:	7823      	ldrb	r3, [r4, #0]
  40445c:	2b00      	cmp	r3, #0
  40445e:	f000 83e0 	beq.w	404c22 <_vfiprintf_r+0x88a>
  404462:	2000      	movs	r0, #0
  404464:	f04f 0300 	mov.w	r3, #0
  404468:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40446c:	f104 0801 	add.w	r8, r4, #1
  404470:	7862      	ldrb	r2, [r4, #1]
  404472:	4605      	mov	r5, r0
  404474:	4606      	mov	r6, r0
  404476:	4603      	mov	r3, r0
  404478:	f04f 34ff 	mov.w	r4, #4294967295
  40447c:	f108 0801 	add.w	r8, r8, #1
  404480:	f1a2 0120 	sub.w	r1, r2, #32
  404484:	2958      	cmp	r1, #88	; 0x58
  404486:	f200 82de 	bhi.w	404a46 <_vfiprintf_r+0x6ae>
  40448a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40448e:	0221      	.short	0x0221
  404490:	02dc02dc 	.word	0x02dc02dc
  404494:	02dc0229 	.word	0x02dc0229
  404498:	02dc02dc 	.word	0x02dc02dc
  40449c:	02dc02dc 	.word	0x02dc02dc
  4044a0:	028902dc 	.word	0x028902dc
  4044a4:	02dc0295 	.word	0x02dc0295
  4044a8:	02bd00a2 	.word	0x02bd00a2
  4044ac:	019f02dc 	.word	0x019f02dc
  4044b0:	01a401a4 	.word	0x01a401a4
  4044b4:	01a401a4 	.word	0x01a401a4
  4044b8:	01a401a4 	.word	0x01a401a4
  4044bc:	01a401a4 	.word	0x01a401a4
  4044c0:	02dc01a4 	.word	0x02dc01a4
  4044c4:	02dc02dc 	.word	0x02dc02dc
  4044c8:	02dc02dc 	.word	0x02dc02dc
  4044cc:	02dc02dc 	.word	0x02dc02dc
  4044d0:	02dc02dc 	.word	0x02dc02dc
  4044d4:	01b202dc 	.word	0x01b202dc
  4044d8:	02dc02dc 	.word	0x02dc02dc
  4044dc:	02dc02dc 	.word	0x02dc02dc
  4044e0:	02dc02dc 	.word	0x02dc02dc
  4044e4:	02dc02dc 	.word	0x02dc02dc
  4044e8:	02dc02dc 	.word	0x02dc02dc
  4044ec:	02dc0197 	.word	0x02dc0197
  4044f0:	02dc02dc 	.word	0x02dc02dc
  4044f4:	02dc02dc 	.word	0x02dc02dc
  4044f8:	02dc019b 	.word	0x02dc019b
  4044fc:	025302dc 	.word	0x025302dc
  404500:	02dc02dc 	.word	0x02dc02dc
  404504:	02dc02dc 	.word	0x02dc02dc
  404508:	02dc02dc 	.word	0x02dc02dc
  40450c:	02dc02dc 	.word	0x02dc02dc
  404510:	02dc02dc 	.word	0x02dc02dc
  404514:	021b025a 	.word	0x021b025a
  404518:	02dc02dc 	.word	0x02dc02dc
  40451c:	026e02dc 	.word	0x026e02dc
  404520:	02dc021b 	.word	0x02dc021b
  404524:	027302dc 	.word	0x027302dc
  404528:	01f502dc 	.word	0x01f502dc
  40452c:	02090182 	.word	0x02090182
  404530:	02dc02d7 	.word	0x02dc02d7
  404534:	02dc029a 	.word	0x02dc029a
  404538:	02dc00a7 	.word	0x02dc00a7
  40453c:	022e02dc 	.word	0x022e02dc
  404540:	f10a 0a08 	add.w	sl, sl, #8
  404544:	9b03      	ldr	r3, [sp, #12]
  404546:	442b      	add	r3, r5
  404548:	9303      	str	r3, [sp, #12]
  40454a:	e786      	b.n	40445a <_vfiprintf_r+0xc2>
  40454c:	4659      	mov	r1, fp
  40454e:	9806      	ldr	r0, [sp, #24]
  404550:	f000 fdac 	bl	4050ac <__swsetup_r>
  404554:	bb18      	cbnz	r0, 40459e <_vfiprintf_r+0x206>
  404556:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40455a:	f001 031a 	and.w	r3, r1, #26
  40455e:	2b0a      	cmp	r3, #10
  404560:	f47f af4b 	bne.w	4043fa <_vfiprintf_r+0x62>
  404564:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404568:	2b00      	cmp	r3, #0
  40456a:	f6ff af46 	blt.w	4043fa <_vfiprintf_r+0x62>
  40456e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404572:	07db      	lsls	r3, r3, #31
  404574:	d405      	bmi.n	404582 <_vfiprintf_r+0x1ea>
  404576:	058f      	lsls	r7, r1, #22
  404578:	d403      	bmi.n	404582 <_vfiprintf_r+0x1ea>
  40457a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40457e:	f001 fac3 	bl	405b08 <__retarget_lock_release_recursive>
  404582:	462b      	mov	r3, r5
  404584:	4642      	mov	r2, r8
  404586:	4659      	mov	r1, fp
  404588:	9806      	ldr	r0, [sp, #24]
  40458a:	f000 fd4d 	bl	405028 <__sbprintf>
  40458e:	9003      	str	r0, [sp, #12]
  404590:	9803      	ldr	r0, [sp, #12]
  404592:	b02d      	add	sp, #180	; 0xb4
  404594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404598:	f000 fef4 	bl	405384 <__sinit>
  40459c:	e709      	b.n	4043b2 <_vfiprintf_r+0x1a>
  40459e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045a2:	07d9      	lsls	r1, r3, #31
  4045a4:	d404      	bmi.n	4045b0 <_vfiprintf_r+0x218>
  4045a6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4045aa:	059a      	lsls	r2, r3, #22
  4045ac:	f140 84aa 	bpl.w	404f04 <_vfiprintf_r+0xb6c>
  4045b0:	f04f 33ff 	mov.w	r3, #4294967295
  4045b4:	9303      	str	r3, [sp, #12]
  4045b6:	9803      	ldr	r0, [sp, #12]
  4045b8:	b02d      	add	sp, #180	; 0xb4
  4045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4045c2:	f001 fa9f 	bl	405b04 <__retarget_lock_acquire_recursive>
  4045c6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4045ca:	b281      	uxth	r1, r0
  4045cc:	e6fb      	b.n	4043c6 <_vfiprintf_r+0x2e>
  4045ce:	4276      	negs	r6, r6
  4045d0:	9207      	str	r2, [sp, #28]
  4045d2:	f043 0304 	orr.w	r3, r3, #4
  4045d6:	f898 2000 	ldrb.w	r2, [r8]
  4045da:	e74f      	b.n	40447c <_vfiprintf_r+0xe4>
  4045dc:	9608      	str	r6, [sp, #32]
  4045de:	069e      	lsls	r6, r3, #26
  4045e0:	f100 8450 	bmi.w	404e84 <_vfiprintf_r+0xaec>
  4045e4:	9907      	ldr	r1, [sp, #28]
  4045e6:	06dd      	lsls	r5, r3, #27
  4045e8:	460a      	mov	r2, r1
  4045ea:	f100 83ef 	bmi.w	404dcc <_vfiprintf_r+0xa34>
  4045ee:	0658      	lsls	r0, r3, #25
  4045f0:	f140 83ec 	bpl.w	404dcc <_vfiprintf_r+0xa34>
  4045f4:	880e      	ldrh	r6, [r1, #0]
  4045f6:	3104      	adds	r1, #4
  4045f8:	2700      	movs	r7, #0
  4045fa:	2201      	movs	r2, #1
  4045fc:	9107      	str	r1, [sp, #28]
  4045fe:	f04f 0100 	mov.w	r1, #0
  404602:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404606:	2500      	movs	r5, #0
  404608:	1c61      	adds	r1, r4, #1
  40460a:	f000 8116 	beq.w	40483a <_vfiprintf_r+0x4a2>
  40460e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404612:	9102      	str	r1, [sp, #8]
  404614:	ea56 0107 	orrs.w	r1, r6, r7
  404618:	f040 8114 	bne.w	404844 <_vfiprintf_r+0x4ac>
  40461c:	2c00      	cmp	r4, #0
  40461e:	f040 835c 	bne.w	404cda <_vfiprintf_r+0x942>
  404622:	2a00      	cmp	r2, #0
  404624:	f040 83b7 	bne.w	404d96 <_vfiprintf_r+0x9fe>
  404628:	f013 0301 	ands.w	r3, r3, #1
  40462c:	9305      	str	r3, [sp, #20]
  40462e:	f000 8457 	beq.w	404ee0 <_vfiprintf_r+0xb48>
  404632:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404636:	2330      	movs	r3, #48	; 0x30
  404638:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40463c:	9b05      	ldr	r3, [sp, #20]
  40463e:	42a3      	cmp	r3, r4
  404640:	bfb8      	it	lt
  404642:	4623      	movlt	r3, r4
  404644:	9301      	str	r3, [sp, #4]
  404646:	b10d      	cbz	r5, 40464c <_vfiprintf_r+0x2b4>
  404648:	3301      	adds	r3, #1
  40464a:	9301      	str	r3, [sp, #4]
  40464c:	9b02      	ldr	r3, [sp, #8]
  40464e:	f013 0302 	ands.w	r3, r3, #2
  404652:	9309      	str	r3, [sp, #36]	; 0x24
  404654:	d002      	beq.n	40465c <_vfiprintf_r+0x2c4>
  404656:	9b01      	ldr	r3, [sp, #4]
  404658:	3302      	adds	r3, #2
  40465a:	9301      	str	r3, [sp, #4]
  40465c:	9b02      	ldr	r3, [sp, #8]
  40465e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404662:	930a      	str	r3, [sp, #40]	; 0x28
  404664:	f040 8217 	bne.w	404a96 <_vfiprintf_r+0x6fe>
  404668:	9b08      	ldr	r3, [sp, #32]
  40466a:	9a01      	ldr	r2, [sp, #4]
  40466c:	1a9d      	subs	r5, r3, r2
  40466e:	2d00      	cmp	r5, #0
  404670:	f340 8211 	ble.w	404a96 <_vfiprintf_r+0x6fe>
  404674:	2d10      	cmp	r5, #16
  404676:	f340 8490 	ble.w	404f9a <_vfiprintf_r+0xc02>
  40467a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40467c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40467e:	4ec4      	ldr	r6, [pc, #784]	; (404990 <_vfiprintf_r+0x5f8>)
  404680:	46d6      	mov	lr, sl
  404682:	2710      	movs	r7, #16
  404684:	46a2      	mov	sl, r4
  404686:	4619      	mov	r1, r3
  404688:	9c06      	ldr	r4, [sp, #24]
  40468a:	e007      	b.n	40469c <_vfiprintf_r+0x304>
  40468c:	f101 0c02 	add.w	ip, r1, #2
  404690:	f10e 0e08 	add.w	lr, lr, #8
  404694:	4601      	mov	r1, r0
  404696:	3d10      	subs	r5, #16
  404698:	2d10      	cmp	r5, #16
  40469a:	dd11      	ble.n	4046c0 <_vfiprintf_r+0x328>
  40469c:	1c48      	adds	r0, r1, #1
  40469e:	3210      	adds	r2, #16
  4046a0:	2807      	cmp	r0, #7
  4046a2:	9211      	str	r2, [sp, #68]	; 0x44
  4046a4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4046a8:	9010      	str	r0, [sp, #64]	; 0x40
  4046aa:	ddef      	ble.n	40468c <_vfiprintf_r+0x2f4>
  4046ac:	2a00      	cmp	r2, #0
  4046ae:	f040 81e4 	bne.w	404a7a <_vfiprintf_r+0x6e2>
  4046b2:	3d10      	subs	r5, #16
  4046b4:	2d10      	cmp	r5, #16
  4046b6:	4611      	mov	r1, r2
  4046b8:	f04f 0c01 	mov.w	ip, #1
  4046bc:	46ce      	mov	lr, r9
  4046be:	dced      	bgt.n	40469c <_vfiprintf_r+0x304>
  4046c0:	4654      	mov	r4, sl
  4046c2:	4661      	mov	r1, ip
  4046c4:	46f2      	mov	sl, lr
  4046c6:	442a      	add	r2, r5
  4046c8:	2907      	cmp	r1, #7
  4046ca:	9211      	str	r2, [sp, #68]	; 0x44
  4046cc:	f8ca 6000 	str.w	r6, [sl]
  4046d0:	f8ca 5004 	str.w	r5, [sl, #4]
  4046d4:	9110      	str	r1, [sp, #64]	; 0x40
  4046d6:	f300 82ec 	bgt.w	404cb2 <_vfiprintf_r+0x91a>
  4046da:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4046de:	f10a 0a08 	add.w	sl, sl, #8
  4046e2:	1c48      	adds	r0, r1, #1
  4046e4:	2d00      	cmp	r5, #0
  4046e6:	f040 81de 	bne.w	404aa6 <_vfiprintf_r+0x70e>
  4046ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046ec:	2b00      	cmp	r3, #0
  4046ee:	f000 81f8 	beq.w	404ae2 <_vfiprintf_r+0x74a>
  4046f2:	3202      	adds	r2, #2
  4046f4:	a90e      	add	r1, sp, #56	; 0x38
  4046f6:	2302      	movs	r3, #2
  4046f8:	2807      	cmp	r0, #7
  4046fa:	9211      	str	r2, [sp, #68]	; 0x44
  4046fc:	9010      	str	r0, [sp, #64]	; 0x40
  4046fe:	e88a 000a 	stmia.w	sl, {r1, r3}
  404702:	f340 81ea 	ble.w	404ada <_vfiprintf_r+0x742>
  404706:	2a00      	cmp	r2, #0
  404708:	f040 838c 	bne.w	404e24 <_vfiprintf_r+0xa8c>
  40470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40470e:	2b80      	cmp	r3, #128	; 0x80
  404710:	f04f 0001 	mov.w	r0, #1
  404714:	4611      	mov	r1, r2
  404716:	46ca      	mov	sl, r9
  404718:	f040 81e7 	bne.w	404aea <_vfiprintf_r+0x752>
  40471c:	9b08      	ldr	r3, [sp, #32]
  40471e:	9d01      	ldr	r5, [sp, #4]
  404720:	1b5e      	subs	r6, r3, r5
  404722:	2e00      	cmp	r6, #0
  404724:	f340 81e1 	ble.w	404aea <_vfiprintf_r+0x752>
  404728:	2e10      	cmp	r6, #16
  40472a:	4d9a      	ldr	r5, [pc, #616]	; (404994 <_vfiprintf_r+0x5fc>)
  40472c:	f340 8450 	ble.w	404fd0 <_vfiprintf_r+0xc38>
  404730:	46d4      	mov	ip, sl
  404732:	2710      	movs	r7, #16
  404734:	46a2      	mov	sl, r4
  404736:	9c06      	ldr	r4, [sp, #24]
  404738:	e007      	b.n	40474a <_vfiprintf_r+0x3b2>
  40473a:	f101 0e02 	add.w	lr, r1, #2
  40473e:	f10c 0c08 	add.w	ip, ip, #8
  404742:	4601      	mov	r1, r0
  404744:	3e10      	subs	r6, #16
  404746:	2e10      	cmp	r6, #16
  404748:	dd11      	ble.n	40476e <_vfiprintf_r+0x3d6>
  40474a:	1c48      	adds	r0, r1, #1
  40474c:	3210      	adds	r2, #16
  40474e:	2807      	cmp	r0, #7
  404750:	9211      	str	r2, [sp, #68]	; 0x44
  404752:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404756:	9010      	str	r0, [sp, #64]	; 0x40
  404758:	ddef      	ble.n	40473a <_vfiprintf_r+0x3a2>
  40475a:	2a00      	cmp	r2, #0
  40475c:	f040 829d 	bne.w	404c9a <_vfiprintf_r+0x902>
  404760:	3e10      	subs	r6, #16
  404762:	2e10      	cmp	r6, #16
  404764:	f04f 0e01 	mov.w	lr, #1
  404768:	4611      	mov	r1, r2
  40476a:	46cc      	mov	ip, r9
  40476c:	dced      	bgt.n	40474a <_vfiprintf_r+0x3b2>
  40476e:	4654      	mov	r4, sl
  404770:	46e2      	mov	sl, ip
  404772:	4432      	add	r2, r6
  404774:	f1be 0f07 	cmp.w	lr, #7
  404778:	9211      	str	r2, [sp, #68]	; 0x44
  40477a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40477e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404782:	f300 8369 	bgt.w	404e58 <_vfiprintf_r+0xac0>
  404786:	f10a 0a08 	add.w	sl, sl, #8
  40478a:	f10e 0001 	add.w	r0, lr, #1
  40478e:	4671      	mov	r1, lr
  404790:	e1ab      	b.n	404aea <_vfiprintf_r+0x752>
  404792:	9608      	str	r6, [sp, #32]
  404794:	f013 0220 	ands.w	r2, r3, #32
  404798:	f040 838c 	bne.w	404eb4 <_vfiprintf_r+0xb1c>
  40479c:	f013 0110 	ands.w	r1, r3, #16
  4047a0:	f040 831a 	bne.w	404dd8 <_vfiprintf_r+0xa40>
  4047a4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4047a8:	f000 8316 	beq.w	404dd8 <_vfiprintf_r+0xa40>
  4047ac:	9807      	ldr	r0, [sp, #28]
  4047ae:	460a      	mov	r2, r1
  4047b0:	4601      	mov	r1, r0
  4047b2:	3104      	adds	r1, #4
  4047b4:	8806      	ldrh	r6, [r0, #0]
  4047b6:	9107      	str	r1, [sp, #28]
  4047b8:	2700      	movs	r7, #0
  4047ba:	e720      	b.n	4045fe <_vfiprintf_r+0x266>
  4047bc:	9608      	str	r6, [sp, #32]
  4047be:	f043 0310 	orr.w	r3, r3, #16
  4047c2:	e7e7      	b.n	404794 <_vfiprintf_r+0x3fc>
  4047c4:	9608      	str	r6, [sp, #32]
  4047c6:	f043 0310 	orr.w	r3, r3, #16
  4047ca:	e708      	b.n	4045de <_vfiprintf_r+0x246>
  4047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4047d0:	f898 2000 	ldrb.w	r2, [r8]
  4047d4:	e652      	b.n	40447c <_vfiprintf_r+0xe4>
  4047d6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4047da:	2600      	movs	r6, #0
  4047dc:	f818 2b01 	ldrb.w	r2, [r8], #1
  4047e0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4047e4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4047e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4047ec:	2909      	cmp	r1, #9
  4047ee:	d9f5      	bls.n	4047dc <_vfiprintf_r+0x444>
  4047f0:	e646      	b.n	404480 <_vfiprintf_r+0xe8>
  4047f2:	9608      	str	r6, [sp, #32]
  4047f4:	2800      	cmp	r0, #0
  4047f6:	f040 8408 	bne.w	40500a <_vfiprintf_r+0xc72>
  4047fa:	f043 0310 	orr.w	r3, r3, #16
  4047fe:	069e      	lsls	r6, r3, #26
  404800:	f100 834c 	bmi.w	404e9c <_vfiprintf_r+0xb04>
  404804:	06dd      	lsls	r5, r3, #27
  404806:	f100 82f3 	bmi.w	404df0 <_vfiprintf_r+0xa58>
  40480a:	0658      	lsls	r0, r3, #25
  40480c:	f140 82f0 	bpl.w	404df0 <_vfiprintf_r+0xa58>
  404810:	9d07      	ldr	r5, [sp, #28]
  404812:	f9b5 6000 	ldrsh.w	r6, [r5]
  404816:	462a      	mov	r2, r5
  404818:	17f7      	asrs	r7, r6, #31
  40481a:	3204      	adds	r2, #4
  40481c:	4630      	mov	r0, r6
  40481e:	4639      	mov	r1, r7
  404820:	9207      	str	r2, [sp, #28]
  404822:	2800      	cmp	r0, #0
  404824:	f171 0200 	sbcs.w	r2, r1, #0
  404828:	f2c0 835d 	blt.w	404ee6 <_vfiprintf_r+0xb4e>
  40482c:	1c61      	adds	r1, r4, #1
  40482e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404832:	f04f 0201 	mov.w	r2, #1
  404836:	f47f aeea 	bne.w	40460e <_vfiprintf_r+0x276>
  40483a:	ea56 0107 	orrs.w	r1, r6, r7
  40483e:	f000 824d 	beq.w	404cdc <_vfiprintf_r+0x944>
  404842:	9302      	str	r3, [sp, #8]
  404844:	2a01      	cmp	r2, #1
  404846:	f000 828c 	beq.w	404d62 <_vfiprintf_r+0x9ca>
  40484a:	2a02      	cmp	r2, #2
  40484c:	f040 825c 	bne.w	404d08 <_vfiprintf_r+0x970>
  404850:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404852:	46cb      	mov	fp, r9
  404854:	0933      	lsrs	r3, r6, #4
  404856:	f006 010f 	and.w	r1, r6, #15
  40485a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40485e:	093a      	lsrs	r2, r7, #4
  404860:	461e      	mov	r6, r3
  404862:	4617      	mov	r7, r2
  404864:	5c43      	ldrb	r3, [r0, r1]
  404866:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40486a:	ea56 0307 	orrs.w	r3, r6, r7
  40486e:	d1f1      	bne.n	404854 <_vfiprintf_r+0x4bc>
  404870:	eba9 030b 	sub.w	r3, r9, fp
  404874:	9305      	str	r3, [sp, #20]
  404876:	e6e1      	b.n	40463c <_vfiprintf_r+0x2a4>
  404878:	2800      	cmp	r0, #0
  40487a:	f040 83c0 	bne.w	404ffe <_vfiprintf_r+0xc66>
  40487e:	0699      	lsls	r1, r3, #26
  404880:	f100 8367 	bmi.w	404f52 <_vfiprintf_r+0xbba>
  404884:	06da      	lsls	r2, r3, #27
  404886:	f100 80f1 	bmi.w	404a6c <_vfiprintf_r+0x6d4>
  40488a:	065b      	lsls	r3, r3, #25
  40488c:	f140 80ee 	bpl.w	404a6c <_vfiprintf_r+0x6d4>
  404890:	9a07      	ldr	r2, [sp, #28]
  404892:	6813      	ldr	r3, [r2, #0]
  404894:	3204      	adds	r2, #4
  404896:	9207      	str	r2, [sp, #28]
  404898:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40489c:	801a      	strh	r2, [r3, #0]
  40489e:	e5b8      	b.n	404412 <_vfiprintf_r+0x7a>
  4048a0:	9807      	ldr	r0, [sp, #28]
  4048a2:	4a3d      	ldr	r2, [pc, #244]	; (404998 <_vfiprintf_r+0x600>)
  4048a4:	9608      	str	r6, [sp, #32]
  4048a6:	920b      	str	r2, [sp, #44]	; 0x2c
  4048a8:	6806      	ldr	r6, [r0, #0]
  4048aa:	2278      	movs	r2, #120	; 0x78
  4048ac:	2130      	movs	r1, #48	; 0x30
  4048ae:	3004      	adds	r0, #4
  4048b0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4048b4:	f043 0302 	orr.w	r3, r3, #2
  4048b8:	9007      	str	r0, [sp, #28]
  4048ba:	2700      	movs	r7, #0
  4048bc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4048c0:	2202      	movs	r2, #2
  4048c2:	e69c      	b.n	4045fe <_vfiprintf_r+0x266>
  4048c4:	9608      	str	r6, [sp, #32]
  4048c6:	2800      	cmp	r0, #0
  4048c8:	d099      	beq.n	4047fe <_vfiprintf_r+0x466>
  4048ca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4048ce:	e796      	b.n	4047fe <_vfiprintf_r+0x466>
  4048d0:	f898 2000 	ldrb.w	r2, [r8]
  4048d4:	2d00      	cmp	r5, #0
  4048d6:	f47f add1 	bne.w	40447c <_vfiprintf_r+0xe4>
  4048da:	2001      	movs	r0, #1
  4048dc:	2520      	movs	r5, #32
  4048de:	e5cd      	b.n	40447c <_vfiprintf_r+0xe4>
  4048e0:	f043 0301 	orr.w	r3, r3, #1
  4048e4:	f898 2000 	ldrb.w	r2, [r8]
  4048e8:	e5c8      	b.n	40447c <_vfiprintf_r+0xe4>
  4048ea:	9608      	str	r6, [sp, #32]
  4048ec:	2800      	cmp	r0, #0
  4048ee:	f040 8393 	bne.w	405018 <_vfiprintf_r+0xc80>
  4048f2:	4929      	ldr	r1, [pc, #164]	; (404998 <_vfiprintf_r+0x600>)
  4048f4:	910b      	str	r1, [sp, #44]	; 0x2c
  4048f6:	069f      	lsls	r7, r3, #26
  4048f8:	f100 82e8 	bmi.w	404ecc <_vfiprintf_r+0xb34>
  4048fc:	9807      	ldr	r0, [sp, #28]
  4048fe:	06de      	lsls	r6, r3, #27
  404900:	4601      	mov	r1, r0
  404902:	f100 8270 	bmi.w	404de6 <_vfiprintf_r+0xa4e>
  404906:	065d      	lsls	r5, r3, #25
  404908:	f140 826d 	bpl.w	404de6 <_vfiprintf_r+0xa4e>
  40490c:	3104      	adds	r1, #4
  40490e:	8806      	ldrh	r6, [r0, #0]
  404910:	9107      	str	r1, [sp, #28]
  404912:	2700      	movs	r7, #0
  404914:	07d8      	lsls	r0, r3, #31
  404916:	f140 8222 	bpl.w	404d5e <_vfiprintf_r+0x9c6>
  40491a:	ea56 0107 	orrs.w	r1, r6, r7
  40491e:	f000 821e 	beq.w	404d5e <_vfiprintf_r+0x9c6>
  404922:	2130      	movs	r1, #48	; 0x30
  404924:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404928:	f043 0302 	orr.w	r3, r3, #2
  40492c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404930:	2202      	movs	r2, #2
  404932:	e664      	b.n	4045fe <_vfiprintf_r+0x266>
  404934:	9608      	str	r6, [sp, #32]
  404936:	2800      	cmp	r0, #0
  404938:	f040 836b 	bne.w	405012 <_vfiprintf_r+0xc7a>
  40493c:	4917      	ldr	r1, [pc, #92]	; (40499c <_vfiprintf_r+0x604>)
  40493e:	910b      	str	r1, [sp, #44]	; 0x2c
  404940:	e7d9      	b.n	4048f6 <_vfiprintf_r+0x55e>
  404942:	9907      	ldr	r1, [sp, #28]
  404944:	9608      	str	r6, [sp, #32]
  404946:	680a      	ldr	r2, [r1, #0]
  404948:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40494c:	f04f 0000 	mov.w	r0, #0
  404950:	460a      	mov	r2, r1
  404952:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404956:	3204      	adds	r2, #4
  404958:	2001      	movs	r0, #1
  40495a:	9001      	str	r0, [sp, #4]
  40495c:	9207      	str	r2, [sp, #28]
  40495e:	9005      	str	r0, [sp, #20]
  404960:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404964:	9302      	str	r3, [sp, #8]
  404966:	2400      	movs	r4, #0
  404968:	e670      	b.n	40464c <_vfiprintf_r+0x2b4>
  40496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40496e:	f898 2000 	ldrb.w	r2, [r8]
  404972:	e583      	b.n	40447c <_vfiprintf_r+0xe4>
  404974:	f898 2000 	ldrb.w	r2, [r8]
  404978:	2a6c      	cmp	r2, #108	; 0x6c
  40497a:	bf03      	ittte	eq
  40497c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404980:	f043 0320 	orreq.w	r3, r3, #32
  404984:	f108 0801 	addeq.w	r8, r8, #1
  404988:	f043 0310 	orrne.w	r3, r3, #16
  40498c:	e576      	b.n	40447c <_vfiprintf_r+0xe4>
  40498e:	bf00      	nop
  404990:	00406c10 	.word	0x00406c10
  404994:	00406c20 	.word	0x00406c20
  404998:	00406bf4 	.word	0x00406bf4
  40499c:	00406be0 	.word	0x00406be0
  4049a0:	9907      	ldr	r1, [sp, #28]
  4049a2:	680e      	ldr	r6, [r1, #0]
  4049a4:	460a      	mov	r2, r1
  4049a6:	2e00      	cmp	r6, #0
  4049a8:	f102 0204 	add.w	r2, r2, #4
  4049ac:	f6ff ae0f 	blt.w	4045ce <_vfiprintf_r+0x236>
  4049b0:	9207      	str	r2, [sp, #28]
  4049b2:	f898 2000 	ldrb.w	r2, [r8]
  4049b6:	e561      	b.n	40447c <_vfiprintf_r+0xe4>
  4049b8:	f898 2000 	ldrb.w	r2, [r8]
  4049bc:	2001      	movs	r0, #1
  4049be:	252b      	movs	r5, #43	; 0x2b
  4049c0:	e55c      	b.n	40447c <_vfiprintf_r+0xe4>
  4049c2:	9907      	ldr	r1, [sp, #28]
  4049c4:	9608      	str	r6, [sp, #32]
  4049c6:	f8d1 b000 	ldr.w	fp, [r1]
  4049ca:	f04f 0200 	mov.w	r2, #0
  4049ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4049d2:	1d0e      	adds	r6, r1, #4
  4049d4:	f1bb 0f00 	cmp.w	fp, #0
  4049d8:	f000 82e5 	beq.w	404fa6 <_vfiprintf_r+0xc0e>
  4049dc:	1c67      	adds	r7, r4, #1
  4049de:	f000 82c4 	beq.w	404f6a <_vfiprintf_r+0xbd2>
  4049e2:	4622      	mov	r2, r4
  4049e4:	2100      	movs	r1, #0
  4049e6:	4658      	mov	r0, fp
  4049e8:	9301      	str	r3, [sp, #4]
  4049ea:	f001 f921 	bl	405c30 <memchr>
  4049ee:	9b01      	ldr	r3, [sp, #4]
  4049f0:	2800      	cmp	r0, #0
  4049f2:	f000 82e5 	beq.w	404fc0 <_vfiprintf_r+0xc28>
  4049f6:	eba0 020b 	sub.w	r2, r0, fp
  4049fa:	9205      	str	r2, [sp, #20]
  4049fc:	9607      	str	r6, [sp, #28]
  4049fe:	9302      	str	r3, [sp, #8]
  404a00:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a04:	2400      	movs	r4, #0
  404a06:	e619      	b.n	40463c <_vfiprintf_r+0x2a4>
  404a08:	f898 2000 	ldrb.w	r2, [r8]
  404a0c:	2a2a      	cmp	r2, #42	; 0x2a
  404a0e:	f108 0701 	add.w	r7, r8, #1
  404a12:	f000 82e9 	beq.w	404fe8 <_vfiprintf_r+0xc50>
  404a16:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a1a:	2909      	cmp	r1, #9
  404a1c:	46b8      	mov	r8, r7
  404a1e:	f04f 0400 	mov.w	r4, #0
  404a22:	f63f ad2d 	bhi.w	404480 <_vfiprintf_r+0xe8>
  404a26:	f818 2b01 	ldrb.w	r2, [r8], #1
  404a2a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404a2e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404a32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a36:	2909      	cmp	r1, #9
  404a38:	d9f5      	bls.n	404a26 <_vfiprintf_r+0x68e>
  404a3a:	e521      	b.n	404480 <_vfiprintf_r+0xe8>
  404a3c:	f043 0320 	orr.w	r3, r3, #32
  404a40:	f898 2000 	ldrb.w	r2, [r8]
  404a44:	e51a      	b.n	40447c <_vfiprintf_r+0xe4>
  404a46:	9608      	str	r6, [sp, #32]
  404a48:	2800      	cmp	r0, #0
  404a4a:	f040 82db 	bne.w	405004 <_vfiprintf_r+0xc6c>
  404a4e:	2a00      	cmp	r2, #0
  404a50:	f000 80e7 	beq.w	404c22 <_vfiprintf_r+0x88a>
  404a54:	2101      	movs	r1, #1
  404a56:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a5a:	f04f 0200 	mov.w	r2, #0
  404a5e:	9101      	str	r1, [sp, #4]
  404a60:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404a64:	9105      	str	r1, [sp, #20]
  404a66:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404a6a:	e77b      	b.n	404964 <_vfiprintf_r+0x5cc>
  404a6c:	9a07      	ldr	r2, [sp, #28]
  404a6e:	6813      	ldr	r3, [r2, #0]
  404a70:	3204      	adds	r2, #4
  404a72:	9207      	str	r2, [sp, #28]
  404a74:	9a03      	ldr	r2, [sp, #12]
  404a76:	601a      	str	r2, [r3, #0]
  404a78:	e4cb      	b.n	404412 <_vfiprintf_r+0x7a>
  404a7a:	aa0f      	add	r2, sp, #60	; 0x3c
  404a7c:	9904      	ldr	r1, [sp, #16]
  404a7e:	4620      	mov	r0, r4
  404a80:	f7ff fc4a 	bl	404318 <__sprint_r.part.0>
  404a84:	2800      	cmp	r0, #0
  404a86:	f040 8139 	bne.w	404cfc <_vfiprintf_r+0x964>
  404a8a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a8e:	f101 0c01 	add.w	ip, r1, #1
  404a92:	46ce      	mov	lr, r9
  404a94:	e5ff      	b.n	404696 <_vfiprintf_r+0x2fe>
  404a96:	9910      	ldr	r1, [sp, #64]	; 0x40
  404a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404a9a:	1c48      	adds	r0, r1, #1
  404a9c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404aa0:	2d00      	cmp	r5, #0
  404aa2:	f43f ae22 	beq.w	4046ea <_vfiprintf_r+0x352>
  404aa6:	3201      	adds	r2, #1
  404aa8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404aac:	2101      	movs	r1, #1
  404aae:	2807      	cmp	r0, #7
  404ab0:	9211      	str	r2, [sp, #68]	; 0x44
  404ab2:	9010      	str	r0, [sp, #64]	; 0x40
  404ab4:	f8ca 5000 	str.w	r5, [sl]
  404ab8:	f8ca 1004 	str.w	r1, [sl, #4]
  404abc:	f340 8108 	ble.w	404cd0 <_vfiprintf_r+0x938>
  404ac0:	2a00      	cmp	r2, #0
  404ac2:	f040 81bc 	bne.w	404e3e <_vfiprintf_r+0xaa6>
  404ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ac8:	2b00      	cmp	r3, #0
  404aca:	f43f ae1f 	beq.w	40470c <_vfiprintf_r+0x374>
  404ace:	ab0e      	add	r3, sp, #56	; 0x38
  404ad0:	2202      	movs	r2, #2
  404ad2:	4608      	mov	r0, r1
  404ad4:	931c      	str	r3, [sp, #112]	; 0x70
  404ad6:	921d      	str	r2, [sp, #116]	; 0x74
  404ad8:	46ca      	mov	sl, r9
  404ada:	4601      	mov	r1, r0
  404adc:	f10a 0a08 	add.w	sl, sl, #8
  404ae0:	3001      	adds	r0, #1
  404ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ae4:	2b80      	cmp	r3, #128	; 0x80
  404ae6:	f43f ae19 	beq.w	40471c <_vfiprintf_r+0x384>
  404aea:	9b05      	ldr	r3, [sp, #20]
  404aec:	1ae4      	subs	r4, r4, r3
  404aee:	2c00      	cmp	r4, #0
  404af0:	dd2e      	ble.n	404b50 <_vfiprintf_r+0x7b8>
  404af2:	2c10      	cmp	r4, #16
  404af4:	4db3      	ldr	r5, [pc, #716]	; (404dc4 <_vfiprintf_r+0xa2c>)
  404af6:	dd1e      	ble.n	404b36 <_vfiprintf_r+0x79e>
  404af8:	46d6      	mov	lr, sl
  404afa:	2610      	movs	r6, #16
  404afc:	9f06      	ldr	r7, [sp, #24]
  404afe:	f8dd a010 	ldr.w	sl, [sp, #16]
  404b02:	e006      	b.n	404b12 <_vfiprintf_r+0x77a>
  404b04:	1c88      	adds	r0, r1, #2
  404b06:	f10e 0e08 	add.w	lr, lr, #8
  404b0a:	4619      	mov	r1, r3
  404b0c:	3c10      	subs	r4, #16
  404b0e:	2c10      	cmp	r4, #16
  404b10:	dd10      	ble.n	404b34 <_vfiprintf_r+0x79c>
  404b12:	1c4b      	adds	r3, r1, #1
  404b14:	3210      	adds	r2, #16
  404b16:	2b07      	cmp	r3, #7
  404b18:	9211      	str	r2, [sp, #68]	; 0x44
  404b1a:	e88e 0060 	stmia.w	lr, {r5, r6}
  404b1e:	9310      	str	r3, [sp, #64]	; 0x40
  404b20:	ddf0      	ble.n	404b04 <_vfiprintf_r+0x76c>
  404b22:	2a00      	cmp	r2, #0
  404b24:	d165      	bne.n	404bf2 <_vfiprintf_r+0x85a>
  404b26:	3c10      	subs	r4, #16
  404b28:	2c10      	cmp	r4, #16
  404b2a:	f04f 0001 	mov.w	r0, #1
  404b2e:	4611      	mov	r1, r2
  404b30:	46ce      	mov	lr, r9
  404b32:	dcee      	bgt.n	404b12 <_vfiprintf_r+0x77a>
  404b34:	46f2      	mov	sl, lr
  404b36:	4422      	add	r2, r4
  404b38:	2807      	cmp	r0, #7
  404b3a:	9211      	str	r2, [sp, #68]	; 0x44
  404b3c:	f8ca 5000 	str.w	r5, [sl]
  404b40:	f8ca 4004 	str.w	r4, [sl, #4]
  404b44:	9010      	str	r0, [sp, #64]	; 0x40
  404b46:	f300 8085 	bgt.w	404c54 <_vfiprintf_r+0x8bc>
  404b4a:	f10a 0a08 	add.w	sl, sl, #8
  404b4e:	3001      	adds	r0, #1
  404b50:	9905      	ldr	r1, [sp, #20]
  404b52:	f8ca b000 	str.w	fp, [sl]
  404b56:	440a      	add	r2, r1
  404b58:	2807      	cmp	r0, #7
  404b5a:	9211      	str	r2, [sp, #68]	; 0x44
  404b5c:	f8ca 1004 	str.w	r1, [sl, #4]
  404b60:	9010      	str	r0, [sp, #64]	; 0x40
  404b62:	f340 8082 	ble.w	404c6a <_vfiprintf_r+0x8d2>
  404b66:	2a00      	cmp	r2, #0
  404b68:	f040 8118 	bne.w	404d9c <_vfiprintf_r+0xa04>
  404b6c:	9b02      	ldr	r3, [sp, #8]
  404b6e:	9210      	str	r2, [sp, #64]	; 0x40
  404b70:	0758      	lsls	r0, r3, #29
  404b72:	d535      	bpl.n	404be0 <_vfiprintf_r+0x848>
  404b74:	9b08      	ldr	r3, [sp, #32]
  404b76:	9901      	ldr	r1, [sp, #4]
  404b78:	1a5c      	subs	r4, r3, r1
  404b7a:	2c00      	cmp	r4, #0
  404b7c:	f340 80e7 	ble.w	404d4e <_vfiprintf_r+0x9b6>
  404b80:	46ca      	mov	sl, r9
  404b82:	2c10      	cmp	r4, #16
  404b84:	f340 8218 	ble.w	404fb8 <_vfiprintf_r+0xc20>
  404b88:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b8a:	4e8f      	ldr	r6, [pc, #572]	; (404dc8 <_vfiprintf_r+0xa30>)
  404b8c:	9f06      	ldr	r7, [sp, #24]
  404b8e:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b92:	2510      	movs	r5, #16
  404b94:	e006      	b.n	404ba4 <_vfiprintf_r+0x80c>
  404b96:	1c88      	adds	r0, r1, #2
  404b98:	f10a 0a08 	add.w	sl, sl, #8
  404b9c:	4619      	mov	r1, r3
  404b9e:	3c10      	subs	r4, #16
  404ba0:	2c10      	cmp	r4, #16
  404ba2:	dd11      	ble.n	404bc8 <_vfiprintf_r+0x830>
  404ba4:	1c4b      	adds	r3, r1, #1
  404ba6:	3210      	adds	r2, #16
  404ba8:	2b07      	cmp	r3, #7
  404baa:	9211      	str	r2, [sp, #68]	; 0x44
  404bac:	f8ca 6000 	str.w	r6, [sl]
  404bb0:	f8ca 5004 	str.w	r5, [sl, #4]
  404bb4:	9310      	str	r3, [sp, #64]	; 0x40
  404bb6:	ddee      	ble.n	404b96 <_vfiprintf_r+0x7fe>
  404bb8:	bb42      	cbnz	r2, 404c0c <_vfiprintf_r+0x874>
  404bba:	3c10      	subs	r4, #16
  404bbc:	2c10      	cmp	r4, #16
  404bbe:	f04f 0001 	mov.w	r0, #1
  404bc2:	4611      	mov	r1, r2
  404bc4:	46ca      	mov	sl, r9
  404bc6:	dced      	bgt.n	404ba4 <_vfiprintf_r+0x80c>
  404bc8:	4422      	add	r2, r4
  404bca:	2807      	cmp	r0, #7
  404bcc:	9211      	str	r2, [sp, #68]	; 0x44
  404bce:	f8ca 6000 	str.w	r6, [sl]
  404bd2:	f8ca 4004 	str.w	r4, [sl, #4]
  404bd6:	9010      	str	r0, [sp, #64]	; 0x40
  404bd8:	dd51      	ble.n	404c7e <_vfiprintf_r+0x8e6>
  404bda:	2a00      	cmp	r2, #0
  404bdc:	f040 819b 	bne.w	404f16 <_vfiprintf_r+0xb7e>
  404be0:	9b03      	ldr	r3, [sp, #12]
  404be2:	9a08      	ldr	r2, [sp, #32]
  404be4:	9901      	ldr	r1, [sp, #4]
  404be6:	428a      	cmp	r2, r1
  404be8:	bfac      	ite	ge
  404bea:	189b      	addge	r3, r3, r2
  404bec:	185b      	addlt	r3, r3, r1
  404bee:	9303      	str	r3, [sp, #12]
  404bf0:	e04e      	b.n	404c90 <_vfiprintf_r+0x8f8>
  404bf2:	aa0f      	add	r2, sp, #60	; 0x3c
  404bf4:	4651      	mov	r1, sl
  404bf6:	4638      	mov	r0, r7
  404bf8:	f7ff fb8e 	bl	404318 <__sprint_r.part.0>
  404bfc:	2800      	cmp	r0, #0
  404bfe:	f040 813f 	bne.w	404e80 <_vfiprintf_r+0xae8>
  404c02:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c04:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c06:	1c48      	adds	r0, r1, #1
  404c08:	46ce      	mov	lr, r9
  404c0a:	e77f      	b.n	404b0c <_vfiprintf_r+0x774>
  404c0c:	aa0f      	add	r2, sp, #60	; 0x3c
  404c0e:	4659      	mov	r1, fp
  404c10:	4638      	mov	r0, r7
  404c12:	f7ff fb81 	bl	404318 <__sprint_r.part.0>
  404c16:	b960      	cbnz	r0, 404c32 <_vfiprintf_r+0x89a>
  404c18:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c1c:	1c48      	adds	r0, r1, #1
  404c1e:	46ca      	mov	sl, r9
  404c20:	e7bd      	b.n	404b9e <_vfiprintf_r+0x806>
  404c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c24:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c28:	2b00      	cmp	r3, #0
  404c2a:	f040 81d4 	bne.w	404fd6 <_vfiprintf_r+0xc3e>
  404c2e:	2300      	movs	r3, #0
  404c30:	9310      	str	r3, [sp, #64]	; 0x40
  404c32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c36:	f013 0f01 	tst.w	r3, #1
  404c3a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404c3e:	d102      	bne.n	404c46 <_vfiprintf_r+0x8ae>
  404c40:	059a      	lsls	r2, r3, #22
  404c42:	f140 80de 	bpl.w	404e02 <_vfiprintf_r+0xa6a>
  404c46:	065b      	lsls	r3, r3, #25
  404c48:	f53f acb2 	bmi.w	4045b0 <_vfiprintf_r+0x218>
  404c4c:	9803      	ldr	r0, [sp, #12]
  404c4e:	b02d      	add	sp, #180	; 0xb4
  404c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c54:	2a00      	cmp	r2, #0
  404c56:	f040 8106 	bne.w	404e66 <_vfiprintf_r+0xace>
  404c5a:	9a05      	ldr	r2, [sp, #20]
  404c5c:	921d      	str	r2, [sp, #116]	; 0x74
  404c5e:	2301      	movs	r3, #1
  404c60:	9211      	str	r2, [sp, #68]	; 0x44
  404c62:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404c66:	9310      	str	r3, [sp, #64]	; 0x40
  404c68:	46ca      	mov	sl, r9
  404c6a:	f10a 0a08 	add.w	sl, sl, #8
  404c6e:	9b02      	ldr	r3, [sp, #8]
  404c70:	0759      	lsls	r1, r3, #29
  404c72:	d504      	bpl.n	404c7e <_vfiprintf_r+0x8e6>
  404c74:	9b08      	ldr	r3, [sp, #32]
  404c76:	9901      	ldr	r1, [sp, #4]
  404c78:	1a5c      	subs	r4, r3, r1
  404c7a:	2c00      	cmp	r4, #0
  404c7c:	dc81      	bgt.n	404b82 <_vfiprintf_r+0x7ea>
  404c7e:	9b03      	ldr	r3, [sp, #12]
  404c80:	9908      	ldr	r1, [sp, #32]
  404c82:	9801      	ldr	r0, [sp, #4]
  404c84:	4281      	cmp	r1, r0
  404c86:	bfac      	ite	ge
  404c88:	185b      	addge	r3, r3, r1
  404c8a:	181b      	addlt	r3, r3, r0
  404c8c:	9303      	str	r3, [sp, #12]
  404c8e:	bb72      	cbnz	r2, 404cee <_vfiprintf_r+0x956>
  404c90:	2300      	movs	r3, #0
  404c92:	9310      	str	r3, [sp, #64]	; 0x40
  404c94:	46ca      	mov	sl, r9
  404c96:	f7ff bbbc 	b.w	404412 <_vfiprintf_r+0x7a>
  404c9a:	aa0f      	add	r2, sp, #60	; 0x3c
  404c9c:	9904      	ldr	r1, [sp, #16]
  404c9e:	4620      	mov	r0, r4
  404ca0:	f7ff fb3a 	bl	404318 <__sprint_r.part.0>
  404ca4:	bb50      	cbnz	r0, 404cfc <_vfiprintf_r+0x964>
  404ca6:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ca8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404caa:	f101 0e01 	add.w	lr, r1, #1
  404cae:	46cc      	mov	ip, r9
  404cb0:	e548      	b.n	404744 <_vfiprintf_r+0x3ac>
  404cb2:	2a00      	cmp	r2, #0
  404cb4:	f040 8140 	bne.w	404f38 <_vfiprintf_r+0xba0>
  404cb8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404cbc:	2900      	cmp	r1, #0
  404cbe:	f000 811b 	beq.w	404ef8 <_vfiprintf_r+0xb60>
  404cc2:	2201      	movs	r2, #1
  404cc4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404cc8:	4610      	mov	r0, r2
  404cca:	921d      	str	r2, [sp, #116]	; 0x74
  404ccc:	911c      	str	r1, [sp, #112]	; 0x70
  404cce:	46ca      	mov	sl, r9
  404cd0:	4601      	mov	r1, r0
  404cd2:	f10a 0a08 	add.w	sl, sl, #8
  404cd6:	3001      	adds	r0, #1
  404cd8:	e507      	b.n	4046ea <_vfiprintf_r+0x352>
  404cda:	9b02      	ldr	r3, [sp, #8]
  404cdc:	2a01      	cmp	r2, #1
  404cde:	f000 8098 	beq.w	404e12 <_vfiprintf_r+0xa7a>
  404ce2:	2a02      	cmp	r2, #2
  404ce4:	d10d      	bne.n	404d02 <_vfiprintf_r+0x96a>
  404ce6:	9302      	str	r3, [sp, #8]
  404ce8:	2600      	movs	r6, #0
  404cea:	2700      	movs	r7, #0
  404cec:	e5b0      	b.n	404850 <_vfiprintf_r+0x4b8>
  404cee:	aa0f      	add	r2, sp, #60	; 0x3c
  404cf0:	9904      	ldr	r1, [sp, #16]
  404cf2:	9806      	ldr	r0, [sp, #24]
  404cf4:	f7ff fb10 	bl	404318 <__sprint_r.part.0>
  404cf8:	2800      	cmp	r0, #0
  404cfa:	d0c9      	beq.n	404c90 <_vfiprintf_r+0x8f8>
  404cfc:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d00:	e797      	b.n	404c32 <_vfiprintf_r+0x89a>
  404d02:	9302      	str	r3, [sp, #8]
  404d04:	2600      	movs	r6, #0
  404d06:	2700      	movs	r7, #0
  404d08:	4649      	mov	r1, r9
  404d0a:	e000      	b.n	404d0e <_vfiprintf_r+0x976>
  404d0c:	4659      	mov	r1, fp
  404d0e:	08f2      	lsrs	r2, r6, #3
  404d10:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404d14:	08f8      	lsrs	r0, r7, #3
  404d16:	f006 0307 	and.w	r3, r6, #7
  404d1a:	4607      	mov	r7, r0
  404d1c:	4616      	mov	r6, r2
  404d1e:	3330      	adds	r3, #48	; 0x30
  404d20:	ea56 0207 	orrs.w	r2, r6, r7
  404d24:	f801 3c01 	strb.w	r3, [r1, #-1]
  404d28:	f101 3bff 	add.w	fp, r1, #4294967295
  404d2c:	d1ee      	bne.n	404d0c <_vfiprintf_r+0x974>
  404d2e:	9a02      	ldr	r2, [sp, #8]
  404d30:	07d6      	lsls	r6, r2, #31
  404d32:	f57f ad9d 	bpl.w	404870 <_vfiprintf_r+0x4d8>
  404d36:	2b30      	cmp	r3, #48	; 0x30
  404d38:	f43f ad9a 	beq.w	404870 <_vfiprintf_r+0x4d8>
  404d3c:	3902      	subs	r1, #2
  404d3e:	2330      	movs	r3, #48	; 0x30
  404d40:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404d44:	eba9 0301 	sub.w	r3, r9, r1
  404d48:	9305      	str	r3, [sp, #20]
  404d4a:	468b      	mov	fp, r1
  404d4c:	e476      	b.n	40463c <_vfiprintf_r+0x2a4>
  404d4e:	9b03      	ldr	r3, [sp, #12]
  404d50:	9a08      	ldr	r2, [sp, #32]
  404d52:	428a      	cmp	r2, r1
  404d54:	bfac      	ite	ge
  404d56:	189b      	addge	r3, r3, r2
  404d58:	185b      	addlt	r3, r3, r1
  404d5a:	9303      	str	r3, [sp, #12]
  404d5c:	e798      	b.n	404c90 <_vfiprintf_r+0x8f8>
  404d5e:	2202      	movs	r2, #2
  404d60:	e44d      	b.n	4045fe <_vfiprintf_r+0x266>
  404d62:	2f00      	cmp	r7, #0
  404d64:	bf08      	it	eq
  404d66:	2e0a      	cmpeq	r6, #10
  404d68:	d352      	bcc.n	404e10 <_vfiprintf_r+0xa78>
  404d6a:	46cb      	mov	fp, r9
  404d6c:	4630      	mov	r0, r6
  404d6e:	4639      	mov	r1, r7
  404d70:	220a      	movs	r2, #10
  404d72:	2300      	movs	r3, #0
  404d74:	f001 fc40 	bl	4065f8 <__aeabi_uldivmod>
  404d78:	3230      	adds	r2, #48	; 0x30
  404d7a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404d7e:	4630      	mov	r0, r6
  404d80:	4639      	mov	r1, r7
  404d82:	2300      	movs	r3, #0
  404d84:	220a      	movs	r2, #10
  404d86:	f001 fc37 	bl	4065f8 <__aeabi_uldivmod>
  404d8a:	4606      	mov	r6, r0
  404d8c:	460f      	mov	r7, r1
  404d8e:	ea56 0307 	orrs.w	r3, r6, r7
  404d92:	d1eb      	bne.n	404d6c <_vfiprintf_r+0x9d4>
  404d94:	e56c      	b.n	404870 <_vfiprintf_r+0x4d8>
  404d96:	9405      	str	r4, [sp, #20]
  404d98:	46cb      	mov	fp, r9
  404d9a:	e44f      	b.n	40463c <_vfiprintf_r+0x2a4>
  404d9c:	aa0f      	add	r2, sp, #60	; 0x3c
  404d9e:	9904      	ldr	r1, [sp, #16]
  404da0:	9806      	ldr	r0, [sp, #24]
  404da2:	f7ff fab9 	bl	404318 <__sprint_r.part.0>
  404da6:	2800      	cmp	r0, #0
  404da8:	d1a8      	bne.n	404cfc <_vfiprintf_r+0x964>
  404daa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dac:	46ca      	mov	sl, r9
  404dae:	e75e      	b.n	404c6e <_vfiprintf_r+0x8d6>
  404db0:	aa0f      	add	r2, sp, #60	; 0x3c
  404db2:	9904      	ldr	r1, [sp, #16]
  404db4:	9806      	ldr	r0, [sp, #24]
  404db6:	f7ff faaf 	bl	404318 <__sprint_r.part.0>
  404dba:	2800      	cmp	r0, #0
  404dbc:	d19e      	bne.n	404cfc <_vfiprintf_r+0x964>
  404dbe:	46ca      	mov	sl, r9
  404dc0:	f7ff bbc0 	b.w	404544 <_vfiprintf_r+0x1ac>
  404dc4:	00406c20 	.word	0x00406c20
  404dc8:	00406c10 	.word	0x00406c10
  404dcc:	3104      	adds	r1, #4
  404dce:	6816      	ldr	r6, [r2, #0]
  404dd0:	9107      	str	r1, [sp, #28]
  404dd2:	2201      	movs	r2, #1
  404dd4:	2700      	movs	r7, #0
  404dd6:	e412      	b.n	4045fe <_vfiprintf_r+0x266>
  404dd8:	9807      	ldr	r0, [sp, #28]
  404dda:	4601      	mov	r1, r0
  404ddc:	3104      	adds	r1, #4
  404dde:	6806      	ldr	r6, [r0, #0]
  404de0:	9107      	str	r1, [sp, #28]
  404de2:	2700      	movs	r7, #0
  404de4:	e40b      	b.n	4045fe <_vfiprintf_r+0x266>
  404de6:	680e      	ldr	r6, [r1, #0]
  404de8:	3104      	adds	r1, #4
  404dea:	9107      	str	r1, [sp, #28]
  404dec:	2700      	movs	r7, #0
  404dee:	e591      	b.n	404914 <_vfiprintf_r+0x57c>
  404df0:	9907      	ldr	r1, [sp, #28]
  404df2:	680e      	ldr	r6, [r1, #0]
  404df4:	460a      	mov	r2, r1
  404df6:	17f7      	asrs	r7, r6, #31
  404df8:	3204      	adds	r2, #4
  404dfa:	9207      	str	r2, [sp, #28]
  404dfc:	4630      	mov	r0, r6
  404dfe:	4639      	mov	r1, r7
  404e00:	e50f      	b.n	404822 <_vfiprintf_r+0x48a>
  404e02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e06:	f000 fe7f 	bl	405b08 <__retarget_lock_release_recursive>
  404e0a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e0e:	e71a      	b.n	404c46 <_vfiprintf_r+0x8ae>
  404e10:	9b02      	ldr	r3, [sp, #8]
  404e12:	9302      	str	r3, [sp, #8]
  404e14:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e18:	3630      	adds	r6, #48	; 0x30
  404e1a:	2301      	movs	r3, #1
  404e1c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404e20:	9305      	str	r3, [sp, #20]
  404e22:	e40b      	b.n	40463c <_vfiprintf_r+0x2a4>
  404e24:	aa0f      	add	r2, sp, #60	; 0x3c
  404e26:	9904      	ldr	r1, [sp, #16]
  404e28:	9806      	ldr	r0, [sp, #24]
  404e2a:	f7ff fa75 	bl	404318 <__sprint_r.part.0>
  404e2e:	2800      	cmp	r0, #0
  404e30:	f47f af64 	bne.w	404cfc <_vfiprintf_r+0x964>
  404e34:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e38:	1c48      	adds	r0, r1, #1
  404e3a:	46ca      	mov	sl, r9
  404e3c:	e651      	b.n	404ae2 <_vfiprintf_r+0x74a>
  404e3e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e40:	9904      	ldr	r1, [sp, #16]
  404e42:	9806      	ldr	r0, [sp, #24]
  404e44:	f7ff fa68 	bl	404318 <__sprint_r.part.0>
  404e48:	2800      	cmp	r0, #0
  404e4a:	f47f af57 	bne.w	404cfc <_vfiprintf_r+0x964>
  404e4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e52:	1c48      	adds	r0, r1, #1
  404e54:	46ca      	mov	sl, r9
  404e56:	e448      	b.n	4046ea <_vfiprintf_r+0x352>
  404e58:	2a00      	cmp	r2, #0
  404e5a:	f040 8091 	bne.w	404f80 <_vfiprintf_r+0xbe8>
  404e5e:	2001      	movs	r0, #1
  404e60:	4611      	mov	r1, r2
  404e62:	46ca      	mov	sl, r9
  404e64:	e641      	b.n	404aea <_vfiprintf_r+0x752>
  404e66:	aa0f      	add	r2, sp, #60	; 0x3c
  404e68:	9904      	ldr	r1, [sp, #16]
  404e6a:	9806      	ldr	r0, [sp, #24]
  404e6c:	f7ff fa54 	bl	404318 <__sprint_r.part.0>
  404e70:	2800      	cmp	r0, #0
  404e72:	f47f af43 	bne.w	404cfc <_vfiprintf_r+0x964>
  404e76:	9810      	ldr	r0, [sp, #64]	; 0x40
  404e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e7a:	3001      	adds	r0, #1
  404e7c:	46ca      	mov	sl, r9
  404e7e:	e667      	b.n	404b50 <_vfiprintf_r+0x7b8>
  404e80:	46d3      	mov	fp, sl
  404e82:	e6d6      	b.n	404c32 <_vfiprintf_r+0x89a>
  404e84:	9e07      	ldr	r6, [sp, #28]
  404e86:	3607      	adds	r6, #7
  404e88:	f026 0207 	bic.w	r2, r6, #7
  404e8c:	f102 0108 	add.w	r1, r2, #8
  404e90:	e9d2 6700 	ldrd	r6, r7, [r2]
  404e94:	9107      	str	r1, [sp, #28]
  404e96:	2201      	movs	r2, #1
  404e98:	f7ff bbb1 	b.w	4045fe <_vfiprintf_r+0x266>
  404e9c:	9e07      	ldr	r6, [sp, #28]
  404e9e:	3607      	adds	r6, #7
  404ea0:	f026 0607 	bic.w	r6, r6, #7
  404ea4:	e9d6 0100 	ldrd	r0, r1, [r6]
  404ea8:	f106 0208 	add.w	r2, r6, #8
  404eac:	9207      	str	r2, [sp, #28]
  404eae:	4606      	mov	r6, r0
  404eb0:	460f      	mov	r7, r1
  404eb2:	e4b6      	b.n	404822 <_vfiprintf_r+0x48a>
  404eb4:	9e07      	ldr	r6, [sp, #28]
  404eb6:	3607      	adds	r6, #7
  404eb8:	f026 0207 	bic.w	r2, r6, #7
  404ebc:	f102 0108 	add.w	r1, r2, #8
  404ec0:	e9d2 6700 	ldrd	r6, r7, [r2]
  404ec4:	9107      	str	r1, [sp, #28]
  404ec6:	2200      	movs	r2, #0
  404ec8:	f7ff bb99 	b.w	4045fe <_vfiprintf_r+0x266>
  404ecc:	9e07      	ldr	r6, [sp, #28]
  404ece:	3607      	adds	r6, #7
  404ed0:	f026 0107 	bic.w	r1, r6, #7
  404ed4:	f101 0008 	add.w	r0, r1, #8
  404ed8:	9007      	str	r0, [sp, #28]
  404eda:	e9d1 6700 	ldrd	r6, r7, [r1]
  404ede:	e519      	b.n	404914 <_vfiprintf_r+0x57c>
  404ee0:	46cb      	mov	fp, r9
  404ee2:	f7ff bbab 	b.w	40463c <_vfiprintf_r+0x2a4>
  404ee6:	252d      	movs	r5, #45	; 0x2d
  404ee8:	4276      	negs	r6, r6
  404eea:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404eee:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404ef2:	2201      	movs	r2, #1
  404ef4:	f7ff bb88 	b.w	404608 <_vfiprintf_r+0x270>
  404ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404efa:	b9b3      	cbnz	r3, 404f2a <_vfiprintf_r+0xb92>
  404efc:	4611      	mov	r1, r2
  404efe:	2001      	movs	r0, #1
  404f00:	46ca      	mov	sl, r9
  404f02:	e5f2      	b.n	404aea <_vfiprintf_r+0x752>
  404f04:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f08:	f000 fdfe 	bl	405b08 <__retarget_lock_release_recursive>
  404f0c:	f04f 33ff 	mov.w	r3, #4294967295
  404f10:	9303      	str	r3, [sp, #12]
  404f12:	f7ff bb50 	b.w	4045b6 <_vfiprintf_r+0x21e>
  404f16:	aa0f      	add	r2, sp, #60	; 0x3c
  404f18:	9904      	ldr	r1, [sp, #16]
  404f1a:	9806      	ldr	r0, [sp, #24]
  404f1c:	f7ff f9fc 	bl	404318 <__sprint_r.part.0>
  404f20:	2800      	cmp	r0, #0
  404f22:	f47f aeeb 	bne.w	404cfc <_vfiprintf_r+0x964>
  404f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f28:	e6a9      	b.n	404c7e <_vfiprintf_r+0x8e6>
  404f2a:	ab0e      	add	r3, sp, #56	; 0x38
  404f2c:	2202      	movs	r2, #2
  404f2e:	931c      	str	r3, [sp, #112]	; 0x70
  404f30:	921d      	str	r2, [sp, #116]	; 0x74
  404f32:	2001      	movs	r0, #1
  404f34:	46ca      	mov	sl, r9
  404f36:	e5d0      	b.n	404ada <_vfiprintf_r+0x742>
  404f38:	aa0f      	add	r2, sp, #60	; 0x3c
  404f3a:	9904      	ldr	r1, [sp, #16]
  404f3c:	9806      	ldr	r0, [sp, #24]
  404f3e:	f7ff f9eb 	bl	404318 <__sprint_r.part.0>
  404f42:	2800      	cmp	r0, #0
  404f44:	f47f aeda 	bne.w	404cfc <_vfiprintf_r+0x964>
  404f48:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f4c:	1c48      	adds	r0, r1, #1
  404f4e:	46ca      	mov	sl, r9
  404f50:	e5a4      	b.n	404a9c <_vfiprintf_r+0x704>
  404f52:	9a07      	ldr	r2, [sp, #28]
  404f54:	9903      	ldr	r1, [sp, #12]
  404f56:	6813      	ldr	r3, [r2, #0]
  404f58:	17cd      	asrs	r5, r1, #31
  404f5a:	4608      	mov	r0, r1
  404f5c:	3204      	adds	r2, #4
  404f5e:	4629      	mov	r1, r5
  404f60:	9207      	str	r2, [sp, #28]
  404f62:	e9c3 0100 	strd	r0, r1, [r3]
  404f66:	f7ff ba54 	b.w	404412 <_vfiprintf_r+0x7a>
  404f6a:	4658      	mov	r0, fp
  404f6c:	9607      	str	r6, [sp, #28]
  404f6e:	9302      	str	r3, [sp, #8]
  404f70:	f001 f906 	bl	406180 <strlen>
  404f74:	2400      	movs	r4, #0
  404f76:	9005      	str	r0, [sp, #20]
  404f78:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f7c:	f7ff bb5e 	b.w	40463c <_vfiprintf_r+0x2a4>
  404f80:	aa0f      	add	r2, sp, #60	; 0x3c
  404f82:	9904      	ldr	r1, [sp, #16]
  404f84:	9806      	ldr	r0, [sp, #24]
  404f86:	f7ff f9c7 	bl	404318 <__sprint_r.part.0>
  404f8a:	2800      	cmp	r0, #0
  404f8c:	f47f aeb6 	bne.w	404cfc <_vfiprintf_r+0x964>
  404f90:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f94:	1c48      	adds	r0, r1, #1
  404f96:	46ca      	mov	sl, r9
  404f98:	e5a7      	b.n	404aea <_vfiprintf_r+0x752>
  404f9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f9e:	4e20      	ldr	r6, [pc, #128]	; (405020 <_vfiprintf_r+0xc88>)
  404fa0:	3101      	adds	r1, #1
  404fa2:	f7ff bb90 	b.w	4046c6 <_vfiprintf_r+0x32e>
  404fa6:	2c06      	cmp	r4, #6
  404fa8:	bf28      	it	cs
  404faa:	2406      	movcs	r4, #6
  404fac:	9405      	str	r4, [sp, #20]
  404fae:	9607      	str	r6, [sp, #28]
  404fb0:	9401      	str	r4, [sp, #4]
  404fb2:	f8df b070 	ldr.w	fp, [pc, #112]	; 405024 <_vfiprintf_r+0xc8c>
  404fb6:	e4d5      	b.n	404964 <_vfiprintf_r+0x5cc>
  404fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
  404fba:	4e19      	ldr	r6, [pc, #100]	; (405020 <_vfiprintf_r+0xc88>)
  404fbc:	3001      	adds	r0, #1
  404fbe:	e603      	b.n	404bc8 <_vfiprintf_r+0x830>
  404fc0:	9405      	str	r4, [sp, #20]
  404fc2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404fc6:	9607      	str	r6, [sp, #28]
  404fc8:	9302      	str	r3, [sp, #8]
  404fca:	4604      	mov	r4, r0
  404fcc:	f7ff bb36 	b.w	40463c <_vfiprintf_r+0x2a4>
  404fd0:	4686      	mov	lr, r0
  404fd2:	f7ff bbce 	b.w	404772 <_vfiprintf_r+0x3da>
  404fd6:	9806      	ldr	r0, [sp, #24]
  404fd8:	aa0f      	add	r2, sp, #60	; 0x3c
  404fda:	4659      	mov	r1, fp
  404fdc:	f7ff f99c 	bl	404318 <__sprint_r.part.0>
  404fe0:	2800      	cmp	r0, #0
  404fe2:	f43f ae24 	beq.w	404c2e <_vfiprintf_r+0x896>
  404fe6:	e624      	b.n	404c32 <_vfiprintf_r+0x89a>
  404fe8:	9907      	ldr	r1, [sp, #28]
  404fea:	f898 2001 	ldrb.w	r2, [r8, #1]
  404fee:	680c      	ldr	r4, [r1, #0]
  404ff0:	3104      	adds	r1, #4
  404ff2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404ff6:	46b8      	mov	r8, r7
  404ff8:	9107      	str	r1, [sp, #28]
  404ffa:	f7ff ba3f 	b.w	40447c <_vfiprintf_r+0xe4>
  404ffe:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405002:	e43c      	b.n	40487e <_vfiprintf_r+0x4e6>
  405004:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405008:	e521      	b.n	404a4e <_vfiprintf_r+0x6b6>
  40500a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40500e:	f7ff bbf4 	b.w	4047fa <_vfiprintf_r+0x462>
  405012:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405016:	e491      	b.n	40493c <_vfiprintf_r+0x5a4>
  405018:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40501c:	e469      	b.n	4048f2 <_vfiprintf_r+0x55a>
  40501e:	bf00      	nop
  405020:	00406c10 	.word	0x00406c10
  405024:	00406c08 	.word	0x00406c08

00405028 <__sbprintf>:
  405028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40502c:	460c      	mov	r4, r1
  40502e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405032:	8989      	ldrh	r1, [r1, #12]
  405034:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405036:	89e5      	ldrh	r5, [r4, #14]
  405038:	9619      	str	r6, [sp, #100]	; 0x64
  40503a:	f021 0102 	bic.w	r1, r1, #2
  40503e:	4606      	mov	r6, r0
  405040:	69e0      	ldr	r0, [r4, #28]
  405042:	f8ad 100c 	strh.w	r1, [sp, #12]
  405046:	4617      	mov	r7, r2
  405048:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40504c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40504e:	f8ad 500e 	strh.w	r5, [sp, #14]
  405052:	4698      	mov	r8, r3
  405054:	ad1a      	add	r5, sp, #104	; 0x68
  405056:	2300      	movs	r3, #0
  405058:	9007      	str	r0, [sp, #28]
  40505a:	a816      	add	r0, sp, #88	; 0x58
  40505c:	9209      	str	r2, [sp, #36]	; 0x24
  40505e:	9306      	str	r3, [sp, #24]
  405060:	9500      	str	r5, [sp, #0]
  405062:	9504      	str	r5, [sp, #16]
  405064:	9102      	str	r1, [sp, #8]
  405066:	9105      	str	r1, [sp, #20]
  405068:	f000 fd48 	bl	405afc <__retarget_lock_init_recursive>
  40506c:	4643      	mov	r3, r8
  40506e:	463a      	mov	r2, r7
  405070:	4669      	mov	r1, sp
  405072:	4630      	mov	r0, r6
  405074:	f7ff f990 	bl	404398 <_vfiprintf_r>
  405078:	1e05      	subs	r5, r0, #0
  40507a:	db07      	blt.n	40508c <__sbprintf+0x64>
  40507c:	4630      	mov	r0, r6
  40507e:	4669      	mov	r1, sp
  405080:	f000 f928 	bl	4052d4 <_fflush_r>
  405084:	2800      	cmp	r0, #0
  405086:	bf18      	it	ne
  405088:	f04f 35ff 	movne.w	r5, #4294967295
  40508c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405090:	065b      	lsls	r3, r3, #25
  405092:	d503      	bpl.n	40509c <__sbprintf+0x74>
  405094:	89a3      	ldrh	r3, [r4, #12]
  405096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40509a:	81a3      	strh	r3, [r4, #12]
  40509c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40509e:	f000 fd2f 	bl	405b00 <__retarget_lock_close_recursive>
  4050a2:	4628      	mov	r0, r5
  4050a4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004050ac <__swsetup_r>:
  4050ac:	b538      	push	{r3, r4, r5, lr}
  4050ae:	4b30      	ldr	r3, [pc, #192]	; (405170 <__swsetup_r+0xc4>)
  4050b0:	681b      	ldr	r3, [r3, #0]
  4050b2:	4605      	mov	r5, r0
  4050b4:	460c      	mov	r4, r1
  4050b6:	b113      	cbz	r3, 4050be <__swsetup_r+0x12>
  4050b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4050ba:	2a00      	cmp	r2, #0
  4050bc:	d038      	beq.n	405130 <__swsetup_r+0x84>
  4050be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4050c2:	b293      	uxth	r3, r2
  4050c4:	0718      	lsls	r0, r3, #28
  4050c6:	d50c      	bpl.n	4050e2 <__swsetup_r+0x36>
  4050c8:	6920      	ldr	r0, [r4, #16]
  4050ca:	b1a8      	cbz	r0, 4050f8 <__swsetup_r+0x4c>
  4050cc:	f013 0201 	ands.w	r2, r3, #1
  4050d0:	d01e      	beq.n	405110 <__swsetup_r+0x64>
  4050d2:	6963      	ldr	r3, [r4, #20]
  4050d4:	2200      	movs	r2, #0
  4050d6:	425b      	negs	r3, r3
  4050d8:	61a3      	str	r3, [r4, #24]
  4050da:	60a2      	str	r2, [r4, #8]
  4050dc:	b1f0      	cbz	r0, 40511c <__swsetup_r+0x70>
  4050de:	2000      	movs	r0, #0
  4050e0:	bd38      	pop	{r3, r4, r5, pc}
  4050e2:	06d9      	lsls	r1, r3, #27
  4050e4:	d53c      	bpl.n	405160 <__swsetup_r+0xb4>
  4050e6:	0758      	lsls	r0, r3, #29
  4050e8:	d426      	bmi.n	405138 <__swsetup_r+0x8c>
  4050ea:	6920      	ldr	r0, [r4, #16]
  4050ec:	f042 0308 	orr.w	r3, r2, #8
  4050f0:	81a3      	strh	r3, [r4, #12]
  4050f2:	b29b      	uxth	r3, r3
  4050f4:	2800      	cmp	r0, #0
  4050f6:	d1e9      	bne.n	4050cc <__swsetup_r+0x20>
  4050f8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4050fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405100:	d0e4      	beq.n	4050cc <__swsetup_r+0x20>
  405102:	4628      	mov	r0, r5
  405104:	4621      	mov	r1, r4
  405106:	f000 fd2f 	bl	405b68 <__smakebuf_r>
  40510a:	89a3      	ldrh	r3, [r4, #12]
  40510c:	6920      	ldr	r0, [r4, #16]
  40510e:	e7dd      	b.n	4050cc <__swsetup_r+0x20>
  405110:	0799      	lsls	r1, r3, #30
  405112:	bf58      	it	pl
  405114:	6962      	ldrpl	r2, [r4, #20]
  405116:	60a2      	str	r2, [r4, #8]
  405118:	2800      	cmp	r0, #0
  40511a:	d1e0      	bne.n	4050de <__swsetup_r+0x32>
  40511c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405120:	061a      	lsls	r2, r3, #24
  405122:	d5dd      	bpl.n	4050e0 <__swsetup_r+0x34>
  405124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405128:	81a3      	strh	r3, [r4, #12]
  40512a:	f04f 30ff 	mov.w	r0, #4294967295
  40512e:	bd38      	pop	{r3, r4, r5, pc}
  405130:	4618      	mov	r0, r3
  405132:	f000 f927 	bl	405384 <__sinit>
  405136:	e7c2      	b.n	4050be <__swsetup_r+0x12>
  405138:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40513a:	b151      	cbz	r1, 405152 <__swsetup_r+0xa6>
  40513c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405140:	4299      	cmp	r1, r3
  405142:	d004      	beq.n	40514e <__swsetup_r+0xa2>
  405144:	4628      	mov	r0, r5
  405146:	f000 fa43 	bl	4055d0 <_free_r>
  40514a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40514e:	2300      	movs	r3, #0
  405150:	6323      	str	r3, [r4, #48]	; 0x30
  405152:	2300      	movs	r3, #0
  405154:	6920      	ldr	r0, [r4, #16]
  405156:	6063      	str	r3, [r4, #4]
  405158:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40515c:	6020      	str	r0, [r4, #0]
  40515e:	e7c5      	b.n	4050ec <__swsetup_r+0x40>
  405160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405164:	2309      	movs	r3, #9
  405166:	602b      	str	r3, [r5, #0]
  405168:	f04f 30ff 	mov.w	r0, #4294967295
  40516c:	81a2      	strh	r2, [r4, #12]
  40516e:	bd38      	pop	{r3, r4, r5, pc}
  405170:	20400010 	.word	0x20400010

00405174 <register_fini>:
  405174:	4b02      	ldr	r3, [pc, #8]	; (405180 <register_fini+0xc>)
  405176:	b113      	cbz	r3, 40517e <register_fini+0xa>
  405178:	4802      	ldr	r0, [pc, #8]	; (405184 <register_fini+0x10>)
  40517a:	f000 b805 	b.w	405188 <atexit>
  40517e:	4770      	bx	lr
  405180:	00000000 	.word	0x00000000
  405184:	004053f5 	.word	0x004053f5

00405188 <atexit>:
  405188:	2300      	movs	r3, #0
  40518a:	4601      	mov	r1, r0
  40518c:	461a      	mov	r2, r3
  40518e:	4618      	mov	r0, r3
  405190:	f001 b90a 	b.w	4063a8 <__register_exitproc>

00405194 <__sflush_r>:
  405194:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  405198:	b29a      	uxth	r2, r3
  40519a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40519e:	460d      	mov	r5, r1
  4051a0:	0711      	lsls	r1, r2, #28
  4051a2:	4680      	mov	r8, r0
  4051a4:	d43a      	bmi.n	40521c <__sflush_r+0x88>
  4051a6:	686a      	ldr	r2, [r5, #4]
  4051a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4051ac:	2a00      	cmp	r2, #0
  4051ae:	81ab      	strh	r3, [r5, #12]
  4051b0:	dd6f      	ble.n	405292 <__sflush_r+0xfe>
  4051b2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4051b4:	2c00      	cmp	r4, #0
  4051b6:	d049      	beq.n	40524c <__sflush_r+0xb8>
  4051b8:	2200      	movs	r2, #0
  4051ba:	b29b      	uxth	r3, r3
  4051bc:	f8d8 6000 	ldr.w	r6, [r8]
  4051c0:	f8c8 2000 	str.w	r2, [r8]
  4051c4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4051c8:	d067      	beq.n	40529a <__sflush_r+0x106>
  4051ca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4051cc:	075f      	lsls	r7, r3, #29
  4051ce:	d505      	bpl.n	4051dc <__sflush_r+0x48>
  4051d0:	6869      	ldr	r1, [r5, #4]
  4051d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4051d4:	1a52      	subs	r2, r2, r1
  4051d6:	b10b      	cbz	r3, 4051dc <__sflush_r+0x48>
  4051d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4051da:	1ad2      	subs	r2, r2, r3
  4051dc:	2300      	movs	r3, #0
  4051de:	69e9      	ldr	r1, [r5, #28]
  4051e0:	4640      	mov	r0, r8
  4051e2:	47a0      	blx	r4
  4051e4:	1c44      	adds	r4, r0, #1
  4051e6:	d03c      	beq.n	405262 <__sflush_r+0xce>
  4051e8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4051ec:	692a      	ldr	r2, [r5, #16]
  4051ee:	602a      	str	r2, [r5, #0]
  4051f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4051f4:	2200      	movs	r2, #0
  4051f6:	81ab      	strh	r3, [r5, #12]
  4051f8:	04db      	lsls	r3, r3, #19
  4051fa:	606a      	str	r2, [r5, #4]
  4051fc:	d447      	bmi.n	40528e <__sflush_r+0xfa>
  4051fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405200:	f8c8 6000 	str.w	r6, [r8]
  405204:	b311      	cbz	r1, 40524c <__sflush_r+0xb8>
  405206:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40520a:	4299      	cmp	r1, r3
  40520c:	d002      	beq.n	405214 <__sflush_r+0x80>
  40520e:	4640      	mov	r0, r8
  405210:	f000 f9de 	bl	4055d0 <_free_r>
  405214:	2000      	movs	r0, #0
  405216:	6328      	str	r0, [r5, #48]	; 0x30
  405218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40521c:	692e      	ldr	r6, [r5, #16]
  40521e:	b1ae      	cbz	r6, 40524c <__sflush_r+0xb8>
  405220:	682c      	ldr	r4, [r5, #0]
  405222:	602e      	str	r6, [r5, #0]
  405224:	0791      	lsls	r1, r2, #30
  405226:	bf0c      	ite	eq
  405228:	696b      	ldreq	r3, [r5, #20]
  40522a:	2300      	movne	r3, #0
  40522c:	1ba4      	subs	r4, r4, r6
  40522e:	60ab      	str	r3, [r5, #8]
  405230:	e00a      	b.n	405248 <__sflush_r+0xb4>
  405232:	4623      	mov	r3, r4
  405234:	4632      	mov	r2, r6
  405236:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405238:	69e9      	ldr	r1, [r5, #28]
  40523a:	4640      	mov	r0, r8
  40523c:	47b8      	blx	r7
  40523e:	2800      	cmp	r0, #0
  405240:	eba4 0400 	sub.w	r4, r4, r0
  405244:	4406      	add	r6, r0
  405246:	dd04      	ble.n	405252 <__sflush_r+0xbe>
  405248:	2c00      	cmp	r4, #0
  40524a:	dcf2      	bgt.n	405232 <__sflush_r+0x9e>
  40524c:	2000      	movs	r0, #0
  40524e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405252:	89ab      	ldrh	r3, [r5, #12]
  405254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405258:	81ab      	strh	r3, [r5, #12]
  40525a:	f04f 30ff 	mov.w	r0, #4294967295
  40525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405262:	f8d8 4000 	ldr.w	r4, [r8]
  405266:	2c1d      	cmp	r4, #29
  405268:	d8f3      	bhi.n	405252 <__sflush_r+0xbe>
  40526a:	4b19      	ldr	r3, [pc, #100]	; (4052d0 <__sflush_r+0x13c>)
  40526c:	40e3      	lsrs	r3, r4
  40526e:	43db      	mvns	r3, r3
  405270:	f013 0301 	ands.w	r3, r3, #1
  405274:	d1ed      	bne.n	405252 <__sflush_r+0xbe>
  405276:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40527a:	606b      	str	r3, [r5, #4]
  40527c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405280:	6929      	ldr	r1, [r5, #16]
  405282:	81ab      	strh	r3, [r5, #12]
  405284:	04da      	lsls	r2, r3, #19
  405286:	6029      	str	r1, [r5, #0]
  405288:	d5b9      	bpl.n	4051fe <__sflush_r+0x6a>
  40528a:	2c00      	cmp	r4, #0
  40528c:	d1b7      	bne.n	4051fe <__sflush_r+0x6a>
  40528e:	6528      	str	r0, [r5, #80]	; 0x50
  405290:	e7b5      	b.n	4051fe <__sflush_r+0x6a>
  405292:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405294:	2a00      	cmp	r2, #0
  405296:	dc8c      	bgt.n	4051b2 <__sflush_r+0x1e>
  405298:	e7d8      	b.n	40524c <__sflush_r+0xb8>
  40529a:	2301      	movs	r3, #1
  40529c:	69e9      	ldr	r1, [r5, #28]
  40529e:	4640      	mov	r0, r8
  4052a0:	47a0      	blx	r4
  4052a2:	1c43      	adds	r3, r0, #1
  4052a4:	4602      	mov	r2, r0
  4052a6:	d002      	beq.n	4052ae <__sflush_r+0x11a>
  4052a8:	89ab      	ldrh	r3, [r5, #12]
  4052aa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4052ac:	e78e      	b.n	4051cc <__sflush_r+0x38>
  4052ae:	f8d8 3000 	ldr.w	r3, [r8]
  4052b2:	2b00      	cmp	r3, #0
  4052b4:	d0f8      	beq.n	4052a8 <__sflush_r+0x114>
  4052b6:	2b1d      	cmp	r3, #29
  4052b8:	d001      	beq.n	4052be <__sflush_r+0x12a>
  4052ba:	2b16      	cmp	r3, #22
  4052bc:	d102      	bne.n	4052c4 <__sflush_r+0x130>
  4052be:	f8c8 6000 	str.w	r6, [r8]
  4052c2:	e7c3      	b.n	40524c <__sflush_r+0xb8>
  4052c4:	89ab      	ldrh	r3, [r5, #12]
  4052c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052ca:	81ab      	strh	r3, [r5, #12]
  4052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052d0:	20400001 	.word	0x20400001

004052d4 <_fflush_r>:
  4052d4:	b538      	push	{r3, r4, r5, lr}
  4052d6:	460d      	mov	r5, r1
  4052d8:	4604      	mov	r4, r0
  4052da:	b108      	cbz	r0, 4052e0 <_fflush_r+0xc>
  4052dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4052de:	b1bb      	cbz	r3, 405310 <_fflush_r+0x3c>
  4052e0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4052e4:	b188      	cbz	r0, 40530a <_fflush_r+0x36>
  4052e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4052e8:	07db      	lsls	r3, r3, #31
  4052ea:	d401      	bmi.n	4052f0 <_fflush_r+0x1c>
  4052ec:	0581      	lsls	r1, r0, #22
  4052ee:	d517      	bpl.n	405320 <_fflush_r+0x4c>
  4052f0:	4620      	mov	r0, r4
  4052f2:	4629      	mov	r1, r5
  4052f4:	f7ff ff4e 	bl	405194 <__sflush_r>
  4052f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4052fa:	07da      	lsls	r2, r3, #31
  4052fc:	4604      	mov	r4, r0
  4052fe:	d402      	bmi.n	405306 <_fflush_r+0x32>
  405300:	89ab      	ldrh	r3, [r5, #12]
  405302:	059b      	lsls	r3, r3, #22
  405304:	d507      	bpl.n	405316 <_fflush_r+0x42>
  405306:	4620      	mov	r0, r4
  405308:	bd38      	pop	{r3, r4, r5, pc}
  40530a:	4604      	mov	r4, r0
  40530c:	4620      	mov	r0, r4
  40530e:	bd38      	pop	{r3, r4, r5, pc}
  405310:	f000 f838 	bl	405384 <__sinit>
  405314:	e7e4      	b.n	4052e0 <_fflush_r+0xc>
  405316:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405318:	f000 fbf6 	bl	405b08 <__retarget_lock_release_recursive>
  40531c:	4620      	mov	r0, r4
  40531e:	bd38      	pop	{r3, r4, r5, pc}
  405320:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405322:	f000 fbef 	bl	405b04 <__retarget_lock_acquire_recursive>
  405326:	e7e3      	b.n	4052f0 <_fflush_r+0x1c>

00405328 <_cleanup_r>:
  405328:	4901      	ldr	r1, [pc, #4]	; (405330 <_cleanup_r+0x8>)
  40532a:	f000 bbaf 	b.w	405a8c <_fwalk_reent>
  40532e:	bf00      	nop
  405330:	00406491 	.word	0x00406491

00405334 <std.isra.0>:
  405334:	b510      	push	{r4, lr}
  405336:	2300      	movs	r3, #0
  405338:	4604      	mov	r4, r0
  40533a:	8181      	strh	r1, [r0, #12]
  40533c:	81c2      	strh	r2, [r0, #14]
  40533e:	6003      	str	r3, [r0, #0]
  405340:	6043      	str	r3, [r0, #4]
  405342:	6083      	str	r3, [r0, #8]
  405344:	6643      	str	r3, [r0, #100]	; 0x64
  405346:	6103      	str	r3, [r0, #16]
  405348:	6143      	str	r3, [r0, #20]
  40534a:	6183      	str	r3, [r0, #24]
  40534c:	4619      	mov	r1, r3
  40534e:	2208      	movs	r2, #8
  405350:	305c      	adds	r0, #92	; 0x5c
  405352:	f7fe fea5 	bl	4040a0 <memset>
  405356:	4807      	ldr	r0, [pc, #28]	; (405374 <std.isra.0+0x40>)
  405358:	4907      	ldr	r1, [pc, #28]	; (405378 <std.isra.0+0x44>)
  40535a:	4a08      	ldr	r2, [pc, #32]	; (40537c <std.isra.0+0x48>)
  40535c:	4b08      	ldr	r3, [pc, #32]	; (405380 <std.isra.0+0x4c>)
  40535e:	6220      	str	r0, [r4, #32]
  405360:	61e4      	str	r4, [r4, #28]
  405362:	6261      	str	r1, [r4, #36]	; 0x24
  405364:	62a2      	str	r2, [r4, #40]	; 0x28
  405366:	62e3      	str	r3, [r4, #44]	; 0x2c
  405368:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405370:	f000 bbc4 	b.w	405afc <__retarget_lock_init_recursive>
  405374:	004060e5 	.word	0x004060e5
  405378:	00406109 	.word	0x00406109
  40537c:	00406145 	.word	0x00406145
  405380:	00406165 	.word	0x00406165

00405384 <__sinit>:
  405384:	b510      	push	{r4, lr}
  405386:	4604      	mov	r4, r0
  405388:	4812      	ldr	r0, [pc, #72]	; (4053d4 <__sinit+0x50>)
  40538a:	f000 fbbb 	bl	405b04 <__retarget_lock_acquire_recursive>
  40538e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405390:	b9d2      	cbnz	r2, 4053c8 <__sinit+0x44>
  405392:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405396:	4810      	ldr	r0, [pc, #64]	; (4053d8 <__sinit+0x54>)
  405398:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40539c:	2103      	movs	r1, #3
  40539e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4053a2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4053a4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4053a8:	6860      	ldr	r0, [r4, #4]
  4053aa:	2104      	movs	r1, #4
  4053ac:	f7ff ffc2 	bl	405334 <std.isra.0>
  4053b0:	2201      	movs	r2, #1
  4053b2:	2109      	movs	r1, #9
  4053b4:	68a0      	ldr	r0, [r4, #8]
  4053b6:	f7ff ffbd 	bl	405334 <std.isra.0>
  4053ba:	2202      	movs	r2, #2
  4053bc:	2112      	movs	r1, #18
  4053be:	68e0      	ldr	r0, [r4, #12]
  4053c0:	f7ff ffb8 	bl	405334 <std.isra.0>
  4053c4:	2301      	movs	r3, #1
  4053c6:	63a3      	str	r3, [r4, #56]	; 0x38
  4053c8:	4802      	ldr	r0, [pc, #8]	; (4053d4 <__sinit+0x50>)
  4053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4053ce:	f000 bb9b 	b.w	405b08 <__retarget_lock_release_recursive>
  4053d2:	bf00      	nop
  4053d4:	204013f4 	.word	0x204013f4
  4053d8:	00405329 	.word	0x00405329

004053dc <__sfp_lock_acquire>:
  4053dc:	4801      	ldr	r0, [pc, #4]	; (4053e4 <__sfp_lock_acquire+0x8>)
  4053de:	f000 bb91 	b.w	405b04 <__retarget_lock_acquire_recursive>
  4053e2:	bf00      	nop
  4053e4:	20401408 	.word	0x20401408

004053e8 <__sfp_lock_release>:
  4053e8:	4801      	ldr	r0, [pc, #4]	; (4053f0 <__sfp_lock_release+0x8>)
  4053ea:	f000 bb8d 	b.w	405b08 <__retarget_lock_release_recursive>
  4053ee:	bf00      	nop
  4053f0:	20401408 	.word	0x20401408

004053f4 <__libc_fini_array>:
  4053f4:	b538      	push	{r3, r4, r5, lr}
  4053f6:	4c0a      	ldr	r4, [pc, #40]	; (405420 <__libc_fini_array+0x2c>)
  4053f8:	4d0a      	ldr	r5, [pc, #40]	; (405424 <__libc_fini_array+0x30>)
  4053fa:	1b64      	subs	r4, r4, r5
  4053fc:	10a4      	asrs	r4, r4, #2
  4053fe:	d00a      	beq.n	405416 <__libc_fini_array+0x22>
  405400:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405404:	3b01      	subs	r3, #1
  405406:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40540a:	3c01      	subs	r4, #1
  40540c:	f855 3904 	ldr.w	r3, [r5], #-4
  405410:	4798      	blx	r3
  405412:	2c00      	cmp	r4, #0
  405414:	d1f9      	bne.n	40540a <__libc_fini_array+0x16>
  405416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40541a:	f001 bc9d 	b.w	406d58 <_fini>
  40541e:	bf00      	nop
  405420:	00406d68 	.word	0x00406d68
  405424:	00406d64 	.word	0x00406d64

00405428 <__fputwc>:
  405428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40542c:	b082      	sub	sp, #8
  40542e:	4680      	mov	r8, r0
  405430:	4689      	mov	r9, r1
  405432:	4614      	mov	r4, r2
  405434:	f000 fb54 	bl	405ae0 <__locale_mb_cur_max>
  405438:	2801      	cmp	r0, #1
  40543a:	d036      	beq.n	4054aa <__fputwc+0x82>
  40543c:	464a      	mov	r2, r9
  40543e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405442:	a901      	add	r1, sp, #4
  405444:	4640      	mov	r0, r8
  405446:	f000 ff61 	bl	40630c <_wcrtomb_r>
  40544a:	1c42      	adds	r2, r0, #1
  40544c:	4606      	mov	r6, r0
  40544e:	d025      	beq.n	40549c <__fputwc+0x74>
  405450:	b3a8      	cbz	r0, 4054be <__fputwc+0x96>
  405452:	f89d e004 	ldrb.w	lr, [sp, #4]
  405456:	2500      	movs	r5, #0
  405458:	f10d 0a04 	add.w	sl, sp, #4
  40545c:	e009      	b.n	405472 <__fputwc+0x4a>
  40545e:	6823      	ldr	r3, [r4, #0]
  405460:	1c5a      	adds	r2, r3, #1
  405462:	6022      	str	r2, [r4, #0]
  405464:	f883 e000 	strb.w	lr, [r3]
  405468:	3501      	adds	r5, #1
  40546a:	42b5      	cmp	r5, r6
  40546c:	d227      	bcs.n	4054be <__fputwc+0x96>
  40546e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405472:	68a3      	ldr	r3, [r4, #8]
  405474:	3b01      	subs	r3, #1
  405476:	2b00      	cmp	r3, #0
  405478:	60a3      	str	r3, [r4, #8]
  40547a:	daf0      	bge.n	40545e <__fputwc+0x36>
  40547c:	69a7      	ldr	r7, [r4, #24]
  40547e:	42bb      	cmp	r3, r7
  405480:	4671      	mov	r1, lr
  405482:	4622      	mov	r2, r4
  405484:	4640      	mov	r0, r8
  405486:	db02      	blt.n	40548e <__fputwc+0x66>
  405488:	f1be 0f0a 	cmp.w	lr, #10
  40548c:	d1e7      	bne.n	40545e <__fputwc+0x36>
  40548e:	f000 fee5 	bl	40625c <__swbuf_r>
  405492:	1c43      	adds	r3, r0, #1
  405494:	d1e8      	bne.n	405468 <__fputwc+0x40>
  405496:	b002      	add	sp, #8
  405498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40549c:	89a3      	ldrh	r3, [r4, #12]
  40549e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4054a2:	81a3      	strh	r3, [r4, #12]
  4054a4:	b002      	add	sp, #8
  4054a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054aa:	f109 33ff 	add.w	r3, r9, #4294967295
  4054ae:	2bfe      	cmp	r3, #254	; 0xfe
  4054b0:	d8c4      	bhi.n	40543c <__fputwc+0x14>
  4054b2:	fa5f fe89 	uxtb.w	lr, r9
  4054b6:	4606      	mov	r6, r0
  4054b8:	f88d e004 	strb.w	lr, [sp, #4]
  4054bc:	e7cb      	b.n	405456 <__fputwc+0x2e>
  4054be:	4648      	mov	r0, r9
  4054c0:	b002      	add	sp, #8
  4054c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4054c6:	bf00      	nop

004054c8 <_fputwc_r>:
  4054c8:	b530      	push	{r4, r5, lr}
  4054ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4054cc:	f013 0f01 	tst.w	r3, #1
  4054d0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4054d4:	4614      	mov	r4, r2
  4054d6:	b083      	sub	sp, #12
  4054d8:	4605      	mov	r5, r0
  4054da:	b29a      	uxth	r2, r3
  4054dc:	d101      	bne.n	4054e2 <_fputwc_r+0x1a>
  4054de:	0590      	lsls	r0, r2, #22
  4054e0:	d51c      	bpl.n	40551c <_fputwc_r+0x54>
  4054e2:	0490      	lsls	r0, r2, #18
  4054e4:	d406      	bmi.n	4054f4 <_fputwc_r+0x2c>
  4054e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4054e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4054ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4054f0:	81a3      	strh	r3, [r4, #12]
  4054f2:	6662      	str	r2, [r4, #100]	; 0x64
  4054f4:	4628      	mov	r0, r5
  4054f6:	4622      	mov	r2, r4
  4054f8:	f7ff ff96 	bl	405428 <__fputwc>
  4054fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4054fe:	07da      	lsls	r2, r3, #31
  405500:	4605      	mov	r5, r0
  405502:	d402      	bmi.n	40550a <_fputwc_r+0x42>
  405504:	89a3      	ldrh	r3, [r4, #12]
  405506:	059b      	lsls	r3, r3, #22
  405508:	d502      	bpl.n	405510 <_fputwc_r+0x48>
  40550a:	4628      	mov	r0, r5
  40550c:	b003      	add	sp, #12
  40550e:	bd30      	pop	{r4, r5, pc}
  405510:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405512:	f000 faf9 	bl	405b08 <__retarget_lock_release_recursive>
  405516:	4628      	mov	r0, r5
  405518:	b003      	add	sp, #12
  40551a:	bd30      	pop	{r4, r5, pc}
  40551c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40551e:	9101      	str	r1, [sp, #4]
  405520:	f000 faf0 	bl	405b04 <__retarget_lock_acquire_recursive>
  405524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405528:	9901      	ldr	r1, [sp, #4]
  40552a:	b29a      	uxth	r2, r3
  40552c:	e7d9      	b.n	4054e2 <_fputwc_r+0x1a>
  40552e:	bf00      	nop

00405530 <_malloc_trim_r>:
  405530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405532:	4f24      	ldr	r7, [pc, #144]	; (4055c4 <_malloc_trim_r+0x94>)
  405534:	460c      	mov	r4, r1
  405536:	4606      	mov	r6, r0
  405538:	f7fe fe00 	bl	40413c <__malloc_lock>
  40553c:	68bb      	ldr	r3, [r7, #8]
  40553e:	685d      	ldr	r5, [r3, #4]
  405540:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405544:	310f      	adds	r1, #15
  405546:	f025 0503 	bic.w	r5, r5, #3
  40554a:	4429      	add	r1, r5
  40554c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405550:	f021 010f 	bic.w	r1, r1, #15
  405554:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405558:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40555c:	db07      	blt.n	40556e <_malloc_trim_r+0x3e>
  40555e:	2100      	movs	r1, #0
  405560:	4630      	mov	r0, r6
  405562:	f7fe fdf7 	bl	404154 <_sbrk_r>
  405566:	68bb      	ldr	r3, [r7, #8]
  405568:	442b      	add	r3, r5
  40556a:	4298      	cmp	r0, r3
  40556c:	d004      	beq.n	405578 <_malloc_trim_r+0x48>
  40556e:	4630      	mov	r0, r6
  405570:	f7fe fdea 	bl	404148 <__malloc_unlock>
  405574:	2000      	movs	r0, #0
  405576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405578:	4261      	negs	r1, r4
  40557a:	4630      	mov	r0, r6
  40557c:	f7fe fdea 	bl	404154 <_sbrk_r>
  405580:	3001      	adds	r0, #1
  405582:	d00d      	beq.n	4055a0 <_malloc_trim_r+0x70>
  405584:	4b10      	ldr	r3, [pc, #64]	; (4055c8 <_malloc_trim_r+0x98>)
  405586:	68ba      	ldr	r2, [r7, #8]
  405588:	6819      	ldr	r1, [r3, #0]
  40558a:	1b2d      	subs	r5, r5, r4
  40558c:	f045 0501 	orr.w	r5, r5, #1
  405590:	4630      	mov	r0, r6
  405592:	1b09      	subs	r1, r1, r4
  405594:	6055      	str	r5, [r2, #4]
  405596:	6019      	str	r1, [r3, #0]
  405598:	f7fe fdd6 	bl	404148 <__malloc_unlock>
  40559c:	2001      	movs	r0, #1
  40559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4055a0:	2100      	movs	r1, #0
  4055a2:	4630      	mov	r0, r6
  4055a4:	f7fe fdd6 	bl	404154 <_sbrk_r>
  4055a8:	68ba      	ldr	r2, [r7, #8]
  4055aa:	1a83      	subs	r3, r0, r2
  4055ac:	2b0f      	cmp	r3, #15
  4055ae:	ddde      	ble.n	40556e <_malloc_trim_r+0x3e>
  4055b0:	4c06      	ldr	r4, [pc, #24]	; (4055cc <_malloc_trim_r+0x9c>)
  4055b2:	4905      	ldr	r1, [pc, #20]	; (4055c8 <_malloc_trim_r+0x98>)
  4055b4:	6824      	ldr	r4, [r4, #0]
  4055b6:	f043 0301 	orr.w	r3, r3, #1
  4055ba:	1b00      	subs	r0, r0, r4
  4055bc:	6053      	str	r3, [r2, #4]
  4055be:	6008      	str	r0, [r1, #0]
  4055c0:	e7d5      	b.n	40556e <_malloc_trim_r+0x3e>
  4055c2:	bf00      	nop
  4055c4:	20400440 	.word	0x20400440
  4055c8:	204012c8 	.word	0x204012c8
  4055cc:	20400848 	.word	0x20400848

004055d0 <_free_r>:
  4055d0:	2900      	cmp	r1, #0
  4055d2:	d044      	beq.n	40565e <_free_r+0x8e>
  4055d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055d8:	460d      	mov	r5, r1
  4055da:	4680      	mov	r8, r0
  4055dc:	f7fe fdae 	bl	40413c <__malloc_lock>
  4055e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4055e4:	4969      	ldr	r1, [pc, #420]	; (40578c <_free_r+0x1bc>)
  4055e6:	f027 0301 	bic.w	r3, r7, #1
  4055ea:	f1a5 0408 	sub.w	r4, r5, #8
  4055ee:	18e2      	adds	r2, r4, r3
  4055f0:	688e      	ldr	r6, [r1, #8]
  4055f2:	6850      	ldr	r0, [r2, #4]
  4055f4:	42b2      	cmp	r2, r6
  4055f6:	f020 0003 	bic.w	r0, r0, #3
  4055fa:	d05e      	beq.n	4056ba <_free_r+0xea>
  4055fc:	07fe      	lsls	r6, r7, #31
  4055fe:	6050      	str	r0, [r2, #4]
  405600:	d40b      	bmi.n	40561a <_free_r+0x4a>
  405602:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405606:	1be4      	subs	r4, r4, r7
  405608:	f101 0e08 	add.w	lr, r1, #8
  40560c:	68a5      	ldr	r5, [r4, #8]
  40560e:	4575      	cmp	r5, lr
  405610:	443b      	add	r3, r7
  405612:	d06d      	beq.n	4056f0 <_free_r+0x120>
  405614:	68e7      	ldr	r7, [r4, #12]
  405616:	60ef      	str	r7, [r5, #12]
  405618:	60bd      	str	r5, [r7, #8]
  40561a:	1815      	adds	r5, r2, r0
  40561c:	686d      	ldr	r5, [r5, #4]
  40561e:	07ed      	lsls	r5, r5, #31
  405620:	d53e      	bpl.n	4056a0 <_free_r+0xd0>
  405622:	f043 0201 	orr.w	r2, r3, #1
  405626:	6062      	str	r2, [r4, #4]
  405628:	50e3      	str	r3, [r4, r3]
  40562a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40562e:	d217      	bcs.n	405660 <_free_r+0x90>
  405630:	08db      	lsrs	r3, r3, #3
  405632:	1c58      	adds	r0, r3, #1
  405634:	109a      	asrs	r2, r3, #2
  405636:	684d      	ldr	r5, [r1, #4]
  405638:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40563c:	60a7      	str	r7, [r4, #8]
  40563e:	2301      	movs	r3, #1
  405640:	4093      	lsls	r3, r2
  405642:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405646:	432b      	orrs	r3, r5
  405648:	3a08      	subs	r2, #8
  40564a:	60e2      	str	r2, [r4, #12]
  40564c:	604b      	str	r3, [r1, #4]
  40564e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405652:	60fc      	str	r4, [r7, #12]
  405654:	4640      	mov	r0, r8
  405656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40565a:	f7fe bd75 	b.w	404148 <__malloc_unlock>
  40565e:	4770      	bx	lr
  405660:	0a5a      	lsrs	r2, r3, #9
  405662:	2a04      	cmp	r2, #4
  405664:	d852      	bhi.n	40570c <_free_r+0x13c>
  405666:	099a      	lsrs	r2, r3, #6
  405668:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40566c:	00ff      	lsls	r7, r7, #3
  40566e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405672:	19c8      	adds	r0, r1, r7
  405674:	59ca      	ldr	r2, [r1, r7]
  405676:	3808      	subs	r0, #8
  405678:	4290      	cmp	r0, r2
  40567a:	d04f      	beq.n	40571c <_free_r+0x14c>
  40567c:	6851      	ldr	r1, [r2, #4]
  40567e:	f021 0103 	bic.w	r1, r1, #3
  405682:	428b      	cmp	r3, r1
  405684:	d232      	bcs.n	4056ec <_free_r+0x11c>
  405686:	6892      	ldr	r2, [r2, #8]
  405688:	4290      	cmp	r0, r2
  40568a:	d1f7      	bne.n	40567c <_free_r+0xac>
  40568c:	68c3      	ldr	r3, [r0, #12]
  40568e:	60a0      	str	r0, [r4, #8]
  405690:	60e3      	str	r3, [r4, #12]
  405692:	609c      	str	r4, [r3, #8]
  405694:	60c4      	str	r4, [r0, #12]
  405696:	4640      	mov	r0, r8
  405698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40569c:	f7fe bd54 	b.w	404148 <__malloc_unlock>
  4056a0:	6895      	ldr	r5, [r2, #8]
  4056a2:	4f3b      	ldr	r7, [pc, #236]	; (405790 <_free_r+0x1c0>)
  4056a4:	42bd      	cmp	r5, r7
  4056a6:	4403      	add	r3, r0
  4056a8:	d040      	beq.n	40572c <_free_r+0x15c>
  4056aa:	68d0      	ldr	r0, [r2, #12]
  4056ac:	60e8      	str	r0, [r5, #12]
  4056ae:	f043 0201 	orr.w	r2, r3, #1
  4056b2:	6085      	str	r5, [r0, #8]
  4056b4:	6062      	str	r2, [r4, #4]
  4056b6:	50e3      	str	r3, [r4, r3]
  4056b8:	e7b7      	b.n	40562a <_free_r+0x5a>
  4056ba:	07ff      	lsls	r7, r7, #31
  4056bc:	4403      	add	r3, r0
  4056be:	d407      	bmi.n	4056d0 <_free_r+0x100>
  4056c0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4056c4:	1aa4      	subs	r4, r4, r2
  4056c6:	4413      	add	r3, r2
  4056c8:	68a0      	ldr	r0, [r4, #8]
  4056ca:	68e2      	ldr	r2, [r4, #12]
  4056cc:	60c2      	str	r2, [r0, #12]
  4056ce:	6090      	str	r0, [r2, #8]
  4056d0:	4a30      	ldr	r2, [pc, #192]	; (405794 <_free_r+0x1c4>)
  4056d2:	6812      	ldr	r2, [r2, #0]
  4056d4:	f043 0001 	orr.w	r0, r3, #1
  4056d8:	4293      	cmp	r3, r2
  4056da:	6060      	str	r0, [r4, #4]
  4056dc:	608c      	str	r4, [r1, #8]
  4056de:	d3b9      	bcc.n	405654 <_free_r+0x84>
  4056e0:	4b2d      	ldr	r3, [pc, #180]	; (405798 <_free_r+0x1c8>)
  4056e2:	4640      	mov	r0, r8
  4056e4:	6819      	ldr	r1, [r3, #0]
  4056e6:	f7ff ff23 	bl	405530 <_malloc_trim_r>
  4056ea:	e7b3      	b.n	405654 <_free_r+0x84>
  4056ec:	4610      	mov	r0, r2
  4056ee:	e7cd      	b.n	40568c <_free_r+0xbc>
  4056f0:	1811      	adds	r1, r2, r0
  4056f2:	6849      	ldr	r1, [r1, #4]
  4056f4:	07c9      	lsls	r1, r1, #31
  4056f6:	d444      	bmi.n	405782 <_free_r+0x1b2>
  4056f8:	6891      	ldr	r1, [r2, #8]
  4056fa:	68d2      	ldr	r2, [r2, #12]
  4056fc:	60ca      	str	r2, [r1, #12]
  4056fe:	4403      	add	r3, r0
  405700:	f043 0001 	orr.w	r0, r3, #1
  405704:	6091      	str	r1, [r2, #8]
  405706:	6060      	str	r0, [r4, #4]
  405708:	50e3      	str	r3, [r4, r3]
  40570a:	e7a3      	b.n	405654 <_free_r+0x84>
  40570c:	2a14      	cmp	r2, #20
  40570e:	d816      	bhi.n	40573e <_free_r+0x16e>
  405710:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405714:	00ff      	lsls	r7, r7, #3
  405716:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40571a:	e7aa      	b.n	405672 <_free_r+0xa2>
  40571c:	10aa      	asrs	r2, r5, #2
  40571e:	2301      	movs	r3, #1
  405720:	684d      	ldr	r5, [r1, #4]
  405722:	4093      	lsls	r3, r2
  405724:	432b      	orrs	r3, r5
  405726:	604b      	str	r3, [r1, #4]
  405728:	4603      	mov	r3, r0
  40572a:	e7b0      	b.n	40568e <_free_r+0xbe>
  40572c:	f043 0201 	orr.w	r2, r3, #1
  405730:	614c      	str	r4, [r1, #20]
  405732:	610c      	str	r4, [r1, #16]
  405734:	60e5      	str	r5, [r4, #12]
  405736:	60a5      	str	r5, [r4, #8]
  405738:	6062      	str	r2, [r4, #4]
  40573a:	50e3      	str	r3, [r4, r3]
  40573c:	e78a      	b.n	405654 <_free_r+0x84>
  40573e:	2a54      	cmp	r2, #84	; 0x54
  405740:	d806      	bhi.n	405750 <_free_r+0x180>
  405742:	0b1a      	lsrs	r2, r3, #12
  405744:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405748:	00ff      	lsls	r7, r7, #3
  40574a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40574e:	e790      	b.n	405672 <_free_r+0xa2>
  405750:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405754:	d806      	bhi.n	405764 <_free_r+0x194>
  405756:	0bda      	lsrs	r2, r3, #15
  405758:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40575c:	00ff      	lsls	r7, r7, #3
  40575e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405762:	e786      	b.n	405672 <_free_r+0xa2>
  405764:	f240 5054 	movw	r0, #1364	; 0x554
  405768:	4282      	cmp	r2, r0
  40576a:	d806      	bhi.n	40577a <_free_r+0x1aa>
  40576c:	0c9a      	lsrs	r2, r3, #18
  40576e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405772:	00ff      	lsls	r7, r7, #3
  405774:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405778:	e77b      	b.n	405672 <_free_r+0xa2>
  40577a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40577e:	257e      	movs	r5, #126	; 0x7e
  405780:	e777      	b.n	405672 <_free_r+0xa2>
  405782:	f043 0101 	orr.w	r1, r3, #1
  405786:	6061      	str	r1, [r4, #4]
  405788:	6013      	str	r3, [r2, #0]
  40578a:	e763      	b.n	405654 <_free_r+0x84>
  40578c:	20400440 	.word	0x20400440
  405790:	20400448 	.word	0x20400448
  405794:	2040084c 	.word	0x2040084c
  405798:	204012f8 	.word	0x204012f8

0040579c <__sfvwrite_r>:
  40579c:	6893      	ldr	r3, [r2, #8]
  40579e:	2b00      	cmp	r3, #0
  4057a0:	d073      	beq.n	40588a <__sfvwrite_r+0xee>
  4057a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a6:	898b      	ldrh	r3, [r1, #12]
  4057a8:	b083      	sub	sp, #12
  4057aa:	460c      	mov	r4, r1
  4057ac:	0719      	lsls	r1, r3, #28
  4057ae:	9000      	str	r0, [sp, #0]
  4057b0:	4616      	mov	r6, r2
  4057b2:	d526      	bpl.n	405802 <__sfvwrite_r+0x66>
  4057b4:	6922      	ldr	r2, [r4, #16]
  4057b6:	b322      	cbz	r2, 405802 <__sfvwrite_r+0x66>
  4057b8:	f013 0002 	ands.w	r0, r3, #2
  4057bc:	6835      	ldr	r5, [r6, #0]
  4057be:	d02c      	beq.n	40581a <__sfvwrite_r+0x7e>
  4057c0:	f04f 0900 	mov.w	r9, #0
  4057c4:	4fb0      	ldr	r7, [pc, #704]	; (405a88 <__sfvwrite_r+0x2ec>)
  4057c6:	46c8      	mov	r8, r9
  4057c8:	46b2      	mov	sl, r6
  4057ca:	45b8      	cmp	r8, r7
  4057cc:	4643      	mov	r3, r8
  4057ce:	464a      	mov	r2, r9
  4057d0:	bf28      	it	cs
  4057d2:	463b      	movcs	r3, r7
  4057d4:	9800      	ldr	r0, [sp, #0]
  4057d6:	f1b8 0f00 	cmp.w	r8, #0
  4057da:	d050      	beq.n	40587e <__sfvwrite_r+0xe2>
  4057dc:	69e1      	ldr	r1, [r4, #28]
  4057de:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4057e0:	47b0      	blx	r6
  4057e2:	2800      	cmp	r0, #0
  4057e4:	dd58      	ble.n	405898 <__sfvwrite_r+0xfc>
  4057e6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4057ea:	1a1b      	subs	r3, r3, r0
  4057ec:	4481      	add	r9, r0
  4057ee:	eba8 0800 	sub.w	r8, r8, r0
  4057f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4057f6:	2b00      	cmp	r3, #0
  4057f8:	d1e7      	bne.n	4057ca <__sfvwrite_r+0x2e>
  4057fa:	2000      	movs	r0, #0
  4057fc:	b003      	add	sp, #12
  4057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405802:	4621      	mov	r1, r4
  405804:	9800      	ldr	r0, [sp, #0]
  405806:	f7ff fc51 	bl	4050ac <__swsetup_r>
  40580a:	2800      	cmp	r0, #0
  40580c:	f040 8133 	bne.w	405a76 <__sfvwrite_r+0x2da>
  405810:	89a3      	ldrh	r3, [r4, #12]
  405812:	6835      	ldr	r5, [r6, #0]
  405814:	f013 0002 	ands.w	r0, r3, #2
  405818:	d1d2      	bne.n	4057c0 <__sfvwrite_r+0x24>
  40581a:	f013 0901 	ands.w	r9, r3, #1
  40581e:	d145      	bne.n	4058ac <__sfvwrite_r+0x110>
  405820:	464f      	mov	r7, r9
  405822:	9601      	str	r6, [sp, #4]
  405824:	b337      	cbz	r7, 405874 <__sfvwrite_r+0xd8>
  405826:	059a      	lsls	r2, r3, #22
  405828:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40582c:	f140 8083 	bpl.w	405936 <__sfvwrite_r+0x19a>
  405830:	4547      	cmp	r7, r8
  405832:	46c3      	mov	fp, r8
  405834:	f0c0 80ab 	bcc.w	40598e <__sfvwrite_r+0x1f2>
  405838:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40583c:	f040 80ac 	bne.w	405998 <__sfvwrite_r+0x1fc>
  405840:	6820      	ldr	r0, [r4, #0]
  405842:	46ba      	mov	sl, r7
  405844:	465a      	mov	r2, fp
  405846:	4649      	mov	r1, r9
  405848:	f000 fa42 	bl	405cd0 <memmove>
  40584c:	68a2      	ldr	r2, [r4, #8]
  40584e:	6823      	ldr	r3, [r4, #0]
  405850:	eba2 0208 	sub.w	r2, r2, r8
  405854:	445b      	add	r3, fp
  405856:	60a2      	str	r2, [r4, #8]
  405858:	6023      	str	r3, [r4, #0]
  40585a:	9a01      	ldr	r2, [sp, #4]
  40585c:	6893      	ldr	r3, [r2, #8]
  40585e:	eba3 030a 	sub.w	r3, r3, sl
  405862:	44d1      	add	r9, sl
  405864:	eba7 070a 	sub.w	r7, r7, sl
  405868:	6093      	str	r3, [r2, #8]
  40586a:	2b00      	cmp	r3, #0
  40586c:	d0c5      	beq.n	4057fa <__sfvwrite_r+0x5e>
  40586e:	89a3      	ldrh	r3, [r4, #12]
  405870:	2f00      	cmp	r7, #0
  405872:	d1d8      	bne.n	405826 <__sfvwrite_r+0x8a>
  405874:	f8d5 9000 	ldr.w	r9, [r5]
  405878:	686f      	ldr	r7, [r5, #4]
  40587a:	3508      	adds	r5, #8
  40587c:	e7d2      	b.n	405824 <__sfvwrite_r+0x88>
  40587e:	f8d5 9000 	ldr.w	r9, [r5]
  405882:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405886:	3508      	adds	r5, #8
  405888:	e79f      	b.n	4057ca <__sfvwrite_r+0x2e>
  40588a:	2000      	movs	r0, #0
  40588c:	4770      	bx	lr
  40588e:	4621      	mov	r1, r4
  405890:	9800      	ldr	r0, [sp, #0]
  405892:	f7ff fd1f 	bl	4052d4 <_fflush_r>
  405896:	b370      	cbz	r0, 4058f6 <__sfvwrite_r+0x15a>
  405898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40589c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058a0:	f04f 30ff 	mov.w	r0, #4294967295
  4058a4:	81a3      	strh	r3, [r4, #12]
  4058a6:	b003      	add	sp, #12
  4058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058ac:	4681      	mov	r9, r0
  4058ae:	4633      	mov	r3, r6
  4058b0:	464e      	mov	r6, r9
  4058b2:	46a8      	mov	r8, r5
  4058b4:	469a      	mov	sl, r3
  4058b6:	464d      	mov	r5, r9
  4058b8:	b34e      	cbz	r6, 40590e <__sfvwrite_r+0x172>
  4058ba:	b380      	cbz	r0, 40591e <__sfvwrite_r+0x182>
  4058bc:	6820      	ldr	r0, [r4, #0]
  4058be:	6923      	ldr	r3, [r4, #16]
  4058c0:	6962      	ldr	r2, [r4, #20]
  4058c2:	45b1      	cmp	r9, r6
  4058c4:	46cb      	mov	fp, r9
  4058c6:	bf28      	it	cs
  4058c8:	46b3      	movcs	fp, r6
  4058ca:	4298      	cmp	r0, r3
  4058cc:	465f      	mov	r7, fp
  4058ce:	d904      	bls.n	4058da <__sfvwrite_r+0x13e>
  4058d0:	68a3      	ldr	r3, [r4, #8]
  4058d2:	4413      	add	r3, r2
  4058d4:	459b      	cmp	fp, r3
  4058d6:	f300 80a6 	bgt.w	405a26 <__sfvwrite_r+0x28a>
  4058da:	4593      	cmp	fp, r2
  4058dc:	db4b      	blt.n	405976 <__sfvwrite_r+0x1da>
  4058de:	4613      	mov	r3, r2
  4058e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4058e2:	69e1      	ldr	r1, [r4, #28]
  4058e4:	9800      	ldr	r0, [sp, #0]
  4058e6:	462a      	mov	r2, r5
  4058e8:	47b8      	blx	r7
  4058ea:	1e07      	subs	r7, r0, #0
  4058ec:	ddd4      	ble.n	405898 <__sfvwrite_r+0xfc>
  4058ee:	ebb9 0907 	subs.w	r9, r9, r7
  4058f2:	d0cc      	beq.n	40588e <__sfvwrite_r+0xf2>
  4058f4:	2001      	movs	r0, #1
  4058f6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4058fa:	1bdb      	subs	r3, r3, r7
  4058fc:	443d      	add	r5, r7
  4058fe:	1bf6      	subs	r6, r6, r7
  405900:	f8ca 3008 	str.w	r3, [sl, #8]
  405904:	2b00      	cmp	r3, #0
  405906:	f43f af78 	beq.w	4057fa <__sfvwrite_r+0x5e>
  40590a:	2e00      	cmp	r6, #0
  40590c:	d1d5      	bne.n	4058ba <__sfvwrite_r+0x11e>
  40590e:	f108 0308 	add.w	r3, r8, #8
  405912:	e913 0060 	ldmdb	r3, {r5, r6}
  405916:	4698      	mov	r8, r3
  405918:	3308      	adds	r3, #8
  40591a:	2e00      	cmp	r6, #0
  40591c:	d0f9      	beq.n	405912 <__sfvwrite_r+0x176>
  40591e:	4632      	mov	r2, r6
  405920:	210a      	movs	r1, #10
  405922:	4628      	mov	r0, r5
  405924:	f000 f984 	bl	405c30 <memchr>
  405928:	2800      	cmp	r0, #0
  40592a:	f000 80a1 	beq.w	405a70 <__sfvwrite_r+0x2d4>
  40592e:	3001      	adds	r0, #1
  405930:	eba0 0905 	sub.w	r9, r0, r5
  405934:	e7c2      	b.n	4058bc <__sfvwrite_r+0x120>
  405936:	6820      	ldr	r0, [r4, #0]
  405938:	6923      	ldr	r3, [r4, #16]
  40593a:	4298      	cmp	r0, r3
  40593c:	d802      	bhi.n	405944 <__sfvwrite_r+0x1a8>
  40593e:	6963      	ldr	r3, [r4, #20]
  405940:	429f      	cmp	r7, r3
  405942:	d25d      	bcs.n	405a00 <__sfvwrite_r+0x264>
  405944:	45b8      	cmp	r8, r7
  405946:	bf28      	it	cs
  405948:	46b8      	movcs	r8, r7
  40594a:	4642      	mov	r2, r8
  40594c:	4649      	mov	r1, r9
  40594e:	f000 f9bf 	bl	405cd0 <memmove>
  405952:	68a3      	ldr	r3, [r4, #8]
  405954:	6822      	ldr	r2, [r4, #0]
  405956:	eba3 0308 	sub.w	r3, r3, r8
  40595a:	4442      	add	r2, r8
  40595c:	60a3      	str	r3, [r4, #8]
  40595e:	6022      	str	r2, [r4, #0]
  405960:	b10b      	cbz	r3, 405966 <__sfvwrite_r+0x1ca>
  405962:	46c2      	mov	sl, r8
  405964:	e779      	b.n	40585a <__sfvwrite_r+0xbe>
  405966:	4621      	mov	r1, r4
  405968:	9800      	ldr	r0, [sp, #0]
  40596a:	f7ff fcb3 	bl	4052d4 <_fflush_r>
  40596e:	2800      	cmp	r0, #0
  405970:	d192      	bne.n	405898 <__sfvwrite_r+0xfc>
  405972:	46c2      	mov	sl, r8
  405974:	e771      	b.n	40585a <__sfvwrite_r+0xbe>
  405976:	465a      	mov	r2, fp
  405978:	4629      	mov	r1, r5
  40597a:	f000 f9a9 	bl	405cd0 <memmove>
  40597e:	68a2      	ldr	r2, [r4, #8]
  405980:	6823      	ldr	r3, [r4, #0]
  405982:	eba2 020b 	sub.w	r2, r2, fp
  405986:	445b      	add	r3, fp
  405988:	60a2      	str	r2, [r4, #8]
  40598a:	6023      	str	r3, [r4, #0]
  40598c:	e7af      	b.n	4058ee <__sfvwrite_r+0x152>
  40598e:	6820      	ldr	r0, [r4, #0]
  405990:	46b8      	mov	r8, r7
  405992:	46ba      	mov	sl, r7
  405994:	46bb      	mov	fp, r7
  405996:	e755      	b.n	405844 <__sfvwrite_r+0xa8>
  405998:	6962      	ldr	r2, [r4, #20]
  40599a:	6820      	ldr	r0, [r4, #0]
  40599c:	6921      	ldr	r1, [r4, #16]
  40599e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4059a2:	eba0 0a01 	sub.w	sl, r0, r1
  4059a6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4059aa:	f10a 0001 	add.w	r0, sl, #1
  4059ae:	ea4f 0868 	mov.w	r8, r8, asr #1
  4059b2:	4438      	add	r0, r7
  4059b4:	4540      	cmp	r0, r8
  4059b6:	4642      	mov	r2, r8
  4059b8:	bf84      	itt	hi
  4059ba:	4680      	movhi	r8, r0
  4059bc:	4642      	movhi	r2, r8
  4059be:	055b      	lsls	r3, r3, #21
  4059c0:	d544      	bpl.n	405a4c <__sfvwrite_r+0x2b0>
  4059c2:	4611      	mov	r1, r2
  4059c4:	9800      	ldr	r0, [sp, #0]
  4059c6:	f7fe f821 	bl	403a0c <_malloc_r>
  4059ca:	4683      	mov	fp, r0
  4059cc:	2800      	cmp	r0, #0
  4059ce:	d055      	beq.n	405a7c <__sfvwrite_r+0x2e0>
  4059d0:	4652      	mov	r2, sl
  4059d2:	6921      	ldr	r1, [r4, #16]
  4059d4:	f7fe faca 	bl	403f6c <memcpy>
  4059d8:	89a3      	ldrh	r3, [r4, #12]
  4059da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4059e2:	81a3      	strh	r3, [r4, #12]
  4059e4:	eb0b 000a 	add.w	r0, fp, sl
  4059e8:	eba8 030a 	sub.w	r3, r8, sl
  4059ec:	f8c4 b010 	str.w	fp, [r4, #16]
  4059f0:	f8c4 8014 	str.w	r8, [r4, #20]
  4059f4:	6020      	str	r0, [r4, #0]
  4059f6:	60a3      	str	r3, [r4, #8]
  4059f8:	46b8      	mov	r8, r7
  4059fa:	46ba      	mov	sl, r7
  4059fc:	46bb      	mov	fp, r7
  4059fe:	e721      	b.n	405844 <__sfvwrite_r+0xa8>
  405a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405a04:	42b9      	cmp	r1, r7
  405a06:	bf28      	it	cs
  405a08:	4639      	movcs	r1, r7
  405a0a:	464a      	mov	r2, r9
  405a0c:	fb91 f1f3 	sdiv	r1, r1, r3
  405a10:	9800      	ldr	r0, [sp, #0]
  405a12:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405a14:	fb03 f301 	mul.w	r3, r3, r1
  405a18:	69e1      	ldr	r1, [r4, #28]
  405a1a:	47b0      	blx	r6
  405a1c:	f1b0 0a00 	subs.w	sl, r0, #0
  405a20:	f73f af1b 	bgt.w	40585a <__sfvwrite_r+0xbe>
  405a24:	e738      	b.n	405898 <__sfvwrite_r+0xfc>
  405a26:	461a      	mov	r2, r3
  405a28:	4629      	mov	r1, r5
  405a2a:	9301      	str	r3, [sp, #4]
  405a2c:	f000 f950 	bl	405cd0 <memmove>
  405a30:	6822      	ldr	r2, [r4, #0]
  405a32:	9b01      	ldr	r3, [sp, #4]
  405a34:	9800      	ldr	r0, [sp, #0]
  405a36:	441a      	add	r2, r3
  405a38:	6022      	str	r2, [r4, #0]
  405a3a:	4621      	mov	r1, r4
  405a3c:	f7ff fc4a 	bl	4052d4 <_fflush_r>
  405a40:	9b01      	ldr	r3, [sp, #4]
  405a42:	2800      	cmp	r0, #0
  405a44:	f47f af28 	bne.w	405898 <__sfvwrite_r+0xfc>
  405a48:	461f      	mov	r7, r3
  405a4a:	e750      	b.n	4058ee <__sfvwrite_r+0x152>
  405a4c:	9800      	ldr	r0, [sp, #0]
  405a4e:	f000 f9a3 	bl	405d98 <_realloc_r>
  405a52:	4683      	mov	fp, r0
  405a54:	2800      	cmp	r0, #0
  405a56:	d1c5      	bne.n	4059e4 <__sfvwrite_r+0x248>
  405a58:	9d00      	ldr	r5, [sp, #0]
  405a5a:	6921      	ldr	r1, [r4, #16]
  405a5c:	4628      	mov	r0, r5
  405a5e:	f7ff fdb7 	bl	4055d0 <_free_r>
  405a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a66:	220c      	movs	r2, #12
  405a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405a6c:	602a      	str	r2, [r5, #0]
  405a6e:	e715      	b.n	40589c <__sfvwrite_r+0x100>
  405a70:	f106 0901 	add.w	r9, r6, #1
  405a74:	e722      	b.n	4058bc <__sfvwrite_r+0x120>
  405a76:	f04f 30ff 	mov.w	r0, #4294967295
  405a7a:	e6bf      	b.n	4057fc <__sfvwrite_r+0x60>
  405a7c:	9a00      	ldr	r2, [sp, #0]
  405a7e:	230c      	movs	r3, #12
  405a80:	6013      	str	r3, [r2, #0]
  405a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a86:	e709      	b.n	40589c <__sfvwrite_r+0x100>
  405a88:	7ffffc00 	.word	0x7ffffc00

00405a8c <_fwalk_reent>:
  405a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a90:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405a94:	d01f      	beq.n	405ad6 <_fwalk_reent+0x4a>
  405a96:	4688      	mov	r8, r1
  405a98:	4606      	mov	r6, r0
  405a9a:	f04f 0900 	mov.w	r9, #0
  405a9e:	687d      	ldr	r5, [r7, #4]
  405aa0:	68bc      	ldr	r4, [r7, #8]
  405aa2:	3d01      	subs	r5, #1
  405aa4:	d411      	bmi.n	405aca <_fwalk_reent+0x3e>
  405aa6:	89a3      	ldrh	r3, [r4, #12]
  405aa8:	2b01      	cmp	r3, #1
  405aaa:	f105 35ff 	add.w	r5, r5, #4294967295
  405aae:	d908      	bls.n	405ac2 <_fwalk_reent+0x36>
  405ab0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405ab4:	3301      	adds	r3, #1
  405ab6:	4621      	mov	r1, r4
  405ab8:	4630      	mov	r0, r6
  405aba:	d002      	beq.n	405ac2 <_fwalk_reent+0x36>
  405abc:	47c0      	blx	r8
  405abe:	ea49 0900 	orr.w	r9, r9, r0
  405ac2:	1c6b      	adds	r3, r5, #1
  405ac4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405ac8:	d1ed      	bne.n	405aa6 <_fwalk_reent+0x1a>
  405aca:	683f      	ldr	r7, [r7, #0]
  405acc:	2f00      	cmp	r7, #0
  405ace:	d1e6      	bne.n	405a9e <_fwalk_reent+0x12>
  405ad0:	4648      	mov	r0, r9
  405ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ad6:	46b9      	mov	r9, r7
  405ad8:	4648      	mov	r0, r9
  405ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ade:	bf00      	nop

00405ae0 <__locale_mb_cur_max>:
  405ae0:	4b04      	ldr	r3, [pc, #16]	; (405af4 <__locale_mb_cur_max+0x14>)
  405ae2:	4a05      	ldr	r2, [pc, #20]	; (405af8 <__locale_mb_cur_max+0x18>)
  405ae4:	681b      	ldr	r3, [r3, #0]
  405ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405ae8:	2b00      	cmp	r3, #0
  405aea:	bf08      	it	eq
  405aec:	4613      	moveq	r3, r2
  405aee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405af2:	4770      	bx	lr
  405af4:	20400010 	.word	0x20400010
  405af8:	20400854 	.word	0x20400854

00405afc <__retarget_lock_init_recursive>:
  405afc:	4770      	bx	lr
  405afe:	bf00      	nop

00405b00 <__retarget_lock_close_recursive>:
  405b00:	4770      	bx	lr
  405b02:	bf00      	nop

00405b04 <__retarget_lock_acquire_recursive>:
  405b04:	4770      	bx	lr
  405b06:	bf00      	nop

00405b08 <__retarget_lock_release_recursive>:
  405b08:	4770      	bx	lr
  405b0a:	bf00      	nop

00405b0c <__swhatbuf_r>:
  405b0c:	b570      	push	{r4, r5, r6, lr}
  405b0e:	460c      	mov	r4, r1
  405b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405b14:	2900      	cmp	r1, #0
  405b16:	b090      	sub	sp, #64	; 0x40
  405b18:	4615      	mov	r5, r2
  405b1a:	461e      	mov	r6, r3
  405b1c:	db14      	blt.n	405b48 <__swhatbuf_r+0x3c>
  405b1e:	aa01      	add	r2, sp, #4
  405b20:	f000 fd18 	bl	406554 <_fstat_r>
  405b24:	2800      	cmp	r0, #0
  405b26:	db0f      	blt.n	405b48 <__swhatbuf_r+0x3c>
  405b28:	9a02      	ldr	r2, [sp, #8]
  405b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405b2e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405b32:	fab2 f282 	clz	r2, r2
  405b36:	0952      	lsrs	r2, r2, #5
  405b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405b3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405b40:	6032      	str	r2, [r6, #0]
  405b42:	602b      	str	r3, [r5, #0]
  405b44:	b010      	add	sp, #64	; 0x40
  405b46:	bd70      	pop	{r4, r5, r6, pc}
  405b48:	89a2      	ldrh	r2, [r4, #12]
  405b4a:	2300      	movs	r3, #0
  405b4c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405b50:	6033      	str	r3, [r6, #0]
  405b52:	d004      	beq.n	405b5e <__swhatbuf_r+0x52>
  405b54:	2240      	movs	r2, #64	; 0x40
  405b56:	4618      	mov	r0, r3
  405b58:	602a      	str	r2, [r5, #0]
  405b5a:	b010      	add	sp, #64	; 0x40
  405b5c:	bd70      	pop	{r4, r5, r6, pc}
  405b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405b62:	602b      	str	r3, [r5, #0]
  405b64:	b010      	add	sp, #64	; 0x40
  405b66:	bd70      	pop	{r4, r5, r6, pc}

00405b68 <__smakebuf_r>:
  405b68:	898a      	ldrh	r2, [r1, #12]
  405b6a:	0792      	lsls	r2, r2, #30
  405b6c:	460b      	mov	r3, r1
  405b6e:	d506      	bpl.n	405b7e <__smakebuf_r+0x16>
  405b70:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405b74:	2101      	movs	r1, #1
  405b76:	601a      	str	r2, [r3, #0]
  405b78:	611a      	str	r2, [r3, #16]
  405b7a:	6159      	str	r1, [r3, #20]
  405b7c:	4770      	bx	lr
  405b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  405b80:	b083      	sub	sp, #12
  405b82:	ab01      	add	r3, sp, #4
  405b84:	466a      	mov	r2, sp
  405b86:	460c      	mov	r4, r1
  405b88:	4606      	mov	r6, r0
  405b8a:	f7ff ffbf 	bl	405b0c <__swhatbuf_r>
  405b8e:	9900      	ldr	r1, [sp, #0]
  405b90:	4605      	mov	r5, r0
  405b92:	4630      	mov	r0, r6
  405b94:	f7fd ff3a 	bl	403a0c <_malloc_r>
  405b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b9c:	b1d8      	cbz	r0, 405bd6 <__smakebuf_r+0x6e>
  405b9e:	9a01      	ldr	r2, [sp, #4]
  405ba0:	4f15      	ldr	r7, [pc, #84]	; (405bf8 <__smakebuf_r+0x90>)
  405ba2:	9900      	ldr	r1, [sp, #0]
  405ba4:	63f7      	str	r7, [r6, #60]	; 0x3c
  405ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405baa:	81a3      	strh	r3, [r4, #12]
  405bac:	6020      	str	r0, [r4, #0]
  405bae:	6120      	str	r0, [r4, #16]
  405bb0:	6161      	str	r1, [r4, #20]
  405bb2:	b91a      	cbnz	r2, 405bbc <__smakebuf_r+0x54>
  405bb4:	432b      	orrs	r3, r5
  405bb6:	81a3      	strh	r3, [r4, #12]
  405bb8:	b003      	add	sp, #12
  405bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405bbc:	4630      	mov	r0, r6
  405bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405bc2:	f000 fcdb 	bl	40657c <_isatty_r>
  405bc6:	b1a0      	cbz	r0, 405bf2 <__smakebuf_r+0x8a>
  405bc8:	89a3      	ldrh	r3, [r4, #12]
  405bca:	f023 0303 	bic.w	r3, r3, #3
  405bce:	f043 0301 	orr.w	r3, r3, #1
  405bd2:	b21b      	sxth	r3, r3
  405bd4:	e7ee      	b.n	405bb4 <__smakebuf_r+0x4c>
  405bd6:	059a      	lsls	r2, r3, #22
  405bd8:	d4ee      	bmi.n	405bb8 <__smakebuf_r+0x50>
  405bda:	f023 0303 	bic.w	r3, r3, #3
  405bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405be2:	f043 0302 	orr.w	r3, r3, #2
  405be6:	2101      	movs	r1, #1
  405be8:	81a3      	strh	r3, [r4, #12]
  405bea:	6022      	str	r2, [r4, #0]
  405bec:	6122      	str	r2, [r4, #16]
  405bee:	6161      	str	r1, [r4, #20]
  405bf0:	e7e2      	b.n	405bb8 <__smakebuf_r+0x50>
  405bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bf6:	e7dd      	b.n	405bb4 <__smakebuf_r+0x4c>
  405bf8:	00405329 	.word	0x00405329

00405bfc <__ascii_mbtowc>:
  405bfc:	b082      	sub	sp, #8
  405bfe:	b149      	cbz	r1, 405c14 <__ascii_mbtowc+0x18>
  405c00:	b15a      	cbz	r2, 405c1a <__ascii_mbtowc+0x1e>
  405c02:	b16b      	cbz	r3, 405c20 <__ascii_mbtowc+0x24>
  405c04:	7813      	ldrb	r3, [r2, #0]
  405c06:	600b      	str	r3, [r1, #0]
  405c08:	7812      	ldrb	r2, [r2, #0]
  405c0a:	1c10      	adds	r0, r2, #0
  405c0c:	bf18      	it	ne
  405c0e:	2001      	movne	r0, #1
  405c10:	b002      	add	sp, #8
  405c12:	4770      	bx	lr
  405c14:	a901      	add	r1, sp, #4
  405c16:	2a00      	cmp	r2, #0
  405c18:	d1f3      	bne.n	405c02 <__ascii_mbtowc+0x6>
  405c1a:	4610      	mov	r0, r2
  405c1c:	b002      	add	sp, #8
  405c1e:	4770      	bx	lr
  405c20:	f06f 0001 	mvn.w	r0, #1
  405c24:	e7f4      	b.n	405c10 <__ascii_mbtowc+0x14>
  405c26:	bf00      	nop
	...

00405c30 <memchr>:
  405c30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405c34:	2a10      	cmp	r2, #16
  405c36:	db2b      	blt.n	405c90 <memchr+0x60>
  405c38:	f010 0f07 	tst.w	r0, #7
  405c3c:	d008      	beq.n	405c50 <memchr+0x20>
  405c3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405c42:	3a01      	subs	r2, #1
  405c44:	428b      	cmp	r3, r1
  405c46:	d02d      	beq.n	405ca4 <memchr+0x74>
  405c48:	f010 0f07 	tst.w	r0, #7
  405c4c:	b342      	cbz	r2, 405ca0 <memchr+0x70>
  405c4e:	d1f6      	bne.n	405c3e <memchr+0xe>
  405c50:	b4f0      	push	{r4, r5, r6, r7}
  405c52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405c56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405c5a:	f022 0407 	bic.w	r4, r2, #7
  405c5e:	f07f 0700 	mvns.w	r7, #0
  405c62:	2300      	movs	r3, #0
  405c64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405c68:	3c08      	subs	r4, #8
  405c6a:	ea85 0501 	eor.w	r5, r5, r1
  405c6e:	ea86 0601 	eor.w	r6, r6, r1
  405c72:	fa85 f547 	uadd8	r5, r5, r7
  405c76:	faa3 f587 	sel	r5, r3, r7
  405c7a:	fa86 f647 	uadd8	r6, r6, r7
  405c7e:	faa5 f687 	sel	r6, r5, r7
  405c82:	b98e      	cbnz	r6, 405ca8 <memchr+0x78>
  405c84:	d1ee      	bne.n	405c64 <memchr+0x34>
  405c86:	bcf0      	pop	{r4, r5, r6, r7}
  405c88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405c8c:	f002 0207 	and.w	r2, r2, #7
  405c90:	b132      	cbz	r2, 405ca0 <memchr+0x70>
  405c92:	f810 3b01 	ldrb.w	r3, [r0], #1
  405c96:	3a01      	subs	r2, #1
  405c98:	ea83 0301 	eor.w	r3, r3, r1
  405c9c:	b113      	cbz	r3, 405ca4 <memchr+0x74>
  405c9e:	d1f8      	bne.n	405c92 <memchr+0x62>
  405ca0:	2000      	movs	r0, #0
  405ca2:	4770      	bx	lr
  405ca4:	3801      	subs	r0, #1
  405ca6:	4770      	bx	lr
  405ca8:	2d00      	cmp	r5, #0
  405caa:	bf06      	itte	eq
  405cac:	4635      	moveq	r5, r6
  405cae:	3803      	subeq	r0, #3
  405cb0:	3807      	subne	r0, #7
  405cb2:	f015 0f01 	tst.w	r5, #1
  405cb6:	d107      	bne.n	405cc8 <memchr+0x98>
  405cb8:	3001      	adds	r0, #1
  405cba:	f415 7f80 	tst.w	r5, #256	; 0x100
  405cbe:	bf02      	ittt	eq
  405cc0:	3001      	addeq	r0, #1
  405cc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405cc6:	3001      	addeq	r0, #1
  405cc8:	bcf0      	pop	{r4, r5, r6, r7}
  405cca:	3801      	subs	r0, #1
  405ccc:	4770      	bx	lr
  405cce:	bf00      	nop

00405cd0 <memmove>:
  405cd0:	4288      	cmp	r0, r1
  405cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cd4:	d90d      	bls.n	405cf2 <memmove+0x22>
  405cd6:	188b      	adds	r3, r1, r2
  405cd8:	4298      	cmp	r0, r3
  405cda:	d20a      	bcs.n	405cf2 <memmove+0x22>
  405cdc:	1884      	adds	r4, r0, r2
  405cde:	2a00      	cmp	r2, #0
  405ce0:	d051      	beq.n	405d86 <memmove+0xb6>
  405ce2:	4622      	mov	r2, r4
  405ce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405ce8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405cec:	4299      	cmp	r1, r3
  405cee:	d1f9      	bne.n	405ce4 <memmove+0x14>
  405cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cf2:	2a0f      	cmp	r2, #15
  405cf4:	d948      	bls.n	405d88 <memmove+0xb8>
  405cf6:	ea41 0300 	orr.w	r3, r1, r0
  405cfa:	079b      	lsls	r3, r3, #30
  405cfc:	d146      	bne.n	405d8c <memmove+0xbc>
  405cfe:	f100 0410 	add.w	r4, r0, #16
  405d02:	f101 0310 	add.w	r3, r1, #16
  405d06:	4615      	mov	r5, r2
  405d08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405d0c:	f844 6c10 	str.w	r6, [r4, #-16]
  405d10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405d14:	f844 6c0c 	str.w	r6, [r4, #-12]
  405d18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405d1c:	f844 6c08 	str.w	r6, [r4, #-8]
  405d20:	3d10      	subs	r5, #16
  405d22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405d26:	f844 6c04 	str.w	r6, [r4, #-4]
  405d2a:	2d0f      	cmp	r5, #15
  405d2c:	f103 0310 	add.w	r3, r3, #16
  405d30:	f104 0410 	add.w	r4, r4, #16
  405d34:	d8e8      	bhi.n	405d08 <memmove+0x38>
  405d36:	f1a2 0310 	sub.w	r3, r2, #16
  405d3a:	f023 030f 	bic.w	r3, r3, #15
  405d3e:	f002 0e0f 	and.w	lr, r2, #15
  405d42:	3310      	adds	r3, #16
  405d44:	f1be 0f03 	cmp.w	lr, #3
  405d48:	4419      	add	r1, r3
  405d4a:	4403      	add	r3, r0
  405d4c:	d921      	bls.n	405d92 <memmove+0xc2>
  405d4e:	1f1e      	subs	r6, r3, #4
  405d50:	460d      	mov	r5, r1
  405d52:	4674      	mov	r4, lr
  405d54:	3c04      	subs	r4, #4
  405d56:	f855 7b04 	ldr.w	r7, [r5], #4
  405d5a:	f846 7f04 	str.w	r7, [r6, #4]!
  405d5e:	2c03      	cmp	r4, #3
  405d60:	d8f8      	bhi.n	405d54 <memmove+0x84>
  405d62:	f1ae 0404 	sub.w	r4, lr, #4
  405d66:	f024 0403 	bic.w	r4, r4, #3
  405d6a:	3404      	adds	r4, #4
  405d6c:	4421      	add	r1, r4
  405d6e:	4423      	add	r3, r4
  405d70:	f002 0203 	and.w	r2, r2, #3
  405d74:	b162      	cbz	r2, 405d90 <memmove+0xc0>
  405d76:	3b01      	subs	r3, #1
  405d78:	440a      	add	r2, r1
  405d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  405d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405d82:	428a      	cmp	r2, r1
  405d84:	d1f9      	bne.n	405d7a <memmove+0xaa>
  405d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d88:	4603      	mov	r3, r0
  405d8a:	e7f3      	b.n	405d74 <memmove+0xa4>
  405d8c:	4603      	mov	r3, r0
  405d8e:	e7f2      	b.n	405d76 <memmove+0xa6>
  405d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d92:	4672      	mov	r2, lr
  405d94:	e7ee      	b.n	405d74 <memmove+0xa4>
  405d96:	bf00      	nop

00405d98 <_realloc_r>:
  405d98:	2900      	cmp	r1, #0
  405d9a:	f000 8095 	beq.w	405ec8 <_realloc_r+0x130>
  405d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405da2:	460d      	mov	r5, r1
  405da4:	4616      	mov	r6, r2
  405da6:	b083      	sub	sp, #12
  405da8:	4680      	mov	r8, r0
  405daa:	f106 070b 	add.w	r7, r6, #11
  405dae:	f7fe f9c5 	bl	40413c <__malloc_lock>
  405db2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405db6:	2f16      	cmp	r7, #22
  405db8:	f02e 0403 	bic.w	r4, lr, #3
  405dbc:	f1a5 0908 	sub.w	r9, r5, #8
  405dc0:	d83c      	bhi.n	405e3c <_realloc_r+0xa4>
  405dc2:	2210      	movs	r2, #16
  405dc4:	4617      	mov	r7, r2
  405dc6:	42be      	cmp	r6, r7
  405dc8:	d83d      	bhi.n	405e46 <_realloc_r+0xae>
  405dca:	4294      	cmp	r4, r2
  405dcc:	da43      	bge.n	405e56 <_realloc_r+0xbe>
  405dce:	4bc4      	ldr	r3, [pc, #784]	; (4060e0 <_realloc_r+0x348>)
  405dd0:	6899      	ldr	r1, [r3, #8]
  405dd2:	eb09 0004 	add.w	r0, r9, r4
  405dd6:	4288      	cmp	r0, r1
  405dd8:	f000 80b4 	beq.w	405f44 <_realloc_r+0x1ac>
  405ddc:	6843      	ldr	r3, [r0, #4]
  405dde:	f023 0101 	bic.w	r1, r3, #1
  405de2:	4401      	add	r1, r0
  405de4:	6849      	ldr	r1, [r1, #4]
  405de6:	07c9      	lsls	r1, r1, #31
  405de8:	d54c      	bpl.n	405e84 <_realloc_r+0xec>
  405dea:	f01e 0f01 	tst.w	lr, #1
  405dee:	f000 809b 	beq.w	405f28 <_realloc_r+0x190>
  405df2:	4631      	mov	r1, r6
  405df4:	4640      	mov	r0, r8
  405df6:	f7fd fe09 	bl	403a0c <_malloc_r>
  405dfa:	4606      	mov	r6, r0
  405dfc:	2800      	cmp	r0, #0
  405dfe:	d03a      	beq.n	405e76 <_realloc_r+0xde>
  405e00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405e04:	f023 0301 	bic.w	r3, r3, #1
  405e08:	444b      	add	r3, r9
  405e0a:	f1a0 0208 	sub.w	r2, r0, #8
  405e0e:	429a      	cmp	r2, r3
  405e10:	f000 8121 	beq.w	406056 <_realloc_r+0x2be>
  405e14:	1f22      	subs	r2, r4, #4
  405e16:	2a24      	cmp	r2, #36	; 0x24
  405e18:	f200 8107 	bhi.w	40602a <_realloc_r+0x292>
  405e1c:	2a13      	cmp	r2, #19
  405e1e:	f200 80db 	bhi.w	405fd8 <_realloc_r+0x240>
  405e22:	4603      	mov	r3, r0
  405e24:	462a      	mov	r2, r5
  405e26:	6811      	ldr	r1, [r2, #0]
  405e28:	6019      	str	r1, [r3, #0]
  405e2a:	6851      	ldr	r1, [r2, #4]
  405e2c:	6059      	str	r1, [r3, #4]
  405e2e:	6892      	ldr	r2, [r2, #8]
  405e30:	609a      	str	r2, [r3, #8]
  405e32:	4629      	mov	r1, r5
  405e34:	4640      	mov	r0, r8
  405e36:	f7ff fbcb 	bl	4055d0 <_free_r>
  405e3a:	e01c      	b.n	405e76 <_realloc_r+0xde>
  405e3c:	f027 0707 	bic.w	r7, r7, #7
  405e40:	2f00      	cmp	r7, #0
  405e42:	463a      	mov	r2, r7
  405e44:	dabf      	bge.n	405dc6 <_realloc_r+0x2e>
  405e46:	2600      	movs	r6, #0
  405e48:	230c      	movs	r3, #12
  405e4a:	4630      	mov	r0, r6
  405e4c:	f8c8 3000 	str.w	r3, [r8]
  405e50:	b003      	add	sp, #12
  405e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e56:	462e      	mov	r6, r5
  405e58:	1be3      	subs	r3, r4, r7
  405e5a:	2b0f      	cmp	r3, #15
  405e5c:	d81e      	bhi.n	405e9c <_realloc_r+0x104>
  405e5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405e62:	f003 0301 	and.w	r3, r3, #1
  405e66:	4323      	orrs	r3, r4
  405e68:	444c      	add	r4, r9
  405e6a:	f8c9 3004 	str.w	r3, [r9, #4]
  405e6e:	6863      	ldr	r3, [r4, #4]
  405e70:	f043 0301 	orr.w	r3, r3, #1
  405e74:	6063      	str	r3, [r4, #4]
  405e76:	4640      	mov	r0, r8
  405e78:	f7fe f966 	bl	404148 <__malloc_unlock>
  405e7c:	4630      	mov	r0, r6
  405e7e:	b003      	add	sp, #12
  405e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e84:	f023 0303 	bic.w	r3, r3, #3
  405e88:	18e1      	adds	r1, r4, r3
  405e8a:	4291      	cmp	r1, r2
  405e8c:	db1f      	blt.n	405ece <_realloc_r+0x136>
  405e8e:	68c3      	ldr	r3, [r0, #12]
  405e90:	6882      	ldr	r2, [r0, #8]
  405e92:	462e      	mov	r6, r5
  405e94:	60d3      	str	r3, [r2, #12]
  405e96:	460c      	mov	r4, r1
  405e98:	609a      	str	r2, [r3, #8]
  405e9a:	e7dd      	b.n	405e58 <_realloc_r+0xc0>
  405e9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405ea0:	eb09 0107 	add.w	r1, r9, r7
  405ea4:	f002 0201 	and.w	r2, r2, #1
  405ea8:	444c      	add	r4, r9
  405eaa:	f043 0301 	orr.w	r3, r3, #1
  405eae:	4317      	orrs	r7, r2
  405eb0:	f8c9 7004 	str.w	r7, [r9, #4]
  405eb4:	604b      	str	r3, [r1, #4]
  405eb6:	6863      	ldr	r3, [r4, #4]
  405eb8:	f043 0301 	orr.w	r3, r3, #1
  405ebc:	3108      	adds	r1, #8
  405ebe:	6063      	str	r3, [r4, #4]
  405ec0:	4640      	mov	r0, r8
  405ec2:	f7ff fb85 	bl	4055d0 <_free_r>
  405ec6:	e7d6      	b.n	405e76 <_realloc_r+0xde>
  405ec8:	4611      	mov	r1, r2
  405eca:	f7fd bd9f 	b.w	403a0c <_malloc_r>
  405ece:	f01e 0f01 	tst.w	lr, #1
  405ed2:	d18e      	bne.n	405df2 <_realloc_r+0x5a>
  405ed4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405ed8:	eba9 0a01 	sub.w	sl, r9, r1
  405edc:	f8da 1004 	ldr.w	r1, [sl, #4]
  405ee0:	f021 0103 	bic.w	r1, r1, #3
  405ee4:	440b      	add	r3, r1
  405ee6:	4423      	add	r3, r4
  405ee8:	4293      	cmp	r3, r2
  405eea:	db25      	blt.n	405f38 <_realloc_r+0x1a0>
  405eec:	68c2      	ldr	r2, [r0, #12]
  405eee:	6881      	ldr	r1, [r0, #8]
  405ef0:	4656      	mov	r6, sl
  405ef2:	60ca      	str	r2, [r1, #12]
  405ef4:	6091      	str	r1, [r2, #8]
  405ef6:	f8da 100c 	ldr.w	r1, [sl, #12]
  405efa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405efe:	1f22      	subs	r2, r4, #4
  405f00:	2a24      	cmp	r2, #36	; 0x24
  405f02:	60c1      	str	r1, [r0, #12]
  405f04:	6088      	str	r0, [r1, #8]
  405f06:	f200 8094 	bhi.w	406032 <_realloc_r+0x29a>
  405f0a:	2a13      	cmp	r2, #19
  405f0c:	d96f      	bls.n	405fee <_realloc_r+0x256>
  405f0e:	6829      	ldr	r1, [r5, #0]
  405f10:	f8ca 1008 	str.w	r1, [sl, #8]
  405f14:	6869      	ldr	r1, [r5, #4]
  405f16:	f8ca 100c 	str.w	r1, [sl, #12]
  405f1a:	2a1b      	cmp	r2, #27
  405f1c:	f200 80a2 	bhi.w	406064 <_realloc_r+0x2cc>
  405f20:	3508      	adds	r5, #8
  405f22:	f10a 0210 	add.w	r2, sl, #16
  405f26:	e063      	b.n	405ff0 <_realloc_r+0x258>
  405f28:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405f2c:	eba9 0a03 	sub.w	sl, r9, r3
  405f30:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f34:	f021 0103 	bic.w	r1, r1, #3
  405f38:	1863      	adds	r3, r4, r1
  405f3a:	4293      	cmp	r3, r2
  405f3c:	f6ff af59 	blt.w	405df2 <_realloc_r+0x5a>
  405f40:	4656      	mov	r6, sl
  405f42:	e7d8      	b.n	405ef6 <_realloc_r+0x15e>
  405f44:	6841      	ldr	r1, [r0, #4]
  405f46:	f021 0b03 	bic.w	fp, r1, #3
  405f4a:	44a3      	add	fp, r4
  405f4c:	f107 0010 	add.w	r0, r7, #16
  405f50:	4583      	cmp	fp, r0
  405f52:	da56      	bge.n	406002 <_realloc_r+0x26a>
  405f54:	f01e 0f01 	tst.w	lr, #1
  405f58:	f47f af4b 	bne.w	405df2 <_realloc_r+0x5a>
  405f5c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405f60:	eba9 0a01 	sub.w	sl, r9, r1
  405f64:	f8da 1004 	ldr.w	r1, [sl, #4]
  405f68:	f021 0103 	bic.w	r1, r1, #3
  405f6c:	448b      	add	fp, r1
  405f6e:	4558      	cmp	r0, fp
  405f70:	dce2      	bgt.n	405f38 <_realloc_r+0x1a0>
  405f72:	4656      	mov	r6, sl
  405f74:	f8da 100c 	ldr.w	r1, [sl, #12]
  405f78:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405f7c:	1f22      	subs	r2, r4, #4
  405f7e:	2a24      	cmp	r2, #36	; 0x24
  405f80:	60c1      	str	r1, [r0, #12]
  405f82:	6088      	str	r0, [r1, #8]
  405f84:	f200 808f 	bhi.w	4060a6 <_realloc_r+0x30e>
  405f88:	2a13      	cmp	r2, #19
  405f8a:	f240 808a 	bls.w	4060a2 <_realloc_r+0x30a>
  405f8e:	6829      	ldr	r1, [r5, #0]
  405f90:	f8ca 1008 	str.w	r1, [sl, #8]
  405f94:	6869      	ldr	r1, [r5, #4]
  405f96:	f8ca 100c 	str.w	r1, [sl, #12]
  405f9a:	2a1b      	cmp	r2, #27
  405f9c:	f200 808a 	bhi.w	4060b4 <_realloc_r+0x31c>
  405fa0:	3508      	adds	r5, #8
  405fa2:	f10a 0210 	add.w	r2, sl, #16
  405fa6:	6829      	ldr	r1, [r5, #0]
  405fa8:	6011      	str	r1, [r2, #0]
  405faa:	6869      	ldr	r1, [r5, #4]
  405fac:	6051      	str	r1, [r2, #4]
  405fae:	68a9      	ldr	r1, [r5, #8]
  405fb0:	6091      	str	r1, [r2, #8]
  405fb2:	eb0a 0107 	add.w	r1, sl, r7
  405fb6:	ebab 0207 	sub.w	r2, fp, r7
  405fba:	f042 0201 	orr.w	r2, r2, #1
  405fbe:	6099      	str	r1, [r3, #8]
  405fc0:	604a      	str	r2, [r1, #4]
  405fc2:	f8da 3004 	ldr.w	r3, [sl, #4]
  405fc6:	f003 0301 	and.w	r3, r3, #1
  405fca:	431f      	orrs	r7, r3
  405fcc:	4640      	mov	r0, r8
  405fce:	f8ca 7004 	str.w	r7, [sl, #4]
  405fd2:	f7fe f8b9 	bl	404148 <__malloc_unlock>
  405fd6:	e751      	b.n	405e7c <_realloc_r+0xe4>
  405fd8:	682b      	ldr	r3, [r5, #0]
  405fda:	6003      	str	r3, [r0, #0]
  405fdc:	686b      	ldr	r3, [r5, #4]
  405fde:	6043      	str	r3, [r0, #4]
  405fe0:	2a1b      	cmp	r2, #27
  405fe2:	d82d      	bhi.n	406040 <_realloc_r+0x2a8>
  405fe4:	f100 0308 	add.w	r3, r0, #8
  405fe8:	f105 0208 	add.w	r2, r5, #8
  405fec:	e71b      	b.n	405e26 <_realloc_r+0x8e>
  405fee:	4632      	mov	r2, r6
  405ff0:	6829      	ldr	r1, [r5, #0]
  405ff2:	6011      	str	r1, [r2, #0]
  405ff4:	6869      	ldr	r1, [r5, #4]
  405ff6:	6051      	str	r1, [r2, #4]
  405ff8:	68a9      	ldr	r1, [r5, #8]
  405ffa:	6091      	str	r1, [r2, #8]
  405ffc:	461c      	mov	r4, r3
  405ffe:	46d1      	mov	r9, sl
  406000:	e72a      	b.n	405e58 <_realloc_r+0xc0>
  406002:	eb09 0107 	add.w	r1, r9, r7
  406006:	ebab 0b07 	sub.w	fp, fp, r7
  40600a:	f04b 0201 	orr.w	r2, fp, #1
  40600e:	6099      	str	r1, [r3, #8]
  406010:	604a      	str	r2, [r1, #4]
  406012:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406016:	f003 0301 	and.w	r3, r3, #1
  40601a:	431f      	orrs	r7, r3
  40601c:	4640      	mov	r0, r8
  40601e:	f845 7c04 	str.w	r7, [r5, #-4]
  406022:	f7fe f891 	bl	404148 <__malloc_unlock>
  406026:	462e      	mov	r6, r5
  406028:	e728      	b.n	405e7c <_realloc_r+0xe4>
  40602a:	4629      	mov	r1, r5
  40602c:	f7ff fe50 	bl	405cd0 <memmove>
  406030:	e6ff      	b.n	405e32 <_realloc_r+0x9a>
  406032:	4629      	mov	r1, r5
  406034:	4630      	mov	r0, r6
  406036:	461c      	mov	r4, r3
  406038:	46d1      	mov	r9, sl
  40603a:	f7ff fe49 	bl	405cd0 <memmove>
  40603e:	e70b      	b.n	405e58 <_realloc_r+0xc0>
  406040:	68ab      	ldr	r3, [r5, #8]
  406042:	6083      	str	r3, [r0, #8]
  406044:	68eb      	ldr	r3, [r5, #12]
  406046:	60c3      	str	r3, [r0, #12]
  406048:	2a24      	cmp	r2, #36	; 0x24
  40604a:	d017      	beq.n	40607c <_realloc_r+0x2e4>
  40604c:	f100 0310 	add.w	r3, r0, #16
  406050:	f105 0210 	add.w	r2, r5, #16
  406054:	e6e7      	b.n	405e26 <_realloc_r+0x8e>
  406056:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40605a:	f023 0303 	bic.w	r3, r3, #3
  40605e:	441c      	add	r4, r3
  406060:	462e      	mov	r6, r5
  406062:	e6f9      	b.n	405e58 <_realloc_r+0xc0>
  406064:	68a9      	ldr	r1, [r5, #8]
  406066:	f8ca 1010 	str.w	r1, [sl, #16]
  40606a:	68e9      	ldr	r1, [r5, #12]
  40606c:	f8ca 1014 	str.w	r1, [sl, #20]
  406070:	2a24      	cmp	r2, #36	; 0x24
  406072:	d00c      	beq.n	40608e <_realloc_r+0x2f6>
  406074:	3510      	adds	r5, #16
  406076:	f10a 0218 	add.w	r2, sl, #24
  40607a:	e7b9      	b.n	405ff0 <_realloc_r+0x258>
  40607c:	692b      	ldr	r3, [r5, #16]
  40607e:	6103      	str	r3, [r0, #16]
  406080:	696b      	ldr	r3, [r5, #20]
  406082:	6143      	str	r3, [r0, #20]
  406084:	f105 0218 	add.w	r2, r5, #24
  406088:	f100 0318 	add.w	r3, r0, #24
  40608c:	e6cb      	b.n	405e26 <_realloc_r+0x8e>
  40608e:	692a      	ldr	r2, [r5, #16]
  406090:	f8ca 2018 	str.w	r2, [sl, #24]
  406094:	696a      	ldr	r2, [r5, #20]
  406096:	f8ca 201c 	str.w	r2, [sl, #28]
  40609a:	3518      	adds	r5, #24
  40609c:	f10a 0220 	add.w	r2, sl, #32
  4060a0:	e7a6      	b.n	405ff0 <_realloc_r+0x258>
  4060a2:	4632      	mov	r2, r6
  4060a4:	e77f      	b.n	405fa6 <_realloc_r+0x20e>
  4060a6:	4629      	mov	r1, r5
  4060a8:	4630      	mov	r0, r6
  4060aa:	9301      	str	r3, [sp, #4]
  4060ac:	f7ff fe10 	bl	405cd0 <memmove>
  4060b0:	9b01      	ldr	r3, [sp, #4]
  4060b2:	e77e      	b.n	405fb2 <_realloc_r+0x21a>
  4060b4:	68a9      	ldr	r1, [r5, #8]
  4060b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4060ba:	68e9      	ldr	r1, [r5, #12]
  4060bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4060c0:	2a24      	cmp	r2, #36	; 0x24
  4060c2:	d003      	beq.n	4060cc <_realloc_r+0x334>
  4060c4:	3510      	adds	r5, #16
  4060c6:	f10a 0218 	add.w	r2, sl, #24
  4060ca:	e76c      	b.n	405fa6 <_realloc_r+0x20e>
  4060cc:	692a      	ldr	r2, [r5, #16]
  4060ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4060d2:	696a      	ldr	r2, [r5, #20]
  4060d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4060d8:	3518      	adds	r5, #24
  4060da:	f10a 0220 	add.w	r2, sl, #32
  4060de:	e762      	b.n	405fa6 <_realloc_r+0x20e>
  4060e0:	20400440 	.word	0x20400440

004060e4 <__sread>:
  4060e4:	b510      	push	{r4, lr}
  4060e6:	460c      	mov	r4, r1
  4060e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060ec:	f000 fa6e 	bl	4065cc <_read_r>
  4060f0:	2800      	cmp	r0, #0
  4060f2:	db03      	blt.n	4060fc <__sread+0x18>
  4060f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4060f6:	4403      	add	r3, r0
  4060f8:	6523      	str	r3, [r4, #80]	; 0x50
  4060fa:	bd10      	pop	{r4, pc}
  4060fc:	89a3      	ldrh	r3, [r4, #12]
  4060fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406102:	81a3      	strh	r3, [r4, #12]
  406104:	bd10      	pop	{r4, pc}
  406106:	bf00      	nop

00406108 <__swrite>:
  406108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40610c:	4616      	mov	r6, r2
  40610e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406112:	461f      	mov	r7, r3
  406114:	05d3      	lsls	r3, r2, #23
  406116:	460c      	mov	r4, r1
  406118:	4605      	mov	r5, r0
  40611a:	d507      	bpl.n	40612c <__swrite+0x24>
  40611c:	2200      	movs	r2, #0
  40611e:	2302      	movs	r3, #2
  406120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406124:	f000 fa3c 	bl	4065a0 <_lseek_r>
  406128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40612c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406134:	81a2      	strh	r2, [r4, #12]
  406136:	463b      	mov	r3, r7
  406138:	4632      	mov	r2, r6
  40613a:	4628      	mov	r0, r5
  40613c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406140:	f000 b91c 	b.w	40637c <_write_r>

00406144 <__sseek>:
  406144:	b510      	push	{r4, lr}
  406146:	460c      	mov	r4, r1
  406148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40614c:	f000 fa28 	bl	4065a0 <_lseek_r>
  406150:	89a3      	ldrh	r3, [r4, #12]
  406152:	1c42      	adds	r2, r0, #1
  406154:	bf0e      	itee	eq
  406156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40615a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40615e:	6520      	strne	r0, [r4, #80]	; 0x50
  406160:	81a3      	strh	r3, [r4, #12]
  406162:	bd10      	pop	{r4, pc}

00406164 <__sclose>:
  406164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406168:	f000 b980 	b.w	40646c <_close_r>
	...

00406180 <strlen>:
  406180:	f890 f000 	pld	[r0]
  406184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406188:	f020 0107 	bic.w	r1, r0, #7
  40618c:	f06f 0c00 	mvn.w	ip, #0
  406190:	f010 0407 	ands.w	r4, r0, #7
  406194:	f891 f020 	pld	[r1, #32]
  406198:	f040 8049 	bne.w	40622e <strlen+0xae>
  40619c:	f04f 0400 	mov.w	r4, #0
  4061a0:	f06f 0007 	mvn.w	r0, #7
  4061a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4061a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4061ac:	f100 0008 	add.w	r0, r0, #8
  4061b0:	fa82 f24c 	uadd8	r2, r2, ip
  4061b4:	faa4 f28c 	sel	r2, r4, ip
  4061b8:	fa83 f34c 	uadd8	r3, r3, ip
  4061bc:	faa2 f38c 	sel	r3, r2, ip
  4061c0:	bb4b      	cbnz	r3, 406216 <strlen+0x96>
  4061c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4061c6:	fa82 f24c 	uadd8	r2, r2, ip
  4061ca:	f100 0008 	add.w	r0, r0, #8
  4061ce:	faa4 f28c 	sel	r2, r4, ip
  4061d2:	fa83 f34c 	uadd8	r3, r3, ip
  4061d6:	faa2 f38c 	sel	r3, r2, ip
  4061da:	b9e3      	cbnz	r3, 406216 <strlen+0x96>
  4061dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4061e0:	fa82 f24c 	uadd8	r2, r2, ip
  4061e4:	f100 0008 	add.w	r0, r0, #8
  4061e8:	faa4 f28c 	sel	r2, r4, ip
  4061ec:	fa83 f34c 	uadd8	r3, r3, ip
  4061f0:	faa2 f38c 	sel	r3, r2, ip
  4061f4:	b97b      	cbnz	r3, 406216 <strlen+0x96>
  4061f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4061fa:	f101 0120 	add.w	r1, r1, #32
  4061fe:	fa82 f24c 	uadd8	r2, r2, ip
  406202:	f100 0008 	add.w	r0, r0, #8
  406206:	faa4 f28c 	sel	r2, r4, ip
  40620a:	fa83 f34c 	uadd8	r3, r3, ip
  40620e:	faa2 f38c 	sel	r3, r2, ip
  406212:	2b00      	cmp	r3, #0
  406214:	d0c6      	beq.n	4061a4 <strlen+0x24>
  406216:	2a00      	cmp	r2, #0
  406218:	bf04      	itt	eq
  40621a:	3004      	addeq	r0, #4
  40621c:	461a      	moveq	r2, r3
  40621e:	ba12      	rev	r2, r2
  406220:	fab2 f282 	clz	r2, r2
  406224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40622c:	4770      	bx	lr
  40622e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406232:	f004 0503 	and.w	r5, r4, #3
  406236:	f1c4 0000 	rsb	r0, r4, #0
  40623a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40623e:	f014 0f04 	tst.w	r4, #4
  406242:	f891 f040 	pld	[r1, #64]	; 0x40
  406246:	fa0c f505 	lsl.w	r5, ip, r5
  40624a:	ea62 0205 	orn	r2, r2, r5
  40624e:	bf1c      	itt	ne
  406250:	ea63 0305 	ornne	r3, r3, r5
  406254:	4662      	movne	r2, ip
  406256:	f04f 0400 	mov.w	r4, #0
  40625a:	e7a9      	b.n	4061b0 <strlen+0x30>

0040625c <__swbuf_r>:
  40625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40625e:	460d      	mov	r5, r1
  406260:	4614      	mov	r4, r2
  406262:	4606      	mov	r6, r0
  406264:	b110      	cbz	r0, 40626c <__swbuf_r+0x10>
  406266:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406268:	2b00      	cmp	r3, #0
  40626a:	d04b      	beq.n	406304 <__swbuf_r+0xa8>
  40626c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406270:	69a3      	ldr	r3, [r4, #24]
  406272:	60a3      	str	r3, [r4, #8]
  406274:	b291      	uxth	r1, r2
  406276:	0708      	lsls	r0, r1, #28
  406278:	d539      	bpl.n	4062ee <__swbuf_r+0x92>
  40627a:	6923      	ldr	r3, [r4, #16]
  40627c:	2b00      	cmp	r3, #0
  40627e:	d036      	beq.n	4062ee <__swbuf_r+0x92>
  406280:	b2ed      	uxtb	r5, r5
  406282:	0489      	lsls	r1, r1, #18
  406284:	462f      	mov	r7, r5
  406286:	d515      	bpl.n	4062b4 <__swbuf_r+0x58>
  406288:	6822      	ldr	r2, [r4, #0]
  40628a:	6961      	ldr	r1, [r4, #20]
  40628c:	1ad3      	subs	r3, r2, r3
  40628e:	428b      	cmp	r3, r1
  406290:	da1c      	bge.n	4062cc <__swbuf_r+0x70>
  406292:	3301      	adds	r3, #1
  406294:	68a1      	ldr	r1, [r4, #8]
  406296:	1c50      	adds	r0, r2, #1
  406298:	3901      	subs	r1, #1
  40629a:	60a1      	str	r1, [r4, #8]
  40629c:	6020      	str	r0, [r4, #0]
  40629e:	7015      	strb	r5, [r2, #0]
  4062a0:	6962      	ldr	r2, [r4, #20]
  4062a2:	429a      	cmp	r2, r3
  4062a4:	d01a      	beq.n	4062dc <__swbuf_r+0x80>
  4062a6:	89a3      	ldrh	r3, [r4, #12]
  4062a8:	07db      	lsls	r3, r3, #31
  4062aa:	d501      	bpl.n	4062b0 <__swbuf_r+0x54>
  4062ac:	2d0a      	cmp	r5, #10
  4062ae:	d015      	beq.n	4062dc <__swbuf_r+0x80>
  4062b0:	4638      	mov	r0, r7
  4062b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4062b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4062b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4062ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4062be:	81a2      	strh	r2, [r4, #12]
  4062c0:	6822      	ldr	r2, [r4, #0]
  4062c2:	6661      	str	r1, [r4, #100]	; 0x64
  4062c4:	6961      	ldr	r1, [r4, #20]
  4062c6:	1ad3      	subs	r3, r2, r3
  4062c8:	428b      	cmp	r3, r1
  4062ca:	dbe2      	blt.n	406292 <__swbuf_r+0x36>
  4062cc:	4621      	mov	r1, r4
  4062ce:	4630      	mov	r0, r6
  4062d0:	f7ff f800 	bl	4052d4 <_fflush_r>
  4062d4:	b940      	cbnz	r0, 4062e8 <__swbuf_r+0x8c>
  4062d6:	6822      	ldr	r2, [r4, #0]
  4062d8:	2301      	movs	r3, #1
  4062da:	e7db      	b.n	406294 <__swbuf_r+0x38>
  4062dc:	4621      	mov	r1, r4
  4062de:	4630      	mov	r0, r6
  4062e0:	f7fe fff8 	bl	4052d4 <_fflush_r>
  4062e4:	2800      	cmp	r0, #0
  4062e6:	d0e3      	beq.n	4062b0 <__swbuf_r+0x54>
  4062e8:	f04f 37ff 	mov.w	r7, #4294967295
  4062ec:	e7e0      	b.n	4062b0 <__swbuf_r+0x54>
  4062ee:	4621      	mov	r1, r4
  4062f0:	4630      	mov	r0, r6
  4062f2:	f7fe fedb 	bl	4050ac <__swsetup_r>
  4062f6:	2800      	cmp	r0, #0
  4062f8:	d1f6      	bne.n	4062e8 <__swbuf_r+0x8c>
  4062fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4062fe:	6923      	ldr	r3, [r4, #16]
  406300:	b291      	uxth	r1, r2
  406302:	e7bd      	b.n	406280 <__swbuf_r+0x24>
  406304:	f7ff f83e 	bl	405384 <__sinit>
  406308:	e7b0      	b.n	40626c <__swbuf_r+0x10>
  40630a:	bf00      	nop

0040630c <_wcrtomb_r>:
  40630c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40630e:	4606      	mov	r6, r0
  406310:	b085      	sub	sp, #20
  406312:	461f      	mov	r7, r3
  406314:	b189      	cbz	r1, 40633a <_wcrtomb_r+0x2e>
  406316:	4c10      	ldr	r4, [pc, #64]	; (406358 <_wcrtomb_r+0x4c>)
  406318:	4d10      	ldr	r5, [pc, #64]	; (40635c <_wcrtomb_r+0x50>)
  40631a:	6824      	ldr	r4, [r4, #0]
  40631c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40631e:	2c00      	cmp	r4, #0
  406320:	bf08      	it	eq
  406322:	462c      	moveq	r4, r5
  406324:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406328:	47a0      	blx	r4
  40632a:	1c43      	adds	r3, r0, #1
  40632c:	d103      	bne.n	406336 <_wcrtomb_r+0x2a>
  40632e:	2200      	movs	r2, #0
  406330:	238a      	movs	r3, #138	; 0x8a
  406332:	603a      	str	r2, [r7, #0]
  406334:	6033      	str	r3, [r6, #0]
  406336:	b005      	add	sp, #20
  406338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40633a:	460c      	mov	r4, r1
  40633c:	4906      	ldr	r1, [pc, #24]	; (406358 <_wcrtomb_r+0x4c>)
  40633e:	4a07      	ldr	r2, [pc, #28]	; (40635c <_wcrtomb_r+0x50>)
  406340:	6809      	ldr	r1, [r1, #0]
  406342:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406344:	2900      	cmp	r1, #0
  406346:	bf08      	it	eq
  406348:	4611      	moveq	r1, r2
  40634a:	4622      	mov	r2, r4
  40634c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406350:	a901      	add	r1, sp, #4
  406352:	47a0      	blx	r4
  406354:	e7e9      	b.n	40632a <_wcrtomb_r+0x1e>
  406356:	bf00      	nop
  406358:	20400010 	.word	0x20400010
  40635c:	20400854 	.word	0x20400854

00406360 <__ascii_wctomb>:
  406360:	b121      	cbz	r1, 40636c <__ascii_wctomb+0xc>
  406362:	2aff      	cmp	r2, #255	; 0xff
  406364:	d804      	bhi.n	406370 <__ascii_wctomb+0x10>
  406366:	700a      	strb	r2, [r1, #0]
  406368:	2001      	movs	r0, #1
  40636a:	4770      	bx	lr
  40636c:	4608      	mov	r0, r1
  40636e:	4770      	bx	lr
  406370:	238a      	movs	r3, #138	; 0x8a
  406372:	6003      	str	r3, [r0, #0]
  406374:	f04f 30ff 	mov.w	r0, #4294967295
  406378:	4770      	bx	lr
  40637a:	bf00      	nop

0040637c <_write_r>:
  40637c:	b570      	push	{r4, r5, r6, lr}
  40637e:	460d      	mov	r5, r1
  406380:	4c08      	ldr	r4, [pc, #32]	; (4063a4 <_write_r+0x28>)
  406382:	4611      	mov	r1, r2
  406384:	4606      	mov	r6, r0
  406386:	461a      	mov	r2, r3
  406388:	4628      	mov	r0, r5
  40638a:	2300      	movs	r3, #0
  40638c:	6023      	str	r3, [r4, #0]
  40638e:	f7fa feff 	bl	401190 <_write>
  406392:	1c43      	adds	r3, r0, #1
  406394:	d000      	beq.n	406398 <_write_r+0x1c>
  406396:	bd70      	pop	{r4, r5, r6, pc}
  406398:	6823      	ldr	r3, [r4, #0]
  40639a:	2b00      	cmp	r3, #0
  40639c:	d0fb      	beq.n	406396 <_write_r+0x1a>
  40639e:	6033      	str	r3, [r6, #0]
  4063a0:	bd70      	pop	{r4, r5, r6, pc}
  4063a2:	bf00      	nop
  4063a4:	2040140c 	.word	0x2040140c

004063a8 <__register_exitproc>:
  4063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4063ac:	4d2c      	ldr	r5, [pc, #176]	; (406460 <__register_exitproc+0xb8>)
  4063ae:	4606      	mov	r6, r0
  4063b0:	6828      	ldr	r0, [r5, #0]
  4063b2:	4698      	mov	r8, r3
  4063b4:	460f      	mov	r7, r1
  4063b6:	4691      	mov	r9, r2
  4063b8:	f7ff fba4 	bl	405b04 <__retarget_lock_acquire_recursive>
  4063bc:	4b29      	ldr	r3, [pc, #164]	; (406464 <__register_exitproc+0xbc>)
  4063be:	681c      	ldr	r4, [r3, #0]
  4063c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4063c4:	2b00      	cmp	r3, #0
  4063c6:	d03e      	beq.n	406446 <__register_exitproc+0x9e>
  4063c8:	685a      	ldr	r2, [r3, #4]
  4063ca:	2a1f      	cmp	r2, #31
  4063cc:	dc1c      	bgt.n	406408 <__register_exitproc+0x60>
  4063ce:	f102 0e01 	add.w	lr, r2, #1
  4063d2:	b176      	cbz	r6, 4063f2 <__register_exitproc+0x4a>
  4063d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4063d8:	2401      	movs	r4, #1
  4063da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4063de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4063e2:	4094      	lsls	r4, r2
  4063e4:	4320      	orrs	r0, r4
  4063e6:	2e02      	cmp	r6, #2
  4063e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4063ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4063f0:	d023      	beq.n	40643a <__register_exitproc+0x92>
  4063f2:	3202      	adds	r2, #2
  4063f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4063f8:	6828      	ldr	r0, [r5, #0]
  4063fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4063fe:	f7ff fb83 	bl	405b08 <__retarget_lock_release_recursive>
  406402:	2000      	movs	r0, #0
  406404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406408:	4b17      	ldr	r3, [pc, #92]	; (406468 <__register_exitproc+0xc0>)
  40640a:	b30b      	cbz	r3, 406450 <__register_exitproc+0xa8>
  40640c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406410:	f7fd faf4 	bl	4039fc <malloc>
  406414:	4603      	mov	r3, r0
  406416:	b1d8      	cbz	r0, 406450 <__register_exitproc+0xa8>
  406418:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40641c:	6002      	str	r2, [r0, #0]
  40641e:	2100      	movs	r1, #0
  406420:	6041      	str	r1, [r0, #4]
  406422:	460a      	mov	r2, r1
  406424:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406428:	f04f 0e01 	mov.w	lr, #1
  40642c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406430:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406434:	2e00      	cmp	r6, #0
  406436:	d0dc      	beq.n	4063f2 <__register_exitproc+0x4a>
  406438:	e7cc      	b.n	4063d4 <__register_exitproc+0x2c>
  40643a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40643e:	430c      	orrs	r4, r1
  406440:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406444:	e7d5      	b.n	4063f2 <__register_exitproc+0x4a>
  406446:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40644a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40644e:	e7bb      	b.n	4063c8 <__register_exitproc+0x20>
  406450:	6828      	ldr	r0, [r5, #0]
  406452:	f7ff fb59 	bl	405b08 <__retarget_lock_release_recursive>
  406456:	f04f 30ff 	mov.w	r0, #4294967295
  40645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40645e:	bf00      	nop
  406460:	20400850 	.word	0x20400850
  406464:	00406bdc 	.word	0x00406bdc
  406468:	004039fd 	.word	0x004039fd

0040646c <_close_r>:
  40646c:	b538      	push	{r3, r4, r5, lr}
  40646e:	4c07      	ldr	r4, [pc, #28]	; (40648c <_close_r+0x20>)
  406470:	2300      	movs	r3, #0
  406472:	4605      	mov	r5, r0
  406474:	4608      	mov	r0, r1
  406476:	6023      	str	r3, [r4, #0]
  406478:	f7fb fcfc 	bl	401e74 <_close>
  40647c:	1c43      	adds	r3, r0, #1
  40647e:	d000      	beq.n	406482 <_close_r+0x16>
  406480:	bd38      	pop	{r3, r4, r5, pc}
  406482:	6823      	ldr	r3, [r4, #0]
  406484:	2b00      	cmp	r3, #0
  406486:	d0fb      	beq.n	406480 <_close_r+0x14>
  406488:	602b      	str	r3, [r5, #0]
  40648a:	bd38      	pop	{r3, r4, r5, pc}
  40648c:	2040140c 	.word	0x2040140c

00406490 <_fclose_r>:
  406490:	b570      	push	{r4, r5, r6, lr}
  406492:	b159      	cbz	r1, 4064ac <_fclose_r+0x1c>
  406494:	4605      	mov	r5, r0
  406496:	460c      	mov	r4, r1
  406498:	b110      	cbz	r0, 4064a0 <_fclose_r+0x10>
  40649a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40649c:	2b00      	cmp	r3, #0
  40649e:	d03c      	beq.n	40651a <_fclose_r+0x8a>
  4064a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4064a2:	07d8      	lsls	r0, r3, #31
  4064a4:	d505      	bpl.n	4064b2 <_fclose_r+0x22>
  4064a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064aa:	b92b      	cbnz	r3, 4064b8 <_fclose_r+0x28>
  4064ac:	2600      	movs	r6, #0
  4064ae:	4630      	mov	r0, r6
  4064b0:	bd70      	pop	{r4, r5, r6, pc}
  4064b2:	89a3      	ldrh	r3, [r4, #12]
  4064b4:	0599      	lsls	r1, r3, #22
  4064b6:	d53c      	bpl.n	406532 <_fclose_r+0xa2>
  4064b8:	4621      	mov	r1, r4
  4064ba:	4628      	mov	r0, r5
  4064bc:	f7fe fe6a 	bl	405194 <__sflush_r>
  4064c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4064c2:	4606      	mov	r6, r0
  4064c4:	b133      	cbz	r3, 4064d4 <_fclose_r+0x44>
  4064c6:	69e1      	ldr	r1, [r4, #28]
  4064c8:	4628      	mov	r0, r5
  4064ca:	4798      	blx	r3
  4064cc:	2800      	cmp	r0, #0
  4064ce:	bfb8      	it	lt
  4064d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4064d4:	89a3      	ldrh	r3, [r4, #12]
  4064d6:	061a      	lsls	r2, r3, #24
  4064d8:	d422      	bmi.n	406520 <_fclose_r+0x90>
  4064da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4064dc:	b141      	cbz	r1, 4064f0 <_fclose_r+0x60>
  4064de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4064e2:	4299      	cmp	r1, r3
  4064e4:	d002      	beq.n	4064ec <_fclose_r+0x5c>
  4064e6:	4628      	mov	r0, r5
  4064e8:	f7ff f872 	bl	4055d0 <_free_r>
  4064ec:	2300      	movs	r3, #0
  4064ee:	6323      	str	r3, [r4, #48]	; 0x30
  4064f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4064f2:	b121      	cbz	r1, 4064fe <_fclose_r+0x6e>
  4064f4:	4628      	mov	r0, r5
  4064f6:	f7ff f86b 	bl	4055d0 <_free_r>
  4064fa:	2300      	movs	r3, #0
  4064fc:	6463      	str	r3, [r4, #68]	; 0x44
  4064fe:	f7fe ff6d 	bl	4053dc <__sfp_lock_acquire>
  406502:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406504:	2200      	movs	r2, #0
  406506:	07db      	lsls	r3, r3, #31
  406508:	81a2      	strh	r2, [r4, #12]
  40650a:	d50e      	bpl.n	40652a <_fclose_r+0x9a>
  40650c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40650e:	f7ff faf7 	bl	405b00 <__retarget_lock_close_recursive>
  406512:	f7fe ff69 	bl	4053e8 <__sfp_lock_release>
  406516:	4630      	mov	r0, r6
  406518:	bd70      	pop	{r4, r5, r6, pc}
  40651a:	f7fe ff33 	bl	405384 <__sinit>
  40651e:	e7bf      	b.n	4064a0 <_fclose_r+0x10>
  406520:	6921      	ldr	r1, [r4, #16]
  406522:	4628      	mov	r0, r5
  406524:	f7ff f854 	bl	4055d0 <_free_r>
  406528:	e7d7      	b.n	4064da <_fclose_r+0x4a>
  40652a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40652c:	f7ff faec 	bl	405b08 <__retarget_lock_release_recursive>
  406530:	e7ec      	b.n	40650c <_fclose_r+0x7c>
  406532:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406534:	f7ff fae6 	bl	405b04 <__retarget_lock_acquire_recursive>
  406538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40653c:	2b00      	cmp	r3, #0
  40653e:	d1bb      	bne.n	4064b8 <_fclose_r+0x28>
  406540:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406542:	f016 0601 	ands.w	r6, r6, #1
  406546:	d1b1      	bne.n	4064ac <_fclose_r+0x1c>
  406548:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40654a:	f7ff fadd 	bl	405b08 <__retarget_lock_release_recursive>
  40654e:	4630      	mov	r0, r6
  406550:	bd70      	pop	{r4, r5, r6, pc}
  406552:	bf00      	nop

00406554 <_fstat_r>:
  406554:	b538      	push	{r3, r4, r5, lr}
  406556:	460b      	mov	r3, r1
  406558:	4c07      	ldr	r4, [pc, #28]	; (406578 <_fstat_r+0x24>)
  40655a:	4605      	mov	r5, r0
  40655c:	4611      	mov	r1, r2
  40655e:	4618      	mov	r0, r3
  406560:	2300      	movs	r3, #0
  406562:	6023      	str	r3, [r4, #0]
  406564:	f7fb fc92 	bl	401e8c <_fstat>
  406568:	1c43      	adds	r3, r0, #1
  40656a:	d000      	beq.n	40656e <_fstat_r+0x1a>
  40656c:	bd38      	pop	{r3, r4, r5, pc}
  40656e:	6823      	ldr	r3, [r4, #0]
  406570:	2b00      	cmp	r3, #0
  406572:	d0fb      	beq.n	40656c <_fstat_r+0x18>
  406574:	602b      	str	r3, [r5, #0]
  406576:	bd38      	pop	{r3, r4, r5, pc}
  406578:	2040140c 	.word	0x2040140c

0040657c <_isatty_r>:
  40657c:	b538      	push	{r3, r4, r5, lr}
  40657e:	4c07      	ldr	r4, [pc, #28]	; (40659c <_isatty_r+0x20>)
  406580:	2300      	movs	r3, #0
  406582:	4605      	mov	r5, r0
  406584:	4608      	mov	r0, r1
  406586:	6023      	str	r3, [r4, #0]
  406588:	f7fb fc90 	bl	401eac <_isatty>
  40658c:	1c43      	adds	r3, r0, #1
  40658e:	d000      	beq.n	406592 <_isatty_r+0x16>
  406590:	bd38      	pop	{r3, r4, r5, pc}
  406592:	6823      	ldr	r3, [r4, #0]
  406594:	2b00      	cmp	r3, #0
  406596:	d0fb      	beq.n	406590 <_isatty_r+0x14>
  406598:	602b      	str	r3, [r5, #0]
  40659a:	bd38      	pop	{r3, r4, r5, pc}
  40659c:	2040140c 	.word	0x2040140c

004065a0 <_lseek_r>:
  4065a0:	b570      	push	{r4, r5, r6, lr}
  4065a2:	460d      	mov	r5, r1
  4065a4:	4c08      	ldr	r4, [pc, #32]	; (4065c8 <_lseek_r+0x28>)
  4065a6:	4611      	mov	r1, r2
  4065a8:	4606      	mov	r6, r0
  4065aa:	461a      	mov	r2, r3
  4065ac:	4628      	mov	r0, r5
  4065ae:	2300      	movs	r3, #0
  4065b0:	6023      	str	r3, [r4, #0]
  4065b2:	f7fb fc86 	bl	401ec2 <_lseek>
  4065b6:	1c43      	adds	r3, r0, #1
  4065b8:	d000      	beq.n	4065bc <_lseek_r+0x1c>
  4065ba:	bd70      	pop	{r4, r5, r6, pc}
  4065bc:	6823      	ldr	r3, [r4, #0]
  4065be:	2b00      	cmp	r3, #0
  4065c0:	d0fb      	beq.n	4065ba <_lseek_r+0x1a>
  4065c2:	6033      	str	r3, [r6, #0]
  4065c4:	bd70      	pop	{r4, r5, r6, pc}
  4065c6:	bf00      	nop
  4065c8:	2040140c 	.word	0x2040140c

004065cc <_read_r>:
  4065cc:	b570      	push	{r4, r5, r6, lr}
  4065ce:	460d      	mov	r5, r1
  4065d0:	4c08      	ldr	r4, [pc, #32]	; (4065f4 <_read_r+0x28>)
  4065d2:	4611      	mov	r1, r2
  4065d4:	4606      	mov	r6, r0
  4065d6:	461a      	mov	r2, r3
  4065d8:	4628      	mov	r0, r5
  4065da:	2300      	movs	r3, #0
  4065dc:	6023      	str	r3, [r4, #0]
  4065de:	f7fa fdad 	bl	40113c <_read>
  4065e2:	1c43      	adds	r3, r0, #1
  4065e4:	d000      	beq.n	4065e8 <_read_r+0x1c>
  4065e6:	bd70      	pop	{r4, r5, r6, pc}
  4065e8:	6823      	ldr	r3, [r4, #0]
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d0fb      	beq.n	4065e6 <_read_r+0x1a>
  4065ee:	6033      	str	r3, [r6, #0]
  4065f0:	bd70      	pop	{r4, r5, r6, pc}
  4065f2:	bf00      	nop
  4065f4:	2040140c 	.word	0x2040140c

004065f8 <__aeabi_uldivmod>:
  4065f8:	b953      	cbnz	r3, 406610 <__aeabi_uldivmod+0x18>
  4065fa:	b94a      	cbnz	r2, 406610 <__aeabi_uldivmod+0x18>
  4065fc:	2900      	cmp	r1, #0
  4065fe:	bf08      	it	eq
  406600:	2800      	cmpeq	r0, #0
  406602:	bf1c      	itt	ne
  406604:	f04f 31ff 	movne.w	r1, #4294967295
  406608:	f04f 30ff 	movne.w	r0, #4294967295
  40660c:	f000 b97a 	b.w	406904 <__aeabi_idiv0>
  406610:	f1ad 0c08 	sub.w	ip, sp, #8
  406614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406618:	f000 f806 	bl	406628 <__udivmoddi4>
  40661c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406624:	b004      	add	sp, #16
  406626:	4770      	bx	lr

00406628 <__udivmoddi4>:
  406628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40662c:	468c      	mov	ip, r1
  40662e:	460d      	mov	r5, r1
  406630:	4604      	mov	r4, r0
  406632:	9e08      	ldr	r6, [sp, #32]
  406634:	2b00      	cmp	r3, #0
  406636:	d151      	bne.n	4066dc <__udivmoddi4+0xb4>
  406638:	428a      	cmp	r2, r1
  40663a:	4617      	mov	r7, r2
  40663c:	d96d      	bls.n	40671a <__udivmoddi4+0xf2>
  40663e:	fab2 fe82 	clz	lr, r2
  406642:	f1be 0f00 	cmp.w	lr, #0
  406646:	d00b      	beq.n	406660 <__udivmoddi4+0x38>
  406648:	f1ce 0c20 	rsb	ip, lr, #32
  40664c:	fa01 f50e 	lsl.w	r5, r1, lr
  406650:	fa20 fc0c 	lsr.w	ip, r0, ip
  406654:	fa02 f70e 	lsl.w	r7, r2, lr
  406658:	ea4c 0c05 	orr.w	ip, ip, r5
  40665c:	fa00 f40e 	lsl.w	r4, r0, lr
  406660:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406664:	0c25      	lsrs	r5, r4, #16
  406666:	fbbc f8fa 	udiv	r8, ip, sl
  40666a:	fa1f f987 	uxth.w	r9, r7
  40666e:	fb0a cc18 	mls	ip, sl, r8, ip
  406672:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406676:	fb08 f309 	mul.w	r3, r8, r9
  40667a:	42ab      	cmp	r3, r5
  40667c:	d90a      	bls.n	406694 <__udivmoddi4+0x6c>
  40667e:	19ed      	adds	r5, r5, r7
  406680:	f108 32ff 	add.w	r2, r8, #4294967295
  406684:	f080 8123 	bcs.w	4068ce <__udivmoddi4+0x2a6>
  406688:	42ab      	cmp	r3, r5
  40668a:	f240 8120 	bls.w	4068ce <__udivmoddi4+0x2a6>
  40668e:	f1a8 0802 	sub.w	r8, r8, #2
  406692:	443d      	add	r5, r7
  406694:	1aed      	subs	r5, r5, r3
  406696:	b2a4      	uxth	r4, r4
  406698:	fbb5 f0fa 	udiv	r0, r5, sl
  40669c:	fb0a 5510 	mls	r5, sl, r0, r5
  4066a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4066a4:	fb00 f909 	mul.w	r9, r0, r9
  4066a8:	45a1      	cmp	r9, r4
  4066aa:	d909      	bls.n	4066c0 <__udivmoddi4+0x98>
  4066ac:	19e4      	adds	r4, r4, r7
  4066ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4066b2:	f080 810a 	bcs.w	4068ca <__udivmoddi4+0x2a2>
  4066b6:	45a1      	cmp	r9, r4
  4066b8:	f240 8107 	bls.w	4068ca <__udivmoddi4+0x2a2>
  4066bc:	3802      	subs	r0, #2
  4066be:	443c      	add	r4, r7
  4066c0:	eba4 0409 	sub.w	r4, r4, r9
  4066c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4066c8:	2100      	movs	r1, #0
  4066ca:	2e00      	cmp	r6, #0
  4066cc:	d061      	beq.n	406792 <__udivmoddi4+0x16a>
  4066ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4066d2:	2300      	movs	r3, #0
  4066d4:	6034      	str	r4, [r6, #0]
  4066d6:	6073      	str	r3, [r6, #4]
  4066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066dc:	428b      	cmp	r3, r1
  4066de:	d907      	bls.n	4066f0 <__udivmoddi4+0xc8>
  4066e0:	2e00      	cmp	r6, #0
  4066e2:	d054      	beq.n	40678e <__udivmoddi4+0x166>
  4066e4:	2100      	movs	r1, #0
  4066e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4066ea:	4608      	mov	r0, r1
  4066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066f0:	fab3 f183 	clz	r1, r3
  4066f4:	2900      	cmp	r1, #0
  4066f6:	f040 808e 	bne.w	406816 <__udivmoddi4+0x1ee>
  4066fa:	42ab      	cmp	r3, r5
  4066fc:	d302      	bcc.n	406704 <__udivmoddi4+0xdc>
  4066fe:	4282      	cmp	r2, r0
  406700:	f200 80fa 	bhi.w	4068f8 <__udivmoddi4+0x2d0>
  406704:	1a84      	subs	r4, r0, r2
  406706:	eb65 0503 	sbc.w	r5, r5, r3
  40670a:	2001      	movs	r0, #1
  40670c:	46ac      	mov	ip, r5
  40670e:	2e00      	cmp	r6, #0
  406710:	d03f      	beq.n	406792 <__udivmoddi4+0x16a>
  406712:	e886 1010 	stmia.w	r6, {r4, ip}
  406716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40671a:	b912      	cbnz	r2, 406722 <__udivmoddi4+0xfa>
  40671c:	2701      	movs	r7, #1
  40671e:	fbb7 f7f2 	udiv	r7, r7, r2
  406722:	fab7 fe87 	clz	lr, r7
  406726:	f1be 0f00 	cmp.w	lr, #0
  40672a:	d134      	bne.n	406796 <__udivmoddi4+0x16e>
  40672c:	1beb      	subs	r3, r5, r7
  40672e:	0c3a      	lsrs	r2, r7, #16
  406730:	fa1f fc87 	uxth.w	ip, r7
  406734:	2101      	movs	r1, #1
  406736:	fbb3 f8f2 	udiv	r8, r3, r2
  40673a:	0c25      	lsrs	r5, r4, #16
  40673c:	fb02 3318 	mls	r3, r2, r8, r3
  406740:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406744:	fb0c f308 	mul.w	r3, ip, r8
  406748:	42ab      	cmp	r3, r5
  40674a:	d907      	bls.n	40675c <__udivmoddi4+0x134>
  40674c:	19ed      	adds	r5, r5, r7
  40674e:	f108 30ff 	add.w	r0, r8, #4294967295
  406752:	d202      	bcs.n	40675a <__udivmoddi4+0x132>
  406754:	42ab      	cmp	r3, r5
  406756:	f200 80d1 	bhi.w	4068fc <__udivmoddi4+0x2d4>
  40675a:	4680      	mov	r8, r0
  40675c:	1aed      	subs	r5, r5, r3
  40675e:	b2a3      	uxth	r3, r4
  406760:	fbb5 f0f2 	udiv	r0, r5, r2
  406764:	fb02 5510 	mls	r5, r2, r0, r5
  406768:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40676c:	fb0c fc00 	mul.w	ip, ip, r0
  406770:	45a4      	cmp	ip, r4
  406772:	d907      	bls.n	406784 <__udivmoddi4+0x15c>
  406774:	19e4      	adds	r4, r4, r7
  406776:	f100 33ff 	add.w	r3, r0, #4294967295
  40677a:	d202      	bcs.n	406782 <__udivmoddi4+0x15a>
  40677c:	45a4      	cmp	ip, r4
  40677e:	f200 80b8 	bhi.w	4068f2 <__udivmoddi4+0x2ca>
  406782:	4618      	mov	r0, r3
  406784:	eba4 040c 	sub.w	r4, r4, ip
  406788:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40678c:	e79d      	b.n	4066ca <__udivmoddi4+0xa2>
  40678e:	4631      	mov	r1, r6
  406790:	4630      	mov	r0, r6
  406792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406796:	f1ce 0420 	rsb	r4, lr, #32
  40679a:	fa05 f30e 	lsl.w	r3, r5, lr
  40679e:	fa07 f70e 	lsl.w	r7, r7, lr
  4067a2:	fa20 f804 	lsr.w	r8, r0, r4
  4067a6:	0c3a      	lsrs	r2, r7, #16
  4067a8:	fa25 f404 	lsr.w	r4, r5, r4
  4067ac:	ea48 0803 	orr.w	r8, r8, r3
  4067b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4067b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4067b8:	fb02 4411 	mls	r4, r2, r1, r4
  4067bc:	fa1f fc87 	uxth.w	ip, r7
  4067c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4067c4:	fb01 f30c 	mul.w	r3, r1, ip
  4067c8:	42ab      	cmp	r3, r5
  4067ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4067ce:	d909      	bls.n	4067e4 <__udivmoddi4+0x1bc>
  4067d0:	19ed      	adds	r5, r5, r7
  4067d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4067d6:	f080 808a 	bcs.w	4068ee <__udivmoddi4+0x2c6>
  4067da:	42ab      	cmp	r3, r5
  4067dc:	f240 8087 	bls.w	4068ee <__udivmoddi4+0x2c6>
  4067e0:	3902      	subs	r1, #2
  4067e2:	443d      	add	r5, r7
  4067e4:	1aeb      	subs	r3, r5, r3
  4067e6:	fa1f f588 	uxth.w	r5, r8
  4067ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4067ee:	fb02 3310 	mls	r3, r2, r0, r3
  4067f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4067f6:	fb00 f30c 	mul.w	r3, r0, ip
  4067fa:	42ab      	cmp	r3, r5
  4067fc:	d907      	bls.n	40680e <__udivmoddi4+0x1e6>
  4067fe:	19ed      	adds	r5, r5, r7
  406800:	f100 38ff 	add.w	r8, r0, #4294967295
  406804:	d26f      	bcs.n	4068e6 <__udivmoddi4+0x2be>
  406806:	42ab      	cmp	r3, r5
  406808:	d96d      	bls.n	4068e6 <__udivmoddi4+0x2be>
  40680a:	3802      	subs	r0, #2
  40680c:	443d      	add	r5, r7
  40680e:	1aeb      	subs	r3, r5, r3
  406810:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406814:	e78f      	b.n	406736 <__udivmoddi4+0x10e>
  406816:	f1c1 0720 	rsb	r7, r1, #32
  40681a:	fa22 f807 	lsr.w	r8, r2, r7
  40681e:	408b      	lsls	r3, r1
  406820:	fa05 f401 	lsl.w	r4, r5, r1
  406824:	ea48 0303 	orr.w	r3, r8, r3
  406828:	fa20 fe07 	lsr.w	lr, r0, r7
  40682c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406830:	40fd      	lsrs	r5, r7
  406832:	ea4e 0e04 	orr.w	lr, lr, r4
  406836:	fbb5 f9fc 	udiv	r9, r5, ip
  40683a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40683e:	fb0c 5519 	mls	r5, ip, r9, r5
  406842:	fa1f f883 	uxth.w	r8, r3
  406846:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40684a:	fb09 f408 	mul.w	r4, r9, r8
  40684e:	42ac      	cmp	r4, r5
  406850:	fa02 f201 	lsl.w	r2, r2, r1
  406854:	fa00 fa01 	lsl.w	sl, r0, r1
  406858:	d908      	bls.n	40686c <__udivmoddi4+0x244>
  40685a:	18ed      	adds	r5, r5, r3
  40685c:	f109 30ff 	add.w	r0, r9, #4294967295
  406860:	d243      	bcs.n	4068ea <__udivmoddi4+0x2c2>
  406862:	42ac      	cmp	r4, r5
  406864:	d941      	bls.n	4068ea <__udivmoddi4+0x2c2>
  406866:	f1a9 0902 	sub.w	r9, r9, #2
  40686a:	441d      	add	r5, r3
  40686c:	1b2d      	subs	r5, r5, r4
  40686e:	fa1f fe8e 	uxth.w	lr, lr
  406872:	fbb5 f0fc 	udiv	r0, r5, ip
  406876:	fb0c 5510 	mls	r5, ip, r0, r5
  40687a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40687e:	fb00 f808 	mul.w	r8, r0, r8
  406882:	45a0      	cmp	r8, r4
  406884:	d907      	bls.n	406896 <__udivmoddi4+0x26e>
  406886:	18e4      	adds	r4, r4, r3
  406888:	f100 35ff 	add.w	r5, r0, #4294967295
  40688c:	d229      	bcs.n	4068e2 <__udivmoddi4+0x2ba>
  40688e:	45a0      	cmp	r8, r4
  406890:	d927      	bls.n	4068e2 <__udivmoddi4+0x2ba>
  406892:	3802      	subs	r0, #2
  406894:	441c      	add	r4, r3
  406896:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40689a:	eba4 0408 	sub.w	r4, r4, r8
  40689e:	fba0 8902 	umull	r8, r9, r0, r2
  4068a2:	454c      	cmp	r4, r9
  4068a4:	46c6      	mov	lr, r8
  4068a6:	464d      	mov	r5, r9
  4068a8:	d315      	bcc.n	4068d6 <__udivmoddi4+0x2ae>
  4068aa:	d012      	beq.n	4068d2 <__udivmoddi4+0x2aa>
  4068ac:	b156      	cbz	r6, 4068c4 <__udivmoddi4+0x29c>
  4068ae:	ebba 030e 	subs.w	r3, sl, lr
  4068b2:	eb64 0405 	sbc.w	r4, r4, r5
  4068b6:	fa04 f707 	lsl.w	r7, r4, r7
  4068ba:	40cb      	lsrs	r3, r1
  4068bc:	431f      	orrs	r7, r3
  4068be:	40cc      	lsrs	r4, r1
  4068c0:	6037      	str	r7, [r6, #0]
  4068c2:	6074      	str	r4, [r6, #4]
  4068c4:	2100      	movs	r1, #0
  4068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068ca:	4618      	mov	r0, r3
  4068cc:	e6f8      	b.n	4066c0 <__udivmoddi4+0x98>
  4068ce:	4690      	mov	r8, r2
  4068d0:	e6e0      	b.n	406694 <__udivmoddi4+0x6c>
  4068d2:	45c2      	cmp	sl, r8
  4068d4:	d2ea      	bcs.n	4068ac <__udivmoddi4+0x284>
  4068d6:	ebb8 0e02 	subs.w	lr, r8, r2
  4068da:	eb69 0503 	sbc.w	r5, r9, r3
  4068de:	3801      	subs	r0, #1
  4068e0:	e7e4      	b.n	4068ac <__udivmoddi4+0x284>
  4068e2:	4628      	mov	r0, r5
  4068e4:	e7d7      	b.n	406896 <__udivmoddi4+0x26e>
  4068e6:	4640      	mov	r0, r8
  4068e8:	e791      	b.n	40680e <__udivmoddi4+0x1e6>
  4068ea:	4681      	mov	r9, r0
  4068ec:	e7be      	b.n	40686c <__udivmoddi4+0x244>
  4068ee:	4601      	mov	r1, r0
  4068f0:	e778      	b.n	4067e4 <__udivmoddi4+0x1bc>
  4068f2:	3802      	subs	r0, #2
  4068f4:	443c      	add	r4, r7
  4068f6:	e745      	b.n	406784 <__udivmoddi4+0x15c>
  4068f8:	4608      	mov	r0, r1
  4068fa:	e708      	b.n	40670e <__udivmoddi4+0xe6>
  4068fc:	f1a8 0802 	sub.w	r8, r8, #2
  406900:	443d      	add	r5, r7
  406902:	e72b      	b.n	40675c <__udivmoddi4+0x134>

00406904 <__aeabi_idiv0>:
  406904:	4770      	bx	lr
  406906:	bf00      	nop
  406908:	304e4143 	.word	0x304e4143
  40690c:	73654d20 	.word	0x73654d20
  406910:	65676173 	.word	0x65676173
  406914:	6f747320 	.word	0x6f747320
  406918:	20646572 	.word	0x20646572
  40691c:	44206f74 	.word	0x44206f74
  406920:	63696465 	.word	0x63696465
  406924:	64657461 	.word	0x64657461
  406928:	20785220 	.word	0x20785220
  40692c:	66667542 	.word	0x66667542
  406930:	49207265 	.word	0x49207265
  406934:	7265746e 	.word	0x7265746e
  406938:	74707572 	.word	0x74707572
  40693c:	00000a0d 	.word	0x00000a0d
  406940:	304e4143 	.word	0x304e4143
  406944:	20785220 	.word	0x20785220
  406948:	4f464946 	.word	0x4f464946
  40694c:	4e203020 	.word	0x4e203020
  406950:	4d207765 	.word	0x4d207765
  406954:	61737365 	.word	0x61737365
  406958:	49206567 	.word	0x49206567
  40695c:	7265746e 	.word	0x7265746e
  406960:	74707572 	.word	0x74707572
  406964:	00000a0d 	.word	0x00000a0d
  406968:	304e4143 	.word	0x304e4143
  40696c:	20785220 	.word	0x20785220
  406970:	4f464946 	.word	0x4f464946
  406974:	4e203120 	.word	0x4e203120
  406978:	4d207765 	.word	0x4d207765
  40697c:	61737365 	.word	0x61737365
  406980:	49206567 	.word	0x49206567
  406984:	7265746e 	.word	0x7265746e
  406988:	74707572 	.word	0x74707572
  40698c:	00000a0d 	.word	0x00000a0d
  406990:	43200d0a 	.word	0x43200d0a
  406994:	20304e41 	.word	0x20304e41
  406998:	20737542 	.word	0x20737542
  40699c:	2066664f 	.word	0x2066664f
  4069a0:	74617453 	.word	0x74617453
  4069a4:	0d207375 	.word	0x0d207375
  4069a8:	0000000a 	.word	0x0000000a
  4069ac:	41430d0a 	.word	0x41430d0a
  4069b0:	4120304e 	.word	0x4120304e
  4069b4:	6f6e6b63 	.word	0x6f6e6b63
  4069b8:	64656c77 	.word	0x64656c77
  4069bc:	45206567 	.word	0x45206567
  4069c0:	726f7272 	.word	0x726f7272
  4069c4:	000a0d20 	.word	0x000a0d20
  4069c8:	41430d0a 	.word	0x41430d0a
  4069cc:	4620304e 	.word	0x4620304e
  4069d0:	616d726f 	.word	0x616d726f
  4069d4:	72452074 	.word	0x72452074
  4069d8:	20726f72 	.word	0x20726f72
  4069dc:	00000a0d 	.word	0x00000a0d
  4069e0:	314e4143 	.word	0x314e4143
  4069e4:	61725420 	.word	0x61725420
  4069e8:	696d736e 	.word	0x696d736e
  4069ec:	6f697373 	.word	0x6f697373
  4069f0:	6f43206e 	.word	0x6f43206e
  4069f4:	656c706d 	.word	0x656c706d
  4069f8:	20646574 	.word	0x20646574
  4069fc:	65746e49 	.word	0x65746e49
  406a00:	70757272 	.word	0x70757272
  406a04:	000a0d74 	.word	0x000a0d74
  406a08:	314e4143 	.word	0x314e4143
  406a0c:	61725420 	.word	0x61725420
  406a10:	696d736e 	.word	0x696d736e
  406a14:	6f697373 	.word	0x6f697373
  406a18:	6143206e 	.word	0x6143206e
  406a1c:	6c65636e 	.word	0x6c65636e
  406a20:	6974616c 	.word	0x6974616c
  406a24:	46206e6f 	.word	0x46206e6f
  406a28:	73696e69 	.word	0x73696e69
  406a2c:	20646568 	.word	0x20646568
  406a30:	65746e49 	.word	0x65746e49
  406a34:	70757272 	.word	0x70757272
  406a38:	0a0d2074 	.word	0x0a0d2074
  406a3c:	00000000 	.word	0x00000000
  406a40:	314e4143 	.word	0x314e4143
  406a44:	20785420 	.word	0x20785420
  406a48:	4f464946 	.word	0x4f464946
  406a4c:	706d4520 	.word	0x706d4520
  406a50:	49207974 	.word	0x49207974
  406a54:	7265746e 	.word	0x7265746e
  406a58:	74707572 	.word	0x74707572
  406a5c:	00000a0d 	.word	0x00000a0d
  406a60:	314e4143 	.word	0x314e4143
  406a64:	20785420 	.word	0x20785420
  406a68:	6e657645 	.word	0x6e657645
  406a6c:	49462074 	.word	0x49462074
  406a70:	4e204f46 	.word	0x4e204f46
  406a74:	45207765 	.word	0x45207765
  406a78:	7972746e 	.word	0x7972746e
  406a7c:	746e4920 	.word	0x746e4920
  406a80:	75727265 	.word	0x75727265
  406a84:	0d207470 	.word	0x0d207470
  406a88:	0000000a 	.word	0x0000000a
  406a8c:	314e4143 	.word	0x314e4143
  406a90:	20785420 	.word	0x20785420
  406a94:	6e657645 	.word	0x6e657645
  406a98:	49462074 	.word	0x49462074
  406a9c:	57204f46 	.word	0x57204f46
  406aa0:	72657461 	.word	0x72657461
  406aa4:	6b72616d 	.word	0x6b72616d
  406aa8:	61655220 	.word	0x61655220
  406aac:	64656863 	.word	0x64656863
  406ab0:	746e4920 	.word	0x746e4920
  406ab4:	75727265 	.word	0x75727265
  406ab8:	0a0d7470 	.word	0x0a0d7470
  406abc:	00000000 	.word	0x00000000
  406ac0:	314e4143 	.word	0x314e4143
  406ac4:	20785420 	.word	0x20785420
  406ac8:	6e657645 	.word	0x6e657645
  406acc:	49462074 	.word	0x49462074
  406ad0:	46204f46 	.word	0x46204f46
  406ad4:	206c6c75 	.word	0x206c6c75
  406ad8:	65746e49 	.word	0x65746e49
  406adc:	70757272 	.word	0x70757272
  406ae0:	000a0d74 	.word	0x000a0d74
  406ae4:	314e4143 	.word	0x314e4143
  406ae8:	20785420 	.word	0x20785420
  406aec:	6e657645 	.word	0x6e657645
  406af0:	49462074 	.word	0x49462074
  406af4:	45204f46 	.word	0x45204f46
  406af8:	656d656c 	.word	0x656d656c
  406afc:	4c20746e 	.word	0x4c20746e
  406b00:	2074736f 	.word	0x2074736f
  406b04:	65746e49 	.word	0x65746e49
  406b08:	70757272 	.word	0x70757272
  406b0c:	000a0d74 	.word	0x000a0d74
  406b10:	0001c200 	.word	0x0001c200
  406b14:	000000c0 	.word	0x000000c0
  406b18:	00000800 	.word	0x00000800
  406b1c:	00000000 	.word	0x00000000
  406b20:	5d69255b 	.word	0x5d69255b
  406b24:	6c6c255b 	.word	0x6c6c255b
  406b28:	00005d75 	.word	0x00005d75
  406b2c:	29582528 	.word	0x29582528
  406b30:	00000000 	.word	0x00000000
  406b34:	2578307c 	.word	0x2578307c
  406b38:	00005832 	.word	0x00005832
  406b3c:	000a0d7c 	.word	0x000a0d7c
  406b40:	5f5f5f5f 	.word	0x5f5f5f5f
  406b44:	5f5f5f5f 	.word	0x5f5f5f5f
  406b48:	5f5f5f5f 	.word	0x5f5f5f5f
  406b4c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b50:	5f5f5f5f 	.word	0x5f5f5f5f
  406b54:	5f5f5f5f 	.word	0x5f5f5f5f
  406b58:	52415453 	.word	0x52415453
  406b5c:	5f5f5f54 	.word	0x5f5f5f54
  406b60:	5f5f5f5f 	.word	0x5f5f5f5f
  406b64:	5f5f5f5f 	.word	0x5f5f5f5f
  406b68:	5f5f5f5f 	.word	0x5f5f5f5f
  406b6c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b70:	5f5f5f5f 	.word	0x5f5f5f5f
  406b74:	5f5f5f5f 	.word	0x5f5f5f5f
  406b78:	5f5f5f5f 	.word	0x5f5f5f5f
  406b7c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b80:	0a0d5f5f 	.word	0x0a0d5f5f
  406b84:	00000000 	.word	0x00000000
  406b88:	2d2d2d2d 	.word	0x2d2d2d2d
  406b8c:	2d2d2d2d 	.word	0x2d2d2d2d
  406b90:	2d2d2d2d 	.word	0x2d2d2d2d
  406b94:	2d2d2d2d 	.word	0x2d2d2d2d
  406b98:	2d2d2d2d 	.word	0x2d2d2d2d
  406b9c:	2d2d2d2d 	.word	0x2d2d2d2d
  406ba0:	2d2d2d2d 	.word	0x2d2d2d2d
  406ba4:	2d2d2d2d 	.word	0x2d2d2d2d
  406ba8:	2d69252d 	.word	0x2d69252d
  406bac:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb0:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb4:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb8:	2d2d2d2d 	.word	0x2d2d2d2d
  406bbc:	2d2d2d2d 	.word	0x2d2d2d2d
  406bc0:	2d2d2d2d 	.word	0x2d2d2d2d
  406bc4:	2d2d2d2d 	.word	0x2d2d2d2d
  406bc8:	0d2d2d2d 	.word	0x0d2d2d2d
  406bcc:	0000000a 	.word	0x0000000a
  406bd0:	5d69255b 	.word	0x5d69255b
  406bd4:	5d69255b 	.word	0x5d69255b
  406bd8:	00000a0d 	.word	0x00000a0d

00406bdc <_global_impure_ptr>:
  406bdc:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  406bec:	46454443 00000000 33323130 37363534     CDEF....01234567
  406bfc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406c0c:	0000296c                                l)..

00406c10 <blanks.7217>:
  406c10:	20202020 20202020 20202020 20202020                     

00406c20 <zeroes.7218>:
  406c20:	30303030 30303030 30303030 30303030     0000000000000000
  406c30:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406c40 <_ctype_>:
  406c40:	20202000 20202020 28282020 20282828     .         ((((( 
  406c50:	20202020 20202020 20202020 20202020                     
  406c60:	10108820 10101010 10101010 10101010      ...............
  406c70:	04040410 04040404 10040404 10101010     ................
  406c80:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406c90:	01010101 01010101 01010101 10101010     ................
  406ca0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406cb0:	02020202 02020202 02020202 10101010     ................
  406cc0:	00000020 00000000 00000000 00000000      ...............
	...

00406d44 <_init>:
  406d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d46:	bf00      	nop
  406d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d4a:	bc08      	pop	{r3}
  406d4c:	469e      	mov	lr, r3
  406d4e:	4770      	bx	lr

00406d50 <__init_array_start>:
  406d50:	00405175 	.word	0x00405175

00406d54 <__frame_dummy_init_array_entry>:
  406d54:	0040018d                                ..@.

00406d58 <_fini>:
  406d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d5a:	bf00      	nop
  406d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d5e:	bc08      	pop	{r3}
  406d60:	469e      	mov	lr, r3
  406d62:	4770      	bx	lr

00406d64 <__fini_array_start>:
  406d64:	00400169 	.word	0x00400169
