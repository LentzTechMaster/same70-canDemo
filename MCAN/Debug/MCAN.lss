
MCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d70  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406d70  00406d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00406d78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000870  204009c0  00407738  000209c0  2**3
                  ALLOC
  4 .stack        00002000  20401230  00407fa8  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20403230  00409fa8  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00018af4  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002c05  00000000  00000000  0003953b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007f00  00000000  00000000  0003c140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000da0  00000000  00000000  00044040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d08  00000000  00000000  00044de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021573  00000000  00000000  00045ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d14e  00000000  00000000  0006705b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096562  00000000  00000000  000741a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004734  00000000  00000000  0010a70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 32 40 20 f9 1d 40 00 a9 1e 40 00 a9 1e 40 00     02@ ..@...@...@.
  400010:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 1e 40 00 a9 1e 40 00 00 00 00 00 a9 1e 40 00     ..@...@.......@.
  40003c:	75 39 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     u9@...@...@...@.
  40004c:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  40005c:	a9 1e 40 00 a9 1e 40 00 00 00 00 00 15 15 40 00     ..@...@.......@.
  40006c:	2d 15 40 00 45 15 40 00 a9 1e 40 00 a9 1e 40 00     -.@.E.@...@...@.
  40007c:	a9 1e 40 00 5d 15 40 00 75 15 40 00 a9 1e 40 00     ..@.].@.u.@...@.
  40008c:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  40009c:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  4000ac:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  4000bc:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  4000cc:	65 2c 40 00 35 2e 40 00 75 2f 40 00 49 31 40 00     e,@.5.@.u/@.I1@.
  4000dc:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  4000ec:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  4000fc:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  40010c:	a9 1e 40 00 a9 1e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ......@...@...@.
  40012c:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  40013c:	a9 1e 40 00 a9 1e 40 00 a9 1e 40 00 a9 1e 40 00     ..@...@...@...@.
  40014c:	a9 1e 40 00 a9 1e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00406d78 	.word	0x00406d78

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406d78 	.word	0x00406d78
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00406d78 	.word	0x00406d78
  4001d0:	00000000 	.word	0x00000000

004001d4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	2b07      	cmp	r3, #7
  4001e0:	d831      	bhi.n	400246 <osc_enable+0x72>
  4001e2:	a201      	add	r2, pc, #4	; (adr r2, 4001e8 <osc_enable+0x14>)
  4001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e8:	00400245 	.word	0x00400245
  4001ec:	00400209 	.word	0x00400209
  4001f0:	00400211 	.word	0x00400211
  4001f4:	00400219 	.word	0x00400219
  4001f8:	00400221 	.word	0x00400221
  4001fc:	00400229 	.word	0x00400229
  400200:	00400231 	.word	0x00400231
  400204:	0040023b 	.word	0x0040023b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400208:	2000      	movs	r0, #0
  40020a:	4b11      	ldr	r3, [pc, #68]	; (400250 <osc_enable+0x7c>)
  40020c:	4798      	blx	r3
		break;
  40020e:	e01a      	b.n	400246 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400210:	2001      	movs	r0, #1
  400212:	4b0f      	ldr	r3, [pc, #60]	; (400250 <osc_enable+0x7c>)
  400214:	4798      	blx	r3
		break;
  400216:	e016      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400218:	2000      	movs	r0, #0
  40021a:	4b0e      	ldr	r3, [pc, #56]	; (400254 <osc_enable+0x80>)
  40021c:	4798      	blx	r3
		break;
  40021e:	e012      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400220:	2010      	movs	r0, #16
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <osc_enable+0x80>)
  400224:	4798      	blx	r3
		break;
  400226:	e00e      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400228:	2020      	movs	r0, #32
  40022a:	4b0a      	ldr	r3, [pc, #40]	; (400254 <osc_enable+0x80>)
  40022c:	4798      	blx	r3
		break;
  40022e:	e00a      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400230:	213e      	movs	r1, #62	; 0x3e
  400232:	2000      	movs	r0, #0
  400234:	4b08      	ldr	r3, [pc, #32]	; (400258 <osc_enable+0x84>)
  400236:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400238:	e005      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40023a:	213e      	movs	r1, #62	; 0x3e
  40023c:	2001      	movs	r0, #1
  40023e:	4b06      	ldr	r3, [pc, #24]	; (400258 <osc_enable+0x84>)
  400240:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400242:	e000      	b.n	400246 <osc_enable+0x72>
		break;
  400244:	bf00      	nop
	}
}
  400246:	bf00      	nop
  400248:	3708      	adds	r7, #8
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	0040168d 	.word	0x0040168d
  400254:	004016f9 	.word	0x004016f9
  400258:	00401769 	.word	0x00401769

0040025c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40025c:	b580      	push	{r7, lr}
  40025e:	b082      	sub	sp, #8
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b07      	cmp	r3, #7
  400268:	d826      	bhi.n	4002b8 <osc_is_ready+0x5c>
  40026a:	a201      	add	r2, pc, #4	; (adr r2, 400270 <osc_is_ready+0x14>)
  40026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400270:	00400291 	.word	0x00400291
  400274:	00400295 	.word	0x00400295
  400278:	00400295 	.word	0x00400295
  40027c:	004002a7 	.word	0x004002a7
  400280:	004002a7 	.word	0x004002a7
  400284:	004002a7 	.word	0x004002a7
  400288:	004002a7 	.word	0x004002a7
  40028c:	004002a7 	.word	0x004002a7
	case OSC_SLCK_32K_RC:
		return 1;
  400290:	2301      	movs	r3, #1
  400292:	e012      	b.n	4002ba <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <osc_is_ready+0x68>)
  400296:	4798      	blx	r3
  400298:	4603      	mov	r3, r0
  40029a:	2b00      	cmp	r3, #0
  40029c:	bf14      	ite	ne
  40029e:	2301      	movne	r3, #1
  4002a0:	2300      	moveq	r3, #0
  4002a2:	b2db      	uxtb	r3, r3
  4002a4:	e009      	b.n	4002ba <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <osc_is_ready+0x6c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	bf14      	ite	ne
  4002b0:	2301      	movne	r3, #1
  4002b2:	2300      	moveq	r3, #0
  4002b4:	b2db      	uxtb	r3, r3
  4002b6:	e000      	b.n	4002ba <osc_is_ready+0x5e>
	}

	return 0;
  4002b8:	2300      	movs	r3, #0
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	3708      	adds	r7, #8
  4002be:	46bd      	mov	sp, r7
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	004016c5 	.word	0x004016c5
  4002c8:	004017e1 	.word	0x004017e1

004002cc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d4:	687b      	ldr	r3, [r7, #4]
  4002d6:	2b07      	cmp	r3, #7
  4002d8:	d825      	bhi.n	400326 <osc_get_rate+0x5a>
  4002da:	a201      	add	r2, pc, #4	; (adr r2, 4002e0 <osc_get_rate+0x14>)
  4002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e0:	00400301 	.word	0x00400301
  4002e4:	00400307 	.word	0x00400307
  4002e8:	0040030d 	.word	0x0040030d
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400304:	e010      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030a:	e00d      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400310:	e00a      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x68>)
  400314:	e008      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x6c>)
  400318:	e006      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x70>)
  40031c:	e004      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <osc_get_rate+0x70>)
  400320:	e002      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400322:	4b06      	ldr	r3, [pc, #24]	; (40033c <osc_get_rate+0x70>)
  400324:	e000      	b.n	400328 <osc_get_rate+0x5c>
	}

	return 0;
  400326:	2300      	movs	r3, #0
}
  400328:	4618      	mov	r0, r3
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	003d0900 	.word	0x003d0900
  400338:	007a1200 	.word	0x007a1200
  40033c:	00b71b00 	.word	0x00b71b00

00400340 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400340:	b580      	push	{r7, lr}
  400342:	b082      	sub	sp, #8
  400344:	af00      	add	r7, sp, #0
  400346:	4603      	mov	r3, r0
  400348:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40034a:	bf00      	nop
  40034c:	79fb      	ldrb	r3, [r7, #7]
  40034e:	4618      	mov	r0, r3
  400350:	4b05      	ldr	r3, [pc, #20]	; (400368 <osc_wait_ready+0x28>)
  400352:	4798      	blx	r3
  400354:	4603      	mov	r3, r0
  400356:	f083 0301 	eor.w	r3, r3, #1
  40035a:	b2db      	uxtb	r3, r3
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f5      	bne.n	40034c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	0040025d 	.word	0x0040025d

0040036c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40036c:	b580      	push	{r7, lr}
  40036e:	b086      	sub	sp, #24
  400370:	af00      	add	r7, sp, #0
  400372:	60f8      	str	r0, [r7, #12]
  400374:	607a      	str	r2, [r7, #4]
  400376:	603b      	str	r3, [r7, #0]
  400378:	460b      	mov	r3, r1
  40037a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40037c:	687b      	ldr	r3, [r7, #4]
  40037e:	2b00      	cmp	r3, #0
  400380:	d107      	bne.n	400392 <pll_config_init+0x26>
  400382:	683b      	ldr	r3, [r7, #0]
  400384:	2b00      	cmp	r3, #0
  400386:	d104      	bne.n	400392 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400388:	68fb      	ldr	r3, [r7, #12]
  40038a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40038e:	601a      	str	r2, [r3, #0]
  400390:	e019      	b.n	4003c6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400392:	7afb      	ldrb	r3, [r7, #11]
  400394:	4618      	mov	r0, r3
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <pll_config_init+0x64>)
  400398:	4798      	blx	r3
  40039a:	4602      	mov	r2, r0
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	fbb2 f3f3 	udiv	r3, r2, r3
  4003a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4003a4:	697b      	ldr	r3, [r7, #20]
  4003a6:	683a      	ldr	r2, [r7, #0]
  4003a8:	fb02 f303 	mul.w	r3, r2, r3
  4003ac:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	3b01      	subs	r3, #1
  4003b2:	041a      	lsls	r2, r3, #16
  4003b4:	4b07      	ldr	r3, [pc, #28]	; (4003d4 <pll_config_init+0x68>)
  4003b6:	4013      	ands	r3, r2
  4003b8:	687a      	ldr	r2, [r7, #4]
  4003ba:	b2d2      	uxtb	r2, r2
  4003bc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4003be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003c2:	68fb      	ldr	r3, [r7, #12]
  4003c4:	601a      	str	r2, [r3, #0]
	}
}
  4003c6:	bf00      	nop
  4003c8:	3718      	adds	r7, #24
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004002cd 	.word	0x004002cd
  4003d4:	07ff0000 	.word	0x07ff0000

004003d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
  4003e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d108      	bne.n	4003fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <pll_enable+0x38>)
  4003ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ec:	4a09      	ldr	r2, [pc, #36]	; (400414 <pll_enable+0x3c>)
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003f8:	e005      	b.n	400406 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003fa:	4a06      	ldr	r2, [pc, #24]	; (400414 <pll_enable+0x3c>)
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	681b      	ldr	r3, [r3, #0]
  400400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400404:	61d3      	str	r3, [r2, #28]
}
  400406:	bf00      	nop
  400408:	3708      	adds	r7, #8
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004017fd 	.word	0x004017fd
  400414:	400e0600 	.word	0x400e0600

00400418 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400418:	b580      	push	{r7, lr}
  40041a:	b082      	sub	sp, #8
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	2b00      	cmp	r3, #0
  400424:	d103      	bne.n	40042e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <pll_is_locked+0x24>)
  400428:	4798      	blx	r3
  40042a:	4603      	mov	r3, r0
  40042c:	e002      	b.n	400434 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <pll_is_locked+0x28>)
  400430:	4798      	blx	r3
  400432:	4603      	mov	r3, r0
	}
}
  400434:	4618      	mov	r0, r3
  400436:	3708      	adds	r7, #8
  400438:	46bd      	mov	sp, r7
  40043a:	bd80      	pop	{r7, pc}
  40043c:	00401819 	.word	0x00401819
  400440:	0040185d 	.word	0x0040185d

00400444 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	4603      	mov	r3, r0
  40044c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40044e:	79fb      	ldrb	r3, [r7, #7]
  400450:	3b03      	subs	r3, #3
  400452:	2b04      	cmp	r3, #4
  400454:	d808      	bhi.n	400468 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4618      	mov	r0, r3
  40045a:	4b06      	ldr	r3, [pc, #24]	; (400474 <pll_enable_source+0x30>)
  40045c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4618      	mov	r0, r3
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <pll_enable_source+0x34>)
  400464:	4798      	blx	r3
		break;
  400466:	e000      	b.n	40046a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400468:	bf00      	nop
	}
}
  40046a:	bf00      	nop
  40046c:	3708      	adds	r7, #8
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	004001d5 	.word	0x004001d5
  400478:	00400341 	.word	0x00400341

0040047c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	b082      	sub	sp, #8
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400484:	bf00      	nop
  400486:	6878      	ldr	r0, [r7, #4]
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <pll_wait_for_lock+0x20>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d0f9      	beq.n	400486 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400492:	2300      	movs	r3, #0
}
  400494:	4618      	mov	r0, r3
  400496:	3708      	adds	r7, #8
  400498:	46bd      	mov	sp, r7
  40049a:	bd80      	pop	{r7, pc}
  40049c:	00400419 	.word	0x00400419

004004a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004a4:	2006      	movs	r0, #6
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <sysclk_get_main_hz+0x1c>)
  4004a8:	4798      	blx	r3
  4004aa:	4602      	mov	r2, r0
  4004ac:	4613      	mov	r3, r2
  4004ae:	009b      	lsls	r3, r3, #2
  4004b0:	4413      	add	r3, r2
  4004b2:	009a      	lsls	r2, r3, #2
  4004b4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd80      	pop	{r7, pc}
  4004ba:	bf00      	nop
  4004bc:	004002cd 	.word	0x004002cd

004004c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <sysclk_get_cpu_hz+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004ca:	4618      	mov	r0, r3
  4004cc:	bd80      	pop	{r7, pc}
  4004ce:	bf00      	nop
  4004d0:	004004a1 	.word	0x004004a1

004004d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d4:	b590      	push	{r4, r7, lr}
  4004d6:	b083      	sub	sp, #12
  4004d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4813      	ldr	r0, [pc, #76]	; (400528 <sysclk_init+0x54>)
  4004dc:	4b13      	ldr	r3, [pc, #76]	; (40052c <sysclk_init+0x58>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <sysclk_init+0x5c>)
  4004e4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004e6:	1d38      	adds	r0, r7, #4
  4004e8:	2319      	movs	r3, #25
  4004ea:	2201      	movs	r2, #1
  4004ec:	2106      	movs	r1, #6
  4004ee:	4c11      	ldr	r4, [pc, #68]	; (400534 <sysclk_init+0x60>)
  4004f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004f2:	1d3b      	adds	r3, r7, #4
  4004f4:	2100      	movs	r1, #0
  4004f6:	4618      	mov	r0, r3
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <sysclk_init+0x64>)
  4004fa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0f      	ldr	r3, [pc, #60]	; (40053c <sysclk_init+0x68>)
  400500:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <sysclk_init+0x6c>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2000      	movs	r0, #0
  40050a:	4b0e      	ldr	r3, [pc, #56]	; (400544 <sysclk_init+0x70>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <sysclk_init+0x74>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <sysclk_init+0x78>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	085b      	lsrs	r3, r3, #1
  40051a:	4618      	mov	r0, r3
  40051c:	4b03      	ldr	r3, [pc, #12]	; (40052c <sysclk_init+0x58>)
  40051e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400520:	bf00      	nop
  400522:	370c      	adds	r7, #12
  400524:	46bd      	mov	sp, r7
  400526:	bd90      	pop	{r4, r7, pc}
  400528:	08f0d180 	.word	0x08f0d180
  40052c:	00402019 	.word	0x00402019
  400530:	00400445 	.word	0x00400445
  400534:	0040036d 	.word	0x0040036d
  400538:	004003d9 	.word	0x004003d9
  40053c:	0040047d 	.word	0x0040047d
  400540:	0040158d 	.word	0x0040158d
  400544:	00401609 	.word	0x00401609
  400548:	00401eb1 	.word	0x00401eb1
  40054c:	004004c1 	.word	0x004004c1

00400550 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400550:	b580      	push	{r7, lr}
  400552:	b082      	sub	sp, #8
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400558:	6878      	ldr	r0, [r7, #4]
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <sysclk_enable_peripheral_clock+0x18>)
  40055c:	4798      	blx	r3
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	00401879 	.word	0x00401879

0040056c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400570:	200a      	movs	r0, #10
  400572:	4b08      	ldr	r3, [pc, #32]	; (400594 <ioport_init+0x28>)
  400574:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400576:	200b      	movs	r0, #11
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <ioport_init+0x28>)
  40057a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40057c:	200c      	movs	r0, #12
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <ioport_init+0x28>)
  400580:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400582:	2010      	movs	r0, #16
  400584:	4b03      	ldr	r3, [pc, #12]	; (400594 <ioport_init+0x28>)
  400586:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400588:	2011      	movs	r0, #17
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <ioport_init+0x28>)
  40058c:	4798      	blx	r3
	arch_ioport_init();
}
  40058e:	bf00      	nop
  400590:	bd80      	pop	{r7, pc}
  400592:	bf00      	nop
  400594:	00400551 	.word	0x00400551

00400598 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400598:	b480      	push	{r7}
  40059a:	b089      	sub	sp, #36	; 0x24
  40059c:	af00      	add	r7, sp, #0
  40059e:	6078      	str	r0, [r7, #4]
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	61fb      	str	r3, [r7, #28]
  4005a4:	69fb      	ldr	r3, [r7, #28]
  4005a6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4005a8:	69bb      	ldr	r3, [r7, #24]
  4005aa:	095a      	lsrs	r2, r3, #5
  4005ac:	69fb      	ldr	r3, [r7, #28]
  4005ae:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4005b0:	697b      	ldr	r3, [r7, #20]
  4005b2:	f003 031f 	and.w	r3, r3, #31
  4005b6:	2101      	movs	r1, #1
  4005b8:	fa01 f303 	lsl.w	r3, r1, r3
  4005bc:	613a      	str	r2, [r7, #16]
  4005be:	60fb      	str	r3, [r7, #12]
  4005c0:	693b      	ldr	r3, [r7, #16]
  4005c2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <ioport_disable_pin+0x48>)
  4005c8:	4413      	add	r3, r2
  4005ca:	025b      	lsls	r3, r3, #9
  4005cc:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005ce:	68fb      	ldr	r3, [r7, #12]
  4005d0:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4005d2:	bf00      	nop
  4005d4:	3724      	adds	r7, #36	; 0x24
  4005d6:	46bd      	mov	sp, r7
  4005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	00200707 	.word	0x00200707

004005e4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b08d      	sub	sp, #52	; 0x34
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
  4005ec:	6039      	str	r1, [r7, #0]
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4005f2:	683b      	ldr	r3, [r7, #0]
  4005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  4005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005f8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005fc:	095a      	lsrs	r2, r3, #5
  4005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400600:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400602:	6a3b      	ldr	r3, [r7, #32]
  400604:	f003 031f 	and.w	r3, r3, #31
  400608:	2101      	movs	r1, #1
  40060a:	fa01 f303 	lsl.w	r3, r1, r3
  40060e:	61fa      	str	r2, [r7, #28]
  400610:	61bb      	str	r3, [r7, #24]
  400612:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400614:	617b      	str	r3, [r7, #20]
  400616:	69fb      	ldr	r3, [r7, #28]
  400618:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40061a:	693a      	ldr	r2, [r7, #16]
  40061c:	4b37      	ldr	r3, [pc, #220]	; (4006fc <ioport_set_pin_mode+0x118>)
  40061e:	4413      	add	r3, r2
  400620:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400622:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400624:	697b      	ldr	r3, [r7, #20]
  400626:	f003 0308 	and.w	r3, r3, #8
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	69ba      	ldr	r2, [r7, #24]
  400632:	665a      	str	r2, [r3, #100]	; 0x64
  400634:	e002      	b.n	40063c <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	69ba      	ldr	r2, [r7, #24]
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	f003 0310 	and.w	r3, r3, #16
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	69ba      	ldr	r2, [r7, #24]
  40064a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40064e:	e003      	b.n	400658 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	69ba      	ldr	r2, [r7, #24]
  400654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400658:	697b      	ldr	r3, [r7, #20]
  40065a:	f003 0320 	and.w	r3, r3, #32
  40065e:	2b00      	cmp	r3, #0
  400660:	d003      	beq.n	40066a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	69ba      	ldr	r2, [r7, #24]
  400666:	651a      	str	r2, [r3, #80]	; 0x50
  400668:	e002      	b.n	400670 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	69ba      	ldr	r2, [r7, #24]
  40066e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400670:	697b      	ldr	r3, [r7, #20]
  400672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400676:	2b00      	cmp	r3, #0
  400678:	d003      	beq.n	400682 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	69ba      	ldr	r2, [r7, #24]
  40067e:	621a      	str	r2, [r3, #32]
  400680:	e002      	b.n	400688 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	69ba      	ldr	r2, [r7, #24]
  400686:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400688:	697b      	ldr	r3, [r7, #20]
  40068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40068e:	2b00      	cmp	r3, #0
  400690:	d004      	beq.n	40069c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400692:	68fb      	ldr	r3, [r7, #12]
  400694:	69ba      	ldr	r2, [r7, #24]
  400696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40069a:	e003      	b.n	4006a4 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	69ba      	ldr	r2, [r7, #24]
  4006a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4006a4:	697b      	ldr	r3, [r7, #20]
  4006a6:	f003 0301 	and.w	r3, r3, #1
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d006      	beq.n	4006bc <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b2:	69bb      	ldr	r3, [r7, #24]
  4006b4:	431a      	orrs	r2, r3
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	671a      	str	r2, [r3, #112]	; 0x70
  4006ba:	e006      	b.n	4006ca <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006bc:	68fb      	ldr	r3, [r7, #12]
  4006be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	43db      	mvns	r3, r3
  4006c4:	401a      	ands	r2, r3
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4006ca:	697b      	ldr	r3, [r7, #20]
  4006cc:	f003 0302 	and.w	r3, r3, #2
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d006      	beq.n	4006e2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006d8:	69bb      	ldr	r3, [r7, #24]
  4006da:	431a      	orrs	r2, r3
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4006e0:	e006      	b.n	4006f0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e6:	69bb      	ldr	r3, [r7, #24]
  4006e8:	43db      	mvns	r3, r3
  4006ea:	401a      	ands	r2, r3
  4006ec:	68fb      	ldr	r3, [r7, #12]
  4006ee:	675a      	str	r2, [r3, #116]	; 0x74
  4006f0:	bf00      	nop
  4006f2:	3734      	adds	r7, #52	; 0x34
  4006f4:	46bd      	mov	sp, r7
  4006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fa:	4770      	bx	lr
  4006fc:	00200707 	.word	0x00200707

00400700 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400700:	b480      	push	{r7}
  400702:	b08d      	sub	sp, #52	; 0x34
  400704:	af00      	add	r7, sp, #0
  400706:	6078      	str	r0, [r7, #4]
  400708:	460b      	mov	r3, r1
  40070a:	70fb      	strb	r3, [r7, #3]
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400710:	78fb      	ldrb	r3, [r7, #3]
  400712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400718:	627b      	str	r3, [r7, #36]	; 0x24
  40071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40071c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40071e:	6a3b      	ldr	r3, [r7, #32]
  400720:	095b      	lsrs	r3, r3, #5
  400722:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400724:	69fa      	ldr	r2, [r7, #28]
  400726:	4b17      	ldr	r3, [pc, #92]	; (400784 <ioport_set_pin_dir+0x84>)
  400728:	4413      	add	r3, r2
  40072a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40072c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40072e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400732:	2b01      	cmp	r3, #1
  400734:	d109      	bne.n	40074a <ioport_set_pin_dir+0x4a>
  400736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400738:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40073a:	697b      	ldr	r3, [r7, #20]
  40073c:	f003 031f 	and.w	r3, r3, #31
  400740:	2201      	movs	r2, #1
  400742:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400744:	69bb      	ldr	r3, [r7, #24]
  400746:	611a      	str	r2, [r3, #16]
  400748:	e00c      	b.n	400764 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40074a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40074e:	2b00      	cmp	r3, #0
  400750:	d108      	bne.n	400764 <ioport_set_pin_dir+0x64>
  400752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400754:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400756:	693b      	ldr	r3, [r7, #16]
  400758:	f003 031f 	and.w	r3, r3, #31
  40075c:	2201      	movs	r2, #1
  40075e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400760:	69bb      	ldr	r3, [r7, #24]
  400762:	615a      	str	r2, [r3, #20]
  400764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400766:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400768:	68fb      	ldr	r3, [r7, #12]
  40076a:	f003 031f 	and.w	r3, r3, #31
  40076e:	2201      	movs	r2, #1
  400770:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400772:	69bb      	ldr	r3, [r7, #24]
  400774:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400778:	bf00      	nop
  40077a:	3734      	adds	r7, #52	; 0x34
  40077c:	46bd      	mov	sp, r7
  40077e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400782:	4770      	bx	lr
  400784:	00200707 	.word	0x00200707

00400788 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400788:	b480      	push	{r7}
  40078a:	b08b      	sub	sp, #44	; 0x2c
  40078c:	af00      	add	r7, sp, #0
  40078e:	6078      	str	r0, [r7, #4]
  400790:	460b      	mov	r3, r1
  400792:	70fb      	strb	r3, [r7, #3]
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	627b      	str	r3, [r7, #36]	; 0x24
  400798:	78fb      	ldrb	r3, [r7, #3]
  40079a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a0:	61fb      	str	r3, [r7, #28]
  4007a2:	69fb      	ldr	r3, [r7, #28]
  4007a4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4007a6:	69bb      	ldr	r3, [r7, #24]
  4007a8:	095b      	lsrs	r3, r3, #5
  4007aa:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007ac:	697a      	ldr	r2, [r7, #20]
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <ioport_set_pin_level+0x68>)
  4007b0:	4413      	add	r3, r2
  4007b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007b4:	613b      	str	r3, [r7, #16]

	if (level) {
  4007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d009      	beq.n	4007d2 <ioport_set_pin_level+0x4a>
  4007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	f003 031f 	and.w	r3, r3, #31
  4007c8:	2201      	movs	r2, #1
  4007ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007cc:	693b      	ldr	r3, [r7, #16]
  4007ce:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4007d0:	e008      	b.n	4007e4 <ioport_set_pin_level+0x5c>
  4007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4007d6:	68bb      	ldr	r3, [r7, #8]
  4007d8:	f003 031f 	and.w	r3, r3, #31
  4007dc:	2201      	movs	r2, #1
  4007de:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007e0:	693b      	ldr	r3, [r7, #16]
  4007e2:	635a      	str	r2, [r3, #52]	; 0x34
  4007e4:	bf00      	nop
  4007e6:	372c      	adds	r7, #44	; 0x2c
  4007e8:	46bd      	mov	sp, r7
  4007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ee:	4770      	bx	lr
  4007f0:	00200707 	.word	0x00200707

004007f4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4007f4:	b480      	push	{r7}
  4007f6:	b08d      	sub	sp, #52	; 0x34
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	6078      	str	r0, [r7, #4]
  4007fc:	460b      	mov	r3, r1
  4007fe:	70fb      	strb	r3, [r7, #3]
  400800:	687b      	ldr	r3, [r7, #4]
  400802:	62fb      	str	r3, [r7, #44]	; 0x2c
  400804:	78fb      	ldrb	r3, [r7, #3]
  400806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40080c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400810:	095a      	lsrs	r2, r3, #5
  400812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400814:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400816:	6a3b      	ldr	r3, [r7, #32]
  400818:	f003 031f 	and.w	r3, r3, #31
  40081c:	2101      	movs	r1, #1
  40081e:	fa01 f303 	lsl.w	r3, r1, r3
  400822:	61fa      	str	r2, [r7, #28]
  400824:	61bb      	str	r3, [r7, #24]
  400826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40082a:	75fb      	strb	r3, [r7, #23]
  40082c:	69fb      	ldr	r3, [r7, #28]
  40082e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400830:	693a      	ldr	r2, [r7, #16]
  400832:	4b23      	ldr	r3, [pc, #140]	; (4008c0 <ioport_set_pin_sense_mode+0xcc>)
  400834:	4413      	add	r3, r2
  400836:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400838:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40083a:	7dfb      	ldrb	r3, [r7, #23]
  40083c:	3b01      	subs	r3, #1
  40083e:	2b03      	cmp	r3, #3
  400840:	d82e      	bhi.n	4008a0 <ioport_set_pin_sense_mode+0xac>
  400842:	a201      	add	r2, pc, #4	; (adr r2, 400848 <ioport_set_pin_sense_mode+0x54>)
  400844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400848:	0040087d 	.word	0x0040087d
  40084c:	0040088f 	.word	0x0040088f
  400850:	00400859 	.word	0x00400859
  400854:	0040086b 	.word	0x0040086b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400858:	68fb      	ldr	r3, [r7, #12]
  40085a:	69ba      	ldr	r2, [r7, #24]
  40085c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	69ba      	ldr	r2, [r7, #24]
  400864:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400868:	e01f      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	69ba      	ldr	r2, [r7, #24]
  40086e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	69ba      	ldr	r2, [r7, #24]
  400876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087a:	e016      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	69ba      	ldr	r2, [r7, #24]
  400880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	69ba      	ldr	r2, [r7, #24]
  400888:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40088c:	e00d      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	69ba      	ldr	r2, [r7, #24]
  400892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	69ba      	ldr	r2, [r7, #24]
  40089a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40089e:	e004      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4008a0:	68fb      	ldr	r3, [r7, #12]
  4008a2:	69ba      	ldr	r2, [r7, #24]
  4008a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4008a8:	e003      	b.n	4008b2 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	69ba      	ldr	r2, [r7, #24]
  4008ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4008b2:	bf00      	nop
  4008b4:	3734      	adds	r7, #52	; 0x34
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	00200707 	.word	0x00200707

004008c4 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4008c4:	b480      	push	{r7}
  4008c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008cc:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4008d0:	4a0c      	ldr	r2, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d2:	4b0c      	ldr	r3, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4008d8:	f023 0301 	bic.w	r3, r3, #1
  4008dc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008e0:	4a08      	ldr	r2, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4008e8:	f023 0301 	bic.w	r3, r3, #1
  4008ec:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  4008f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008f4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4008f8:	bf00      	nop
  4008fa:	46bd      	mov	sp, r7
  4008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	e000ed00 	.word	0xe000ed00

00400908 <board_init>:
#endif

void board_init(void)
{
  400908:	b580      	push	{r7, lr}
  40090a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40090c:	4b2e      	ldr	r3, [pc, #184]	; (4009c8 <board_init+0xc0>)
  40090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400912:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400914:	4b2d      	ldr	r3, [pc, #180]	; (4009cc <board_init+0xc4>)
  400916:	4a2e      	ldr	r2, [pc, #184]	; (4009d0 <board_init+0xc8>)
  400918:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40091a:	4b2c      	ldr	r3, [pc, #176]	; (4009cc <board_init+0xc4>)
  40091c:	4a2d      	ldr	r2, [pc, #180]	; (4009d4 <board_init+0xcc>)
  40091e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400920:	4b2d      	ldr	r3, [pc, #180]	; (4009d8 <board_init+0xd0>)
  400922:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400924:	4b2d      	ldr	r3, [pc, #180]	; (4009dc <board_init+0xd4>)
  400926:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400928:	2101      	movs	r1, #1
  40092a:	2048      	movs	r0, #72	; 0x48
  40092c:	4b2c      	ldr	r3, [pc, #176]	; (4009e0 <board_init+0xd8>)
  40092e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400930:	2101      	movs	r1, #1
  400932:	2048      	movs	r0, #72	; 0x48
  400934:	4b2b      	ldr	r3, [pc, #172]	; (4009e4 <board_init+0xdc>)
  400936:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400938:	2100      	movs	r1, #0
  40093a:	200b      	movs	r0, #11
  40093c:	4b28      	ldr	r3, [pc, #160]	; (4009e0 <board_init+0xd8>)
  40093e:	4798      	blx	r3
  400940:	2188      	movs	r1, #136	; 0x88
  400942:	200b      	movs	r0, #11
  400944:	4b28      	ldr	r3, [pc, #160]	; (4009e8 <board_init+0xe0>)
  400946:	4798      	blx	r3
  400948:	2102      	movs	r1, #2
  40094a:	200b      	movs	r0, #11
  40094c:	4b27      	ldr	r3, [pc, #156]	; (4009ec <board_init+0xe4>)
  40094e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400950:	2100      	movs	r1, #0
  400952:	2015      	movs	r0, #21
  400954:	4b24      	ldr	r3, [pc, #144]	; (4009e8 <board_init+0xe0>)
  400956:	4798      	blx	r3
  400958:	2015      	movs	r0, #21
  40095a:	4b25      	ldr	r3, [pc, #148]	; (4009f0 <board_init+0xe8>)
  40095c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40095e:	4a25      	ldr	r2, [pc, #148]	; (4009f4 <board_init+0xec>)
  400960:	4b24      	ldr	r3, [pc, #144]	; (4009f4 <board_init+0xec>)
  400962:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400966:	f043 0310 	orr.w	r3, r3, #16
  40096a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  40096e:	2103      	movs	r1, #3
  400970:	2024      	movs	r0, #36	; 0x24
  400972:	4b1d      	ldr	r3, [pc, #116]	; (4009e8 <board_init+0xe0>)
  400974:	4798      	blx	r3
  400976:	2024      	movs	r0, #36	; 0x24
  400978:	4b1d      	ldr	r3, [pc, #116]	; (4009f0 <board_init+0xe8>)
  40097a:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	ioport_set_pin_peripheral_mode(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
  40097c:	2100      	movs	r1, #0
  40097e:	2023      	movs	r0, #35	; 0x23
  400980:	4b19      	ldr	r3, [pc, #100]	; (4009e8 <board_init+0xe0>)
  400982:	4798      	blx	r3
  400984:	2023      	movs	r0, #35	; 0x23
  400986:	4b1a      	ldr	r3, [pc, #104]	; (4009f0 <board_init+0xe8>)
  400988:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
  40098a:	2100      	movs	r1, #0
  40098c:	2022      	movs	r0, #34	; 0x22
  40098e:	4b16      	ldr	r3, [pc, #88]	; (4009e8 <board_init+0xe0>)
  400990:	4798      	blx	r3
  400992:	2022      	movs	r0, #34	; 0x22
  400994:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <board_init+0xe8>)
  400996:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN0_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  400998:	2101      	movs	r1, #1
  40099a:	2080      	movs	r0, #128	; 0x80
  40099c:	4b10      	ldr	r3, [pc, #64]	; (4009e0 <board_init+0xd8>)
  40099e:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN0_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  4009a0:	2101      	movs	r1, #1
  4009a2:	2081      	movs	r0, #129	; 0x81
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <board_init+0xd8>)
  4009a6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  4009a8:	2102      	movs	r1, #2
  4009aa:	204c      	movs	r0, #76	; 0x4c
  4009ac:	4b0e      	ldr	r3, [pc, #56]	; (4009e8 <board_init+0xe0>)
  4009ae:	4798      	blx	r3
  4009b0:	204c      	movs	r0, #76	; 0x4c
  4009b2:	4b0f      	ldr	r3, [pc, #60]	; (4009f0 <board_init+0xe8>)
  4009b4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  4009b6:	2102      	movs	r1, #2
  4009b8:	204e      	movs	r0, #78	; 0x4e
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <board_init+0xe0>)
  4009bc:	4798      	blx	r3
  4009be:	204e      	movs	r0, #78	; 0x4e
  4009c0:	4b0b      	ldr	r3, [pc, #44]	; (4009f0 <board_init+0xe8>)
  4009c2:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  4009c4:	bf00      	nop
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	400e1850 	.word	0x400e1850
  4009cc:	400e0c00 	.word	0x400e0c00
  4009d0:	5a00080c 	.word	0x5a00080c
  4009d4:	5a00070c 	.word	0x5a00070c
  4009d8:	004008c5 	.word	0x004008c5
  4009dc:	0040056d 	.word	0x0040056d
  4009e0:	00400701 	.word	0x00400701
  4009e4:	00400789 	.word	0x00400789
  4009e8:	004005e5 	.word	0x004005e5
  4009ec:	004007f5 	.word	0x004007f5
  4009f0:	00400599 	.word	0x00400599
  4009f4:	40088000 	.word	0x40088000

004009f8 <osc_get_rate>:
{
  4009f8:	b480      	push	{r7}
  4009fa:	b083      	sub	sp, #12
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a00:	687b      	ldr	r3, [r7, #4]
  400a02:	2b07      	cmp	r3, #7
  400a04:	d825      	bhi.n	400a52 <osc_get_rate+0x5a>
  400a06:	a201      	add	r2, pc, #4	; (adr r2, 400a0c <osc_get_rate+0x14>)
  400a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a0c:	00400a2d 	.word	0x00400a2d
  400a10:	00400a33 	.word	0x00400a33
  400a14:	00400a39 	.word	0x00400a39
  400a18:	00400a3f 	.word	0x00400a3f
  400a1c:	00400a43 	.word	0x00400a43
  400a20:	00400a47 	.word	0x00400a47
  400a24:	00400a4b 	.word	0x00400a4b
  400a28:	00400a4f 	.word	0x00400a4f
		return OSC_SLCK_32K_RC_HZ;
  400a2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400a30:	e010      	b.n	400a54 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a36:	e00d      	b.n	400a54 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400a3c:	e00a      	b.n	400a54 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400a3e:	4b08      	ldr	r3, [pc, #32]	; (400a60 <osc_get_rate+0x68>)
  400a40:	e008      	b.n	400a54 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400a42:	4b08      	ldr	r3, [pc, #32]	; (400a64 <osc_get_rate+0x6c>)
  400a44:	e006      	b.n	400a54 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400a46:	4b08      	ldr	r3, [pc, #32]	; (400a68 <osc_get_rate+0x70>)
  400a48:	e004      	b.n	400a54 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400a4a:	4b07      	ldr	r3, [pc, #28]	; (400a68 <osc_get_rate+0x70>)
  400a4c:	e002      	b.n	400a54 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400a4e:	4b06      	ldr	r3, [pc, #24]	; (400a68 <osc_get_rate+0x70>)
  400a50:	e000      	b.n	400a54 <osc_get_rate+0x5c>
	return 0;
  400a52:	2300      	movs	r3, #0
}
  400a54:	4618      	mov	r0, r3
  400a56:	370c      	adds	r7, #12
  400a58:	46bd      	mov	sp, r7
  400a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a5e:	4770      	bx	lr
  400a60:	003d0900 	.word	0x003d0900
  400a64:	007a1200 	.word	0x007a1200
  400a68:	00b71b00 	.word	0x00b71b00

00400a6c <sysclk_get_main_hz>:
{
  400a6c:	b580      	push	{r7, lr}
  400a6e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400a70:	2006      	movs	r0, #6
  400a72:	4b05      	ldr	r3, [pc, #20]	; (400a88 <sysclk_get_main_hz+0x1c>)
  400a74:	4798      	blx	r3
  400a76:	4602      	mov	r2, r0
  400a78:	4613      	mov	r3, r2
  400a7a:	009b      	lsls	r3, r3, #2
  400a7c:	4413      	add	r3, r2
  400a7e:	009a      	lsls	r2, r3, #2
  400a80:	4413      	add	r3, r2
}
  400a82:	4618      	mov	r0, r3
  400a84:	bd80      	pop	{r7, pc}
  400a86:	bf00      	nop
  400a88:	004009f9 	.word	0x004009f9

00400a8c <genclk_get_frequency_hz>:
}

//! \name Retrieves the current rate in Hz of the Programmable Clock Source
//@{
static inline uint32_t genclk_get_frequency_hz(uint32_t ul_id)
{
  400a8c:	b580      	push	{r7, lr}
  400a8e:	b086      	sub	sp, #24
  400a90:	af00      	add	r7, sp, #0
  400a92:	6078      	str	r0, [r7, #4]
	uint32_t pck_source,clock_config;
	uint32_t pck_freq = 0;
  400a94:	2300      	movs	r3, #0
  400a96:	617b      	str	r3, [r7, #20]
	pck_source = (PMC->PMC_PCK[ul_id] & PMC_PCK_CSS_Msk) >> PMC_PCK_CSS_Pos;
  400a98:	4a3e      	ldr	r2, [pc, #248]	; (400b94 <genclk_get_frequency_hz+0x108>)
  400a9a:	687b      	ldr	r3, [r7, #4]
  400a9c:	3310      	adds	r3, #16
  400a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400aa2:	f003 0307 	and.w	r3, r3, #7
  400aa6:	613b      	str	r3, [r7, #16]
	switch(pck_source)
  400aa8:	693b      	ldr	r3, [r7, #16]
  400aaa:	2b04      	cmp	r3, #4
  400aac:	d85e      	bhi.n	400b6c <genclk_get_frequency_hz+0xe0>
  400aae:	a201      	add	r2, pc, #4	; (adr r2, 400ab4 <genclk_get_frequency_hz+0x28>)
  400ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400ab4:	00400ac9 	.word	0x00400ac9
  400ab8:	00400ae3 	.word	0x00400ae3
  400abc:	00400ae3 	.word	0x00400ae3
  400ac0:	00400b51 	.word	0x00400b51
  400ac4:	00400b65 	.word	0x00400b65
	{
		case PMC_PCK_CSS_SLOW_CLK:
			if (pmc_get_slck_config())
  400ac8:	4b33      	ldr	r3, [pc, #204]	; (400b98 <genclk_get_frequency_hz+0x10c>)
  400aca:	4798      	blx	r3
  400acc:	4603      	mov	r3, r0
  400ace:	2b00      	cmp	r3, #0
  400ad0:	d003      	beq.n	400ada <genclk_get_frequency_hz+0x4e>
				pck_freq = OSC_SLCK_32K_RC_HZ;
  400ad2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400ad6:	617b      	str	r3, [r7, #20]
			else
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
			break;
  400ad8:	e04b      	b.n	400b72 <genclk_get_frequency_hz+0xe6>
				pck_freq = OSC_SLCK_32K_XTAL_HZ;
  400ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ade:	617b      	str	r3, [r7, #20]
			break;
  400ae0:	e047      	b.n	400b72 <genclk_get_frequency_hz+0xe6>
		case PMC_PCK_CSS_MAIN_CLK:
		case PMC_PCK_CSS_PLLA_CLK:
			clock_config = pmc_get_mainck_config();
  400ae2:	4b2e      	ldr	r3, [pc, #184]	; (400b9c <genclk_get_frequency_hz+0x110>)
  400ae4:	4798      	blx	r3
  400ae6:	60f8      	str	r0, [r7, #12]
			if (clock_config & CKGR_MOR_MOSCSEL)
  400ae8:	68fb      	ldr	r3, [r7, #12]
  400aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400aee:	2b00      	cmp	r3, #0
  400af0:	d012      	beq.n	400b18 <genclk_get_frequency_hz+0x8c>
			{
				switch(clock_config & CKGR_MOR_MOSCRCF_Msk)
  400af2:	68fb      	ldr	r3, [r7, #12]
  400af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400af8:	2b10      	cmp	r3, #16
  400afa:	d006      	beq.n	400b0a <genclk_get_frequency_hz+0x7e>
  400afc:	2b20      	cmp	r3, #32
  400afe:	d007      	beq.n	400b10 <genclk_get_frequency_hz+0x84>
  400b00:	2b00      	cmp	r3, #0
  400b02:	d10b      	bne.n	400b1c <genclk_get_frequency_hz+0x90>
				{
					case CKGR_MOR_MOSCRCF_4_MHz:
						pck_freq = OSC_MAINCK_4M_RC_HZ;
  400b04:	4b26      	ldr	r3, [pc, #152]	; (400ba0 <genclk_get_frequency_hz+0x114>)
  400b06:	617b      	str	r3, [r7, #20]
						break;
  400b08:	e008      	b.n	400b1c <genclk_get_frequency_hz+0x90>
					case CKGR_MOR_MOSCRCF_8_MHz:
						pck_freq = OSC_MAINCK_8M_RC_HZ;
  400b0a:	4b26      	ldr	r3, [pc, #152]	; (400ba4 <genclk_get_frequency_hz+0x118>)
  400b0c:	617b      	str	r3, [r7, #20]
						break;
  400b0e:	e005      	b.n	400b1c <genclk_get_frequency_hz+0x90>
					case CKGR_MOR_MOSCRCF_12_MHz:
						pck_freq = OSC_MAINCK_12M_RC_HZ;
  400b10:	4b25      	ldr	r3, [pc, #148]	; (400ba8 <genclk_get_frequency_hz+0x11c>)
  400b12:	617b      	str	r3, [r7, #20]
						break;
  400b14:	bf00      	nop
  400b16:	e001      	b.n	400b1c <genclk_get_frequency_hz+0x90>
				}
			}
			else
			{
				pck_freq = OSC_MAINCK_XTAL_HZ;
  400b18:	4b23      	ldr	r3, [pc, #140]	; (400ba8 <genclk_get_frequency_hz+0x11c>)
  400b1a:	617b      	str	r3, [r7, #20]
			}

			if (pck_source == PMC_PCK_CSS_PLLA_CLK)
  400b1c:	693b      	ldr	r3, [r7, #16]
  400b1e:	2b02      	cmp	r3, #2
  400b20:	d126      	bne.n	400b70 <genclk_get_frequency_hz+0xe4>
			{
				clock_config = pmc_get_pllack_config();
  400b22:	4b22      	ldr	r3, [pc, #136]	; (400bac <genclk_get_frequency_hz+0x120>)
  400b24:	4798      	blx	r3
  400b26:	60f8      	str	r0, [r7, #12]
				if ((clock_config & CKGR_PLLAR_DIVA_Msk) == 0)
  400b28:	68fb      	ldr	r3, [r7, #12]
  400b2a:	b2db      	uxtb	r3, r3
  400b2c:	2b00      	cmp	r3, #0
  400b2e:	d101      	bne.n	400b34 <genclk_get_frequency_hz+0xa8>
					return 0;
  400b30:	2300      	movs	r3, #0
  400b32:	e02b      	b.n	400b8c <genclk_get_frequency_hz+0x100>
				pck_freq *= ((((clock_config & CKGR_PLLAR_MULA_Msk)>>CKGR_PLLAR_MULA_Pos) + 1)/(clock_config & CKGR_PLLAR_DIVA_Msk));
  400b34:	68fb      	ldr	r3, [r7, #12]
  400b36:	0c1b      	lsrs	r3, r3, #16
  400b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
  400b3c:	1c5a      	adds	r2, r3, #1
  400b3e:	68fb      	ldr	r3, [r7, #12]
  400b40:	b2db      	uxtb	r3, r3
  400b42:	fbb2 f2f3 	udiv	r2, r2, r3
  400b46:	697b      	ldr	r3, [r7, #20]
  400b48:	fb02 f303 	mul.w	r3, r2, r3
  400b4c:	617b      	str	r3, [r7, #20]
			}
			break;
  400b4e:	e00f      	b.n	400b70 <genclk_get_frequency_hz+0xe4>
		case PMC_PCK_CSS_UPLL_CLK:
			pck_freq = pmc_get_upllckdiv_config() ? PLL_UPLL_HZ/2: PLL_UPLL_HZ;
  400b50:	4b17      	ldr	r3, [pc, #92]	; (400bb0 <genclk_get_frequency_hz+0x124>)
  400b52:	4798      	blx	r3
  400b54:	4603      	mov	r3, r0
  400b56:	2b00      	cmp	r3, #0
  400b58:	d001      	beq.n	400b5e <genclk_get_frequency_hz+0xd2>
  400b5a:	4b16      	ldr	r3, [pc, #88]	; (400bb4 <genclk_get_frequency_hz+0x128>)
  400b5c:	e000      	b.n	400b60 <genclk_get_frequency_hz+0xd4>
  400b5e:	4b16      	ldr	r3, [pc, #88]	; (400bb8 <genclk_get_frequency_hz+0x12c>)
  400b60:	617b      	str	r3, [r7, #20]
			break;
  400b62:	e006      	b.n	400b72 <genclk_get_frequency_hz+0xe6>
		case PMC_PCK_CSS_MCK:
			pck_freq = sysclk_get_main_hz();
  400b64:	4b15      	ldr	r3, [pc, #84]	; (400bbc <genclk_get_frequency_hz+0x130>)
  400b66:	4798      	blx	r3
  400b68:	6178      	str	r0, [r7, #20]
			break;
  400b6a:	e002      	b.n	400b72 <genclk_get_frequency_hz+0xe6>
		default:
			break;
  400b6c:	bf00      	nop
  400b6e:	e000      	b.n	400b72 <genclk_get_frequency_hz+0xe6>
			break;
  400b70:	bf00      	nop
	}
	pck_freq /= ((PMC->PMC_PCK[ul_id] & PMC_PCK_PRES_Msk) >> PMC_PCK_PRES_Pos)+1;
  400b72:	4a08      	ldr	r2, [pc, #32]	; (400b94 <genclk_get_frequency_hz+0x108>)
  400b74:	687b      	ldr	r3, [r7, #4]
  400b76:	3310      	adds	r3, #16
  400b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400b7c:	091b      	lsrs	r3, r3, #4
  400b7e:	b2db      	uxtb	r3, r3
  400b80:	3301      	adds	r3, #1
  400b82:	697a      	ldr	r2, [r7, #20]
  400b84:	fbb2 f3f3 	udiv	r3, r2, r3
  400b88:	617b      	str	r3, [r7, #20]
	return pck_freq;
  400b8a:	697b      	ldr	r3, [r7, #20]
}
  400b8c:	4618      	mov	r0, r3
  400b8e:	3718      	adds	r7, #24
  400b90:	46bd      	mov	sp, r7
  400b92:	bd80      	pop	{r7, pc}
  400b94:	400e0600 	.word	0x400e0600
  400b98:	0040190d 	.word	0x0040190d
  400b9c:	00401929 	.word	0x00401929
  400ba0:	003d0900 	.word	0x003d0900
  400ba4:	007a1200 	.word	0x007a1200
  400ba8:	00b71b00 	.word	0x00b71b00
  400bac:	00401949 	.word	0x00401949
  400bb0:	00401969 	.word	0x00401969
  400bb4:	0e4e1c00 	.word	0x0e4e1c00
  400bb8:	1c9c3800 	.word	0x1c9c3800
  400bbc:	00400a6d 	.word	0x00400a6d

00400bc0 <_mcan_message_memory_init>:
 *
 * \param hw  Base address of the MCAN
 *
 */
static void _mcan_message_memory_init(Mcan *hw)
{
  400bc0:	b480      	push	{r7}
  400bc2:	b083      	sub	sp, #12
  400bc4:	af00      	add	r7, sp, #0
  400bc6:	6078      	str	r0, [r7, #4]
	if (hw == MCAN0) {
  400bc8:	687b      	ldr	r3, [r7, #4]
  400bca:	4a48      	ldr	r2, [pc, #288]	; (400cec <_mcan_message_memory_init+0x12c>)
  400bcc:	4293      	cmp	r3, r2
  400bce:	d13d      	bne.n	400c4c <_mcan_message_memory_init+0x8c>
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400bd0:	4a47      	ldr	r2, [pc, #284]	; (400cf0 <_mcan_message_memory_init+0x130>)
  400bd2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400bd6:	4013      	ands	r3, r2
  400bd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400bdc:	687b      	ldr	r3, [r7, #4]
  400bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400be2:	4a44      	ldr	r2, [pc, #272]	; (400cf4 <_mcan_message_memory_init+0x134>)
  400be4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400be8:	4013      	ands	r3, r2
  400bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400bee:	687b      	ldr	r3, [r7, #4]
  400bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400bf4:	4a40      	ldr	r2, [pc, #256]	; (400cf8 <_mcan_message_memory_init+0x138>)
  400bf6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400bfa:	4013      	ands	r3, r2
  400bfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400c00:	687b      	ldr	r3, [r7, #4]
  400c02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN0_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400c06:	4a3d      	ldr	r2, [pc, #244]	; (400cfc <_mcan_message_memory_init+0x13c>)
  400c08:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c0c:	4013      	ands	r3, r2
  400c0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400c12:	687b      	ldr	r3, [r7, #4]
  400c14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN0_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400c18:	4a39      	ldr	r2, [pc, #228]	; (400d00 <_mcan_message_memory_init+0x140>)
  400c1a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c1e:	4013      	ands	r3, r2
  400c20:	687a      	ldr	r2, [r7, #4]
  400c22:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400c26:	4b37      	ldr	r3, [pc, #220]	; (400d04 <_mcan_message_memory_init+0x144>)
  400c28:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400c2c:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400c2e:	4b36      	ldr	r3, [pc, #216]	; (400d08 <_mcan_message_memory_init+0x148>)
  400c30:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400c32:	687a      	ldr	r2, [r7, #4]
  400c34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN0_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400c38:	4a34      	ldr	r2, [pc, #208]	; (400d0c <_mcan_message_memory_init+0x14c>)
  400c3a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c3e:	4013      	ands	r3, r2
  400c40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400c44:	687b      	ldr	r3, [r7, #4]
  400c46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400c4a:	e040      	b.n	400cce <_mcan_message_memory_init+0x10e>
				MCAN_TXEFC_EFS(CONF_MCAN0_TX_EVENT_FIFO);
	} else if (hw == MCAN1) {
  400c4c:	687b      	ldr	r3, [r7, #4]
  400c4e:	4a30      	ldr	r2, [pc, #192]	; (400d10 <_mcan_message_memory_init+0x150>)
  400c50:	4293      	cmp	r3, r2
  400c52:	d13c      	bne.n	400cce <_mcan_message_memory_init+0x10e>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400c54:	4a2f      	ldr	r2, [pc, #188]	; (400d14 <_mcan_message_memory_init+0x154>)
  400c56:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c5a:	4013      	ands	r3, r2
  400c5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400c60:	687b      	ldr	r3, [r7, #4]
  400c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400c66:	4a2c      	ldr	r2, [pc, #176]	; (400d18 <_mcan_message_memory_init+0x158>)
  400c68:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c6c:	4013      	ands	r3, r2
  400c6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400c72:	687b      	ldr	r3, [r7, #4]
  400c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400c78:	4a28      	ldr	r2, [pc, #160]	; (400d1c <_mcan_message_memory_init+0x15c>)
  400c7a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c7e:	4013      	ands	r3, r2
  400c80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400c84:	687b      	ldr	r3, [r7, #4]
  400c86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN1_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400c8a:	4a25      	ldr	r2, [pc, #148]	; (400d20 <_mcan_message_memory_init+0x160>)
  400c8c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400c90:	4013      	ands	r3, r2
  400c92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400c96:	687b      	ldr	r3, [r7, #4]
  400c98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN1_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400c9c:	4a21      	ldr	r2, [pc, #132]	; (400d24 <_mcan_message_memory_init+0x164>)
  400c9e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ca2:	4013      	ands	r3, r2
  400ca4:	687a      	ldr	r2, [r7, #4]
  400ca6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400caa:	4b1f      	ldr	r3, [pc, #124]	; (400d28 <_mcan_message_memory_init+0x168>)
  400cac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400cb0:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400cb2:	4b15      	ldr	r3, [pc, #84]	; (400d08 <_mcan_message_memory_init+0x148>)
  400cb4:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400cb6:	687a      	ldr	r2, [r7, #4]
  400cb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN1_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400cbc:	4a1b      	ldr	r2, [pc, #108]	; (400d2c <_mcan_message_memory_init+0x16c>)
  400cbe:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400cc2:	4013      	ands	r3, r2
  400cc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400cc8:	687b      	ldr	r3, [r7, #4]
  400cca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_MCAN_ELEMENT_DATA_SIZE <= 24) {
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400cce:	687b      	ldr	r3, [r7, #4]
  400cd0:	2200      	movs	r2, #0
  400cd2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400cd6:	687b      	ldr	r3, [r7, #4]
  400cd8:	2200      	movs	r2, #0
  400cda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
	}
}
  400cde:	bf00      	nop
  400ce0:	370c      	adds	r7, #12
  400ce2:	46bd      	mov	sp, r7
  400ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ce8:	4770      	bx	lr
  400cea:	bf00      	nop
  400cec:	40030000 	.word	0x40030000
  400cf0:	20400c1c 	.word	0x20400c1c
  400cf4:	20400c9c 	.word	0x20400c9c
  400cf8:	204009ec 	.word	0x204009ec
  400cfc:	20400aec 	.word	0x20400aec
  400d00:	204009dc 	.word	0x204009dc
  400d04:	20400bec 	.word	0x20400bec
  400d08:	01010000 	.word	0x01010000
  400d0c:	20400c0c 	.word	0x20400c0c
  400d10:	40034000 	.word	0x40034000
  400d14:	20400f5c 	.word	0x20400f5c
  400d18:	20400fdc 	.word	0x20400fdc
  400d1c:	20400d2c 	.word	0x20400d2c
  400d20:	20400e2c 	.word	0x20400e2c
  400d24:	20400d1c 	.word	0x20400d1c
  400d28:	20400f2c 	.word	0x20400f2c
  400d2c:	20400f4c 	.word	0x20400f4c

00400d30 <_mcan_set_configuration>:
 *
 * \param hw  Base address of the MCAN
 * \param config  default configuration parameters.
 */
static void _mcan_set_configuration(Mcan *hw, struct mcan_config *config)
{
  400d30:	b480      	push	{r7}
  400d32:	b083      	sub	sp, #12
  400d34:	af00      	add	r7, sp, #0
  400d36:	6078      	str	r0, [r7, #4]
  400d38:	6039      	str	r1, [r7, #0]
	if (config->tdc_enable) {
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
	}
#else
	/* Timing setting. */
	hw->MCAN_BTP = MCAN_BTP_BRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400d3a:	687b      	ldr	r3, [r7, #4]
  400d3c:	4a65      	ldr	r2, [pc, #404]	; (400ed4 <_mcan_set_configuration+0x1a4>)
  400d3e:	61da      	str	r2, [r3, #28]
			MCAN_BTP_TSEG2(CONF_MCAN_NBTP_NTSEG2_VALUE);
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
			MCAN_FBTP_FSJW(CONF_MCAN_FBTP_FSJW_VALUE) |
			MCAN_FBTP_FTSEG1(CONF_MCAN_FBTP_FTSEG1_VALUE) |
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
			MCAN_FBTP_TDCO(config->delay_compensation_offset);
  400d40:	683b      	ldr	r3, [r7, #0]
  400d42:	7bdb      	ldrb	r3, [r3, #15]
  400d44:	061b      	lsls	r3, r3, #24
  400d46:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
  400d4a:	4b63      	ldr	r3, [pc, #396]	; (400ed8 <_mcan_set_configuration+0x1a8>)
  400d4c:	4313      	orrs	r3, r2
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400d4e:	687a      	ldr	r2, [r7, #4]
  400d50:	60d3      	str	r3, [r2, #12]

	if (config->tdc_enable) {
  400d52:	683b      	ldr	r3, [r7, #0]
  400d54:	7b9b      	ldrb	r3, [r3, #14]
  400d56:	2b00      	cmp	r3, #0
  400d58:	d005      	beq.n	400d66 <_mcan_set_configuration+0x36>
		hw->MCAN_FBTP |= MCAN_FBTP_TDC_ENABLED;
  400d5a:	687b      	ldr	r3, [r7, #4]
  400d5c:	68db      	ldr	r3, [r3, #12]
  400d5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
  400d62:	687b      	ldr	r3, [r7, #4]
  400d64:	60da      	str	r2, [r3, #12]
	}
#endif
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400d66:	687b      	ldr	r3, [r7, #4]
  400d68:	695b      	ldr	r3, [r3, #20]
  400d6a:	683a      	ldr	r2, [r7, #0]
  400d6c:	7852      	ldrb	r2, [r2, #1]
  400d6e:	431a      	orrs	r2, r3
  400d70:	687b      	ldr	r3, [r7, #4]
  400d72:	615a      	str	r2, [r3, #20]

	if (config->transmit_pause) {
  400d74:	683b      	ldr	r3, [r7, #0]
  400d76:	789b      	ldrb	r3, [r3, #2]
  400d78:	2b00      	cmp	r3, #0
  400d7a:	d005      	beq.n	400d88 <_mcan_set_configuration+0x58>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	699b      	ldr	r3, [r3, #24]
  400d80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
  400d84:	687b      	ldr	r3, [r7, #4]
  400d86:	619a      	str	r2, [r3, #24]
	}

	if (!config->automatic_retransmission) {
  400d88:	683b      	ldr	r3, [r7, #0]
  400d8a:	795b      	ldrb	r3, [r3, #5]
  400d8c:	f083 0301 	eor.w	r3, r3, #1
  400d90:	b2db      	uxtb	r3, r3
  400d92:	2b00      	cmp	r3, #0
  400d94:	d005      	beq.n	400da2 <_mcan_set_configuration+0x72>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	699b      	ldr	r3, [r3, #24]
  400d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
  400d9e:	687b      	ldr	r3, [r7, #4]
  400da0:	619a      	str	r2, [r3, #24]
	}

	if (config->clock_stop_request) {
  400da2:	683b      	ldr	r3, [r7, #0]
  400da4:	799b      	ldrb	r3, [r3, #6]
  400da6:	2b00      	cmp	r3, #0
  400da8:	d005      	beq.n	400db6 <_mcan_set_configuration+0x86>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400daa:	687b      	ldr	r3, [r7, #4]
  400dac:	699b      	ldr	r3, [r3, #24]
  400dae:	f043 0210 	orr.w	r2, r3, #16
  400db2:	687b      	ldr	r3, [r7, #4]
  400db4:	619a      	str	r2, [r3, #24]
	}

	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400db6:	683b      	ldr	r3, [r7, #0]
  400db8:	7a1b      	ldrb	r3, [r3, #8]
  400dba:	041b      	lsls	r3, r3, #16
  400dbc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400dc0:	f043 0201 	orr.w	r2, r3, #1
  400dc4:	687b      	ldr	r3, [r7, #4]
  400dc6:	621a      	str	r2, [r3, #32]
			MCAN_TSCC_TSS_TCP_INC;

	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400dc8:	683b      	ldr	r3, [r7, #0]
  400dca:	895b      	ldrh	r3, [r3, #10]
  400dcc:	041b      	lsls	r3, r3, #16
  400dce:	461a      	mov	r2, r3
			config->timeout_mode | config->timeout_enable;
  400dd0:	683b      	ldr	r3, [r7, #0]
  400dd2:	7b1b      	ldrb	r3, [r3, #12]
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400dd4:	4313      	orrs	r3, r2
			config->timeout_mode | config->timeout_enable;
  400dd6:	683a      	ldr	r2, [r7, #0]
  400dd8:	7b52      	ldrb	r2, [r2, #13]
  400dda:	431a      	orrs	r2, r3
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400ddc:	687b      	ldr	r3, [r7, #4]
  400dde:	629a      	str	r2, [r3, #40]	; 0x28

	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400de0:	683b      	ldr	r3, [r7, #0]
  400de2:	7c1b      	ldrb	r3, [r3, #16]
  400de4:	011b      	lsls	r3, r3, #4
  400de6:	f003 0230 	and.w	r2, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400dea:	683b      	ldr	r3, [r7, #0]
  400dec:	7c5b      	ldrb	r3, [r3, #17]
  400dee:	009b      	lsls	r3, r3, #2
  400df0:	f003 030c 	and.w	r3, r3, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400df4:	431a      	orrs	r2, r3
  400df6:	687b      	ldr	r3, [r7, #4]
  400df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400dfc:	683b      	ldr	r3, [r7, #0]
  400dfe:	7c9b      	ldrb	r3, [r3, #18]
  400e00:	2b00      	cmp	r3, #0
  400e02:	d007      	beq.n	400e14 <_mcan_set_configuration+0xe4>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400e04:	687b      	ldr	r3, [r7, #4]
  400e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400e0a:	f043 0202 	orr.w	r2, r3, #2
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
	if (config->remote_frames_extended_reject) {
  400e14:	683b      	ldr	r3, [r7, #0]
  400e16:	7cdb      	ldrb	r3, [r3, #19]
  400e18:	2b00      	cmp	r3, #0
  400e1a:	d007      	beq.n	400e2c <_mcan_set_configuration+0xfc>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400e1c:	687b      	ldr	r3, [r7, #4]
  400e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400e22:	f043 0201 	orr.w	r2, r3, #1
  400e26:	687b      	ldr	r3, [r7, #4]
  400e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	hw->MCAN_XIDAM = config->extended_id_mask;
  400e2c:	683b      	ldr	r3, [r7, #0]
  400e2e:	695a      	ldr	r2, [r3, #20]
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	if (config->rx_fifo_0_overwrite) {
  400e36:	683b      	ldr	r3, [r7, #0]
  400e38:	7e1b      	ldrb	r3, [r3, #24]
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d007      	beq.n	400e4e <_mcan_set_configuration+0x11e>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400e3e:	687b      	ldr	r3, [r7, #4]
  400e40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  400e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400e48:	687b      	ldr	r3, [r7, #4]
  400e4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400e4e:	687b      	ldr	r3, [r7, #4]
  400e50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400e54:	683b      	ldr	r3, [r7, #0]
  400e56:	7e5b      	ldrb	r3, [r3, #25]
  400e58:	061b      	lsls	r3, r3, #24
  400e5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e5e:	431a      	orrs	r2, r3
  400e60:	687b      	ldr	r3, [r7, #4]
  400e62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if (config->rx_fifo_1_overwrite) {
  400e66:	683b      	ldr	r3, [r7, #0]
  400e68:	7e9b      	ldrb	r3, [r3, #26]
  400e6a:	2b00      	cmp	r3, #0
  400e6c:	d007      	beq.n	400e7e <_mcan_set_configuration+0x14e>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400e6e:	687b      	ldr	r3, [r7, #4]
  400e70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  400e74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400e7e:	687b      	ldr	r3, [r7, #4]
  400e80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400e84:	683b      	ldr	r3, [r7, #0]
  400e86:	7edb      	ldrb	r3, [r3, #27]
  400e88:	061b      	lsls	r3, r3, #24
  400e8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400e8e:	431a      	orrs	r2, r3
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	if (config->tx_queue_mode) {
  400e96:	683b      	ldr	r3, [r7, #0]
  400e98:	7f1b      	ldrb	r3, [r3, #28]
  400e9a:	2b00      	cmp	r3, #0
  400e9c:	d007      	beq.n	400eae <_mcan_set_configuration+0x17e>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400e9e:	687b      	ldr	r3, [r7, #4]
  400ea0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  400ea4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  400ea8:	687b      	ldr	r3, [r7, #4]
  400eaa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}

	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  400eb4:	683b      	ldr	r3, [r7, #0]
  400eb6:	7f5b      	ldrb	r3, [r3, #29]
  400eb8:	061b      	lsls	r3, r3, #24
  400eba:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400ebe:	431a      	orrs	r2, r3
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
  400ec6:	bf00      	nop
  400ec8:	370c      	adds	r7, #12
  400eca:	46bd      	mov	sp, r7
  400ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ed0:	4770      	bx	lr
  400ed2:	bf00      	nop
  400ed4:	00070a73 	.word	0x00070a73
  400ed8:	00050a73 	.word	0x00050a73

00400edc <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400edc:	b580      	push	{r7, lr}
  400ede:	b082      	sub	sp, #8
  400ee0:	af00      	add	r7, sp, #0
  400ee2:	6078      	str	r0, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400ee4:	687b      	ldr	r3, [r7, #4]
  400ee6:	681b      	ldr	r3, [r3, #0]
  400ee8:	4a09      	ldr	r2, [pc, #36]	; (400f10 <_mcan_enable_peripheral_clock+0x34>)
  400eea:	4293      	cmp	r3, r2
  400eec:	d103      	bne.n	400ef6 <_mcan_enable_peripheral_clock+0x1a>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
  400eee:	2023      	movs	r0, #35	; 0x23
  400ef0:	4b08      	ldr	r3, [pc, #32]	; (400f14 <_mcan_enable_peripheral_clock+0x38>)
  400ef2:	4798      	blx	r3
	} else if (module_inst->hw == MCAN1) {
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
	}
}
  400ef4:	e007      	b.n	400f06 <_mcan_enable_peripheral_clock+0x2a>
	} else if (module_inst->hw == MCAN1) {
  400ef6:	687b      	ldr	r3, [r7, #4]
  400ef8:	681b      	ldr	r3, [r3, #0]
  400efa:	4a07      	ldr	r2, [pc, #28]	; (400f18 <_mcan_enable_peripheral_clock+0x3c>)
  400efc:	4293      	cmp	r3, r2
  400efe:	d102      	bne.n	400f06 <_mcan_enable_peripheral_clock+0x2a>
		pmc_enable_periph_clk(ID_MCAN1);
  400f00:	2025      	movs	r0, #37	; 0x25
  400f02:	4b04      	ldr	r3, [pc, #16]	; (400f14 <_mcan_enable_peripheral_clock+0x38>)
  400f04:	4798      	blx	r3
}
  400f06:	bf00      	nop
  400f08:	3708      	adds	r7, #8
  400f0a:	46bd      	mov	sp, r7
  400f0c:	bd80      	pop	{r7, pc}
  400f0e:	bf00      	nop
  400f10:	40030000 	.word	0x40030000
  400f14:	00401879 	.word	0x00401879
  400f18:	40034000 	.word	0x40034000

00400f1c <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400f1c:	b580      	push	{r7, lr}
  400f1e:	b084      	sub	sp, #16
  400f20:	af00      	add	r7, sp, #0
  400f22:	60f8      	str	r0, [r7, #12]
  400f24:	60b9      	str	r1, [r7, #8]
  400f26:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400f28:	68fb      	ldr	r3, [r7, #12]
  400f2a:	68ba      	ldr	r2, [r7, #8]
  400f2c:	601a      	str	r2, [r3, #0]

	pmc_disable_pck(PMC_PCK_5);
  400f2e:	2005      	movs	r0, #5
  400f30:	4b14      	ldr	r3, [pc, #80]	; (400f84 <mcan_init+0x68>)
  400f32:	4798      	blx	r3
	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400f34:	2190      	movs	r1, #144	; 0x90
  400f36:	2005      	movs	r0, #5
  400f38:	4b13      	ldr	r3, [pc, #76]	; (400f88 <mcan_init+0x6c>)
  400f3a:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400f3c:	2005      	movs	r0, #5
  400f3e:	4b13      	ldr	r3, [pc, #76]	; (400f8c <mcan_init+0x70>)
  400f40:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400f42:	68f8      	ldr	r0, [r7, #12]
  400f44:	4b12      	ldr	r3, [pc, #72]	; (400f90 <mcan_init+0x74>)
  400f46:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400f48:	68bb      	ldr	r3, [r7, #8]
  400f4a:	699b      	ldr	r3, [r3, #24]
  400f4c:	f043 0202 	orr.w	r2, r3, #2
  400f50:	68bb      	ldr	r3, [r7, #8]
  400f52:	619a      	str	r2, [r3, #24]
	
	/* Initialize the message memory address. */
	_mcan_message_memory_init(hw);
  400f54:	68b8      	ldr	r0, [r7, #8]
  400f56:	4b0f      	ldr	r3, [pc, #60]	; (400f94 <mcan_init+0x78>)
  400f58:	4798      	blx	r3

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);
  400f5a:	6879      	ldr	r1, [r7, #4]
  400f5c:	68b8      	ldr	r0, [r7, #8]
  400f5e:	4b0e      	ldr	r3, [pc, #56]	; (400f98 <mcan_init+0x7c>)
  400f60:	4798      	blx	r3

	
	
	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400f62:	68bb      	ldr	r3, [r7, #8]
  400f64:	2203      	movs	r2, #3
  400f66:	65da      	str	r2, [r3, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400f68:	68bb      	ldr	r3, [r7, #8]
  400f6a:	f04f 32ff 	mov.w	r2, #4294967295
  400f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400f72:	68bb      	ldr	r3, [r7, #8]
  400f74:	f04f 32ff 	mov.w	r2, #4294967295
  400f78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400f7c:	bf00      	nop
  400f7e:	3710      	adds	r7, #16
  400f80:	46bd      	mov	sp, r7
  400f82:	bd80      	pop	{r7, pc}
  400f84:	00401a05 	.word	0x00401a05
  400f88:	004018b5 	.word	0x004018b5
  400f8c:	004019dd 	.word	0x004019dd
  400f90:	00400edd 	.word	0x00400edd
  400f94:	00400bc1 	.word	0x00400bc1
  400f98:	00400d31 	.word	0x00400d31

00400f9c <mcan_set_baudrate>:
 *
 * \param[in]  hw          Pointer to the MCAN module instance
 * \param[in]  baudrate    MCAN baudrate
 */
void mcan_set_baudrate(Mcan *hw, uint32_t baudrate)
{
  400f9c:	b580      	push	{r7, lr}
  400f9e:	b088      	sub	sp, #32
  400fa0:	af00      	add	r7, sp, #0
  400fa2:	6078      	str	r0, [r7, #4]
  400fa4:	6039      	str	r1, [r7, #0]
	uint32_t gclk_mcan_value;
	uint32_t mcan_nbtp_nbrp_value;
	uint32_t mcan_nbtp_nsgw_value = 3, mcan_nbtp_ntseg1_value = 10, mcan_nbtp_ntseg2_value = 7;
  400fa6:	2303      	movs	r3, #3
  400fa8:	61fb      	str	r3, [r7, #28]
  400faa:	230a      	movs	r3, #10
  400fac:	61bb      	str	r3, [r7, #24]
  400fae:	2307      	movs	r3, #7
  400fb0:	617b      	str	r3, [r7, #20]

	gclk_mcan_value = genclk_get_frequency_hz(PMC_PCK_5);
  400fb2:	2005      	movs	r0, #5
  400fb4:	4b12      	ldr	r3, [pc, #72]	; (401000 <mcan_set_baudrate+0x64>)
  400fb6:	4798      	blx	r3
  400fb8:	6138      	str	r0, [r7, #16]

	mcan_nbtp_nbrp_value = gclk_mcan_value / baudrate / (3 + mcan_nbtp_ntseg1_value + mcan_nbtp_ntseg2_value);
  400fba:	693a      	ldr	r2, [r7, #16]
  400fbc:	683b      	ldr	r3, [r7, #0]
  400fbe:	fbb2 f2f3 	udiv	r2, r2, r3
  400fc2:	69b9      	ldr	r1, [r7, #24]
  400fc4:	697b      	ldr	r3, [r7, #20]
  400fc6:	440b      	add	r3, r1
  400fc8:	3303      	adds	r3, #3
  400fca:	fbb2 f3f3 	udiv	r3, r2, r3
  400fce:	60fb      	str	r3, [r7, #12]
	hw->MCAN_NBTP = MCAN_NBTP_NBRP(mcan_nbtp_nbrp_value - 1) |
			MCAN_NBTP_NSJW(mcan_nbtp_nsgw_value) |
			MCAN_NBTP_NTSEG1(mcan_nbtp_ntseg1_value) |
			MCAN_NBTP_NTSEG2(mcan_nbtp_ntseg2_value);
#else
	hw->MCAN_BTP = MCAN_BTP_BRP(mcan_nbtp_nbrp_value - 1) |
  400fd0:	68fb      	ldr	r3, [r7, #12]
  400fd2:	3b01      	subs	r3, #1
  400fd4:	041a      	lsls	r2, r3, #16
  400fd6:	4b0b      	ldr	r3, [pc, #44]	; (401004 <mcan_set_baudrate+0x68>)
  400fd8:	4013      	ands	r3, r2
			MCAN_BTP_SJW(mcan_nbtp_nsgw_value) |
  400fda:	69fa      	ldr	r2, [r7, #28]
  400fdc:	f002 020f 	and.w	r2, r2, #15
	hw->MCAN_BTP = MCAN_BTP_BRP(mcan_nbtp_nbrp_value - 1) |
  400fe0:	431a      	orrs	r2, r3
			MCAN_BTP_TSEG1(mcan_nbtp_ntseg1_value) |
  400fe2:	69bb      	ldr	r3, [r7, #24]
  400fe4:	021b      	lsls	r3, r3, #8
  400fe6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
			MCAN_BTP_SJW(mcan_nbtp_nsgw_value) |
  400fea:	431a      	orrs	r2, r3
			MCAN_BTP_TSEG2(mcan_nbtp_ntseg2_value);
  400fec:	697b      	ldr	r3, [r7, #20]
  400fee:	011b      	lsls	r3, r3, #4
  400ff0:	b2db      	uxtb	r3, r3
			MCAN_BTP_TSEG1(mcan_nbtp_ntseg1_value) |
  400ff2:	431a      	orrs	r2, r3
	hw->MCAN_BTP = MCAN_BTP_BRP(mcan_nbtp_nbrp_value - 1) |
  400ff4:	687b      	ldr	r3, [r7, #4]
  400ff6:	61da      	str	r2, [r3, #28]
#endif
}
  400ff8:	bf00      	nop
  400ffa:	3720      	adds	r7, #32
  400ffc:	46bd      	mov	sp, r7
  400ffe:	bd80      	pop	{r7, pc}
  401000:	00400a8d 	.word	0x00400a8d
  401004:	03ff0000 	.word	0x03ff0000

00401008 <mcan_start>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
  401008:	b480      	push	{r7}
  40100a:	b083      	sub	sp, #12
  40100c:	af00      	add	r7, sp, #0
  40100e:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  401010:	687b      	ldr	r3, [r7, #4]
  401012:	681b      	ldr	r3, [r3, #0]
  401014:	687a      	ldr	r2, [r7, #4]
  401016:	6812      	ldr	r2, [r2, #0]
  401018:	6992      	ldr	r2, [r2, #24]
  40101a:	f022 0201 	bic.w	r2, r2, #1
  40101e:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  401020:	bf00      	nop
  401022:	687b      	ldr	r3, [r7, #4]
  401024:	681b      	ldr	r3, [r3, #0]
  401026:	699b      	ldr	r3, [r3, #24]
  401028:	f003 0301 	and.w	r3, r3, #1
  40102c:	2b00      	cmp	r3, #0
  40102e:	d1f8      	bne.n	401022 <mcan_start+0x1a>
}
  401030:	bf00      	nop
  401032:	370c      	adds	r7, #12
  401034:	46bd      	mov	sp, r7
  401036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40103a:	4770      	bx	lr

0040103c <mcan_stop>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
  40103c:	b480      	push	{r7}
  40103e:	b083      	sub	sp, #12
  401040:	af00      	add	r7, sp, #0
  401042:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	681b      	ldr	r3, [r3, #0]
  401048:	687a      	ldr	r2, [r7, #4]
  40104a:	6812      	ldr	r2, [r2, #0]
  40104c:	6992      	ldr	r2, [r2, #24]
  40104e:	f042 0201 	orr.w	r2, r2, #1
  401052:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  401054:	bf00      	nop
  401056:	687b      	ldr	r3, [r7, #4]
  401058:	681b      	ldr	r3, [r3, #0]
  40105a:	699b      	ldr	r3, [r3, #24]
  40105c:	f003 0301 	and.w	r3, r3, #1
  401060:	2b00      	cmp	r3, #0
  401062:	d0f8      	beq.n	401056 <mcan_stop+0x1a>
}
  401064:	bf00      	nop
  401066:	370c      	adds	r7, #12
  401068:	46bd      	mov	sp, r7
  40106a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40106e:	4770      	bx	lr

00401070 <mcan_set_rx_standard_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_standard_filter(
		struct mcan_module *const module_inst,
		struct mcan_standard_message_filter_element *sd_filter, uint32_t index)
{
  401070:	b480      	push	{r7}
  401072:	b085      	sub	sp, #20
  401074:	af00      	add	r7, sp, #0
  401076:	60f8      	str	r0, [r7, #12]
  401078:	60b9      	str	r1, [r7, #8]
  40107a:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  40107c:	68fb      	ldr	r3, [r7, #12]
  40107e:	681b      	ldr	r3, [r3, #0]
  401080:	4a0f      	ldr	r2, [pc, #60]	; (4010c0 <mcan_set_rx_standard_filter+0x50>)
  401082:	4293      	cmp	r3, r2
  401084:	d107      	bne.n	401096 <mcan_set_rx_standard_filter+0x26>
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  401086:	68bb      	ldr	r3, [r7, #8]
  401088:	681a      	ldr	r2, [r3, #0]
  40108a:	490e      	ldr	r1, [pc, #56]	; (4010c4 <mcan_set_rx_standard_filter+0x54>)
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  401092:	2300      	movs	r3, #0
  401094:	e00e      	b.n	4010b4 <mcan_set_rx_standard_filter+0x44>
	} else if (module_inst->hw == MCAN1) {
  401096:	68fb      	ldr	r3, [r7, #12]
  401098:	681b      	ldr	r3, [r3, #0]
  40109a:	4a0b      	ldr	r2, [pc, #44]	; (4010c8 <mcan_set_rx_standard_filter+0x58>)
  40109c:	4293      	cmp	r3, r2
  40109e:	d107      	bne.n	4010b0 <mcan_set_rx_standard_filter+0x40>
		mcan1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  4010a0:	68bb      	ldr	r3, [r7, #8]
  4010a2:	681a      	ldr	r2, [r3, #0]
  4010a4:	4909      	ldr	r1, [pc, #36]	; (4010cc <mcan_set_rx_standard_filter+0x5c>)
  4010a6:	687b      	ldr	r3, [r7, #4]
  4010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  4010ac:	2300      	movs	r3, #0
  4010ae:	e001      	b.n	4010b4 <mcan_set_rx_standard_filter+0x44>
	}
	return ERR_INVALID_ARG;
  4010b0:	f06f 0307 	mvn.w	r3, #7
}
  4010b4:	4618      	mov	r0, r3
  4010b6:	3714      	adds	r7, #20
  4010b8:	46bd      	mov	sp, r7
  4010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010be:	4770      	bx	lr
  4010c0:	40030000 	.word	0x40030000
  4010c4:	20400c1c 	.word	0x20400c1c
  4010c8:	40034000 	.word	0x40034000
  4010cc:	20400f5c 	.word	0x20400f5c

004010d0 <mcan_set_rx_extended_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_extended_filter(
		struct mcan_module *const module_inst,
		struct mcan_extended_message_filter_element *et_filter, uint32_t index)
{
  4010d0:	b480      	push	{r7}
  4010d2:	b085      	sub	sp, #20
  4010d4:	af00      	add	r7, sp, #0
  4010d6:	60f8      	str	r0, [r7, #12]
  4010d8:	60b9      	str	r1, [r7, #8]
  4010da:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  4010dc:	68fb      	ldr	r3, [r7, #12]
  4010de:	681b      	ldr	r3, [r3, #0]
  4010e0:	4a16      	ldr	r2, [pc, #88]	; (40113c <mcan_set_rx_extended_filter+0x6c>)
  4010e2:	4293      	cmp	r3, r2
  4010e4:	d10e      	bne.n	401104 <mcan_set_rx_extended_filter+0x34>
		mcan0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  4010e6:	68bb      	ldr	r3, [r7, #8]
  4010e8:	681a      	ldr	r2, [r3, #0]
  4010ea:	4915      	ldr	r1, [pc, #84]	; (401140 <mcan_set_rx_extended_filter+0x70>)
  4010ec:	687b      	ldr	r3, [r7, #4]
  4010ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  4010f2:	68bb      	ldr	r3, [r7, #8]
  4010f4:	685a      	ldr	r2, [r3, #4]
  4010f6:	4912      	ldr	r1, [pc, #72]	; (401140 <mcan_set_rx_extended_filter+0x70>)
  4010f8:	687b      	ldr	r3, [r7, #4]
  4010fa:	00db      	lsls	r3, r3, #3
  4010fc:	440b      	add	r3, r1
  4010fe:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  401100:	2300      	movs	r3, #0
  401102:	e015      	b.n	401130 <mcan_set_rx_extended_filter+0x60>
	} else if (module_inst->hw == MCAN1) {
  401104:	68fb      	ldr	r3, [r7, #12]
  401106:	681b      	ldr	r3, [r3, #0]
  401108:	4a0e      	ldr	r2, [pc, #56]	; (401144 <mcan_set_rx_extended_filter+0x74>)
  40110a:	4293      	cmp	r3, r2
  40110c:	d10e      	bne.n	40112c <mcan_set_rx_extended_filter+0x5c>
		mcan1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  40110e:	68bb      	ldr	r3, [r7, #8]
  401110:	681a      	ldr	r2, [r3, #0]
  401112:	490d      	ldr	r1, [pc, #52]	; (401148 <mcan_set_rx_extended_filter+0x78>)
  401114:	687b      	ldr	r3, [r7, #4]
  401116:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  40111a:	68bb      	ldr	r3, [r7, #8]
  40111c:	685a      	ldr	r2, [r3, #4]
  40111e:	490a      	ldr	r1, [pc, #40]	; (401148 <mcan_set_rx_extended_filter+0x78>)
  401120:	687b      	ldr	r3, [r7, #4]
  401122:	00db      	lsls	r3, r3, #3
  401124:	440b      	add	r3, r1
  401126:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  401128:	2300      	movs	r3, #0
  40112a:	e001      	b.n	401130 <mcan_set_rx_extended_filter+0x60>
	}
	return ERR_INVALID_ARG;
  40112c:	f06f 0307 	mvn.w	r3, #7
}
  401130:	4618      	mov	r0, r3
  401132:	3714      	adds	r7, #20
  401134:	46bd      	mov	sp, r7
  401136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40113a:	4770      	bx	lr
  40113c:	40030000 	.word	0x40030000
  401140:	20400c9c 	.word	0x20400c9c
  401144:	40034000 	.word	0x40034000
  401148:	20400fdc 	.word	0x20400fdc

0040114c <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  40114c:	b580      	push	{r7, lr}
  40114e:	b084      	sub	sp, #16
  401150:	af00      	add	r7, sp, #0
  401152:	60f8      	str	r0, [r7, #12]
  401154:	60b9      	str	r1, [r7, #8]
  401156:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  401158:	68fb      	ldr	r3, [r7, #12]
  40115a:	681b      	ldr	r3, [r3, #0]
  40115c:	4a11      	ldr	r2, [pc, #68]	; (4011a4 <mcan_get_rx_buffer_element+0x58>)
  40115e:	4293      	cmp	r3, r2
  401160:	d10a      	bne.n	401178 <mcan_get_rx_buffer_element+0x2c>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  401162:	687b      	ldr	r3, [r7, #4]
  401164:	011b      	lsls	r3, r3, #4
  401166:	4a10      	ldr	r2, [pc, #64]	; (4011a8 <mcan_get_rx_buffer_element+0x5c>)
  401168:	4413      	add	r3, r2
  40116a:	2210      	movs	r2, #16
  40116c:	4619      	mov	r1, r3
  40116e:	68b8      	ldr	r0, [r7, #8]
  401170:	4b0e      	ldr	r3, [pc, #56]	; (4011ac <mcan_get_rx_buffer_element+0x60>)
  401172:	4798      	blx	r3
		return STATUS_OK;
  401174:	2300      	movs	r3, #0
  401176:	e011      	b.n	40119c <mcan_get_rx_buffer_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  401178:	68fb      	ldr	r3, [r7, #12]
  40117a:	681b      	ldr	r3, [r3, #0]
  40117c:	4a0c      	ldr	r2, [pc, #48]	; (4011b0 <mcan_get_rx_buffer_element+0x64>)
  40117e:	4293      	cmp	r3, r2
  401180:	d10a      	bne.n	401198 <mcan_get_rx_buffer_element+0x4c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  401182:	687b      	ldr	r3, [r7, #4]
  401184:	011b      	lsls	r3, r3, #4
  401186:	4a0b      	ldr	r2, [pc, #44]	; (4011b4 <mcan_get_rx_buffer_element+0x68>)
  401188:	4413      	add	r3, r2
  40118a:	2210      	movs	r2, #16
  40118c:	4619      	mov	r1, r3
  40118e:	68b8      	ldr	r0, [r7, #8]
  401190:	4b06      	ldr	r3, [pc, #24]	; (4011ac <mcan_get_rx_buffer_element+0x60>)
  401192:	4798      	blx	r3
		return STATUS_OK;
  401194:	2300      	movs	r3, #0
  401196:	e001      	b.n	40119c <mcan_get_rx_buffer_element+0x50>
	}
	return ERR_INVALID_ARG;
  401198:	f06f 0307 	mvn.w	r3, #7
}
  40119c:	4618      	mov	r0, r3
  40119e:	3710      	adds	r7, #16
  4011a0:	46bd      	mov	sp, r7
  4011a2:	bd80      	pop	{r7, pc}
  4011a4:	40030000 	.word	0x40030000
  4011a8:	204009dc 	.word	0x204009dc
  4011ac:	00404185 	.word	0x00404185
  4011b0:	40034000 	.word	0x40034000
  4011b4:	20400d1c 	.word	0x20400d1c

004011b8 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  4011b8:	b580      	push	{r7, lr}
  4011ba:	b084      	sub	sp, #16
  4011bc:	af00      	add	r7, sp, #0
  4011be:	60f8      	str	r0, [r7, #12]
  4011c0:	60b9      	str	r1, [r7, #8]
  4011c2:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  4011c4:	68fb      	ldr	r3, [r7, #12]
  4011c6:	681b      	ldr	r3, [r3, #0]
  4011c8:	4a11      	ldr	r2, [pc, #68]	; (401210 <mcan_get_rx_fifo_0_element+0x58>)
  4011ca:	4293      	cmp	r3, r2
  4011cc:	d10a      	bne.n	4011e4 <mcan_get_rx_fifo_0_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4011ce:	687b      	ldr	r3, [r7, #4]
  4011d0:	011b      	lsls	r3, r3, #4
  4011d2:	4a10      	ldr	r2, [pc, #64]	; (401214 <mcan_get_rx_fifo_0_element+0x5c>)
  4011d4:	4413      	add	r3, r2
  4011d6:	2210      	movs	r2, #16
  4011d8:	4619      	mov	r1, r3
  4011da:	68b8      	ldr	r0, [r7, #8]
  4011dc:	4b0e      	ldr	r3, [pc, #56]	; (401218 <mcan_get_rx_fifo_0_element+0x60>)
  4011de:	4798      	blx	r3
		return STATUS_OK;
  4011e0:	2300      	movs	r3, #0
  4011e2:	e011      	b.n	401208 <mcan_get_rx_fifo_0_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  4011e4:	68fb      	ldr	r3, [r7, #12]
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	4a0c      	ldr	r2, [pc, #48]	; (40121c <mcan_get_rx_fifo_0_element+0x64>)
  4011ea:	4293      	cmp	r3, r2
  4011ec:	d10a      	bne.n	401204 <mcan_get_rx_fifo_0_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  4011ee:	687b      	ldr	r3, [r7, #4]
  4011f0:	011b      	lsls	r3, r3, #4
  4011f2:	4a0b      	ldr	r2, [pc, #44]	; (401220 <mcan_get_rx_fifo_0_element+0x68>)
  4011f4:	4413      	add	r3, r2
  4011f6:	2210      	movs	r2, #16
  4011f8:	4619      	mov	r1, r3
  4011fa:	68b8      	ldr	r0, [r7, #8]
  4011fc:	4b06      	ldr	r3, [pc, #24]	; (401218 <mcan_get_rx_fifo_0_element+0x60>)
  4011fe:	4798      	blx	r3
		return STATUS_OK;
  401200:	2300      	movs	r3, #0
  401202:	e001      	b.n	401208 <mcan_get_rx_fifo_0_element+0x50>
	}
	return ERR_INVALID_ARG;
  401204:	f06f 0307 	mvn.w	r3, #7
}
  401208:	4618      	mov	r0, r3
  40120a:	3710      	adds	r7, #16
  40120c:	46bd      	mov	sp, r7
  40120e:	bd80      	pop	{r7, pc}
  401210:	40030000 	.word	0x40030000
  401214:	204009ec 	.word	0x204009ec
  401218:	00404185 	.word	0x00404185
  40121c:	40034000 	.word	0x40034000
  401220:	20400d2c 	.word	0x20400d2c

00401224 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  401224:	b580      	push	{r7, lr}
  401226:	b084      	sub	sp, #16
  401228:	af00      	add	r7, sp, #0
  40122a:	60f8      	str	r0, [r7, #12]
  40122c:	60b9      	str	r1, [r7, #8]
  40122e:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  401230:	68fb      	ldr	r3, [r7, #12]
  401232:	681b      	ldr	r3, [r3, #0]
  401234:	4a11      	ldr	r2, [pc, #68]	; (40127c <mcan_get_rx_fifo_1_element+0x58>)
  401236:	4293      	cmp	r3, r2
  401238:	d10a      	bne.n	401250 <mcan_get_rx_fifo_1_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  40123a:	687b      	ldr	r3, [r7, #4]
  40123c:	011b      	lsls	r3, r3, #4
  40123e:	4a10      	ldr	r2, [pc, #64]	; (401280 <mcan_get_rx_fifo_1_element+0x5c>)
  401240:	4413      	add	r3, r2
  401242:	2210      	movs	r2, #16
  401244:	4619      	mov	r1, r3
  401246:	68b8      	ldr	r0, [r7, #8]
  401248:	4b0e      	ldr	r3, [pc, #56]	; (401284 <mcan_get_rx_fifo_1_element+0x60>)
  40124a:	4798      	blx	r3
		return STATUS_OK;
  40124c:	2300      	movs	r3, #0
  40124e:	e011      	b.n	401274 <mcan_get_rx_fifo_1_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  401250:	68fb      	ldr	r3, [r7, #12]
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	4a0c      	ldr	r2, [pc, #48]	; (401288 <mcan_get_rx_fifo_1_element+0x64>)
  401256:	4293      	cmp	r3, r2
  401258:	d10a      	bne.n	401270 <mcan_get_rx_fifo_1_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  40125a:	687b      	ldr	r3, [r7, #4]
  40125c:	011b      	lsls	r3, r3, #4
  40125e:	4a0b      	ldr	r2, [pc, #44]	; (40128c <mcan_get_rx_fifo_1_element+0x68>)
  401260:	4413      	add	r3, r2
  401262:	2210      	movs	r2, #16
  401264:	4619      	mov	r1, r3
  401266:	68b8      	ldr	r0, [r7, #8]
  401268:	4b06      	ldr	r3, [pc, #24]	; (401284 <mcan_get_rx_fifo_1_element+0x60>)
  40126a:	4798      	blx	r3
		return STATUS_OK;
  40126c:	2300      	movs	r3, #0
  40126e:	e001      	b.n	401274 <mcan_get_rx_fifo_1_element+0x50>
	}
	return ERR_INVALID_ARG;
  401270:	f06f 0307 	mvn.w	r3, #7
}
  401274:	4618      	mov	r0, r3
  401276:	3710      	adds	r7, #16
  401278:	46bd      	mov	sp, r7
  40127a:	bd80      	pop	{r7, pc}
  40127c:	40030000 	.word	0x40030000
  401280:	20400aec 	.word	0x20400aec
  401284:	00404185 	.word	0x00404185
  401288:	40034000 	.word	0x40034000
  40128c:	20400e2c 	.word	0x20400e2c

00401290 <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  401290:	b480      	push	{r7}
  401292:	b087      	sub	sp, #28
  401294:	af00      	add	r7, sp, #0
  401296:	60f8      	str	r0, [r7, #12]
  401298:	60b9      	str	r1, [r7, #8]
  40129a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  40129c:	68fb      	ldr	r3, [r7, #12]
  40129e:	681b      	ldr	r3, [r3, #0]
  4012a0:	4a2f      	ldr	r2, [pc, #188]	; (401360 <mcan_set_tx_buffer_element+0xd0>)
  4012a2:	4293      	cmp	r3, r2
  4012a4:	d127      	bne.n	4012f6 <mcan_set_tx_buffer_element+0x66>
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  4012a6:	68bb      	ldr	r3, [r7, #8]
  4012a8:	681a      	ldr	r2, [r3, #0]
  4012aa:	492e      	ldr	r1, [pc, #184]	; (401364 <mcan_set_tx_buffer_element+0xd4>)
  4012ac:	687b      	ldr	r3, [r7, #4]
  4012ae:	011b      	lsls	r3, r3, #4
  4012b0:	440b      	add	r3, r1
  4012b2:	601a      	str	r2, [r3, #0]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  4012b4:	68bb      	ldr	r3, [r7, #8]
  4012b6:	685a      	ldr	r2, [r3, #4]
  4012b8:	492a      	ldr	r1, [pc, #168]	; (401364 <mcan_set_tx_buffer_element+0xd4>)
  4012ba:	687b      	ldr	r3, [r7, #4]
  4012bc:	011b      	lsls	r3, r3, #4
  4012be:	440b      	add	r3, r1
  4012c0:	3304      	adds	r3, #4
  4012c2:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4012c4:	2300      	movs	r3, #0
  4012c6:	617b      	str	r3, [r7, #20]
  4012c8:	e010      	b.n	4012ec <mcan_set_tx_buffer_element+0x5c>
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  4012ca:	68ba      	ldr	r2, [r7, #8]
  4012cc:	697b      	ldr	r3, [r7, #20]
  4012ce:	4413      	add	r3, r2
  4012d0:	3308      	adds	r3, #8
  4012d2:	7819      	ldrb	r1, [r3, #0]
  4012d4:	4a23      	ldr	r2, [pc, #140]	; (401364 <mcan_set_tx_buffer_element+0xd4>)
  4012d6:	687b      	ldr	r3, [r7, #4]
  4012d8:	011b      	lsls	r3, r3, #4
  4012da:	441a      	add	r2, r3
  4012dc:	697b      	ldr	r3, [r7, #20]
  4012de:	4413      	add	r3, r2
  4012e0:	3308      	adds	r3, #8
  4012e2:	460a      	mov	r2, r1
  4012e4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4012e6:	697b      	ldr	r3, [r7, #20]
  4012e8:	3301      	adds	r3, #1
  4012ea:	617b      	str	r3, [r7, #20]
  4012ec:	697b      	ldr	r3, [r7, #20]
  4012ee:	2b07      	cmp	r3, #7
  4012f0:	d9eb      	bls.n	4012ca <mcan_set_tx_buffer_element+0x3a>
		}
		return STATUS_OK;
  4012f2:	2300      	movs	r3, #0
  4012f4:	e02e      	b.n	401354 <mcan_set_tx_buffer_element+0xc4>
	} else if (module_inst->hw == MCAN1) {
  4012f6:	68fb      	ldr	r3, [r7, #12]
  4012f8:	681b      	ldr	r3, [r3, #0]
  4012fa:	4a1b      	ldr	r2, [pc, #108]	; (401368 <mcan_set_tx_buffer_element+0xd8>)
  4012fc:	4293      	cmp	r3, r2
  4012fe:	d127      	bne.n	401350 <mcan_set_tx_buffer_element+0xc0>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401300:	68bb      	ldr	r3, [r7, #8]
  401302:	681a      	ldr	r2, [r3, #0]
  401304:	4919      	ldr	r1, [pc, #100]	; (40136c <mcan_set_tx_buffer_element+0xdc>)
  401306:	687b      	ldr	r3, [r7, #4]
  401308:	011b      	lsls	r3, r3, #4
  40130a:	440b      	add	r3, r1
  40130c:	601a      	str	r2, [r3, #0]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  40130e:	68bb      	ldr	r3, [r7, #8]
  401310:	685a      	ldr	r2, [r3, #4]
  401312:	4916      	ldr	r1, [pc, #88]	; (40136c <mcan_set_tx_buffer_element+0xdc>)
  401314:	687b      	ldr	r3, [r7, #4]
  401316:	011b      	lsls	r3, r3, #4
  401318:	440b      	add	r3, r1
  40131a:	3304      	adds	r3, #4
  40131c:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40131e:	2300      	movs	r3, #0
  401320:	617b      	str	r3, [r7, #20]
  401322:	e010      	b.n	401346 <mcan_set_tx_buffer_element+0xb6>
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  401324:	68ba      	ldr	r2, [r7, #8]
  401326:	697b      	ldr	r3, [r7, #20]
  401328:	4413      	add	r3, r2
  40132a:	3308      	adds	r3, #8
  40132c:	7819      	ldrb	r1, [r3, #0]
  40132e:	4a0f      	ldr	r2, [pc, #60]	; (40136c <mcan_set_tx_buffer_element+0xdc>)
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	011b      	lsls	r3, r3, #4
  401334:	441a      	add	r2, r3
  401336:	697b      	ldr	r3, [r7, #20]
  401338:	4413      	add	r3, r2
  40133a:	3308      	adds	r3, #8
  40133c:	460a      	mov	r2, r1
  40133e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401340:	697b      	ldr	r3, [r7, #20]
  401342:	3301      	adds	r3, #1
  401344:	617b      	str	r3, [r7, #20]
  401346:	697b      	ldr	r3, [r7, #20]
  401348:	2b07      	cmp	r3, #7
  40134a:	d9eb      	bls.n	401324 <mcan_set_tx_buffer_element+0x94>
		}
		return STATUS_OK;
  40134c:	2300      	movs	r3, #0
  40134e:	e001      	b.n	401354 <mcan_set_tx_buffer_element+0xc4>
	}
	return ERR_INVALID_ARG;
  401350:	f06f 0307 	mvn.w	r3, #7
}
  401354:	4618      	mov	r0, r3
  401356:	371c      	adds	r7, #28
  401358:	46bd      	mov	sp, r7
  40135a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40135e:	4770      	bx	lr
  401360:	40030000 	.word	0x40030000
  401364:	20400bec 	.word	0x20400bec
  401368:	40034000 	.word	0x40034000
  40136c:	20400f2c 	.word	0x20400f2c

00401370 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401370:	b580      	push	{r7, lr}
  401372:	b086      	sub	sp, #24
  401374:	af00      	add	r7, sp, #0
  401376:	60f8      	str	r0, [r7, #12]
  401378:	60b9      	str	r1, [r7, #8]
  40137a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40137c:	2300      	movs	r3, #0
  40137e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  401380:	68fb      	ldr	r3, [r7, #12]
  401382:	2b00      	cmp	r3, #0
  401384:	d012      	beq.n	4013ac <_read+0x3c>
		return -1;
  401386:	f04f 33ff 	mov.w	r3, #4294967295
  40138a:	e013      	b.n	4013b4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40138c:	4b0b      	ldr	r3, [pc, #44]	; (4013bc <_read+0x4c>)
  40138e:	681b      	ldr	r3, [r3, #0]
  401390:	4a0b      	ldr	r2, [pc, #44]	; (4013c0 <_read+0x50>)
  401392:	6812      	ldr	r2, [r2, #0]
  401394:	68b9      	ldr	r1, [r7, #8]
  401396:	4610      	mov	r0, r2
  401398:	4798      	blx	r3
		ptr++;
  40139a:	68bb      	ldr	r3, [r7, #8]
  40139c:	3301      	adds	r3, #1
  40139e:	60bb      	str	r3, [r7, #8]
		nChars++;
  4013a0:	697b      	ldr	r3, [r7, #20]
  4013a2:	3301      	adds	r3, #1
  4013a4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	3b01      	subs	r3, #1
  4013aa:	607b      	str	r3, [r7, #4]
  4013ac:	687b      	ldr	r3, [r7, #4]
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	dcec      	bgt.n	40138c <_read+0x1c>
	}
	return nChars;
  4013b2:	697b      	ldr	r3, [r7, #20]
}
  4013b4:	4618      	mov	r0, r3
  4013b6:	3718      	adds	r7, #24
  4013b8:	46bd      	mov	sp, r7
  4013ba:	bd80      	pop	{r7, pc}
  4013bc:	2040111c 	.word	0x2040111c
  4013c0:	20401124 	.word	0x20401124

004013c4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4013c4:	b580      	push	{r7, lr}
  4013c6:	b086      	sub	sp, #24
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	60f8      	str	r0, [r7, #12]
  4013cc:	60b9      	str	r1, [r7, #8]
  4013ce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4013d0:	2300      	movs	r3, #0
  4013d2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4013d4:	68fb      	ldr	r3, [r7, #12]
  4013d6:	2b01      	cmp	r3, #1
  4013d8:	d01e      	beq.n	401418 <_write+0x54>
  4013da:	68fb      	ldr	r3, [r7, #12]
  4013dc:	2b02      	cmp	r3, #2
  4013de:	d01b      	beq.n	401418 <_write+0x54>
  4013e0:	68fb      	ldr	r3, [r7, #12]
  4013e2:	2b03      	cmp	r3, #3
  4013e4:	d018      	beq.n	401418 <_write+0x54>
		return -1;
  4013e6:	f04f 33ff 	mov.w	r3, #4294967295
  4013ea:	e019      	b.n	401420 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4013ec:	4b0e      	ldr	r3, [pc, #56]	; (401428 <_write+0x64>)
  4013ee:	681a      	ldr	r2, [r3, #0]
  4013f0:	4b0e      	ldr	r3, [pc, #56]	; (40142c <_write+0x68>)
  4013f2:	6818      	ldr	r0, [r3, #0]
  4013f4:	68bb      	ldr	r3, [r7, #8]
  4013f6:	1c59      	adds	r1, r3, #1
  4013f8:	60b9      	str	r1, [r7, #8]
  4013fa:	781b      	ldrb	r3, [r3, #0]
  4013fc:	4619      	mov	r1, r3
  4013fe:	4790      	blx	r2
  401400:	4603      	mov	r3, r0
  401402:	2b00      	cmp	r3, #0
  401404:	da02      	bge.n	40140c <_write+0x48>
			return -1;
  401406:	f04f 33ff 	mov.w	r3, #4294967295
  40140a:	e009      	b.n	401420 <_write+0x5c>
		}
		++nChars;
  40140c:	697b      	ldr	r3, [r7, #20]
  40140e:	3301      	adds	r3, #1
  401410:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  401412:	687b      	ldr	r3, [r7, #4]
  401414:	3b01      	subs	r3, #1
  401416:	607b      	str	r3, [r7, #4]
  401418:	687b      	ldr	r3, [r7, #4]
  40141a:	2b00      	cmp	r3, #0
  40141c:	d1e6      	bne.n	4013ec <_write+0x28>
	}
	return nChars;
  40141e:	697b      	ldr	r3, [r7, #20]
}
  401420:	4618      	mov	r0, r3
  401422:	3718      	adds	r7, #24
  401424:	46bd      	mov	sp, r7
  401426:	bd80      	pop	{r7, pc}
  401428:	20401120 	.word	0x20401120
  40142c:	20401124 	.word	0x20401124

00401430 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401430:	b480      	push	{r7}
  401432:	b083      	sub	sp, #12
  401434:	af00      	add	r7, sp, #0
  401436:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401438:	687b      	ldr	r3, [r7, #4]
  40143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40143c:	4618      	mov	r0, r3
  40143e:	370c      	adds	r7, #12
  401440:	46bd      	mov	sp, r7
  401442:	f85d 7b04 	ldr.w	r7, [sp], #4
  401446:	4770      	bx	lr

00401448 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401448:	b480      	push	{r7}
  40144a:	b083      	sub	sp, #12
  40144c:	af00      	add	r7, sp, #0
  40144e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401450:	687b      	ldr	r3, [r7, #4]
  401452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401454:	4618      	mov	r0, r3
  401456:	370c      	adds	r7, #12
  401458:	46bd      	mov	sp, r7
  40145a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40145e:	4770      	bx	lr

00401460 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401460:	b580      	push	{r7, lr}
  401462:	b084      	sub	sp, #16
  401464:	af00      	add	r7, sp, #0
  401466:	6078      	str	r0, [r7, #4]
  401468:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40146a:	6878      	ldr	r0, [r7, #4]
  40146c:	4b26      	ldr	r3, [pc, #152]	; (401508 <pio_handler_process+0xa8>)
  40146e:	4798      	blx	r3
  401470:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401472:	6878      	ldr	r0, [r7, #4]
  401474:	4b25      	ldr	r3, [pc, #148]	; (40150c <pio_handler_process+0xac>)
  401476:	4798      	blx	r3
  401478:	4602      	mov	r2, r0
  40147a:	68fb      	ldr	r3, [r7, #12]
  40147c:	4013      	ands	r3, r2
  40147e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401480:	68fb      	ldr	r3, [r7, #12]
  401482:	2b00      	cmp	r3, #0
  401484:	d03c      	beq.n	401500 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401486:	2300      	movs	r3, #0
  401488:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40148a:	e034      	b.n	4014f6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40148c:	4a20      	ldr	r2, [pc, #128]	; (401510 <pio_handler_process+0xb0>)
  40148e:	68bb      	ldr	r3, [r7, #8]
  401490:	011b      	lsls	r3, r3, #4
  401492:	4413      	add	r3, r2
  401494:	681a      	ldr	r2, [r3, #0]
  401496:	683b      	ldr	r3, [r7, #0]
  401498:	429a      	cmp	r2, r3
  40149a:	d126      	bne.n	4014ea <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40149c:	4a1c      	ldr	r2, [pc, #112]	; (401510 <pio_handler_process+0xb0>)
  40149e:	68bb      	ldr	r3, [r7, #8]
  4014a0:	011b      	lsls	r3, r3, #4
  4014a2:	4413      	add	r3, r2
  4014a4:	3304      	adds	r3, #4
  4014a6:	681a      	ldr	r2, [r3, #0]
  4014a8:	68fb      	ldr	r3, [r7, #12]
  4014aa:	4013      	ands	r3, r2
  4014ac:	2b00      	cmp	r3, #0
  4014ae:	d01c      	beq.n	4014ea <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4014b0:	4a17      	ldr	r2, [pc, #92]	; (401510 <pio_handler_process+0xb0>)
  4014b2:	68bb      	ldr	r3, [r7, #8]
  4014b4:	011b      	lsls	r3, r3, #4
  4014b6:	4413      	add	r3, r2
  4014b8:	330c      	adds	r3, #12
  4014ba:	681b      	ldr	r3, [r3, #0]
  4014bc:	4914      	ldr	r1, [pc, #80]	; (401510 <pio_handler_process+0xb0>)
  4014be:	68ba      	ldr	r2, [r7, #8]
  4014c0:	0112      	lsls	r2, r2, #4
  4014c2:	440a      	add	r2, r1
  4014c4:	6810      	ldr	r0, [r2, #0]
  4014c6:	4912      	ldr	r1, [pc, #72]	; (401510 <pio_handler_process+0xb0>)
  4014c8:	68ba      	ldr	r2, [r7, #8]
  4014ca:	0112      	lsls	r2, r2, #4
  4014cc:	440a      	add	r2, r1
  4014ce:	3204      	adds	r2, #4
  4014d0:	6812      	ldr	r2, [r2, #0]
  4014d2:	4611      	mov	r1, r2
  4014d4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4014d6:	4a0e      	ldr	r2, [pc, #56]	; (401510 <pio_handler_process+0xb0>)
  4014d8:	68bb      	ldr	r3, [r7, #8]
  4014da:	011b      	lsls	r3, r3, #4
  4014dc:	4413      	add	r3, r2
  4014de:	3304      	adds	r3, #4
  4014e0:	681b      	ldr	r3, [r3, #0]
  4014e2:	43db      	mvns	r3, r3
  4014e4:	68fa      	ldr	r2, [r7, #12]
  4014e6:	4013      	ands	r3, r2
  4014e8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4014ea:	68bb      	ldr	r3, [r7, #8]
  4014ec:	3301      	adds	r3, #1
  4014ee:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4014f0:	68bb      	ldr	r3, [r7, #8]
  4014f2:	2b06      	cmp	r3, #6
  4014f4:	d803      	bhi.n	4014fe <pio_handler_process+0x9e>
		while (status != 0) {
  4014f6:	68fb      	ldr	r3, [r7, #12]
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d1c7      	bne.n	40148c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4014fc:	e000      	b.n	401500 <pio_handler_process+0xa0>
				break;
  4014fe:	bf00      	nop
}
  401500:	bf00      	nop
  401502:	3710      	adds	r7, #16
  401504:	46bd      	mov	sp, r7
  401506:	bd80      	pop	{r7, pc}
  401508:	00401431 	.word	0x00401431
  40150c:	00401449 	.word	0x00401449
  401510:	2040105c 	.word	0x2040105c

00401514 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401514:	b580      	push	{r7, lr}
  401516:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  401518:	210a      	movs	r1, #10
  40151a:	4802      	ldr	r0, [pc, #8]	; (401524 <PIOA_Handler+0x10>)
  40151c:	4b02      	ldr	r3, [pc, #8]	; (401528 <PIOA_Handler+0x14>)
  40151e:	4798      	blx	r3
}
  401520:	bf00      	nop
  401522:	bd80      	pop	{r7, pc}
  401524:	400e0e00 	.word	0x400e0e00
  401528:	00401461 	.word	0x00401461

0040152c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40152c:	b580      	push	{r7, lr}
  40152e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401530:	210b      	movs	r1, #11
  401532:	4802      	ldr	r0, [pc, #8]	; (40153c <PIOB_Handler+0x10>)
  401534:	4b02      	ldr	r3, [pc, #8]	; (401540 <PIOB_Handler+0x14>)
  401536:	4798      	blx	r3
}
  401538:	bf00      	nop
  40153a:	bd80      	pop	{r7, pc}
  40153c:	400e1000 	.word	0x400e1000
  401540:	00401461 	.word	0x00401461

00401544 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401544:	b580      	push	{r7, lr}
  401546:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401548:	210c      	movs	r1, #12
  40154a:	4802      	ldr	r0, [pc, #8]	; (401554 <PIOC_Handler+0x10>)
  40154c:	4b02      	ldr	r3, [pc, #8]	; (401558 <PIOC_Handler+0x14>)
  40154e:	4798      	blx	r3
}
  401550:	bf00      	nop
  401552:	bd80      	pop	{r7, pc}
  401554:	400e1200 	.word	0x400e1200
  401558:	00401461 	.word	0x00401461

0040155c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40155c:	b580      	push	{r7, lr}
  40155e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401560:	2110      	movs	r1, #16
  401562:	4802      	ldr	r0, [pc, #8]	; (40156c <PIOD_Handler+0x10>)
  401564:	4b02      	ldr	r3, [pc, #8]	; (401570 <PIOD_Handler+0x14>)
  401566:	4798      	blx	r3
}
  401568:	bf00      	nop
  40156a:	bd80      	pop	{r7, pc}
  40156c:	400e1400 	.word	0x400e1400
  401570:	00401461 	.word	0x00401461

00401574 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401574:	b580      	push	{r7, lr}
  401576:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401578:	2111      	movs	r1, #17
  40157a:	4802      	ldr	r0, [pc, #8]	; (401584 <PIOE_Handler+0x10>)
  40157c:	4b02      	ldr	r3, [pc, #8]	; (401588 <PIOE_Handler+0x14>)
  40157e:	4798      	blx	r3
}
  401580:	bf00      	nop
  401582:	bd80      	pop	{r7, pc}
  401584:	400e1600 	.word	0x400e1600
  401588:	00401461 	.word	0x00401461

0040158c <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  40158c:	b480      	push	{r7}
  40158e:	b083      	sub	sp, #12
  401590:	af00      	add	r7, sp, #0
  401592:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401594:	687b      	ldr	r3, [r7, #4]
  401596:	3b01      	subs	r3, #1
  401598:	2b03      	cmp	r3, #3
  40159a:	d81a      	bhi.n	4015d2 <pmc_mck_set_division+0x46>
  40159c:	a201      	add	r2, pc, #4	; (adr r2, 4015a4 <pmc_mck_set_division+0x18>)
  40159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015a2:	bf00      	nop
  4015a4:	004015b5 	.word	0x004015b5
  4015a8:	004015bb 	.word	0x004015bb
  4015ac:	004015c3 	.word	0x004015c3
  4015b0:	004015cb 	.word	0x004015cb
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4015b4:	2300      	movs	r3, #0
  4015b6:	607b      	str	r3, [r7, #4]
			break;
  4015b8:	e00e      	b.n	4015d8 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
  4015be:	607b      	str	r3, [r7, #4]
			break;
  4015c0:	e00a      	b.n	4015d8 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
  4015c6:	607b      	str	r3, [r7, #4]
			break;
  4015c8:	e006      	b.n	4015d8 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4015ca:	f44f 7300 	mov.w	r3, #512	; 0x200
  4015ce:	607b      	str	r3, [r7, #4]
			break;
  4015d0:	e002      	b.n	4015d8 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4015d2:	2300      	movs	r3, #0
  4015d4:	607b      	str	r3, [r7, #4]
			break;
  4015d6:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4015d8:	490a      	ldr	r1, [pc, #40]	; (401604 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4015da:	4b0a      	ldr	r3, [pc, #40]	; (401604 <pmc_mck_set_division+0x78>)
  4015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4015e2:	687b      	ldr	r3, [r7, #4]
  4015e4:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4015e6:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4015e8:	bf00      	nop
  4015ea:	4b06      	ldr	r3, [pc, #24]	; (401604 <pmc_mck_set_division+0x78>)
  4015ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015ee:	f003 0308 	and.w	r3, r3, #8
  4015f2:	2b00      	cmp	r3, #0
  4015f4:	d0f9      	beq.n	4015ea <pmc_mck_set_division+0x5e>
}
  4015f6:	bf00      	nop
  4015f8:	370c      	adds	r7, #12
  4015fa:	46bd      	mov	sp, r7
  4015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401600:	4770      	bx	lr
  401602:	bf00      	nop
  401604:	400e0600 	.word	0x400e0600

00401608 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401608:	b480      	push	{r7}
  40160a:	b085      	sub	sp, #20
  40160c:	af00      	add	r7, sp, #0
  40160e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401610:	491d      	ldr	r1, [pc, #116]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  401612:	4b1d      	ldr	r3, [pc, #116]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  401614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40161a:	687b      	ldr	r3, [r7, #4]
  40161c:	4313      	orrs	r3, r2
  40161e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401624:	60fb      	str	r3, [r7, #12]
  401626:	e007      	b.n	401638 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401628:	68fb      	ldr	r3, [r7, #12]
  40162a:	2b00      	cmp	r3, #0
  40162c:	d101      	bne.n	401632 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40162e:	2301      	movs	r3, #1
  401630:	e023      	b.n	40167a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401632:	68fb      	ldr	r3, [r7, #12]
  401634:	3b01      	subs	r3, #1
  401636:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401638:	4b13      	ldr	r3, [pc, #76]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  40163a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40163c:	f003 0308 	and.w	r3, r3, #8
  401640:	2b00      	cmp	r3, #0
  401642:	d0f1      	beq.n	401628 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401644:	4a10      	ldr	r2, [pc, #64]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  401646:	4b10      	ldr	r3, [pc, #64]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  401648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40164a:	f023 0303 	bic.w	r3, r3, #3
  40164e:	f043 0302 	orr.w	r3, r3, #2
  401652:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401658:	60fb      	str	r3, [r7, #12]
  40165a:	e007      	b.n	40166c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	2b00      	cmp	r3, #0
  401660:	d101      	bne.n	401666 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401662:	2301      	movs	r3, #1
  401664:	e009      	b.n	40167a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401666:	68fb      	ldr	r3, [r7, #12]
  401668:	3b01      	subs	r3, #1
  40166a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40166c:	4b06      	ldr	r3, [pc, #24]	; (401688 <pmc_switch_mck_to_pllack+0x80>)
  40166e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401670:	f003 0308 	and.w	r3, r3, #8
  401674:	2b00      	cmp	r3, #0
  401676:	d0f1      	beq.n	40165c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401678:	2300      	movs	r3, #0
}
  40167a:	4618      	mov	r0, r3
  40167c:	3714      	adds	r7, #20
  40167e:	46bd      	mov	sp, r7
  401680:	f85d 7b04 	ldr.w	r7, [sp], #4
  401684:	4770      	bx	lr
  401686:	bf00      	nop
  401688:	400e0600 	.word	0x400e0600

0040168c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40168c:	b480      	push	{r7}
  40168e:	b083      	sub	sp, #12
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	2b01      	cmp	r3, #1
  401698:	d105      	bne.n	4016a6 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40169a:	4907      	ldr	r1, [pc, #28]	; (4016b8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40169c:	4b06      	ldr	r3, [pc, #24]	; (4016b8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40169e:	689a      	ldr	r2, [r3, #8]
  4016a0:	4b06      	ldr	r3, [pc, #24]	; (4016bc <pmc_switch_sclk_to_32kxtal+0x30>)
  4016a2:	4313      	orrs	r3, r2
  4016a4:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4016a6:	4b04      	ldr	r3, [pc, #16]	; (4016b8 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4016a8:	4a05      	ldr	r2, [pc, #20]	; (4016c0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4016aa:	601a      	str	r2, [r3, #0]
}
  4016ac:	bf00      	nop
  4016ae:	370c      	adds	r7, #12
  4016b0:	46bd      	mov	sp, r7
  4016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016b6:	4770      	bx	lr
  4016b8:	400e1810 	.word	0x400e1810
  4016bc:	a5100000 	.word	0xa5100000
  4016c0:	a5000008 	.word	0xa5000008

004016c4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4016c4:	b480      	push	{r7}
  4016c6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4016c8:	4b09      	ldr	r3, [pc, #36]	; (4016f0 <pmc_osc_is_ready_32kxtal+0x2c>)
  4016ca:	695b      	ldr	r3, [r3, #20]
  4016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4016d0:	2b00      	cmp	r3, #0
  4016d2:	d007      	beq.n	4016e4 <pmc_osc_is_ready_32kxtal+0x20>
  4016d4:	4b07      	ldr	r3, [pc, #28]	; (4016f4 <pmc_osc_is_ready_32kxtal+0x30>)
  4016d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016dc:	2b00      	cmp	r3, #0
  4016de:	d001      	beq.n	4016e4 <pmc_osc_is_ready_32kxtal+0x20>
  4016e0:	2301      	movs	r3, #1
  4016e2:	e000      	b.n	4016e6 <pmc_osc_is_ready_32kxtal+0x22>
  4016e4:	2300      	movs	r3, #0
}
  4016e6:	4618      	mov	r0, r3
  4016e8:	46bd      	mov	sp, r7
  4016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016ee:	4770      	bx	lr
  4016f0:	400e1810 	.word	0x400e1810
  4016f4:	400e0600 	.word	0x400e0600

004016f8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4016f8:	b480      	push	{r7}
  4016fa:	b083      	sub	sp, #12
  4016fc:	af00      	add	r7, sp, #0
  4016fe:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401700:	4915      	ldr	r1, [pc, #84]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  401702:	4b15      	ldr	r3, [pc, #84]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  401704:	6a1a      	ldr	r2, [r3, #32]
  401706:	4b15      	ldr	r3, [pc, #84]	; (40175c <pmc_switch_mainck_to_fastrc+0x64>)
  401708:	4313      	orrs	r3, r2
  40170a:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40170c:	bf00      	nop
  40170e:	4b12      	ldr	r3, [pc, #72]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  401710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401716:	2b00      	cmp	r3, #0
  401718:	d0f9      	beq.n	40170e <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40171a:	490f      	ldr	r1, [pc, #60]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  40171c:	4b0e      	ldr	r3, [pc, #56]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  40171e:	6a1a      	ldr	r2, [r3, #32]
  401720:	4b0f      	ldr	r3, [pc, #60]	; (401760 <pmc_switch_mainck_to_fastrc+0x68>)
  401722:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401724:	687a      	ldr	r2, [r7, #4]
  401726:	4313      	orrs	r3, r2
  401728:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40172c:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40172e:	bf00      	nop
  401730:	4b09      	ldr	r3, [pc, #36]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  401732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401738:	2b00      	cmp	r3, #0
  40173a:	d0f9      	beq.n	401730 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40173c:	4906      	ldr	r1, [pc, #24]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  40173e:	4b06      	ldr	r3, [pc, #24]	; (401758 <pmc_switch_mainck_to_fastrc+0x60>)
  401740:	6a1a      	ldr	r2, [r3, #32]
  401742:	4b08      	ldr	r3, [pc, #32]	; (401764 <pmc_switch_mainck_to_fastrc+0x6c>)
  401744:	4013      	ands	r3, r2
  401746:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40174a:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40174c:	bf00      	nop
  40174e:	370c      	adds	r7, #12
  401750:	46bd      	mov	sp, r7
  401752:	f85d 7b04 	ldr.w	r7, [sp], #4
  401756:	4770      	bx	lr
  401758:	400e0600 	.word	0x400e0600
  40175c:	00370008 	.word	0x00370008
  401760:	ffc8ff8f 	.word	0xffc8ff8f
  401764:	fec8ffff 	.word	0xfec8ffff

00401768 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401768:	b480      	push	{r7}
  40176a:	b083      	sub	sp, #12
  40176c:	af00      	add	r7, sp, #0
  40176e:	6078      	str	r0, [r7, #4]
  401770:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401772:	687b      	ldr	r3, [r7, #4]
  401774:	2b00      	cmp	r3, #0
  401776:	d008      	beq.n	40178a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401778:	4913      	ldr	r1, [pc, #76]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  40177a:	4b13      	ldr	r3, [pc, #76]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  40177c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40177e:	4a13      	ldr	r2, [pc, #76]	; (4017cc <pmc_switch_mainck_to_xtal+0x64>)
  401780:	401a      	ands	r2, r3
  401782:	4b13      	ldr	r3, [pc, #76]	; (4017d0 <pmc_switch_mainck_to_xtal+0x68>)
  401784:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401786:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401788:	e018      	b.n	4017bc <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40178a:	490f      	ldr	r1, [pc, #60]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  40178c:	4b0e      	ldr	r3, [pc, #56]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  40178e:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401790:	4b10      	ldr	r3, [pc, #64]	; (4017d4 <pmc_switch_mainck_to_xtal+0x6c>)
  401792:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401794:	683a      	ldr	r2, [r7, #0]
  401796:	0212      	lsls	r2, r2, #8
  401798:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40179a:	431a      	orrs	r2, r3
  40179c:	4b0e      	ldr	r3, [pc, #56]	; (4017d8 <pmc_switch_mainck_to_xtal+0x70>)
  40179e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017a0:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4017a2:	bf00      	nop
  4017a4:	4b08      	ldr	r3, [pc, #32]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  4017a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017a8:	f003 0301 	and.w	r3, r3, #1
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d0f9      	beq.n	4017a4 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4017b0:	4905      	ldr	r1, [pc, #20]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  4017b2:	4b05      	ldr	r3, [pc, #20]	; (4017c8 <pmc_switch_mainck_to_xtal+0x60>)
  4017b4:	6a1a      	ldr	r2, [r3, #32]
  4017b6:	4b09      	ldr	r3, [pc, #36]	; (4017dc <pmc_switch_mainck_to_xtal+0x74>)
  4017b8:	4313      	orrs	r3, r2
  4017ba:	620b      	str	r3, [r1, #32]
}
  4017bc:	bf00      	nop
  4017be:	370c      	adds	r7, #12
  4017c0:	46bd      	mov	sp, r7
  4017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017c6:	4770      	bx	lr
  4017c8:	400e0600 	.word	0x400e0600
  4017cc:	fec8fffc 	.word	0xfec8fffc
  4017d0:	01370002 	.word	0x01370002
  4017d4:	ffc8fffc 	.word	0xffc8fffc
  4017d8:	00370001 	.word	0x00370001
  4017dc:	01370000 	.word	0x01370000

004017e0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4017e0:	b480      	push	{r7}
  4017e2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017e4:	4b04      	ldr	r3, [pc, #16]	; (4017f8 <pmc_osc_is_ready_mainck+0x18>)
  4017e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4017ec:	4618      	mov	r0, r3
  4017ee:	46bd      	mov	sp, r7
  4017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	400e0600 	.word	0x400e0600

004017fc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4017fc:	b480      	push	{r7}
  4017fe:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401800:	4b04      	ldr	r3, [pc, #16]	; (401814 <pmc_disable_pllack+0x18>)
  401802:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401806:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401808:	bf00      	nop
  40180a:	46bd      	mov	sp, r7
  40180c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0600 	.word	0x400e0600

00401818 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401818:	b480      	push	{r7}
  40181a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40181c:	4b04      	ldr	r3, [pc, #16]	; (401830 <pmc_is_locked_pllack+0x18>)
  40181e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401820:	f003 0302 	and.w	r3, r3, #2
}
  401824:	4618      	mov	r0, r3
  401826:	46bd      	mov	sp, r7
  401828:	f85d 7b04 	ldr.w	r7, [sp], #4
  40182c:	4770      	bx	lr
  40182e:	bf00      	nop
  401830:	400e0600 	.word	0x400e0600

00401834 <pmc_enable_upll_clock>:
#if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
  401834:	b480      	push	{r7}
  401836:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  401838:	4b07      	ldr	r3, [pc, #28]	; (401858 <pmc_enable_upll_clock+0x24>)
  40183a:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  40183e:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  401840:	bf00      	nop
  401842:	4b05      	ldr	r3, [pc, #20]	; (401858 <pmc_enable_upll_clock+0x24>)
  401844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401846:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40184a:	2b00      	cmp	r3, #0
  40184c:	d0f9      	beq.n	401842 <pmc_enable_upll_clock+0xe>
}
  40184e:	bf00      	nop
  401850:	46bd      	mov	sp, r7
  401852:	f85d 7b04 	ldr.w	r7, [sp], #4
  401856:	4770      	bx	lr
  401858:	400e0600 	.word	0x400e0600

0040185c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40185c:	b480      	push	{r7}
  40185e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  401860:	4b04      	ldr	r3, [pc, #16]	; (401874 <pmc_is_locked_upll+0x18>)
  401862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401864:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401868:	4618      	mov	r0, r3
  40186a:	46bd      	mov	sp, r7
  40186c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401870:	4770      	bx	lr
  401872:	bf00      	nop
  401874:	400e0600 	.word	0x400e0600

00401878 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401878:	b480      	push	{r7}
  40187a:	b085      	sub	sp, #20
  40187c:	af00      	add	r7, sp, #0
  40187e:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401880:	4a0b      	ldr	r2, [pc, #44]	; (4018b0 <pmc_enable_periph_clk+0x38>)
  401882:	687b      	ldr	r3, [r7, #4]
  401884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401888:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40188c:	4b08      	ldr	r3, [pc, #32]	; (4018b0 <pmc_enable_periph_clk+0x38>)
  40188e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  401892:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  401896:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  401898:	4a05      	ldr	r2, [pc, #20]	; (4018b0 <pmc_enable_periph_clk+0x38>)
  40189a:	68fb      	ldr	r3, [r7, #12]
  40189c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  4018a0:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4018a2:	4618      	mov	r0, r3
  4018a4:	3714      	adds	r7, #20
  4018a6:	46bd      	mov	sp, r7
  4018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	400e0600 	.word	0x400e0600

004018b4 <pmc_switch_pck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
  4018b4:	b480      	push	{r7}
  4018b6:	b085      	sub	sp, #20
  4018b8:	af00      	add	r7, sp, #0
  4018ba:	6078      	str	r0, [r7, #4]
  4018bc:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  4018be:	4912      	ldr	r1, [pc, #72]	; (401908 <pmc_switch_pck_to_pllack+0x54>)
  4018c0:	683b      	ldr	r3, [r7, #0]
  4018c2:	f043 0202 	orr.w	r2, r3, #2
  4018c6:	687b      	ldr	r3, [r7, #4]
  4018c8:	3310      	adds	r3, #16
  4018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  4018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4018d2:	60fb      	str	r3, [r7, #12]
  4018d4:	e007      	b.n	4018e6 <pmc_switch_pck_to_pllack+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4018d6:	68fb      	ldr	r3, [r7, #12]
  4018d8:	2b00      	cmp	r3, #0
  4018da:	d101      	bne.n	4018e0 <pmc_switch_pck_to_pllack+0x2c>
			return 1;
  4018dc:	2301      	movs	r3, #1
  4018de:	e00d      	b.n	4018fc <pmc_switch_pck_to_pllack+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4018e0:	68fb      	ldr	r3, [r7, #12]
  4018e2:	3b01      	subs	r3, #1
  4018e4:	60fb      	str	r3, [r7, #12]
  4018e6:	4b08      	ldr	r3, [pc, #32]	; (401908 <pmc_switch_pck_to_pllack+0x54>)
  4018e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4018ea:	f44f 7180 	mov.w	r1, #256	; 0x100
  4018ee:	687b      	ldr	r3, [r7, #4]
  4018f0:	fa01 f303 	lsl.w	r3, r1, r3
  4018f4:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4018f6:	2b00      	cmp	r3, #0
  4018f8:	d0ed      	beq.n	4018d6 <pmc_switch_pck_to_pllack+0x22>
		}
	}

	return 0;
  4018fa:	2300      	movs	r3, #0
}
  4018fc:	4618      	mov	r0, r3
  4018fe:	3714      	adds	r7, #20
  401900:	46bd      	mov	sp, r7
  401902:	f85d 7b04 	ldr.w	r7, [sp], #4
  401906:	4770      	bx	lr
  401908:	400e0600 	.word	0x400e0600

0040190c <pmc_get_slck_config>:
 * \brief Get Slow clock source configuration.
 *
 * \retval Crystal Oscillator Select value.
 */
uint32_t pmc_get_slck_config(void)
{
  40190c:	b480      	push	{r7}
  40190e:	af00      	add	r7, sp, #0
	return (SUPC->SUPC_CR & SUPC_CR_XTALSEL);
  401910:	4b04      	ldr	r3, [pc, #16]	; (401924 <pmc_get_slck_config+0x18>)
  401912:	681b      	ldr	r3, [r3, #0]
  401914:	f003 0308 	and.w	r3, r3, #8
}
  401918:	4618      	mov	r0, r3
  40191a:	46bd      	mov	sp, r7
  40191c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e1810 	.word	0x400e1810

00401928 <pmc_get_mainck_config>:
 * \brief Get Main clock source configuration.
 *
 * \retval Main Clock Source Oscillator Selection and Main RC Oscillator Frequency Selection values.
 */
uint32_t pmc_get_mainck_config(void)
{
  401928:	b480      	push	{r7}
  40192a:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & (CKGR_MOR_MOSCSEL | CKGR_MOR_MOSCRCF_Msk));
  40192c:	4b04      	ldr	r3, [pc, #16]	; (401940 <pmc_get_mainck_config+0x18>)
  40192e:	6a1a      	ldr	r2, [r3, #32]
  401930:	4b04      	ldr	r3, [pc, #16]	; (401944 <pmc_get_mainck_config+0x1c>)
  401932:	4013      	ands	r3, r2
}
  401934:	4618      	mov	r0, r3
  401936:	46bd      	mov	sp, r7
  401938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40193c:	4770      	bx	lr
  40193e:	bf00      	nop
  401940:	400e0600 	.word	0x400e0600
  401944:	01000070 	.word	0x01000070

00401948 <pmc_get_pllack_config>:
 * \brief Get PLLA clock configuration.
 *
 * \retval PLLA Multiplier and PLLA Front End Divider values.
 */
uint32_t pmc_get_pllack_config(void)
{
  401948:	b480      	push	{r7}
  40194a:	af00      	add	r7, sp, #0
	return (PMC->CKGR_PLLAR & (CKGR_PLLAR_DIVA_Msk | CKGR_PLLAR_MULA_Msk));
  40194c:	4b04      	ldr	r3, [pc, #16]	; (401960 <pmc_get_pllack_config+0x18>)
  40194e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  401950:	4b04      	ldr	r3, [pc, #16]	; (401964 <pmc_get_pllack_config+0x1c>)
  401952:	4013      	ands	r3, r2
}
  401954:	4618      	mov	r0, r3
  401956:	46bd      	mov	sp, r7
  401958:	f85d 7b04 	ldr.w	r7, [sp], #4
  40195c:	4770      	bx	lr
  40195e:	bf00      	nop
  401960:	400e0600 	.word	0x400e0600
  401964:	07ff00ff 	.word	0x07ff00ff

00401968 <pmc_get_upllckdiv_config>:
 * \brief Get UPLLCKDIV configuration.
 *
 * \retval UPLL Divider by 2 value.
 */
uint32_t pmc_get_upllckdiv_config(void)
{
  401968:	b480      	push	{r7}
  40196a:	af00      	add	r7, sp, #0
	return (PMC->PMC_MCKR & PMC_MCKR_UPLLDIV2);
  40196c:	4b04      	ldr	r3, [pc, #16]	; (401980 <pmc_get_upllckdiv_config+0x18>)
  40196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
}
  401974:	4618      	mov	r0, r3
  401976:	46bd      	mov	sp, r7
  401978:	f85d 7b04 	ldr.w	r7, [sp], #4
  40197c:	4770      	bx	lr
  40197e:	bf00      	nop
  401980:	400e0600 	.word	0x400e0600

00401984 <pmc_switch_pck_to_upllck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
{
  401984:	b480      	push	{r7}
  401986:	b085      	sub	sp, #20
  401988:	af00      	add	r7, sp, #0
  40198a:	6078      	str	r0, [r7, #4]
  40198c:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
  40198e:	4912      	ldr	r1, [pc, #72]	; (4019d8 <pmc_switch_pck_to_upllck+0x54>)
  401990:	683b      	ldr	r3, [r7, #0]
  401992:	f043 0203 	orr.w	r2, r3, #3
  401996:	687b      	ldr	r3, [r7, #4]
  401998:	3310      	adds	r3, #16
  40199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  40199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4019a2:	60fb      	str	r3, [r7, #12]
  4019a4:	e007      	b.n	4019b6 <pmc_switch_pck_to_upllck+0x32>
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019a6:	68fb      	ldr	r3, [r7, #12]
  4019a8:	2b00      	cmp	r3, #0
  4019aa:	d101      	bne.n	4019b0 <pmc_switch_pck_to_upllck+0x2c>
			return 1;
  4019ac:	2301      	movs	r3, #1
  4019ae:	e00d      	b.n	4019cc <pmc_switch_pck_to_upllck+0x48>
			--ul_timeout) {
  4019b0:	68fb      	ldr	r3, [r7, #12]
  4019b2:	3b01      	subs	r3, #1
  4019b4:	60fb      	str	r3, [r7, #12]
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  4019b6:	4b08      	ldr	r3, [pc, #32]	; (4019d8 <pmc_switch_pck_to_upllck+0x54>)
  4019b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	fa01 f303 	lsl.w	r3, r1, r3
  4019c4:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4019c6:	2b00      	cmp	r3, #0
  4019c8:	d0ed      	beq.n	4019a6 <pmc_switch_pck_to_upllck+0x22>
		}
	}

	return 0;
  4019ca:	2300      	movs	r3, #0
}
  4019cc:	4618      	mov	r0, r3
  4019ce:	3714      	adds	r7, #20
  4019d0:	46bd      	mov	sp, r7
  4019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d6:	4770      	bx	lr
  4019d8:	400e0600 	.word	0x400e0600

004019dc <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  4019dc:	b480      	push	{r7}
  4019de:	b083      	sub	sp, #12
  4019e0:	af00      	add	r7, sp, #0
  4019e2:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4019e4:	4a06      	ldr	r2, [pc, #24]	; (401a00 <pmc_enable_pck+0x24>)
  4019e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019ea:	687b      	ldr	r3, [r7, #4]
  4019ec:	fa01 f303 	lsl.w	r3, r1, r3
  4019f0:	6013      	str	r3, [r2, #0]
}
  4019f2:	bf00      	nop
  4019f4:	370c      	adds	r7, #12
  4019f6:	46bd      	mov	sp, r7
  4019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019fc:	4770      	bx	lr
  4019fe:	bf00      	nop
  401a00:	400e0600 	.word	0x400e0600

00401a04 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  401a04:	b480      	push	{r7}
  401a06:	b083      	sub	sp, #12
  401a08:	af00      	add	r7, sp, #0
  401a0a:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401a0c:	4a06      	ldr	r2, [pc, #24]	; (401a28 <pmc_disable_pck+0x24>)
  401a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401a12:	687b      	ldr	r3, [r7, #4]
  401a14:	fa01 f303 	lsl.w	r3, r1, r3
  401a18:	6053      	str	r3, [r2, #4]
}
  401a1a:	bf00      	nop
  401a1c:	370c      	adds	r7, #12
  401a1e:	46bd      	mov	sp, r7
  401a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a24:	4770      	bx	lr
  401a26:	bf00      	nop
  401a28:	400e0600 	.word	0x400e0600

00401a2c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401a2c:	b480      	push	{r7}
  401a2e:	b085      	sub	sp, #20
  401a30:	af00      	add	r7, sp, #0
  401a32:	6078      	str	r0, [r7, #4]
  401a34:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  401a36:	2300      	movs	r3, #0
  401a38:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401a3a:	687b      	ldr	r3, [r7, #4]
  401a3c:	22ac      	movs	r2, #172	; 0xac
  401a3e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401a40:	683b      	ldr	r3, [r7, #0]
  401a42:	681a      	ldr	r2, [r3, #0]
  401a44:	683b      	ldr	r3, [r7, #0]
  401a46:	685b      	ldr	r3, [r3, #4]
  401a48:	fbb2 f3f3 	udiv	r3, r2, r3
  401a4c:	091b      	lsrs	r3, r3, #4
  401a4e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401a50:	68fb      	ldr	r3, [r7, #12]
  401a52:	2b00      	cmp	r3, #0
  401a54:	d003      	beq.n	401a5e <uart_init+0x32>
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401a5c:	d301      	bcc.n	401a62 <uart_init+0x36>
		return 1;
  401a5e:	2301      	movs	r3, #1
  401a60:	e00a      	b.n	401a78 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  401a62:	687b      	ldr	r3, [r7, #4]
  401a64:	68fa      	ldr	r2, [r7, #12]
  401a66:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401a68:	683b      	ldr	r3, [r7, #0]
  401a6a:	689a      	ldr	r2, [r3, #8]
  401a6c:	687b      	ldr	r3, [r7, #4]
  401a6e:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	2250      	movs	r2, #80	; 0x50
  401a74:	601a      	str	r2, [r3, #0]

	return 0;
  401a76:	2300      	movs	r3, #0
}
  401a78:	4618      	mov	r0, r3
  401a7a:	3714      	adds	r7, #20
  401a7c:	46bd      	mov	sp, r7
  401a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a82:	4770      	bx	lr

00401a84 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  401a84:	b480      	push	{r7}
  401a86:	b083      	sub	sp, #12
  401a88:	af00      	add	r7, sp, #0
  401a8a:	6078      	str	r0, [r7, #4]
  401a8c:	460b      	mov	r3, r1
  401a8e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401a90:	687b      	ldr	r3, [r7, #4]
  401a92:	695b      	ldr	r3, [r3, #20]
  401a94:	f003 0302 	and.w	r3, r3, #2
  401a98:	2b00      	cmp	r3, #0
  401a9a:	d101      	bne.n	401aa0 <uart_write+0x1c>
		return 1;
  401a9c:	2301      	movs	r3, #1
  401a9e:	e003      	b.n	401aa8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  401aa0:	78fa      	ldrb	r2, [r7, #3]
  401aa2:	687b      	ldr	r3, [r7, #4]
  401aa4:	61da      	str	r2, [r3, #28]
	return 0;
  401aa6:	2300      	movs	r3, #0
}
  401aa8:	4618      	mov	r0, r3
  401aaa:	370c      	adds	r7, #12
  401aac:	46bd      	mov	sp, r7
  401aae:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ab2:	4770      	bx	lr

00401ab4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401ab4:	b480      	push	{r7}
  401ab6:	b083      	sub	sp, #12
  401ab8:	af00      	add	r7, sp, #0
  401aba:	6078      	str	r0, [r7, #4]
  401abc:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401abe:	687b      	ldr	r3, [r7, #4]
  401ac0:	695b      	ldr	r3, [r3, #20]
  401ac2:	f003 0301 	and.w	r3, r3, #1
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d101      	bne.n	401ace <uart_read+0x1a>
		return 1;
  401aca:	2301      	movs	r3, #1
  401acc:	e005      	b.n	401ada <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401ace:	687b      	ldr	r3, [r7, #4]
  401ad0:	699b      	ldr	r3, [r3, #24]
  401ad2:	b2da      	uxtb	r2, r3
  401ad4:	683b      	ldr	r3, [r7, #0]
  401ad6:	701a      	strb	r2, [r3, #0]
	return 0;
  401ad8:	2300      	movs	r3, #0
}
  401ada:	4618      	mov	r0, r3
  401adc:	370c      	adds	r7, #12
  401ade:	46bd      	mov	sp, r7
  401ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae4:	4770      	bx	lr

00401ae6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401ae6:	b480      	push	{r7}
  401ae8:	b089      	sub	sp, #36	; 0x24
  401aea:	af00      	add	r7, sp, #0
  401aec:	60f8      	str	r0, [r7, #12]
  401aee:	60b9      	str	r1, [r7, #8]
  401af0:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401af2:	68bb      	ldr	r3, [r7, #8]
  401af4:	011a      	lsls	r2, r3, #4
  401af6:	687b      	ldr	r3, [r7, #4]
  401af8:	429a      	cmp	r2, r3
  401afa:	d802      	bhi.n	401b02 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401afc:	2310      	movs	r3, #16
  401afe:	61fb      	str	r3, [r7, #28]
  401b00:	e001      	b.n	401b06 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401b02:	2308      	movs	r3, #8
  401b04:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401b06:	687b      	ldr	r3, [r7, #4]
  401b08:	00da      	lsls	r2, r3, #3
  401b0a:	69fb      	ldr	r3, [r7, #28]
  401b0c:	68b9      	ldr	r1, [r7, #8]
  401b0e:	fb01 f303 	mul.w	r3, r1, r3
  401b12:	085b      	lsrs	r3, r3, #1
  401b14:	441a      	add	r2, r3
  401b16:	69fb      	ldr	r3, [r7, #28]
  401b18:	68b9      	ldr	r1, [r7, #8]
  401b1a:	fb01 f303 	mul.w	r3, r1, r3
  401b1e:	fbb2 f3f3 	udiv	r3, r2, r3
  401b22:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401b24:	69bb      	ldr	r3, [r7, #24]
  401b26:	08db      	lsrs	r3, r3, #3
  401b28:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  401b2a:	69bb      	ldr	r3, [r7, #24]
  401b2c:	f003 0307 	and.w	r3, r3, #7
  401b30:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401b32:	697b      	ldr	r3, [r7, #20]
  401b34:	2b00      	cmp	r3, #0
  401b36:	d003      	beq.n	401b40 <usart_set_async_baudrate+0x5a>
  401b38:	697b      	ldr	r3, [r7, #20]
  401b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401b3e:	d301      	bcc.n	401b44 <usart_set_async_baudrate+0x5e>
		return 1;
  401b40:	2301      	movs	r3, #1
  401b42:	e00f      	b.n	401b64 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401b44:	69fb      	ldr	r3, [r7, #28]
  401b46:	2b08      	cmp	r3, #8
  401b48:	d105      	bne.n	401b56 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  401b4a:	68fb      	ldr	r3, [r7, #12]
  401b4c:	685b      	ldr	r3, [r3, #4]
  401b4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  401b52:	68fb      	ldr	r3, [r7, #12]
  401b54:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401b56:	693b      	ldr	r3, [r7, #16]
  401b58:	041a      	lsls	r2, r3, #16
  401b5a:	697b      	ldr	r3, [r7, #20]
  401b5c:	431a      	orrs	r2, r3
  401b5e:	68fb      	ldr	r3, [r7, #12]
  401b60:	621a      	str	r2, [r3, #32]

	return 0;
  401b62:	2300      	movs	r3, #0
}
  401b64:	4618      	mov	r0, r3
  401b66:	3724      	adds	r7, #36	; 0x24
  401b68:	46bd      	mov	sp, r7
  401b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6e:	4770      	bx	lr

00401b70 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  401b70:	b580      	push	{r7, lr}
  401b72:	b082      	sub	sp, #8
  401b74:	af00      	add	r7, sp, #0
  401b76:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  401b78:	6878      	ldr	r0, [r7, #4]
  401b7a:	4b0d      	ldr	r3, [pc, #52]	; (401bb0 <usart_reset+0x40>)
  401b7c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  401b7e:	687b      	ldr	r3, [r7, #4]
  401b80:	2200      	movs	r2, #0
  401b82:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  401b84:	687b      	ldr	r3, [r7, #4]
  401b86:	2200      	movs	r2, #0
  401b88:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401b8a:	687b      	ldr	r3, [r7, #4]
  401b8c:	2200      	movs	r2, #0
  401b8e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  401b90:	6878      	ldr	r0, [r7, #4]
  401b92:	4b08      	ldr	r3, [pc, #32]	; (401bb4 <usart_reset+0x44>)
  401b94:	4798      	blx	r3
	usart_reset_rx(p_usart);
  401b96:	6878      	ldr	r0, [r7, #4]
  401b98:	4b07      	ldr	r3, [pc, #28]	; (401bb8 <usart_reset+0x48>)
  401b9a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  401b9c:	6878      	ldr	r0, [r7, #4]
  401b9e:	4b07      	ldr	r3, [pc, #28]	; (401bbc <usart_reset+0x4c>)
  401ba0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  401ba2:	6878      	ldr	r0, [r7, #4]
  401ba4:	4b06      	ldr	r3, [pc, #24]	; (401bc0 <usart_reset+0x50>)
  401ba6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  401ba8:	bf00      	nop
  401baa:	3708      	adds	r7, #8
  401bac:	46bd      	mov	sp, r7
  401bae:	bd80      	pop	{r7, pc}
  401bb0:	00401d51 	.word	0x00401d51
  401bb4:	00401c63 	.word	0x00401c63
  401bb8:	00401c97 	.word	0x00401c97
  401bbc:	00401cb1 	.word	0x00401cb1
  401bc0:	00401ccd 	.word	0x00401ccd

00401bc4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401bc4:	b580      	push	{r7, lr}
  401bc6:	b084      	sub	sp, #16
  401bc8:	af00      	add	r7, sp, #0
  401bca:	60f8      	str	r0, [r7, #12]
  401bcc:	60b9      	str	r1, [r7, #8]
  401bce:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401bd0:	68f8      	ldr	r0, [r7, #12]
  401bd2:	4b1a      	ldr	r3, [pc, #104]	; (401c3c <usart_init_rs232+0x78>)
  401bd4:	4798      	blx	r3

	ul_reg_val = 0;
  401bd6:	4b1a      	ldr	r3, [pc, #104]	; (401c40 <usart_init_rs232+0x7c>)
  401bd8:	2200      	movs	r2, #0
  401bda:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401bdc:	68bb      	ldr	r3, [r7, #8]
  401bde:	2b00      	cmp	r3, #0
  401be0:	d009      	beq.n	401bf6 <usart_init_rs232+0x32>
  401be2:	68bb      	ldr	r3, [r7, #8]
  401be4:	681b      	ldr	r3, [r3, #0]
  401be6:	687a      	ldr	r2, [r7, #4]
  401be8:	4619      	mov	r1, r3
  401bea:	68f8      	ldr	r0, [r7, #12]
  401bec:	4b15      	ldr	r3, [pc, #84]	; (401c44 <usart_init_rs232+0x80>)
  401bee:	4798      	blx	r3
  401bf0:	4603      	mov	r3, r0
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d001      	beq.n	401bfa <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  401bf6:	2301      	movs	r3, #1
  401bf8:	e01b      	b.n	401c32 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401bfa:	68bb      	ldr	r3, [r7, #8]
  401bfc:	685a      	ldr	r2, [r3, #4]
  401bfe:	68bb      	ldr	r3, [r7, #8]
  401c00:	689b      	ldr	r3, [r3, #8]
  401c02:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401c04:	68bb      	ldr	r3, [r7, #8]
  401c06:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c08:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401c0a:	68bb      	ldr	r3, [r7, #8]
  401c0c:	68db      	ldr	r3, [r3, #12]
  401c0e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401c10:	4b0b      	ldr	r3, [pc, #44]	; (401c40 <usart_init_rs232+0x7c>)
  401c12:	681b      	ldr	r3, [r3, #0]
  401c14:	4313      	orrs	r3, r2
  401c16:	4a0a      	ldr	r2, [pc, #40]	; (401c40 <usart_init_rs232+0x7c>)
  401c18:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  401c1a:	4b09      	ldr	r3, [pc, #36]	; (401c40 <usart_init_rs232+0x7c>)
  401c1c:	681b      	ldr	r3, [r3, #0]
  401c1e:	4a08      	ldr	r2, [pc, #32]	; (401c40 <usart_init_rs232+0x7c>)
  401c20:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401c22:	68fb      	ldr	r3, [r7, #12]
  401c24:	685a      	ldr	r2, [r3, #4]
  401c26:	4b06      	ldr	r3, [pc, #24]	; (401c40 <usart_init_rs232+0x7c>)
  401c28:	681b      	ldr	r3, [r3, #0]
  401c2a:	431a      	orrs	r2, r3
  401c2c:	68fb      	ldr	r3, [r7, #12]
  401c2e:	605a      	str	r2, [r3, #4]

	return 0;
  401c30:	2300      	movs	r3, #0
}
  401c32:	4618      	mov	r0, r3
  401c34:	3710      	adds	r7, #16
  401c36:	46bd      	mov	sp, r7
  401c38:	bd80      	pop	{r7, pc}
  401c3a:	bf00      	nop
  401c3c:	00401b71 	.word	0x00401b71
  401c40:	204010cc 	.word	0x204010cc
  401c44:	00401ae7 	.word	0x00401ae7

00401c48 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  401c48:	b480      	push	{r7}
  401c4a:	b083      	sub	sp, #12
  401c4c:	af00      	add	r7, sp, #0
  401c4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	2240      	movs	r2, #64	; 0x40
  401c54:	601a      	str	r2, [r3, #0]
}
  401c56:	bf00      	nop
  401c58:	370c      	adds	r7, #12
  401c5a:	46bd      	mov	sp, r7
  401c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c60:	4770      	bx	lr

00401c62 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  401c62:	b480      	push	{r7}
  401c64:	b083      	sub	sp, #12
  401c66:	af00      	add	r7, sp, #0
  401c68:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401c6a:	687b      	ldr	r3, [r7, #4]
  401c6c:	2288      	movs	r2, #136	; 0x88
  401c6e:	601a      	str	r2, [r3, #0]
}
  401c70:	bf00      	nop
  401c72:	370c      	adds	r7, #12
  401c74:	46bd      	mov	sp, r7
  401c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c7a:	4770      	bx	lr

00401c7c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  401c7c:	b480      	push	{r7}
  401c7e:	b083      	sub	sp, #12
  401c80:	af00      	add	r7, sp, #0
  401c82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	2210      	movs	r2, #16
  401c88:	601a      	str	r2, [r3, #0]
}
  401c8a:	bf00      	nop
  401c8c:	370c      	adds	r7, #12
  401c8e:	46bd      	mov	sp, r7
  401c90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c94:	4770      	bx	lr

00401c96 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  401c96:	b480      	push	{r7}
  401c98:	b083      	sub	sp, #12
  401c9a:	af00      	add	r7, sp, #0
  401c9c:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401c9e:	687b      	ldr	r3, [r7, #4]
  401ca0:	2224      	movs	r2, #36	; 0x24
  401ca2:	601a      	str	r2, [r3, #0]
}
  401ca4:	bf00      	nop
  401ca6:	370c      	adds	r7, #12
  401ca8:	46bd      	mov	sp, r7
  401caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cae:	4770      	bx	lr

00401cb0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401cb0:	b480      	push	{r7}
  401cb2:	b083      	sub	sp, #12
  401cb4:	af00      	add	r7, sp, #0
  401cb6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	f44f 7280 	mov.w	r2, #256	; 0x100
  401cbe:	601a      	str	r2, [r3, #0]
}
  401cc0:	bf00      	nop
  401cc2:	370c      	adds	r7, #12
  401cc4:	46bd      	mov	sp, r7
  401cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cca:	4770      	bx	lr

00401ccc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401ccc:	b480      	push	{r7}
  401cce:	b083      	sub	sp, #12
  401cd0:	af00      	add	r7, sp, #0
  401cd2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401cda:	601a      	str	r2, [r3, #0]
}
  401cdc:	bf00      	nop
  401cde:	370c      	adds	r7, #12
  401ce0:	46bd      	mov	sp, r7
  401ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ce6:	4770      	bx	lr

00401ce8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401ce8:	b480      	push	{r7}
  401cea:	b083      	sub	sp, #12
  401cec:	af00      	add	r7, sp, #0
  401cee:	6078      	str	r0, [r7, #4]
  401cf0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401cf2:	687b      	ldr	r3, [r7, #4]
  401cf4:	695b      	ldr	r3, [r3, #20]
  401cf6:	f003 0302 	and.w	r3, r3, #2
  401cfa:	2b00      	cmp	r3, #0
  401cfc:	d101      	bne.n	401d02 <usart_write+0x1a>
		return 1;
  401cfe:	2301      	movs	r3, #1
  401d00:	e005      	b.n	401d0e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401d02:	683b      	ldr	r3, [r7, #0]
  401d04:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401d08:	687b      	ldr	r3, [r7, #4]
  401d0a:	61da      	str	r2, [r3, #28]
	return 0;
  401d0c:	2300      	movs	r3, #0
}
  401d0e:	4618      	mov	r0, r3
  401d10:	370c      	adds	r7, #12
  401d12:	46bd      	mov	sp, r7
  401d14:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d18:	4770      	bx	lr

00401d1a <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401d1a:	b480      	push	{r7}
  401d1c:	b083      	sub	sp, #12
  401d1e:	af00      	add	r7, sp, #0
  401d20:	6078      	str	r0, [r7, #4]
  401d22:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401d24:	687b      	ldr	r3, [r7, #4]
  401d26:	695b      	ldr	r3, [r3, #20]
  401d28:	f003 0301 	and.w	r3, r3, #1
  401d2c:	2b00      	cmp	r3, #0
  401d2e:	d101      	bne.n	401d34 <usart_read+0x1a>
		return 1;
  401d30:	2301      	movs	r3, #1
  401d32:	e006      	b.n	401d42 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401d34:	687b      	ldr	r3, [r7, #4]
  401d36:	699b      	ldr	r3, [r3, #24]
  401d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401d3c:	683b      	ldr	r3, [r7, #0]
  401d3e:	601a      	str	r2, [r3, #0]

	return 0;
  401d40:	2300      	movs	r3, #0
}
  401d42:	4618      	mov	r0, r3
  401d44:	370c      	adds	r7, #12
  401d46:	46bd      	mov	sp, r7
  401d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d4c:	4770      	bx	lr
	...

00401d50 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401d50:	b480      	push	{r7}
  401d52:	b083      	sub	sp, #12
  401d54:	af00      	add	r7, sp, #0
  401d56:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401d58:	687b      	ldr	r3, [r7, #4]
  401d5a:	4a04      	ldr	r2, [pc, #16]	; (401d6c <usart_disable_writeprotect+0x1c>)
  401d5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401d60:	bf00      	nop
  401d62:	370c      	adds	r7, #12
  401d64:	46bd      	mov	sp, r7
  401d66:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d6a:	4770      	bx	lr
  401d6c:	55534100 	.word	0x55534100

00401d70 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401d70:	b480      	push	{r7}
  401d72:	b083      	sub	sp, #12
  401d74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401d76:	f3ef 8310 	mrs	r3, PRIMASK
  401d7a:	607b      	str	r3, [r7, #4]
  return(result);
  401d7c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401d7e:	2b00      	cmp	r3, #0
  401d80:	bf0c      	ite	eq
  401d82:	2301      	moveq	r3, #1
  401d84:	2300      	movne	r3, #0
  401d86:	b2db      	uxtb	r3, r3
  401d88:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401d8a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401d8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d90:	4b04      	ldr	r3, [pc, #16]	; (401da4 <cpu_irq_save+0x34>)
  401d92:	2200      	movs	r2, #0
  401d94:	701a      	strb	r2, [r3, #0]
	return flags;
  401d96:	683b      	ldr	r3, [r7, #0]
}
  401d98:	4618      	mov	r0, r3
  401d9a:	370c      	adds	r7, #12
  401d9c:	46bd      	mov	sp, r7
  401d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401da2:	4770      	bx	lr
  401da4:	20400000 	.word	0x20400000

00401da8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401da8:	b480      	push	{r7}
  401daa:	b083      	sub	sp, #12
  401dac:	af00      	add	r7, sp, #0
  401dae:	6078      	str	r0, [r7, #4]
	return (flags);
  401db0:	687b      	ldr	r3, [r7, #4]
  401db2:	2b00      	cmp	r3, #0
  401db4:	bf14      	ite	ne
  401db6:	2301      	movne	r3, #1
  401db8:	2300      	moveq	r3, #0
  401dba:	b2db      	uxtb	r3, r3
}
  401dbc:	4618      	mov	r0, r3
  401dbe:	370c      	adds	r7, #12
  401dc0:	46bd      	mov	sp, r7
  401dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dc6:	4770      	bx	lr

00401dc8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401dc8:	b580      	push	{r7, lr}
  401dca:	b082      	sub	sp, #8
  401dcc:	af00      	add	r7, sp, #0
  401dce:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401dd0:	6878      	ldr	r0, [r7, #4]
  401dd2:	4b07      	ldr	r3, [pc, #28]	; (401df0 <cpu_irq_restore+0x28>)
  401dd4:	4798      	blx	r3
  401dd6:	4603      	mov	r3, r0
  401dd8:	2b00      	cmp	r3, #0
  401dda:	d005      	beq.n	401de8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401ddc:	4b05      	ldr	r3, [pc, #20]	; (401df4 <cpu_irq_restore+0x2c>)
  401dde:	2201      	movs	r2, #1
  401de0:	701a      	strb	r2, [r3, #0]
  401de2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401de6:	b662      	cpsie	i
}
  401de8:	bf00      	nop
  401dea:	3708      	adds	r7, #8
  401dec:	46bd      	mov	sp, r7
  401dee:	bd80      	pop	{r7, pc}
  401df0:	00401da9 	.word	0x00401da9
  401df4:	20400000 	.word	0x20400000

00401df8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401df8:	b580      	push	{r7, lr}
  401dfa:	b084      	sub	sp, #16
  401dfc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401dfe:	4b1e      	ldr	r3, [pc, #120]	; (401e78 <Reset_Handler+0x80>)
  401e00:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401e02:	4b1e      	ldr	r3, [pc, #120]	; (401e7c <Reset_Handler+0x84>)
  401e04:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401e06:	68fa      	ldr	r2, [r7, #12]
  401e08:	68bb      	ldr	r3, [r7, #8]
  401e0a:	429a      	cmp	r2, r3
  401e0c:	d00c      	beq.n	401e28 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401e0e:	e007      	b.n	401e20 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401e10:	68bb      	ldr	r3, [r7, #8]
  401e12:	1d1a      	adds	r2, r3, #4
  401e14:	60ba      	str	r2, [r7, #8]
  401e16:	68fa      	ldr	r2, [r7, #12]
  401e18:	1d11      	adds	r1, r2, #4
  401e1a:	60f9      	str	r1, [r7, #12]
  401e1c:	6812      	ldr	r2, [r2, #0]
  401e1e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401e20:	68bb      	ldr	r3, [r7, #8]
  401e22:	4a17      	ldr	r2, [pc, #92]	; (401e80 <Reset_Handler+0x88>)
  401e24:	4293      	cmp	r3, r2
  401e26:	d3f3      	bcc.n	401e10 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401e28:	4b16      	ldr	r3, [pc, #88]	; (401e84 <Reset_Handler+0x8c>)
  401e2a:	60bb      	str	r3, [r7, #8]
  401e2c:	e004      	b.n	401e38 <Reset_Handler+0x40>
                *pDest++ = 0;
  401e2e:	68bb      	ldr	r3, [r7, #8]
  401e30:	1d1a      	adds	r2, r3, #4
  401e32:	60ba      	str	r2, [r7, #8]
  401e34:	2200      	movs	r2, #0
  401e36:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401e38:	68bb      	ldr	r3, [r7, #8]
  401e3a:	4a13      	ldr	r2, [pc, #76]	; (401e88 <Reset_Handler+0x90>)
  401e3c:	4293      	cmp	r3, r2
  401e3e:	d3f6      	bcc.n	401e2e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401e40:	4b12      	ldr	r3, [pc, #72]	; (401e8c <Reset_Handler+0x94>)
  401e42:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401e44:	4a12      	ldr	r2, [pc, #72]	; (401e90 <Reset_Handler+0x98>)
  401e46:	68fb      	ldr	r3, [r7, #12]
  401e48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401e4c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401e4e:	4b11      	ldr	r3, [pc, #68]	; (401e94 <Reset_Handler+0x9c>)
  401e50:	4798      	blx	r3
  401e52:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401e54:	4a10      	ldr	r2, [pc, #64]	; (401e98 <Reset_Handler+0xa0>)
  401e56:	4b10      	ldr	r3, [pc, #64]	; (401e98 <Reset_Handler+0xa0>)
  401e58:	681b      	ldr	r3, [r3, #0]
  401e5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401e5e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401e64:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401e68:	6878      	ldr	r0, [r7, #4]
  401e6a:	4b0c      	ldr	r3, [pc, #48]	; (401e9c <Reset_Handler+0xa4>)
  401e6c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401e6e:	4b0c      	ldr	r3, [pc, #48]	; (401ea0 <Reset_Handler+0xa8>)
  401e70:	4798      	blx	r3

        /* Branch to main function */
        main();
  401e72:	4b0c      	ldr	r3, [pc, #48]	; (401ea4 <Reset_Handler+0xac>)
  401e74:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401e76:	e7fe      	b.n	401e76 <Reset_Handler+0x7e>
  401e78:	00406d78 	.word	0x00406d78
  401e7c:	20400000 	.word	0x20400000
  401e80:	204009c0 	.word	0x204009c0
  401e84:	204009c0 	.word	0x204009c0
  401e88:	20401230 	.word	0x20401230
  401e8c:	00400000 	.word	0x00400000
  401e90:	e000ed00 	.word	0xe000ed00
  401e94:	00401d71 	.word	0x00401d71
  401e98:	e000ed88 	.word	0xe000ed88
  401e9c:	00401dc9 	.word	0x00401dc9
  401ea0:	00403b9d 	.word	0x00403b9d
  401ea4:	00403aa9 	.word	0x00403aa9

00401ea8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401ea8:	b480      	push	{r7}
  401eaa:	af00      	add	r7, sp, #0
        while (1) {
  401eac:	e7fe      	b.n	401eac <Dummy_Handler+0x4>
	...

00401eb0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401eb0:	b480      	push	{r7}
  401eb2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401eb4:	4b52      	ldr	r3, [pc, #328]	; (402000 <SystemCoreClockUpdate+0x150>)
  401eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eb8:	f003 0303 	and.w	r3, r3, #3
  401ebc:	2b01      	cmp	r3, #1
  401ebe:	d014      	beq.n	401eea <SystemCoreClockUpdate+0x3a>
  401ec0:	2b01      	cmp	r3, #1
  401ec2:	d302      	bcc.n	401eca <SystemCoreClockUpdate+0x1a>
  401ec4:	2b02      	cmp	r3, #2
  401ec6:	d038      	beq.n	401f3a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401ec8:	e07a      	b.n	401fc0 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401eca:	4b4e      	ldr	r3, [pc, #312]	; (402004 <SystemCoreClockUpdate+0x154>)
  401ecc:	695b      	ldr	r3, [r3, #20]
  401ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d004      	beq.n	401ee0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ed6:	4b4c      	ldr	r3, [pc, #304]	; (402008 <SystemCoreClockUpdate+0x158>)
  401ed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401edc:	601a      	str	r2, [r3, #0]
    break;
  401ede:	e06f      	b.n	401fc0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401ee0:	4b49      	ldr	r3, [pc, #292]	; (402008 <SystemCoreClockUpdate+0x158>)
  401ee2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401ee6:	601a      	str	r2, [r3, #0]
    break;
  401ee8:	e06a      	b.n	401fc0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401eea:	4b45      	ldr	r3, [pc, #276]	; (402000 <SystemCoreClockUpdate+0x150>)
  401eec:	6a1b      	ldr	r3, [r3, #32]
  401eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401ef2:	2b00      	cmp	r3, #0
  401ef4:	d003      	beq.n	401efe <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401ef6:	4b44      	ldr	r3, [pc, #272]	; (402008 <SystemCoreClockUpdate+0x158>)
  401ef8:	4a44      	ldr	r2, [pc, #272]	; (40200c <SystemCoreClockUpdate+0x15c>)
  401efa:	601a      	str	r2, [r3, #0]
    break;
  401efc:	e060      	b.n	401fc0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401efe:	4b42      	ldr	r3, [pc, #264]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f00:	4a43      	ldr	r2, [pc, #268]	; (402010 <SystemCoreClockUpdate+0x160>)
  401f02:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f04:	4b3e      	ldr	r3, [pc, #248]	; (402000 <SystemCoreClockUpdate+0x150>)
  401f06:	6a1b      	ldr	r3, [r3, #32]
  401f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f0c:	2b10      	cmp	r3, #16
  401f0e:	d004      	beq.n	401f1a <SystemCoreClockUpdate+0x6a>
  401f10:	2b20      	cmp	r3, #32
  401f12:	d008      	beq.n	401f26 <SystemCoreClockUpdate+0x76>
  401f14:	2b00      	cmp	r3, #0
  401f16:	d00e      	beq.n	401f36 <SystemCoreClockUpdate+0x86>
          break;
  401f18:	e00e      	b.n	401f38 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401f1a:	4b3b      	ldr	r3, [pc, #236]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f1c:	681b      	ldr	r3, [r3, #0]
  401f1e:	005b      	lsls	r3, r3, #1
  401f20:	4a39      	ldr	r2, [pc, #228]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f22:	6013      	str	r3, [r2, #0]
          break;
  401f24:	e008      	b.n	401f38 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401f26:	4b38      	ldr	r3, [pc, #224]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f28:	681a      	ldr	r2, [r3, #0]
  401f2a:	4613      	mov	r3, r2
  401f2c:	005b      	lsls	r3, r3, #1
  401f2e:	4413      	add	r3, r2
  401f30:	4a35      	ldr	r2, [pc, #212]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f32:	6013      	str	r3, [r2, #0]
          break;
  401f34:	e000      	b.n	401f38 <SystemCoreClockUpdate+0x88>
          break;
  401f36:	bf00      	nop
    break;
  401f38:	e042      	b.n	401fc0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401f3a:	4b31      	ldr	r3, [pc, #196]	; (402000 <SystemCoreClockUpdate+0x150>)
  401f3c:	6a1b      	ldr	r3, [r3, #32]
  401f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401f42:	2b00      	cmp	r3, #0
  401f44:	d003      	beq.n	401f4e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401f46:	4b30      	ldr	r3, [pc, #192]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f48:	4a30      	ldr	r2, [pc, #192]	; (40200c <SystemCoreClockUpdate+0x15c>)
  401f4a:	601a      	str	r2, [r3, #0]
  401f4c:	e01c      	b.n	401f88 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401f4e:	4b2e      	ldr	r3, [pc, #184]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f50:	4a2f      	ldr	r2, [pc, #188]	; (402010 <SystemCoreClockUpdate+0x160>)
  401f52:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401f54:	4b2a      	ldr	r3, [pc, #168]	; (402000 <SystemCoreClockUpdate+0x150>)
  401f56:	6a1b      	ldr	r3, [r3, #32]
  401f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f5c:	2b10      	cmp	r3, #16
  401f5e:	d004      	beq.n	401f6a <SystemCoreClockUpdate+0xba>
  401f60:	2b20      	cmp	r3, #32
  401f62:	d008      	beq.n	401f76 <SystemCoreClockUpdate+0xc6>
  401f64:	2b00      	cmp	r3, #0
  401f66:	d00e      	beq.n	401f86 <SystemCoreClockUpdate+0xd6>
          break;
  401f68:	e00e      	b.n	401f88 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401f6a:	4b27      	ldr	r3, [pc, #156]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f6c:	681b      	ldr	r3, [r3, #0]
  401f6e:	005b      	lsls	r3, r3, #1
  401f70:	4a25      	ldr	r2, [pc, #148]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f72:	6013      	str	r3, [r2, #0]
          break;
  401f74:	e008      	b.n	401f88 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401f76:	4b24      	ldr	r3, [pc, #144]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f78:	681a      	ldr	r2, [r3, #0]
  401f7a:	4613      	mov	r3, r2
  401f7c:	005b      	lsls	r3, r3, #1
  401f7e:	4413      	add	r3, r2
  401f80:	4a21      	ldr	r2, [pc, #132]	; (402008 <SystemCoreClockUpdate+0x158>)
  401f82:	6013      	str	r3, [r2, #0]
          break;
  401f84:	e000      	b.n	401f88 <SystemCoreClockUpdate+0xd8>
          break;
  401f86:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401f88:	4b1d      	ldr	r3, [pc, #116]	; (402000 <SystemCoreClockUpdate+0x150>)
  401f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f8c:	f003 0303 	and.w	r3, r3, #3
  401f90:	2b02      	cmp	r3, #2
  401f92:	d114      	bne.n	401fbe <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401f94:	4b1a      	ldr	r3, [pc, #104]	; (402000 <SystemCoreClockUpdate+0x150>)
  401f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401f98:	0c1b      	lsrs	r3, r3, #16
  401f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401f9e:	3301      	adds	r3, #1
  401fa0:	4a19      	ldr	r2, [pc, #100]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fa2:	6812      	ldr	r2, [r2, #0]
  401fa4:	fb02 f303 	mul.w	r3, r2, r3
  401fa8:	4a17      	ldr	r2, [pc, #92]	; (402008 <SystemCoreClockUpdate+0x158>)
  401faa:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401fac:	4b14      	ldr	r3, [pc, #80]	; (402000 <SystemCoreClockUpdate+0x150>)
  401fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401fb0:	b2db      	uxtb	r3, r3
  401fb2:	4a15      	ldr	r2, [pc, #84]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fb4:	6812      	ldr	r2, [r2, #0]
  401fb6:	fbb2 f3f3 	udiv	r3, r2, r3
  401fba:	4a13      	ldr	r2, [pc, #76]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fbc:	6013      	str	r3, [r2, #0]
    break;
  401fbe:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401fc0:	4b0f      	ldr	r3, [pc, #60]	; (402000 <SystemCoreClockUpdate+0x150>)
  401fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401fc8:	2b70      	cmp	r3, #112	; 0x70
  401fca:	d108      	bne.n	401fde <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401fcc:	4b0e      	ldr	r3, [pc, #56]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fce:	681b      	ldr	r3, [r3, #0]
  401fd0:	4a10      	ldr	r2, [pc, #64]	; (402014 <SystemCoreClockUpdate+0x164>)
  401fd2:	fba2 2303 	umull	r2, r3, r2, r3
  401fd6:	085b      	lsrs	r3, r3, #1
  401fd8:	4a0b      	ldr	r2, [pc, #44]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fda:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401fdc:	e00a      	b.n	401ff4 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401fde:	4b08      	ldr	r3, [pc, #32]	; (402000 <SystemCoreClockUpdate+0x150>)
  401fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fe2:	091b      	lsrs	r3, r3, #4
  401fe4:	f003 0307 	and.w	r3, r3, #7
  401fe8:	4a07      	ldr	r2, [pc, #28]	; (402008 <SystemCoreClockUpdate+0x158>)
  401fea:	6812      	ldr	r2, [r2, #0]
  401fec:	fa22 f303 	lsr.w	r3, r2, r3
  401ff0:	4a05      	ldr	r2, [pc, #20]	; (402008 <SystemCoreClockUpdate+0x158>)
  401ff2:	6013      	str	r3, [r2, #0]
}
  401ff4:	bf00      	nop
  401ff6:	46bd      	mov	sp, r7
  401ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop
  402000:	400e0600 	.word	0x400e0600
  402004:	400e1810 	.word	0x400e1810
  402008:	20400004 	.word	0x20400004
  40200c:	00b71b00 	.word	0x00b71b00
  402010:	003d0900 	.word	0x003d0900
  402014:	aaaaaaab 	.word	0xaaaaaaab

00402018 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402018:	b480      	push	{r7}
  40201a:	b083      	sub	sp, #12
  40201c:	af00      	add	r7, sp, #0
  40201e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	4a1d      	ldr	r2, [pc, #116]	; (402098 <system_init_flash+0x80>)
  402024:	4293      	cmp	r3, r2
  402026:	d804      	bhi.n	402032 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402028:	4b1c      	ldr	r3, [pc, #112]	; (40209c <system_init_flash+0x84>)
  40202a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40202e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402030:	e02b      	b.n	40208a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  402032:	687b      	ldr	r3, [r7, #4]
  402034:	4a1a      	ldr	r2, [pc, #104]	; (4020a0 <system_init_flash+0x88>)
  402036:	4293      	cmp	r3, r2
  402038:	d803      	bhi.n	402042 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40203a:	4b18      	ldr	r3, [pc, #96]	; (40209c <system_init_flash+0x84>)
  40203c:	4a19      	ldr	r2, [pc, #100]	; (4020a4 <system_init_flash+0x8c>)
  40203e:	601a      	str	r2, [r3, #0]
}
  402040:	e023      	b.n	40208a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  402042:	687b      	ldr	r3, [r7, #4]
  402044:	4a18      	ldr	r2, [pc, #96]	; (4020a8 <system_init_flash+0x90>)
  402046:	4293      	cmp	r3, r2
  402048:	d803      	bhi.n	402052 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40204a:	4b14      	ldr	r3, [pc, #80]	; (40209c <system_init_flash+0x84>)
  40204c:	4a17      	ldr	r2, [pc, #92]	; (4020ac <system_init_flash+0x94>)
  40204e:	601a      	str	r2, [r3, #0]
}
  402050:	e01b      	b.n	40208a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402052:	687b      	ldr	r3, [r7, #4]
  402054:	4a16      	ldr	r2, [pc, #88]	; (4020b0 <system_init_flash+0x98>)
  402056:	4293      	cmp	r3, r2
  402058:	d803      	bhi.n	402062 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40205a:	4b10      	ldr	r3, [pc, #64]	; (40209c <system_init_flash+0x84>)
  40205c:	4a15      	ldr	r2, [pc, #84]	; (4020b4 <system_init_flash+0x9c>)
  40205e:	601a      	str	r2, [r3, #0]
}
  402060:	e013      	b.n	40208a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402062:	687b      	ldr	r3, [r7, #4]
  402064:	4a14      	ldr	r2, [pc, #80]	; (4020b8 <system_init_flash+0xa0>)
  402066:	4293      	cmp	r3, r2
  402068:	d804      	bhi.n	402074 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40206a:	4b0c      	ldr	r3, [pc, #48]	; (40209c <system_init_flash+0x84>)
  40206c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402070:	601a      	str	r2, [r3, #0]
}
  402072:	e00a      	b.n	40208a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402074:	687b      	ldr	r3, [r7, #4]
  402076:	4a11      	ldr	r2, [pc, #68]	; (4020bc <system_init_flash+0xa4>)
  402078:	4293      	cmp	r3, r2
  40207a:	d803      	bhi.n	402084 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40207c:	4b07      	ldr	r3, [pc, #28]	; (40209c <system_init_flash+0x84>)
  40207e:	4a10      	ldr	r2, [pc, #64]	; (4020c0 <system_init_flash+0xa8>)
  402080:	601a      	str	r2, [r3, #0]
}
  402082:	e002      	b.n	40208a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402084:	4b05      	ldr	r3, [pc, #20]	; (40209c <system_init_flash+0x84>)
  402086:	4a0f      	ldr	r2, [pc, #60]	; (4020c4 <system_init_flash+0xac>)
  402088:	601a      	str	r2, [r3, #0]
}
  40208a:	bf00      	nop
  40208c:	370c      	adds	r7, #12
  40208e:	46bd      	mov	sp, r7
  402090:	f85d 7b04 	ldr.w	r7, [sp], #4
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	015ef3bf 	.word	0x015ef3bf
  40209c:	400e0c00 	.word	0x400e0c00
  4020a0:	02bde77f 	.word	0x02bde77f
  4020a4:	04000100 	.word	0x04000100
  4020a8:	041cdb3f 	.word	0x041cdb3f
  4020ac:	04000200 	.word	0x04000200
  4020b0:	057bceff 	.word	0x057bceff
  4020b4:	04000300 	.word	0x04000300
  4020b8:	06dac2bf 	.word	0x06dac2bf
  4020bc:	0839b67f 	.word	0x0839b67f
  4020c0:	04000500 	.word	0x04000500
  4020c4:	04000600 	.word	0x04000600

004020c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4020c8:	b480      	push	{r7}
  4020ca:	b085      	sub	sp, #20
  4020cc:	af00      	add	r7, sp, #0
  4020ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4020d0:	4b10      	ldr	r3, [pc, #64]	; (402114 <_sbrk+0x4c>)
  4020d2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4020d4:	4b10      	ldr	r3, [pc, #64]	; (402118 <_sbrk+0x50>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d102      	bne.n	4020e2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4020dc:	4b0e      	ldr	r3, [pc, #56]	; (402118 <_sbrk+0x50>)
  4020de:	4a0f      	ldr	r2, [pc, #60]	; (40211c <_sbrk+0x54>)
  4020e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4020e2:	4b0d      	ldr	r3, [pc, #52]	; (402118 <_sbrk+0x50>)
  4020e4:	681b      	ldr	r3, [r3, #0]
  4020e6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4020e8:	68ba      	ldr	r2, [r7, #8]
  4020ea:	687b      	ldr	r3, [r7, #4]
  4020ec:	441a      	add	r2, r3
  4020ee:	68fb      	ldr	r3, [r7, #12]
  4020f0:	429a      	cmp	r2, r3
  4020f2:	dd02      	ble.n	4020fa <_sbrk+0x32>
		return (caddr_t) -1;	
  4020f4:	f04f 33ff 	mov.w	r3, #4294967295
  4020f8:	e006      	b.n	402108 <_sbrk+0x40>
	}

	heap += incr;
  4020fa:	4b07      	ldr	r3, [pc, #28]	; (402118 <_sbrk+0x50>)
  4020fc:	681a      	ldr	r2, [r3, #0]
  4020fe:	687b      	ldr	r3, [r7, #4]
  402100:	4413      	add	r3, r2
  402102:	4a05      	ldr	r2, [pc, #20]	; (402118 <_sbrk+0x50>)
  402104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  402106:	68bb      	ldr	r3, [r7, #8]
}
  402108:	4618      	mov	r0, r3
  40210a:	3714      	adds	r7, #20
  40210c:	46bd      	mov	sp, r7
  40210e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402112:	4770      	bx	lr
  402114:	2045fffc 	.word	0x2045fffc
  402118:	204010d0 	.word	0x204010d0
  40211c:	20403430 	.word	0x20403430

00402120 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  402120:	b480      	push	{r7}
  402122:	b083      	sub	sp, #12
  402124:	af00      	add	r7, sp, #0
  402126:	6078      	str	r0, [r7, #4]
	return -1;
  402128:	f04f 33ff 	mov.w	r3, #4294967295
}
  40212c:	4618      	mov	r0, r3
  40212e:	370c      	adds	r7, #12
  402130:	46bd      	mov	sp, r7
  402132:	f85d 7b04 	ldr.w	r7, [sp], #4
  402136:	4770      	bx	lr

00402138 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  402138:	b480      	push	{r7}
  40213a:	b083      	sub	sp, #12
  40213c:	af00      	add	r7, sp, #0
  40213e:	6078      	str	r0, [r7, #4]
  402140:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  402142:	683b      	ldr	r3, [r7, #0]
  402144:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402148:	605a      	str	r2, [r3, #4]

	return 0;
  40214a:	2300      	movs	r3, #0
}
  40214c:	4618      	mov	r0, r3
  40214e:	370c      	adds	r7, #12
  402150:	46bd      	mov	sp, r7
  402152:	f85d 7b04 	ldr.w	r7, [sp], #4
  402156:	4770      	bx	lr

00402158 <_isatty>:

extern int _isatty(int file)
{
  402158:	b480      	push	{r7}
  40215a:	b083      	sub	sp, #12
  40215c:	af00      	add	r7, sp, #0
  40215e:	6078      	str	r0, [r7, #4]
	return 1;
  402160:	2301      	movs	r3, #1
}
  402162:	4618      	mov	r0, r3
  402164:	370c      	adds	r7, #12
  402166:	46bd      	mov	sp, r7
  402168:	f85d 7b04 	ldr.w	r7, [sp], #4
  40216c:	4770      	bx	lr

0040216e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40216e:	b480      	push	{r7}
  402170:	b085      	sub	sp, #20
  402172:	af00      	add	r7, sp, #0
  402174:	60f8      	str	r0, [r7, #12]
  402176:	60b9      	str	r1, [r7, #8]
  402178:	607a      	str	r2, [r7, #4]
	return 0;
  40217a:	2300      	movs	r3, #0
}
  40217c:	4618      	mov	r0, r3
  40217e:	3714      	adds	r7, #20
  402180:	46bd      	mov	sp, r7
  402182:	f85d 7b04 	ldr.w	r7, [sp], #4
  402186:	4770      	bx	lr

00402188 <circ_buf_flex_init_buffer>:
#include "circular-buffer-flex.h"

void circ_buf_flex_init_buffer(circ_buf_flex_t *buf, const uint32_t capacity, const uint16_t element_size)
{
  402188:	b5b0      	push	{r4, r5, r7, lr}
  40218a:	b08a      	sub	sp, #40	; 0x28
  40218c:	af00      	add	r7, sp, #0
  40218e:	60f8      	str	r0, [r7, #12]
  402190:	60b9      	str	r1, [r7, #8]
  402192:	4613      	mov	r3, r2
  402194:	80fb      	strh	r3, [r7, #6]
    circ_buf_flex_t temp_buffer;
    temp_buffer.buffer = (void *) malloc(capacity * element_size);
  402196:	88fb      	ldrh	r3, [r7, #6]
  402198:	68ba      	ldr	r2, [r7, #8]
  40219a:	fb02 f303 	mul.w	r3, r2, r3
  40219e:	4618      	mov	r0, r3
  4021a0:	4b0e      	ldr	r3, [pc, #56]	; (4021dc <circ_buf_flex_init_buffer+0x54>)
  4021a2:	4798      	blx	r3
  4021a4:	4603      	mov	r3, r0
  4021a6:	613b      	str	r3, [r7, #16]
    temp_buffer.buffer_element_size = element_size;
  4021a8:	88fb      	ldrh	r3, [r7, #6]
  4021aa:	82bb      	strh	r3, [r7, #20]
    temp_buffer.capacity = capacity;
  4021ac:	68bb      	ldr	r3, [r7, #8]
  4021ae:	623b      	str	r3, [r7, #32]
    temp_buffer.buffer_status = CBF_BUFFER_EMPTY;
  4021b0:	2301      	movs	r3, #1
  4021b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    temp_buffer.head = 0;
  4021b6:	2300      	movs	r3, #0
  4021b8:	61bb      	str	r3, [r7, #24]
    temp_buffer.tail = 0;
  4021ba:	2300      	movs	r3, #0
  4021bc:	61fb      	str	r3, [r7, #28]

    *buf = temp_buffer;
  4021be:	68fb      	ldr	r3, [r7, #12]
  4021c0:	461d      	mov	r5, r3
  4021c2:	f107 0410 	add.w	r4, r7, #16
  4021c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4021c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4021ca:	e894 0003 	ldmia.w	r4, {r0, r1}
  4021ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
  4021d2:	bf00      	nop
  4021d4:	3728      	adds	r7, #40	; 0x28
  4021d6:	46bd      	mov	sp, r7
  4021d8:	bdb0      	pop	{r4, r5, r7, pc}
  4021da:	bf00      	nop
  4021dc:	00403c15 	.word	0x00403c15

004021e0 <circ_buf_flex_available_elements_to_read>:
    circ_buf_flex_free(buf);
    circ_buf_flex_init_buffer(buf, buf->capacity, buf->buffer_element_size);
}

uint32_t circ_buf_flex_available_elements_to_read(circ_buf_flex_t *buf)
{
  4021e0:	b480      	push	{r7}
  4021e2:	b085      	sub	sp, #20
  4021e4:	af00      	add	r7, sp, #0
  4021e6:	6078      	str	r0, [r7, #4]
    uint32_t elements_to_read = 0;
  4021e8:	2300      	movs	r3, #0
  4021ea:	60fb      	str	r3, [r7, #12]

    if (buf->tail > buf->head)
  4021ec:	687b      	ldr	r3, [r7, #4]
  4021ee:	68da      	ldr	r2, [r3, #12]
  4021f0:	687b      	ldr	r3, [r7, #4]
  4021f2:	689b      	ldr	r3, [r3, #8]
  4021f4:	429a      	cmp	r2, r3
  4021f6:	d909      	bls.n	40220c <circ_buf_flex_available_elements_to_read+0x2c>
    {
        elements_to_read = buf->capacity - buf->tail + buf->head;
  4021f8:	687b      	ldr	r3, [r7, #4]
  4021fa:	691a      	ldr	r2, [r3, #16]
  4021fc:	687b      	ldr	r3, [r7, #4]
  4021fe:	68db      	ldr	r3, [r3, #12]
  402200:	1ad2      	subs	r2, r2, r3
  402202:	687b      	ldr	r3, [r7, #4]
  402204:	689b      	ldr	r3, [r3, #8]
  402206:	4413      	add	r3, r2
  402208:	60fb      	str	r3, [r7, #12]
  40220a:	e013      	b.n	402234 <circ_buf_flex_available_elements_to_read+0x54>
    }else if (buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FULL)
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	689a      	ldr	r2, [r3, #8]
  402210:	687b      	ldr	r3, [r7, #4]
  402212:	68db      	ldr	r3, [r3, #12]
  402214:	429a      	cmp	r2, r3
  402216:	d107      	bne.n	402228 <circ_buf_flex_available_elements_to_read+0x48>
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	7d1b      	ldrb	r3, [r3, #20]
  40221c:	2b02      	cmp	r3, #2
  40221e:	d103      	bne.n	402228 <circ_buf_flex_available_elements_to_read+0x48>
    {
        elements_to_read = buf->capacity;
  402220:	687b      	ldr	r3, [r7, #4]
  402222:	691b      	ldr	r3, [r3, #16]
  402224:	60fb      	str	r3, [r7, #12]
  402226:	e005      	b.n	402234 <circ_buf_flex_available_elements_to_read+0x54>
    }else
    {
        elements_to_read = buf->head - buf->tail;
  402228:	687b      	ldr	r3, [r7, #4]
  40222a:	689a      	ldr	r2, [r3, #8]
  40222c:	687b      	ldr	r3, [r7, #4]
  40222e:	68db      	ldr	r3, [r3, #12]
  402230:	1ad3      	subs	r3, r2, r3
  402232:	60fb      	str	r3, [r7, #12]
    }

    return elements_to_read;
  402234:	68fb      	ldr	r3, [r7, #12]
}
  402236:	4618      	mov	r0, r3
  402238:	3714      	adds	r7, #20
  40223a:	46bd      	mov	sp, r7
  40223c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402240:	4770      	bx	lr

00402242 <circ_buf_flex_is_empty>:
{
    return buf->capacity - circ_buf_flex_available_elements_to_read(buf);
}

uint8_t circ_buf_flex_is_empty(circ_buf_flex_t *buf)
{
  402242:	b480      	push	{r7}
  402244:	b083      	sub	sp, #12
  402246:	af00      	add	r7, sp, #0
  402248:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CBF_BUFFER_EMPTY;
  40224a:	687b      	ldr	r3, [r7, #4]
  40224c:	7d1b      	ldrb	r3, [r3, #20]
  40224e:	2b01      	cmp	r3, #1
  402250:	bf0c      	ite	eq
  402252:	2301      	moveq	r3, #1
  402254:	2300      	movne	r3, #0
  402256:	b2db      	uxtb	r3, r3
}
  402258:	4618      	mov	r0, r3
  40225a:	370c      	adds	r7, #12
  40225c:	46bd      	mov	sp, r7
  40225e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402262:	4770      	bx	lr

00402264 <circ_buf_flex_is_full>:

uint8_t circ_buf_flex_is_full(circ_buf_flex_t *buf)
{
  402264:	b480      	push	{r7}
  402266:	b083      	sub	sp, #12
  402268:	af00      	add	r7, sp, #0
  40226a:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CBF_BUFFER_FULL;
  40226c:	687b      	ldr	r3, [r7, #4]
  40226e:	7d1b      	ldrb	r3, [r3, #20]
  402270:	2b02      	cmp	r3, #2
  402272:	bf0c      	ite	eq
  402274:	2301      	moveq	r3, #1
  402276:	2300      	movne	r3, #0
  402278:	b2db      	uxtb	r3, r3
}
  40227a:	4618      	mov	r0, r3
  40227c:	370c      	adds	r7, #12
  40227e:	46bd      	mov	sp, r7
  402280:	f85d 7b04 	ldr.w	r7, [sp], #4
  402284:	4770      	bx	lr
	...

00402288 <circ_buf_flex_push>:

uint8_t circ_buf_flex_push(circ_buf_flex_t* buf, void* data)
{
  402288:	b580      	push	{r7, lr}
  40228a:	b084      	sub	sp, #16
  40228c:	af00      	add	r7, sp, #0
  40228e:	6078      	str	r0, [r7, #4]
  402290:	6039      	str	r1, [r7, #0]
    uint8_t result = CBF_SUCCESS;
  402292:	2300      	movs	r3, #0
  402294:	73fb      	strb	r3, [r7, #15]

    if(!circ_buf_flex_is_full(buf))
  402296:	6878      	ldr	r0, [r7, #4]
  402298:	4b1b      	ldr	r3, [pc, #108]	; (402308 <circ_buf_flex_push+0x80>)
  40229a:	4798      	blx	r3
  40229c:	4603      	mov	r3, r0
  40229e:	2b00      	cmp	r3, #0
  4022a0:	d11e      	bne.n	4022e0 <circ_buf_flex_push+0x58>
    {
        memcpy(((uint8_t*)buf->buffer) + (buf->head++) * (buf->buffer_element_size), data, buf->buffer_element_size);
  4022a2:	687b      	ldr	r3, [r7, #4]
  4022a4:	681a      	ldr	r2, [r3, #0]
  4022a6:	687b      	ldr	r3, [r7, #4]
  4022a8:	689b      	ldr	r3, [r3, #8]
  4022aa:	1c58      	adds	r0, r3, #1
  4022ac:	6879      	ldr	r1, [r7, #4]
  4022ae:	6088      	str	r0, [r1, #8]
  4022b0:	6879      	ldr	r1, [r7, #4]
  4022b2:	8889      	ldrh	r1, [r1, #4]
  4022b4:	fb01 f303 	mul.w	r3, r1, r3
  4022b8:	18d0      	adds	r0, r2, r3
  4022ba:	687b      	ldr	r3, [r7, #4]
  4022bc:	889b      	ldrh	r3, [r3, #4]
  4022be:	461a      	mov	r2, r3
  4022c0:	6839      	ldr	r1, [r7, #0]
  4022c2:	4b12      	ldr	r3, [pc, #72]	; (40230c <circ_buf_flex_push+0x84>)
  4022c4:	4798      	blx	r3
        //buf->buffer[buf->head++] = *data;
        buf->buffer_status = CBF_BUFFER_FILLING;
  4022c6:	687b      	ldr	r3, [r7, #4]
  4022c8:	2203      	movs	r2, #3
  4022ca:	751a      	strb	r2, [r3, #20]
        // Reset the head if reaching the size of the buffer
        if(buf->head >= buf->capacity) buf->head = 0;
  4022cc:	687b      	ldr	r3, [r7, #4]
  4022ce:	689a      	ldr	r2, [r3, #8]
  4022d0:	687b      	ldr	r3, [r7, #4]
  4022d2:	691b      	ldr	r3, [r3, #16]
  4022d4:	429a      	cmp	r2, r3
  4022d6:	d305      	bcc.n	4022e4 <circ_buf_flex_push+0x5c>
  4022d8:	687b      	ldr	r3, [r7, #4]
  4022da:	2200      	movs	r2, #0
  4022dc:	609a      	str	r2, [r3, #8]
  4022de:	e001      	b.n	4022e4 <circ_buf_flex_push+0x5c>
    }
    else
    {
        result = CBF_BUFFER_FULL;
  4022e0:	2302      	movs	r3, #2
  4022e2:	73fb      	strb	r3, [r7, #15]
    }

    // If head is joining the tail, all the buffer has been filled.
    if(buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FILLING) buf->buffer_status = CBF_BUFFER_FULL;
  4022e4:	687b      	ldr	r3, [r7, #4]
  4022e6:	689a      	ldr	r2, [r3, #8]
  4022e8:	687b      	ldr	r3, [r7, #4]
  4022ea:	68db      	ldr	r3, [r3, #12]
  4022ec:	429a      	cmp	r2, r3
  4022ee:	d106      	bne.n	4022fe <circ_buf_flex_push+0x76>
  4022f0:	687b      	ldr	r3, [r7, #4]
  4022f2:	7d1b      	ldrb	r3, [r3, #20]
  4022f4:	2b03      	cmp	r3, #3
  4022f6:	d102      	bne.n	4022fe <circ_buf_flex_push+0x76>
  4022f8:	687b      	ldr	r3, [r7, #4]
  4022fa:	2202      	movs	r2, #2
  4022fc:	751a      	strb	r2, [r3, #20]

    return result;
  4022fe:	7bfb      	ldrb	r3, [r7, #15]
}
  402300:	4618      	mov	r0, r3
  402302:	3710      	adds	r7, #16
  402304:	46bd      	mov	sp, r7
  402306:	bd80      	pop	{r7, pc}
  402308:	00402265 	.word	0x00402265
  40230c:	00404185 	.word	0x00404185

00402310 <circ_buf_flex_pop>:

uint8_t circ_buf_flex_pop(circ_buf_flex_t *buf, void* data)
{
  402310:	b580      	push	{r7, lr}
  402312:	b084      	sub	sp, #16
  402314:	af00      	add	r7, sp, #0
  402316:	6078      	str	r0, [r7, #4]
  402318:	6039      	str	r1, [r7, #0]
    uint8_t result = CBF_SUCCESS;
  40231a:	2300      	movs	r3, #0
  40231c:	73fb      	strb	r3, [r7, #15]

    if (!circ_buf_flex_is_empty(buf))
  40231e:	6878      	ldr	r0, [r7, #4]
  402320:	4b1b      	ldr	r3, [pc, #108]	; (402390 <circ_buf_flex_pop+0x80>)
  402322:	4798      	blx	r3
  402324:	4603      	mov	r3, r0
  402326:	2b00      	cmp	r3, #0
  402328:	d11e      	bne.n	402368 <circ_buf_flex_pop+0x58>
    {
        memcpy(data, ((uint8_t*)buf->buffer)+(buf->tail++)*(buf->buffer_element_size), buf->buffer_element_size);
  40232a:	687b      	ldr	r3, [r7, #4]
  40232c:	681a      	ldr	r2, [r3, #0]
  40232e:	687b      	ldr	r3, [r7, #4]
  402330:	68db      	ldr	r3, [r3, #12]
  402332:	1c58      	adds	r0, r3, #1
  402334:	6879      	ldr	r1, [r7, #4]
  402336:	60c8      	str	r0, [r1, #12]
  402338:	6879      	ldr	r1, [r7, #4]
  40233a:	8889      	ldrh	r1, [r1, #4]
  40233c:	fb01 f303 	mul.w	r3, r1, r3
  402340:	18d1      	adds	r1, r2, r3
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	889b      	ldrh	r3, [r3, #4]
  402346:	461a      	mov	r2, r3
  402348:	6838      	ldr	r0, [r7, #0]
  40234a:	4b12      	ldr	r3, [pc, #72]	; (402394 <circ_buf_flex_pop+0x84>)
  40234c:	4798      	blx	r3
        //memcpy((uint8_t*)data, buf->buffer[buf->tail], buf->buffer_element_size);
        buf->buffer_status = CBF_BUFFER_FILLING;
  40234e:	687b      	ldr	r3, [r7, #4]
  402350:	2203      	movs	r2, #3
  402352:	751a      	strb	r2, [r3, #20]
        
        // Reset the tail if reaching the size of the buffer
        if (buf->tail >= buf->capacity) buf->tail = 0;
  402354:	687b      	ldr	r3, [r7, #4]
  402356:	68da      	ldr	r2, [r3, #12]
  402358:	687b      	ldr	r3, [r7, #4]
  40235a:	691b      	ldr	r3, [r3, #16]
  40235c:	429a      	cmp	r2, r3
  40235e:	d305      	bcc.n	40236c <circ_buf_flex_pop+0x5c>
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	2200      	movs	r2, #0
  402364:	60da      	str	r2, [r3, #12]
  402366:	e001      	b.n	40236c <circ_buf_flex_pop+0x5c>
    }
    else
    {
        result = CBF_BUFFER_EMPTY;
  402368:	2301      	movs	r3, #1
  40236a:	73fb      	strb	r3, [r7, #15]
    }
    
    // If tail is joining the head, all the buffer has been read.
    if (buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FILLING) buf->buffer_status = CBF_BUFFER_EMPTY;
  40236c:	687b      	ldr	r3, [r7, #4]
  40236e:	689a      	ldr	r2, [r3, #8]
  402370:	687b      	ldr	r3, [r7, #4]
  402372:	68db      	ldr	r3, [r3, #12]
  402374:	429a      	cmp	r2, r3
  402376:	d106      	bne.n	402386 <circ_buf_flex_pop+0x76>
  402378:	687b      	ldr	r3, [r7, #4]
  40237a:	7d1b      	ldrb	r3, [r3, #20]
  40237c:	2b03      	cmp	r3, #3
  40237e:	d102      	bne.n	402386 <circ_buf_flex_pop+0x76>
  402380:	687b      	ldr	r3, [r7, #4]
  402382:	2201      	movs	r2, #1
  402384:	751a      	strb	r2, [r3, #20]

    return result;
  402386:	7bfb      	ldrb	r3, [r7, #15]
}
  402388:	4618      	mov	r0, r3
  40238a:	3710      	adds	r7, #16
  40238c:	46bd      	mov	sp, r7
  40238e:	bd80      	pop	{r7, pc}
  402390:	00402243 	.word	0x00402243
  402394:	00404185 	.word	0x00404185

00402398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402398:	b480      	push	{r7}
  40239a:	b083      	sub	sp, #12
  40239c:	af00      	add	r7, sp, #0
  40239e:	4603      	mov	r3, r0
  4023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023a6:	2b00      	cmp	r3, #0
  4023a8:	db0b      	blt.n	4023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023aa:	4909      	ldr	r1, [pc, #36]	; (4023d0 <__NVIC_EnableIRQ+0x38>)
  4023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023b0:	095b      	lsrs	r3, r3, #5
  4023b2:	79fa      	ldrb	r2, [r7, #7]
  4023b4:	f002 021f 	and.w	r2, r2, #31
  4023b8:	2001      	movs	r0, #1
  4023ba:	fa00 f202 	lsl.w	r2, r0, r2
  4023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4023c2:	bf00      	nop
  4023c4:	370c      	adds	r7, #12
  4023c6:	46bd      	mov	sp, r7
  4023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop
  4023d0:	e000e100 	.word	0xe000e100

004023d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4023d4:	b480      	push	{r7}
  4023d6:	b083      	sub	sp, #12
  4023d8:	af00      	add	r7, sp, #0
  4023da:	4603      	mov	r3, r0
  4023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	db0c      	blt.n	402400 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4023e6:	4909      	ldr	r1, [pc, #36]	; (40240c <__NVIC_ClearPendingIRQ+0x38>)
  4023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023ec:	095b      	lsrs	r3, r3, #5
  4023ee:	79fa      	ldrb	r2, [r7, #7]
  4023f0:	f002 021f 	and.w	r2, r2, #31
  4023f4:	2001      	movs	r0, #1
  4023f6:	fa00 f202 	lsl.w	r2, r0, r2
  4023fa:	3360      	adds	r3, #96	; 0x60
  4023fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  402400:	bf00      	nop
  402402:	370c      	adds	r7, #12
  402404:	46bd      	mov	sp, r7
  402406:	f85d 7b04 	ldr.w	r7, [sp], #4
  40240a:	4770      	bx	lr
  40240c:	e000e100 	.word	0xe000e100

00402410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402410:	b480      	push	{r7}
  402412:	b083      	sub	sp, #12
  402414:	af00      	add	r7, sp, #0
  402416:	4603      	mov	r3, r0
  402418:	6039      	str	r1, [r7, #0]
  40241a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402420:	2b00      	cmp	r3, #0
  402422:	db0a      	blt.n	40243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  402424:	490d      	ldr	r1, [pc, #52]	; (40245c <__NVIC_SetPriority+0x4c>)
  402426:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40242a:	683a      	ldr	r2, [r7, #0]
  40242c:	b2d2      	uxtb	r2, r2
  40242e:	0152      	lsls	r2, r2, #5
  402430:	b2d2      	uxtb	r2, r2
  402432:	440b      	add	r3, r1
  402434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  402438:	e00a      	b.n	402450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40243a:	4909      	ldr	r1, [pc, #36]	; (402460 <__NVIC_SetPriority+0x50>)
  40243c:	79fb      	ldrb	r3, [r7, #7]
  40243e:	f003 030f 	and.w	r3, r3, #15
  402442:	3b04      	subs	r3, #4
  402444:	683a      	ldr	r2, [r7, #0]
  402446:	b2d2      	uxtb	r2, r2
  402448:	0152      	lsls	r2, r2, #5
  40244a:	b2d2      	uxtb	r2, r2
  40244c:	440b      	add	r3, r1
  40244e:	761a      	strb	r2, [r3, #24]
}
  402450:	bf00      	nop
  402452:	370c      	adds	r7, #12
  402454:	46bd      	mov	sp, r7
  402456:	f85d 7b04 	ldr.w	r7, [sp], #4
  40245a:	4770      	bx	lr
  40245c:	e000e100 	.word	0xe000e100
  402460:	e000ed00 	.word	0xe000ed00

00402464 <mcan_get_config_defaults>:
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void mcan_get_config_defaults(
		struct mcan_config *const config)
{
  402464:	b480      	push	{r7}
  402466:	b083      	sub	sp, #12
  402468:	af00      	add	r7, sp, #0
  40246a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  40246c:	687b      	ldr	r3, [r7, #4]
  40246e:	2200      	movs	r2, #0
  402470:	701a      	strb	r2, [r3, #0]
	config->watchdog_configuration = 0x00;
  402472:	687b      	ldr	r3, [r7, #4]
  402474:	2200      	movs	r2, #0
  402476:	705a      	strb	r2, [r3, #1]
	config->transmit_pause = true;
  402478:	687b      	ldr	r3, [r7, #4]
  40247a:	2201      	movs	r2, #1
  40247c:	709a      	strb	r2, [r3, #2]
	config->edge_filtering = true;
  40247e:	687b      	ldr	r3, [r7, #4]
  402480:	2201      	movs	r2, #1
  402482:	70da      	strb	r2, [r3, #3]
	config->protocol_exception_handling = true;
  402484:	687b      	ldr	r3, [r7, #4]
  402486:	2201      	movs	r2, #1
  402488:	711a      	strb	r2, [r3, #4]
	config->automatic_retransmission = true;
  40248a:	687b      	ldr	r3, [r7, #4]
  40248c:	2201      	movs	r2, #1
  40248e:	715a      	strb	r2, [r3, #5]
	config->clock_stop_request = false;
  402490:	687b      	ldr	r3, [r7, #4]
  402492:	2200      	movs	r2, #0
  402494:	719a      	strb	r2, [r3, #6]
	config->clock_stop_acknowledge = false;
  402496:	687b      	ldr	r3, [r7, #4]
  402498:	2200      	movs	r2, #0
  40249a:	71da      	strb	r2, [r3, #7]
	config->timestamp_prescaler = 0;
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	2200      	movs	r2, #0
  4024a0:	721a      	strb	r2, [r3, #8]
	config->timeout_period = 0xFFFF;
  4024a2:	687b      	ldr	r3, [r7, #4]
  4024a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4024a8:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  4024aa:	687b      	ldr	r3, [r7, #4]
  4024ac:	2200      	movs	r2, #0
  4024ae:	731a      	strb	r2, [r3, #12]
	config->timeout_enable = false;
  4024b0:	687b      	ldr	r3, [r7, #4]
  4024b2:	2200      	movs	r2, #0
  4024b4:	735a      	strb	r2, [r3, #13]
	config->tdc_enable = false;
  4024b6:	687b      	ldr	r3, [r7, #4]
  4024b8:	2200      	movs	r2, #0
  4024ba:	739a      	strb	r2, [r3, #14]
	config->delay_compensation_offset = 0;
  4024bc:	687b      	ldr	r3, [r7, #4]
  4024be:	2200      	movs	r2, #0
  4024c0:	73da      	strb	r2, [r3, #15]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_FIFO_0;
  4024c2:	687b      	ldr	r3, [r7, #4]
  4024c4:	2200      	movs	r2, #0
  4024c6:	741a      	strb	r2, [r3, #16]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  4024c8:	687b      	ldr	r3, [r7, #4]
  4024ca:	2202      	movs	r2, #2
  4024cc:	745a      	strb	r2, [r3, #17]
	config->remote_frames_standard_reject = false;
  4024ce:	687b      	ldr	r3, [r7, #4]
  4024d0:	2200      	movs	r2, #0
  4024d2:	749a      	strb	r2, [r3, #18]
	config->remote_frames_extended_reject = true;
  4024d4:	687b      	ldr	r3, [r7, #4]
  4024d6:	2201      	movs	r2, #1
  4024d8:	74da      	strb	r2, [r3, #19]
	config->extended_id_mask = 0x1FFFFFFF;
  4024da:	687b      	ldr	r3, [r7, #4]
  4024dc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
  4024e0:	615a      	str	r2, [r3, #20]
	config->rx_fifo_0_overwrite = true;
  4024e2:	687b      	ldr	r3, [r7, #4]
  4024e4:	2201      	movs	r2, #1
  4024e6:	761a      	strb	r2, [r3, #24]
	config->rx_fifo_0_watermark = 0;
  4024e8:	687b      	ldr	r3, [r7, #4]
  4024ea:	2200      	movs	r2, #0
  4024ec:	765a      	strb	r2, [r3, #25]
	config->rx_fifo_1_overwrite = true;
  4024ee:	687b      	ldr	r3, [r7, #4]
  4024f0:	2201      	movs	r2, #1
  4024f2:	769a      	strb	r2, [r3, #26]
	config->rx_fifo_1_watermark = 0;
  4024f4:	687b      	ldr	r3, [r7, #4]
  4024f6:	2200      	movs	r2, #0
  4024f8:	76da      	strb	r2, [r3, #27]
	config->tx_queue_mode = false;
  4024fa:	687b      	ldr	r3, [r7, #4]
  4024fc:	2200      	movs	r2, #0
  4024fe:	771a      	strb	r2, [r3, #28]
	config->tx_event_fifo_watermark = 0;
  402500:	687b      	ldr	r3, [r7, #4]
  402502:	2200      	movs	r2, #0
  402504:	775a      	strb	r2, [r3, #29]
}
  402506:	bf00      	nop
  402508:	370c      	adds	r7, #12
  40250a:	46bd      	mov	sp, r7
  40250c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402510:	4770      	bx	lr

00402512 <mcan_rx_get_buffer_status>:
 *  \retval true Rx Buffer updated from new message.
 *  \retval false Rx Buffer not updated.
 */
static inline bool mcan_rx_get_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  402512:	b480      	push	{r7}
  402514:	b083      	sub	sp, #12
  402516:	af00      	add	r7, sp, #0
  402518:	6078      	str	r0, [r7, #4]
  40251a:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  40251c:	683b      	ldr	r3, [r7, #0]
  40251e:	2b1f      	cmp	r3, #31
  402520:	d80e      	bhi.n	402540 <mcan_rx_get_buffer_status+0x2e>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  402522:	687b      	ldr	r3, [r7, #4]
  402524:	681b      	ldr	r3, [r3, #0]
  402526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  40252a:	2101      	movs	r1, #1
  40252c:	683a      	ldr	r2, [r7, #0]
  40252e:	fa01 f202 	lsl.w	r2, r1, r2
  402532:	4013      	ands	r3, r2
  402534:	2b00      	cmp	r3, #0
  402536:	d001      	beq.n	40253c <mcan_rx_get_buffer_status+0x2a>
			return true;
  402538:	2301      	movs	r3, #1
  40253a:	e012      	b.n	402562 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  40253c:	2300      	movs	r3, #0
  40253e:	e010      	b.n	402562 <mcan_rx_get_buffer_status+0x50>
		}
	} else {
		index -= 32;
  402540:	683b      	ldr	r3, [r7, #0]
  402542:	3b20      	subs	r3, #32
  402544:	603b      	str	r3, [r7, #0]
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  402546:	687b      	ldr	r3, [r7, #4]
  402548:	681b      	ldr	r3, [r3, #0]
  40254a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  40254e:	2101      	movs	r1, #1
  402550:	683a      	ldr	r2, [r7, #0]
  402552:	fa01 f202 	lsl.w	r2, r1, r2
  402556:	4013      	ands	r3, r2
  402558:	2b00      	cmp	r3, #0
  40255a:	d001      	beq.n	402560 <mcan_rx_get_buffer_status+0x4e>
			return true;
  40255c:	2301      	movs	r3, #1
  40255e:	e000      	b.n	402562 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  402560:	2300      	movs	r3, #0
		}
	}
}
  402562:	4618      	mov	r0, r3
  402564:	370c      	adds	r7, #12
  402566:	46bd      	mov	sp, r7
  402568:	f85d 7b04 	ldr.w	r7, [sp], #4
  40256c:	4770      	bx	lr

0040256e <mcan_rx_clear_buffer_status>:
 * \param[in] index  Index offset in Rx buffer
 *
 */
static inline void mcan_rx_clear_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  40256e:	b480      	push	{r7}
  402570:	b083      	sub	sp, #12
  402572:	af00      	add	r7, sp, #0
  402574:	6078      	str	r0, [r7, #4]
  402576:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  402578:	683b      	ldr	r3, [r7, #0]
  40257a:	2b1f      	cmp	r3, #31
  40257c:	d808      	bhi.n	402590 <mcan_rx_clear_buffer_status+0x22>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  40257e:	687b      	ldr	r3, [r7, #4]
  402580:	681b      	ldr	r3, [r3, #0]
  402582:	2101      	movs	r1, #1
  402584:	683a      	ldr	r2, [r7, #0]
  402586:	fa01 f202 	lsl.w	r2, r1, r2
  40258a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	} else {
		index -= 32;
		module_inst->hw->MCAN_NDAT2 = (1 << index);
	}
}
  40258e:	e00a      	b.n	4025a6 <mcan_rx_clear_buffer_status+0x38>
		index -= 32;
  402590:	683b      	ldr	r3, [r7, #0]
  402592:	3b20      	subs	r3, #32
  402594:	603b      	str	r3, [r7, #0]
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	681b      	ldr	r3, [r3, #0]
  40259a:	2101      	movs	r1, #1
  40259c:	683a      	ldr	r2, [r7, #0]
  40259e:	fa01 f202 	lsl.w	r2, r1, r2
  4025a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
  4025a6:	bf00      	nop
  4025a8:	370c      	adds	r7, #12
  4025aa:	46bd      	mov	sp, r7
  4025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025b0:	4770      	bx	lr

004025b2 <mcan_rx_fifo_acknowledge>:
 * \param[in] fifo_number  Rx FIFO 0 or 1
 * \param[in] index  Index offset in FIFO
 */
static inline void mcan_rx_fifo_acknowledge(
		struct mcan_module *const module_inst, bool fifo_number, uint32_t index)
{
  4025b2:	b480      	push	{r7}
  4025b4:	b085      	sub	sp, #20
  4025b6:	af00      	add	r7, sp, #0
  4025b8:	60f8      	str	r0, [r7, #12]
  4025ba:	460b      	mov	r3, r1
  4025bc:	607a      	str	r2, [r7, #4]
  4025be:	72fb      	strb	r3, [r7, #11]
	if (!fifo_number) {
  4025c0:	7afb      	ldrb	r3, [r7, #11]
  4025c2:	f083 0301 	eor.w	r3, r3, #1
  4025c6:	b2db      	uxtb	r3, r3
  4025c8:	2b00      	cmp	r3, #0
  4025ca:	d007      	beq.n	4025dc <mcan_rx_fifo_acknowledge+0x2a>
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  4025cc:	68fb      	ldr	r3, [r7, #12]
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	687a      	ldr	r2, [r7, #4]
  4025d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4025d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	} else {
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
	}
}
  4025da:	e006      	b.n	4025ea <mcan_rx_fifo_acknowledge+0x38>
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
  4025dc:	68fb      	ldr	r3, [r7, #12]
  4025de:	681b      	ldr	r3, [r3, #0]
  4025e0:	687a      	ldr	r2, [r7, #4]
  4025e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4025e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
  4025ea:	bf00      	nop
  4025ec:	3714      	adds	r7, #20
  4025ee:	46bd      	mov	sp, r7
  4025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f4:	4770      	bx	lr
	...

004025f8 <mcan_get_standard_message_filter_element_default>:
 *
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void mcan_get_standard_message_filter_element_default(
		struct mcan_standard_message_filter_element *sd_filter)
{
  4025f8:	b480      	push	{r7}
  4025fa:	b083      	sub	sp, #12
  4025fc:	af00      	add	r7, sp, #0
  4025fe:	6078      	str	r0, [r7, #4]
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  402600:	687b      	ldr	r3, [r7, #4]
  402602:	4a04      	ldr	r2, [pc, #16]	; (402614 <mcan_get_standard_message_filter_element_default+0x1c>)
  402604:	601a      	str	r2, [r3, #0]
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID1(0) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC(
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFT_CLASSIC;
}
  402606:	bf00      	nop
  402608:	370c      	adds	r7, #12
  40260a:	46bd      	mov	sp, r7
  40260c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402610:	4770      	bx	lr
  402612:	bf00      	nop
  402614:	880007ff 	.word	0x880007ff

00402618 <mcan_get_extended_message_filter_element_default>:
 *
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void mcan_get_extended_message_filter_element_default(
		struct mcan_extended_message_filter_element *et_filter)
{
  402618:	b480      	push	{r7}
  40261a:	b083      	sub	sp, #12
  40261c:	af00      	add	r7, sp, #0
  40261e:	6078      	str	r0, [r7, #4]
	et_filter->F0.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
  402620:	687b      	ldr	r3, [r7, #4]
  402622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402626:	601a      	str	r2, [r3, #0]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
  402628:	687b      	ldr	r3, [r7, #4]
  40262a:	f06f 42c0 	mvn.w	r2, #1610612736	; 0x60000000
  40262e:	605a      	str	r2, [r3, #4]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFT_CLASSIC;
}
  402630:	bf00      	nop
  402632:	370c      	adds	r7, #12
  402634:	46bd      	mov	sp, r7
  402636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40263a:	4770      	bx	lr

0040263c <mcan_tx_transfer_request>:
 *  \retval STATUS_OK   Set the transfer request.
 *  \retval STATUS_ERR_BUSY The module is in configuration.
 */
static inline enum status_code mcan_tx_transfer_request(
		struct mcan_module *const module_inst, uint32_t trig_mask)
{
  40263c:	b480      	push	{r7}
  40263e:	b083      	sub	sp, #12
  402640:	af00      	add	r7, sp, #0
  402642:	6078      	str	r0, [r7, #4]
  402644:	6039      	str	r1, [r7, #0]
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  402646:	687b      	ldr	r3, [r7, #4]
  402648:	681b      	ldr	r3, [r3, #0]
  40264a:	699b      	ldr	r3, [r3, #24]
  40264c:	f003 0302 	and.w	r3, r3, #2
  402650:	2b00      	cmp	r3, #0
  402652:	d002      	beq.n	40265a <mcan_tx_transfer_request+0x1e>
		return ERR_BUSY;
  402654:	f06f 0309 	mvn.w	r3, #9
  402658:	e005      	b.n	402666 <mcan_tx_transfer_request+0x2a>
	}
	module_inst->hw->MCAN_TXBAR = trig_mask;
  40265a:	687b      	ldr	r3, [r7, #4]
  40265c:	681b      	ldr	r3, [r3, #0]
  40265e:	683a      	ldr	r2, [r7, #0]
  402660:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return STATUS_OK;
  402664:	2300      	movs	r3, #0
}
  402666:	4618      	mov	r0, r3
  402668:	370c      	adds	r7, #12
  40266a:	46bd      	mov	sp, r7
  40266c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402670:	4770      	bx	lr

00402672 <mcan_tx_get_event_fifo_status>:
 *
 * \return Tx event FIFO status value.
 */
static inline uint32_t mcan_tx_get_event_fifo_status(
		struct mcan_module *const module_inst)
{
  402672:	b480      	push	{r7}
  402674:	b083      	sub	sp, #12
  402676:	af00      	add	r7, sp, #0
  402678:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_TXEFS;
  40267a:	687b      	ldr	r3, [r7, #4]
  40267c:	681b      	ldr	r3, [r3, #0]
  40267e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
}
  402682:	4618      	mov	r0, r3
  402684:	370c      	adds	r7, #12
  402686:	46bd      	mov	sp, r7
  402688:	f85d 7b04 	ldr.w	r7, [sp], #4
  40268c:	4770      	bx	lr

0040268e <mcan_tx_event_fifo_acknowledge>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] index  Index for the transfer FIFO
 */
static inline void mcan_tx_event_fifo_acknowledge(
		struct mcan_module *const module_inst, uint32_t index)
{
  40268e:	b480      	push	{r7}
  402690:	b083      	sub	sp, #12
  402692:	af00      	add	r7, sp, #0
  402694:	6078      	str	r0, [r7, #4]
  402696:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_TXEFA = MCAN_TXEFA_EFAI(index);
  402698:	687b      	ldr	r3, [r7, #4]
  40269a:	681b      	ldr	r3, [r3, #0]
  40269c:	683a      	ldr	r2, [r7, #0]
  40269e:	f002 021f 	and.w	r2, r2, #31
  4026a2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
  4026a6:	bf00      	nop
  4026a8:	370c      	adds	r7, #12
  4026aa:	46bd      	mov	sp, r7
  4026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026b0:	4770      	bx	lr

004026b2 <mcan_get_tx_buffer_element_defaults>:
 *
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void mcan_get_tx_buffer_element_defaults(
		struct mcan_tx_element *tx_element)
{
  4026b2:	b480      	push	{r7}
  4026b4:	b083      	sub	sp, #12
  4026b6:	af00      	add	r7, sp, #0
  4026b8:	6078      	str	r0, [r7, #4]
	tx_element->T0.reg = 0;
  4026ba:	687b      	ldr	r3, [r7, #4]
  4026bc:	2200      	movs	r2, #0
  4026be:	601a      	str	r2, [r3, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  4026c0:	687b      	ldr	r3, [r7, #4]
  4026c2:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  4026c6:	605a      	str	r2, [r3, #4]
			MCAN_TX_ELEMENT_T1_DLC(MCAN_TX_ELEMENT_T1_DLC_DATA8_Val);
}
  4026c8:	bf00      	nop
  4026ca:	370c      	adds	r7, #12
  4026cc:	46bd      	mov	sp, r7
  4026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026d2:	4770      	bx	lr

004026d4 <mcan_enable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  4026d4:	b480      	push	{r7}
  4026d6:	b083      	sub	sp, #12
  4026d8:	af00      	add	r7, sp, #0
  4026da:	6078      	str	r0, [r7, #4]
  4026dc:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE |= source;
  4026de:	687b      	ldr	r3, [r7, #4]
  4026e0:	681b      	ldr	r3, [r3, #0]
  4026e2:	687a      	ldr	r2, [r7, #4]
  4026e4:	6812      	ldr	r2, [r2, #0]
  4026e6:	6d51      	ldr	r1, [r2, #84]	; 0x54
  4026e8:	683a      	ldr	r2, [r7, #0]
  4026ea:	430a      	orrs	r2, r1
  4026ec:	655a      	str	r2, [r3, #84]	; 0x54
}
  4026ee:	bf00      	nop
  4026f0:	370c      	adds	r7, #12
  4026f2:	46bd      	mov	sp, r7
  4026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026f8:	4770      	bx	lr

004026fa <mcan_disable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_disable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  4026fa:	b480      	push	{r7}
  4026fc:	b083      	sub	sp, #12
  4026fe:	af00      	add	r7, sp, #0
  402700:	6078      	str	r0, [r7, #4]
  402702:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE &= ~source;
  402704:	687b      	ldr	r3, [r7, #4]
  402706:	681b      	ldr	r3, [r3, #0]
  402708:	687a      	ldr	r2, [r7, #4]
  40270a:	6812      	ldr	r2, [r2, #0]
  40270c:	6d51      	ldr	r1, [r2, #84]	; 0x54
  40270e:	683a      	ldr	r2, [r7, #0]
  402710:	43d2      	mvns	r2, r2
  402712:	400a      	ands	r2, r1
  402714:	655a      	str	r2, [r3, #84]	; 0x54
}
  402716:	bf00      	nop
  402718:	370c      	adds	r7, #12
  40271a:	46bd      	mov	sp, r7
  40271c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402720:	4770      	bx	lr

00402722 <mcan_read_interrupt_status>:
 *
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
  402722:	b480      	push	{r7}
  402724:	b083      	sub	sp, #12
  402726:	af00      	add	r7, sp, #0
  402728:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_IR;
  40272a:	687b      	ldr	r3, [r7, #4]
  40272c:	681b      	ldr	r3, [r3, #0]
  40272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
  402730:	4618      	mov	r0, r3
  402732:	370c      	adds	r7, #12
  402734:	46bd      	mov	sp, r7
  402736:	f85d 7b04 	ldr.w	r7, [sp], #4
  40273a:	4770      	bx	lr

0040273c <mcan_clear_interrupt_status>:
 * \return Bit mask of interrupt status value.
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  40273c:	b480      	push	{r7}
  40273e:	b083      	sub	sp, #12
  402740:	af00      	add	r7, sp, #0
  402742:	6078      	str	r0, [r7, #4]
  402744:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IR = source;
  402746:	687b      	ldr	r3, [r7, #4]
  402748:	681b      	ldr	r3, [r3, #0]
  40274a:	683a      	ldr	r2, [r7, #0]
  40274c:	651a      	str	r2, [r3, #80]	; 0x50
}
  40274e:	bf00      	nop
  402750:	370c      	adds	r7, #12
  402752:	46bd      	mov	sp, r7
  402754:	f85d 7b04 	ldr.w	r7, [sp], #4
  402758:	4770      	bx	lr
	...

0040275c <_mcan_configure_rx_fifo_to_accept_all>:

//#define MCAN0_INT1_DEBUG
//#define MCAN1_INT1_DEBUG

void _mcan_configure_rx_fifo_to_accept_all(struct mcan_module* module_inst)
{
  40275c:	b580      	push	{r7, lr}
  40275e:	b086      	sub	sp, #24
  402760:	af00      	add	r7, sp, #0
  402762:	6078      	str	r0, [r7, #4]
	 *  Setup rx filtering to accept messages into FIFO1 with extended format
	 *  this accepts all messages
	 */
	struct mcan_extended_message_filter_element et_filter;

	mcan_get_extended_message_filter_element_default(&et_filter);
  402764:	f107 0310 	add.w	r3, r7, #16
  402768:	4618      	mov	r0, r3
  40276a:	4b1e      	ldr	r3, [pc, #120]	; (4027e4 <_mcan_configure_rx_fifo_to_accept_all+0x88>)
  40276c:	4798      	blx	r3
	et_filter.F0.bit.EFID1 = 0;//id
  40276e:	693b      	ldr	r3, [r7, #16]
  402770:	f36f 031c 	bfc	r3, #0, #29
  402774:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFID2 = 0;//mask
  402776:	697b      	ldr	r3, [r7, #20]
  402778:	f36f 031c 	bfc	r3, #0, #29
  40277c:	617b      	str	r3, [r7, #20]

	et_filter.F0.bit.EFEC = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val;//Put in fifo1
  40277e:	693b      	ldr	r3, [r7, #16]
  402780:	2202      	movs	r2, #2
  402782:	f362 735f 	bfi	r3, r2, #29, #3
  402786:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFT = 2;//classic filter
  402788:	697b      	ldr	r3, [r7, #20]
  40278a:	2202      	movs	r2, #2
  40278c:	f362 739f 	bfi	r3, r2, #30, #2
  402790:	617b      	str	r3, [r7, #20]

	mcan_set_rx_extended_filter(module_inst, &et_filter, 0);
  402792:	f107 0310 	add.w	r3, r7, #16
  402796:	2200      	movs	r2, #0
  402798:	4619      	mov	r1, r3
  40279a:	6878      	ldr	r0, [r7, #4]
  40279c:	4b12      	ldr	r3, [pc, #72]	; (4027e8 <_mcan_configure_rx_fifo_to_accept_all+0x8c>)
  40279e:	4798      	blx	r3
	/*  
	 *  Setup rx filtering to accept messages into FIFO0 with standard format
	 *  this accepts all messages
	 */
	struct mcan_standard_message_filter_element sd_filter;
	mcan_get_standard_message_filter_element_default(&sd_filter);
  4027a0:	f107 030c 	add.w	r3, r7, #12
  4027a4:	4618      	mov	r0, r3
  4027a6:	4b11      	ldr	r3, [pc, #68]	; (4027ec <_mcan_configure_rx_fifo_to_accept_all+0x90>)
  4027a8:	4798      	blx	r3
	sd_filter.S0.bit.SFID1 = 0;//ID
  4027aa:	68fb      	ldr	r3, [r7, #12]
  4027ac:	f36f 431a 	bfc	r3, #16, #11
  4027b0:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFID2 = 0;//Mask
  4027b2:	68fb      	ldr	r3, [r7, #12]
  4027b4:	f36f 030a 	bfc	r3, #0, #11
  4027b8:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFEC = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;//Put in fifo0
  4027ba:	68fb      	ldr	r3, [r7, #12]
  4027bc:	2201      	movs	r2, #1
  4027be:	f362 63dd 	bfi	r3, r2, #27, #3
  4027c2:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFT = 2;//classic filter
  4027c4:	68fb      	ldr	r3, [r7, #12]
  4027c6:	2202      	movs	r2, #2
  4027c8:	f362 739f 	bfi	r3, r2, #30, #2
  4027cc:	60fb      	str	r3, [r7, #12]
	mcan_set_rx_standard_filter(module_inst, &sd_filter, 0);
  4027ce:	f107 030c 	add.w	r3, r7, #12
  4027d2:	2200      	movs	r2, #0
  4027d4:	4619      	mov	r1, r3
  4027d6:	6878      	ldr	r0, [r7, #4]
  4027d8:	4b05      	ldr	r3, [pc, #20]	; (4027f0 <_mcan_configure_rx_fifo_to_accept_all+0x94>)
  4027da:	4798      	blx	r3
}
  4027dc:	bf00      	nop
  4027de:	3718      	adds	r7, #24
  4027e0:	46bd      	mov	sp, r7
  4027e2:	bd80      	pop	{r7, pc}
  4027e4:	00402619 	.word	0x00402619
  4027e8:	004010d1 	.word	0x004010d1
  4027ec:	004025f9 	.word	0x004025f9
  4027f0:	00401071 	.word	0x00401071

004027f4 <mcan0_configure>:

void mcan0_configure(uint32_t baudrate, uint32_t rx_buffer_size, uint32_t tx_buffer_size)
{	
  4027f4:	b580      	push	{r7, lr}
  4027f6:	b08c      	sub	sp, #48	; 0x30
  4027f8:	af00      	add	r7, sp, #0
  4027fa:	60f8      	str	r0, [r7, #12]
  4027fc:	60b9      	str	r1, [r7, #8]
  4027fe:	607a      	str	r2, [r7, #4]
	mcan0_standard_receive_index = 0;
  402800:	4b35      	ldr	r3, [pc, #212]	; (4028d8 <mcan0_configure+0xe4>)
  402802:	2200      	movs	r2, #0
  402804:	601a      	str	r2, [r3, #0]
	mcan0_extended_receive_index = 0;
  402806:	4b35      	ldr	r3, [pc, #212]	; (4028dc <mcan0_configure+0xe8>)
  402808:	2200      	movs	r2, #0
  40280a:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_rx, rx_buffer_size, sizeof(mcan_timestamped_rx_message_t));
  40280c:	2220      	movs	r2, #32
  40280e:	68b9      	ldr	r1, [r7, #8]
  402810:	4833      	ldr	r0, [pc, #204]	; (4028e0 <mcan0_configure+0xec>)
  402812:	4b34      	ldr	r3, [pc, #208]	; (4028e4 <mcan0_configure+0xf0>)
  402814:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_tx, tx_buffer_size, sizeof(mcan_tx_message_t));
  402816:	2214      	movs	r2, #20
  402818:	6879      	ldr	r1, [r7, #4]
  40281a:	4833      	ldr	r0, [pc, #204]	; (4028e8 <mcan0_configure+0xf4>)
  40281c:	4b31      	ldr	r3, [pc, #196]	; (4028e4 <mcan0_configure+0xf0>)
  40281e:	4798      	blx	r3
	
	mcan0_buffer.adding_in_tx_buffer = false;
  402820:	4b2f      	ldr	r3, [pc, #188]	; (4028e0 <mcan0_configure+0xec>)
  402822:	2200      	movs	r2, #0
  402824:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan0_buffer.interruption_occurred_while_adding_in_tx_buffer = false;
  402828:	4b2d      	ldr	r3, [pc, #180]	; (4028e0 <mcan0_configure+0xec>)
  40282a:	2200      	movs	r2, #0
  40282c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan0_buffer.buffer_being_emptied_by_interruption = false;
  402830:	4b2b      	ldr	r3, [pc, #172]	; (4028e0 <mcan0_configure+0xec>)
  402832:	2200      	movs	r2, #0
  402834:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  402838:	f107 0310 	add.w	r3, r7, #16
  40283c:	4618      	mov	r0, r3
  40283e:	4b2b      	ldr	r3, [pc, #172]	; (4028ec <mcan0_configure+0xf8>)
  402840:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  402842:	2302      	movs	r3, #2
  402844:	f887 3020 	strb.w	r3, [r7, #32]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  402848:	2302      	movs	r3, #2
  40284a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	mcan_init(&mcan0_instance, MCAN0, &config_mcan);
  40284e:	f107 0310 	add.w	r3, r7, #16
  402852:	461a      	mov	r2, r3
  402854:	4926      	ldr	r1, [pc, #152]	; (4028f0 <mcan0_configure+0xfc>)
  402856:	4827      	ldr	r0, [pc, #156]	; (4028f4 <mcan0_configure+0x100>)
  402858:	4b27      	ldr	r3, [pc, #156]	; (4028f8 <mcan0_configure+0x104>)
  40285a:	4798      	blx	r3


	//Enabling the upll clock 
	//NEED TO HAVE THE RIGHT conf_mcan.h !
	pmc_enable_upll_clock();
  40285c:	4b27      	ldr	r3, [pc, #156]	; (4028fc <mcan0_configure+0x108>)
  40285e:	4798      	blx	r3
	// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
	//It is recomended in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
	pmc_disable_pck(PMC_PCK_5);
  402860:	2005      	movs	r0, #5
  402862:	4b27      	ldr	r3, [pc, #156]	; (402900 <mcan0_configure+0x10c>)
  402864:	4798      	blx	r3
	//dividing upll by 6 to get a 80 Mhz signal which is again divided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
	pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  402866:	2150      	movs	r1, #80	; 0x50
  402868:	2005      	movs	r0, #5
  40286a:	4b26      	ldr	r3, [pc, #152]	; (402904 <mcan0_configure+0x110>)
  40286c:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  40286e:	2005      	movs	r0, #5
  402870:	4b25      	ldr	r3, [pc, #148]	; (402908 <mcan0_configure+0x114>)
  402872:	4798      	blx	r3

	mcan_set_baudrate(mcan0_instance.hw, baudrate);
  402874:	4b1f      	ldr	r3, [pc, #124]	; (4028f4 <mcan0_configure+0x100>)
  402876:	681b      	ldr	r3, [r3, #0]
  402878:	68f9      	ldr	r1, [r7, #12]
  40287a:	4618      	mov	r0, r3
  40287c:	4b23      	ldr	r3, [pc, #140]	; (40290c <mcan0_configure+0x118>)
  40287e:	4798      	blx	r3


	//choosing what interruption to activate
	mcan_enable_interrupt(&mcan0_instance,
  402880:	4923      	ldr	r1, [pc, #140]	; (402910 <mcan0_configure+0x11c>)
  402882:	481c      	ldr	r0, [pc, #112]	; (4028f4 <mcan0_configure+0x100>)
  402884:	4b23      	ldr	r3, [pc, #140]	; (402914 <mcan0_configure+0x120>)
  402886:	4798      	blx	r3
		MCAN_TX_CANCELLATION_FINISH | MCAN_TX_FIFO_EMPTY |
		MCAN_TX_EVENT_FIFO_NEW_ENTRY |
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	mcan_disable_interrupt(&mcan0_instance, MCAN_TIMESTAMP_WRAPAROUND);
  402888:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40288c:	4819      	ldr	r0, [pc, #100]	; (4028f4 <mcan0_configure+0x100>)
  40288e:	4b22      	ldr	r3, [pc, #136]	; (402918 <mcan0_configure+0x124>)
  402890:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan0_instance.hw->MCAN_ILS = 0x0000FF00ul;
  402892:	4b18      	ldr	r3, [pc, #96]	; (4028f4 <mcan0_configure+0x100>)
  402894:	681b      	ldr	r3, [r3, #0]
  402896:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  40289a:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	
	irq_register_handler(MCAN0_INT0_IRQn, 1);
  40289c:	2023      	movs	r0, #35	; 0x23
  40289e:	4b1f      	ldr	r3, [pc, #124]	; (40291c <mcan0_configure+0x128>)
  4028a0:	4798      	blx	r3
  4028a2:	2101      	movs	r1, #1
  4028a4:	2023      	movs	r0, #35	; 0x23
  4028a6:	4b1e      	ldr	r3, [pc, #120]	; (402920 <mcan0_configure+0x12c>)
  4028a8:	4798      	blx	r3
  4028aa:	2023      	movs	r0, #35	; 0x23
  4028ac:	4b1d      	ldr	r3, [pc, #116]	; (402924 <mcan0_configure+0x130>)
  4028ae:	4798      	blx	r3
	irq_register_handler(MCAN0_INT1_IRQn, 2);
  4028b0:	2024      	movs	r0, #36	; 0x24
  4028b2:	4b1a      	ldr	r3, [pc, #104]	; (40291c <mcan0_configure+0x128>)
  4028b4:	4798      	blx	r3
  4028b6:	2102      	movs	r1, #2
  4028b8:	2024      	movs	r0, #36	; 0x24
  4028ba:	4b19      	ldr	r3, [pc, #100]	; (402920 <mcan0_configure+0x12c>)
  4028bc:	4798      	blx	r3
  4028be:	2024      	movs	r0, #36	; 0x24
  4028c0:	4b18      	ldr	r3, [pc, #96]	; (402924 <mcan0_configure+0x130>)
  4028c2:	4798      	blx	r3
	
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan0_instance);
  4028c4:	480b      	ldr	r0, [pc, #44]	; (4028f4 <mcan0_configure+0x100>)
  4028c6:	4b18      	ldr	r3, [pc, #96]	; (402928 <mcan0_configure+0x134>)
  4028c8:	4798      	blx	r3

    mcan_start(&mcan0_instance);
  4028ca:	480a      	ldr	r0, [pc, #40]	; (4028f4 <mcan0_configure+0x100>)
  4028cc:	4b17      	ldr	r3, [pc, #92]	; (40292c <mcan0_configure+0x138>)
  4028ce:	4798      	blx	r3
}
  4028d0:	bf00      	nop
  4028d2:	3730      	adds	r7, #48	; 0x30
  4028d4:	46bd      	mov	sp, r7
  4028d6:	bd80      	pop	{r7, pc}
  4028d8:	204011ac 	.word	0x204011ac
  4028dc:	20401194 	.word	0x20401194
  4028e0:	20401160 	.word	0x20401160
  4028e4:	00402189 	.word	0x00402189
  4028e8:	20401178 	.word	0x20401178
  4028ec:	00402465 	.word	0x00402465
  4028f0:	40030000 	.word	0x40030000
  4028f4:	2040114c 	.word	0x2040114c
  4028f8:	00400f1d 	.word	0x00400f1d
  4028fc:	00401835 	.word	0x00401835
  402900:	00401a05 	.word	0x00401a05
  402904:	00401985 	.word	0x00401985
  402908:	004019dd 	.word	0x004019dd
  40290c:	00400f9d 	.word	0x00400f9d
  402910:	6208fe11 	.word	0x6208fe11
  402914:	004026d5 	.word	0x004026d5
  402918:	004026fb 	.word	0x004026fb
  40291c:	004023d5 	.word	0x004023d5
  402920:	00402411 	.word	0x00402411
  402924:	00402399 	.word	0x00402399
  402928:	0040275d 	.word	0x0040275d
  40292c:	00401009 	.word	0x00401009

00402930 <mcan1_configure>:

void mcan1_configure(uint32_t baudrate, uint32_t rx_buffer_size, uint32_t tx_buffer_size)
{	
  402930:	b580      	push	{r7, lr}
  402932:	b08c      	sub	sp, #48	; 0x30
  402934:	af00      	add	r7, sp, #0
  402936:	60f8      	str	r0, [r7, #12]
  402938:	60b9      	str	r1, [r7, #8]
  40293a:	607a      	str	r2, [r7, #4]
	mcan1_standard_receive_index = 0;
  40293c:	4b37      	ldr	r3, [pc, #220]	; (402a1c <mcan1_configure+0xec>)
  40293e:	2200      	movs	r2, #0
  402940:	601a      	str	r2, [r3, #0]
	mcan1_extended_receive_index = 0;
  402942:	4b37      	ldr	r3, [pc, #220]	; (402a20 <mcan1_configure+0xf0>)
  402944:	2200      	movs	r2, #0
  402946:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_rx, rx_buffer_size, sizeof(mcan_timestamped_rx_message_t));
  402948:	2220      	movs	r2, #32
  40294a:	68b9      	ldr	r1, [r7, #8]
  40294c:	4835      	ldr	r0, [pc, #212]	; (402a24 <mcan1_configure+0xf4>)
  40294e:	4b36      	ldr	r3, [pc, #216]	; (402a28 <mcan1_configure+0xf8>)
  402950:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_tx, tx_buffer_size, sizeof(mcan_tx_message_t));
  402952:	2214      	movs	r2, #20
  402954:	6879      	ldr	r1, [r7, #4]
  402956:	4835      	ldr	r0, [pc, #212]	; (402a2c <mcan1_configure+0xfc>)
  402958:	4b33      	ldr	r3, [pc, #204]	; (402a28 <mcan1_configure+0xf8>)
  40295a:	4798      	blx	r3

	mcan1_buffer.adding_in_tx_buffer = false;
  40295c:	4b31      	ldr	r3, [pc, #196]	; (402a24 <mcan1_configure+0xf4>)
  40295e:	2200      	movs	r2, #0
  402960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan1_buffer.interruption_occurred_while_adding_in_tx_buffer = false;
  402964:	4b2f      	ldr	r3, [pc, #188]	; (402a24 <mcan1_configure+0xf4>)
  402966:	2200      	movs	r2, #0
  402968:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan1_buffer.buffer_being_emptied_by_interruption = false;
  40296c:	4b2d      	ldr	r3, [pc, #180]	; (402a24 <mcan1_configure+0xf4>)
  40296e:	2200      	movs	r2, #0
  402970:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  402974:	f107 0310 	add.w	r3, r7, #16
  402978:	4618      	mov	r0, r3
  40297a:	4b2d      	ldr	r3, [pc, #180]	; (402a30 <mcan1_configure+0x100>)
  40297c:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  40297e:	2302      	movs	r3, #2
  402980:	f887 3020 	strb.w	r3, [r7, #32]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  402984:	2302      	movs	r3, #2
  402986:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	config_mcan.tx_queue_mode = false;
  40298a:	2300      	movs	r3, #0
  40298c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	mcan_init(&mcan1_instance, MCAN1, &config_mcan);
  402990:	f107 0310 	add.w	r3, r7, #16
  402994:	461a      	mov	r2, r3
  402996:	4927      	ldr	r1, [pc, #156]	; (402a34 <mcan1_configure+0x104>)
  402998:	4827      	ldr	r0, [pc, #156]	; (402a38 <mcan1_configure+0x108>)
  40299a:	4b28      	ldr	r3, [pc, #160]	; (402a3c <mcan1_configure+0x10c>)
  40299c:	4798      	blx	r3

	//Enabling the upll clock 
	//NEED TO HAVE THE RIGHT conf_mcan.h !
	pmc_enable_upll_clock();
  40299e:	4b28      	ldr	r3, [pc, #160]	; (402a40 <mcan1_configure+0x110>)
  4029a0:	4798      	blx	r3
	// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
	//It is recomended in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
	pmc_disable_pck(PMC_PCK_5);
  4029a2:	2005      	movs	r0, #5
  4029a4:	4b27      	ldr	r3, [pc, #156]	; (402a44 <mcan1_configure+0x114>)
  4029a6:	4798      	blx	r3
	//dividing uppl by 6 to get a 80 Mhz signal which is again divided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
	pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  4029a8:	2150      	movs	r1, #80	; 0x50
  4029aa:	2005      	movs	r0, #5
  4029ac:	4b26      	ldr	r3, [pc, #152]	; (402a48 <mcan1_configure+0x118>)
  4029ae:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  4029b0:	2005      	movs	r0, #5
  4029b2:	4b26      	ldr	r3, [pc, #152]	; (402a4c <mcan1_configure+0x11c>)
  4029b4:	4798      	blx	r3

	//
	mcan_set_baudrate(mcan1_instance.hw, baudrate);
  4029b6:	4b20      	ldr	r3, [pc, #128]	; (402a38 <mcan1_configure+0x108>)
  4029b8:	681b      	ldr	r3, [r3, #0]
  4029ba:	68f9      	ldr	r1, [r7, #12]
  4029bc:	4618      	mov	r0, r3
  4029be:	4b24      	ldr	r3, [pc, #144]	; (402a50 <mcan1_configure+0x120>)
  4029c0:	4798      	blx	r3

	//choosing what interruption to activate
	mcan_enable_interrupt(&mcan1_instance,
  4029c2:	4924      	ldr	r1, [pc, #144]	; (402a54 <mcan1_configure+0x124>)
  4029c4:	481c      	ldr	r0, [pc, #112]	; (402a38 <mcan1_configure+0x108>)
  4029c6:	4b24      	ldr	r3, [pc, #144]	; (402a58 <mcan1_configure+0x128>)
  4029c8:	4798      	blx	r3
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	
	//TODO understand why I have put this line.
	mcan_disable_interrupt(&mcan1_instance, MCAN_TIMESTAMP_WRAPAROUND);
  4029ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4029ce:	481a      	ldr	r0, [pc, #104]	; (402a38 <mcan1_configure+0x108>)
  4029d0:	4b22      	ldr	r3, [pc, #136]	; (402a5c <mcan1_configure+0x12c>)
  4029d2:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan1_instance.hw->MCAN_ILS = 0x0000FF00ul;
  4029d4:	4b18      	ldr	r3, [pc, #96]	; (402a38 <mcan1_configure+0x108>)
  4029d6:	681b      	ldr	r3, [r3, #0]
  4029d8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  4029dc:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	irq_register_handler(MCAN1_INT0_IRQn, 1);
  4029de:	2025      	movs	r0, #37	; 0x25
  4029e0:	4b1f      	ldr	r3, [pc, #124]	; (402a60 <mcan1_configure+0x130>)
  4029e2:	4798      	blx	r3
  4029e4:	2101      	movs	r1, #1
  4029e6:	2025      	movs	r0, #37	; 0x25
  4029e8:	4b1e      	ldr	r3, [pc, #120]	; (402a64 <mcan1_configure+0x134>)
  4029ea:	4798      	blx	r3
  4029ec:	2025      	movs	r0, #37	; 0x25
  4029ee:	4b1e      	ldr	r3, [pc, #120]	; (402a68 <mcan1_configure+0x138>)
  4029f0:	4798      	blx	r3
	irq_register_handler(MCAN1_INT1_IRQn, 2);
  4029f2:	2026      	movs	r0, #38	; 0x26
  4029f4:	4b1a      	ldr	r3, [pc, #104]	; (402a60 <mcan1_configure+0x130>)
  4029f6:	4798      	blx	r3
  4029f8:	2102      	movs	r1, #2
  4029fa:	2026      	movs	r0, #38	; 0x26
  4029fc:	4b19      	ldr	r3, [pc, #100]	; (402a64 <mcan1_configure+0x134>)
  4029fe:	4798      	blx	r3
  402a00:	2026      	movs	r0, #38	; 0x26
  402a02:	4b19      	ldr	r3, [pc, #100]	; (402a68 <mcan1_configure+0x138>)
  402a04:	4798      	blx	r3
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan1_instance);
  402a06:	480c      	ldr	r0, [pc, #48]	; (402a38 <mcan1_configure+0x108>)
  402a08:	4b18      	ldr	r3, [pc, #96]	; (402a6c <mcan1_configure+0x13c>)
  402a0a:	4798      	blx	r3

    mcan_start(&mcan1_instance);
  402a0c:	480a      	ldr	r0, [pc, #40]	; (402a38 <mcan1_configure+0x108>)
  402a0e:	4b18      	ldr	r3, [pc, #96]	; (402a70 <mcan1_configure+0x140>)
  402a10:	4798      	blx	r3
}
  402a12:	bf00      	nop
  402a14:	3730      	adds	r7, #48	; 0x30
  402a16:	46bd      	mov	sp, r7
  402a18:	bd80      	pop	{r7, pc}
  402a1a:	bf00      	nop
  402a1c:	204011a8 	.word	0x204011a8
  402a20:	20401128 	.word	0x20401128
  402a24:	204011d4 	.word	0x204011d4
  402a28:	00402189 	.word	0x00402189
  402a2c:	204011ec 	.word	0x204011ec
  402a30:	00402465 	.word	0x00402465
  402a34:	40034000 	.word	0x40034000
  402a38:	204011c0 	.word	0x204011c0
  402a3c:	00400f1d 	.word	0x00400f1d
  402a40:	00401835 	.word	0x00401835
  402a44:	00401a05 	.word	0x00401a05
  402a48:	00401985 	.word	0x00401985
  402a4c:	004019dd 	.word	0x004019dd
  402a50:	00400f9d 	.word	0x00400f9d
  402a54:	6208fe11 	.word	0x6208fe11
  402a58:	004026d5 	.word	0x004026d5
  402a5c:	004026fb 	.word	0x004026fb
  402a60:	004023d5 	.word	0x004023d5
  402a64:	00402411 	.word	0x00402411
  402a68:	00402399 	.word	0x00402399
  402a6c:	0040275d 	.word	0x0040275d
  402a70:	00401009 	.word	0x00401009

00402a74 <_mcan0_push_message>:

void _mcan0_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  402a74:	b5b0      	push	{r4, r5, r7, lr}
  402a76:	b094      	sub	sp, #80	; 0x50
  402a78:	af00      	add	r7, sp, #0
  402a7a:	60f8      	str	r0, [r7, #12]
  402a7c:	60b9      	str	r1, [r7, #8]
  402a7e:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  402a80:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  402a84:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  402a88:	2300      	movs	r3, #0
  402a8a:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  402a8c:	7bfb      	ldrb	r3, [r7, #15]
  402a8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
  402a92:	b2da      	uxtb	r2, r3
  402a94:	7d3b      	ldrb	r3, [r7, #20]
  402a96:	f362 13c7 	bfi	r3, r2, #7, #1
  402a9a:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  402a9c:	7bfb      	ldrb	r3, [r7, #15]
  402a9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402aa2:	b2da      	uxtb	r2, r3
  402aa4:	7d3b      	ldrb	r3, [r7, #20]
  402aa6:	f362 1386 	bfi	r3, r2, #6, #1
  402aaa:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  402aac:	7bfb      	ldrb	r3, [r7, #15]
  402aae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  402ab2:	b2da      	uxtb	r2, r3
  402ab4:	7d3b      	ldrb	r3, [r7, #20]
  402ab6:	f362 1345 	bfi	r3, r2, #5, #1
  402aba:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  402abc:	7abb      	ldrb	r3, [r7, #10]
  402abe:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402ac2:	b2da      	uxtb	r2, r3
  402ac4:	7d3b      	ldrb	r3, [r7, #20]
  402ac6:	f362 1304 	bfi	r3, r2, #4, #1
  402aca:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  402acc:	7abb      	ldrb	r3, [r7, #10]
  402ace:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402ad2:	b2da      	uxtb	r2, r3
  402ad4:	7d3b      	ldrb	r3, [r7, #20]
  402ad6:	f362 03c3 	bfi	r3, r2, #3, #1
  402ada:	753b      	strb	r3, [r7, #20]

	if(message.message_info.bit.is_extended)
  402adc:	7d3b      	ldrb	r3, [r7, #20]
  402ade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402ae2:	b2db      	uxtb	r3, r3
  402ae4:	2b00      	cmp	r3, #0
  402ae6:	d004      	beq.n	402af2 <_mcan0_push_message+0x7e>
	{
		message.id = r0.bit.ID;
  402ae8:	68fb      	ldr	r3, [r7, #12]
  402aea:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402aee:	61bb      	str	r3, [r7, #24]
  402af0:	e006      	b.n	402b00 <_mcan0_push_message+0x8c>
	}
	else
	{
		message.id = GET_BITS(r0.bit.ID, 18, 29);
  402af2:	68fb      	ldr	r3, [r7, #12]
  402af4:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402af8:	149b      	asrs	r3, r3, #18
  402afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402afe:	61bb      	str	r3, [r7, #24]
	}
	message.dlc = r1.bit.DLC;
  402b00:	7abb      	ldrb	r3, [r7, #10]
  402b02:	f3c3 0303 	ubfx	r3, r3, #0, #4
  402b06:	b2db      	uxtb	r3, r3
  402b08:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  402b0a:	2300      	movs	r3, #0
  402b0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402b10:	e010      	b.n	402b34 <_mcan0_push_message+0xc0>
	{
		message.data[i] = data[i];
  402b12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402b16:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402b1a:	6879      	ldr	r1, [r7, #4]
  402b1c:	440a      	add	r2, r1
  402b1e:	7812      	ldrb	r2, [r2, #0]
  402b20:	f107 0150 	add.w	r1, r7, #80	; 0x50
  402b24:	440b      	add	r3, r1
  402b26:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  402b2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402b2e:	3301      	adds	r3, #1
  402b30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402b34:	7f3b      	ldrb	r3, [r7, #28]
  402b36:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402b3a:	429a      	cmp	r2, r3
  402b3c:	d3e9      	bcc.n	402b12 <_mcan0_push_message+0x9e>
	}
	

	time_message.rx_message = message;
  402b3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
  402b42:	f107 0514 	add.w	r5, r7, #20
  402b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402b4a:	682b      	ldr	r3, [r5, #0]
  402b4c:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan0_buffer.buffer_rx, &time_message) != CBF_SUCCESS)
  402b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402b52:	4619      	mov	r1, r3
  402b54:	4803      	ldr	r0, [pc, #12]	; (402b64 <_mcan0_push_message+0xf0>)
  402b56:	4b04      	ldr	r3, [pc, #16]	; (402b68 <_mcan0_push_message+0xf4>)
  402b58:	4798      	blx	r3
	{
		//TODO HANDLE ERROR 
	}
}
  402b5a:	bf00      	nop
  402b5c:	3750      	adds	r7, #80	; 0x50
  402b5e:	46bd      	mov	sp, r7
  402b60:	bdb0      	pop	{r4, r5, r7, pc}
  402b62:	bf00      	nop
  402b64:	20401160 	.word	0x20401160
  402b68:	00402289 	.word	0x00402289

00402b6c <_mcan1_push_message>:

void _mcan1_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  402b6c:	b5b0      	push	{r4, r5, r7, lr}
  402b6e:	b094      	sub	sp, #80	; 0x50
  402b70:	af00      	add	r7, sp, #0
  402b72:	60f8      	str	r0, [r7, #12]
  402b74:	60b9      	str	r1, [r7, #8]
  402b76:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  402b78:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  402b7c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  402b80:	2300      	movs	r3, #0
  402b82:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  402b84:	7bfb      	ldrb	r3, [r7, #15]
  402b86:	f3c3 1380 	ubfx	r3, r3, #6, #1
  402b8a:	b2da      	uxtb	r2, r3
  402b8c:	7d3b      	ldrb	r3, [r7, #20]
  402b8e:	f362 13c7 	bfi	r3, r2, #7, #1
  402b92:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  402b94:	7bfb      	ldrb	r3, [r7, #15]
  402b96:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402b9a:	b2da      	uxtb	r2, r3
  402b9c:	7d3b      	ldrb	r3, [r7, #20]
  402b9e:	f362 1386 	bfi	r3, r2, #6, #1
  402ba2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  402ba4:	7bfb      	ldrb	r3, [r7, #15]
  402ba6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  402baa:	b2da      	uxtb	r2, r3
  402bac:	7d3b      	ldrb	r3, [r7, #20]
  402bae:	f362 1345 	bfi	r3, r2, #5, #1
  402bb2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  402bb4:	7abb      	ldrb	r3, [r7, #10]
  402bb6:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402bba:	b2da      	uxtb	r2, r3
  402bbc:	7d3b      	ldrb	r3, [r7, #20]
  402bbe:	f362 1304 	bfi	r3, r2, #4, #1
  402bc2:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  402bc4:	7abb      	ldrb	r3, [r7, #10]
  402bc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402bca:	b2da      	uxtb	r2, r3
  402bcc:	7d3b      	ldrb	r3, [r7, #20]
  402bce:	f362 03c3 	bfi	r3, r2, #3, #1
  402bd2:	753b      	strb	r3, [r7, #20]

	
	if(message.message_info.bit.is_extended)
  402bd4:	7d3b      	ldrb	r3, [r7, #20]
  402bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402bda:	b2db      	uxtb	r3, r3
  402bdc:	2b00      	cmp	r3, #0
  402bde:	d004      	beq.n	402bea <_mcan1_push_message+0x7e>
	{
		message.id = r0.bit.ID;
  402be0:	68fb      	ldr	r3, [r7, #12]
  402be2:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402be6:	61bb      	str	r3, [r7, #24]
  402be8:	e006      	b.n	402bf8 <_mcan1_push_message+0x8c>
	}
	else
	{
		message.id = GET_BITS(r0.bit.ID, 18, 29);
  402bea:	68fb      	ldr	r3, [r7, #12]
  402bec:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402bf0:	149b      	asrs	r3, r3, #18
  402bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  402bf6:	61bb      	str	r3, [r7, #24]
	}
	message.dlc = r1.bit.DLC;
  402bf8:	7abb      	ldrb	r3, [r7, #10]
  402bfa:	f3c3 0303 	ubfx	r3, r3, #0, #4
  402bfe:	b2db      	uxtb	r3, r3
  402c00:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  402c02:	2300      	movs	r3, #0
  402c04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402c08:	e010      	b.n	402c2c <_mcan1_push_message+0xc0>
	{
		message.data[i] = data[i];
  402c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402c0e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402c12:	6879      	ldr	r1, [r7, #4]
  402c14:	440a      	add	r2, r1
  402c16:	7812      	ldrb	r2, [r2, #0]
  402c18:	f107 0150 	add.w	r1, r7, #80	; 0x50
  402c1c:	440b      	add	r3, r1
  402c1e:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  402c22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402c26:	3301      	adds	r3, #1
  402c28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402c2c:	7f3b      	ldrb	r3, [r7, #28]
  402c2e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402c32:	429a      	cmp	r2, r3
  402c34:	d3e9      	bcc.n	402c0a <_mcan1_push_message+0x9e>
	}
	

	time_message.rx_message = message;
  402c36:	f107 0430 	add.w	r4, r7, #48	; 0x30
  402c3a:	f107 0514 	add.w	r5, r7, #20
  402c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402c42:	682b      	ldr	r3, [r5, #0]
  402c44:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan1_buffer.buffer_rx, &time_message) != CBF_SUCCESS)
  402c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402c4a:	4619      	mov	r1, r3
  402c4c:	4803      	ldr	r0, [pc, #12]	; (402c5c <_mcan1_push_message+0xf0>)
  402c4e:	4b04      	ldr	r3, [pc, #16]	; (402c60 <_mcan1_push_message+0xf4>)
  402c50:	4798      	blx	r3
	{
		//HANDLE ERROR TODO
	}
}
  402c52:	bf00      	nop
  402c54:	3750      	adds	r7, #80	; 0x50
  402c56:	46bd      	mov	sp, r7
  402c58:	bdb0      	pop	{r4, r5, r7, pc}
  402c5a:	bf00      	nop
  402c5c:	204011d4 	.word	0x204011d4
  402c60:	00402289 	.word	0x00402289

00402c64 <MCAN0_INT0_Handler>:

void MCAN0_INT0_Handler(void)
{
  402c64:	b590      	push	{r4, r7, lr}
  402c66:	b087      	sub	sp, #28
  402c68:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan0_instance);
  402c6a:	485e      	ldr	r0, [pc, #376]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402c6c:	4b5e      	ldr	r3, [pc, #376]	; (402de8 <MCAN0_INT0_Handler+0x184>)
  402c6e:	4798      	blx	r3
  402c70:	4603      	mov	r3, r0
  402c72:	60fb      	str	r3, [r7, #12]
	
	if (status & MCAN_RX_BUFFER_NEW_MESSAGE)
  402c74:	68fb      	ldr	r3, [r7, #12]
  402c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	d02e      	beq.n	402cdc <MCAN0_INT0_Handler+0x78>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  402c7e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402c82:	4858      	ldr	r0, [pc, #352]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402c84:	4b59      	ldr	r3, [pc, #356]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402c86:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Message stored to Dedicated Rx Buffer Interrupt\r\n");
		#endif

		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  402c88:	2300      	movs	r3, #0
  402c8a:	60bb      	str	r3, [r7, #8]
  402c8c:	e023      	b.n	402cd6 <MCAN0_INT0_Handler+0x72>
		{
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  402c8e:	68bb      	ldr	r3, [r7, #8]
  402c90:	4619      	mov	r1, r3
  402c92:	4854      	ldr	r0, [pc, #336]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402c94:	4b56      	ldr	r3, [pc, #344]	; (402df0 <MCAN0_INT0_Handler+0x18c>)
  402c96:	4798      	blx	r3
  402c98:	4603      	mov	r3, r0
  402c9a:	2b00      	cmp	r3, #0
  402c9c:	d018      	beq.n	402cd0 <MCAN0_INT0_Handler+0x6c>
			{
				rx_buffer_index = i;
  402c9e:	68bb      	ldr	r3, [r7, #8]
  402ca0:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan0_instance, i);
  402ca2:	68bb      	ldr	r3, [r7, #8]
  402ca4:	4619      	mov	r1, r3
  402ca6:	484f      	ldr	r0, [pc, #316]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402ca8:	4b52      	ldr	r3, [pc, #328]	; (402df4 <MCAN0_INT0_Handler+0x190>)
  402caa:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan0_instance, &mcan0_rx_element_buffer, rx_buffer_index);
  402cac:	687b      	ldr	r3, [r7, #4]
  402cae:	461a      	mov	r2, r3
  402cb0:	4951      	ldr	r1, [pc, #324]	; (402df8 <MCAN0_INT0_Handler+0x194>)
  402cb2:	484c      	ldr	r0, [pc, #304]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402cb4:	4b51      	ldr	r3, [pc, #324]	; (402dfc <MCAN0_INT0_Handler+0x198>)
  402cb6:	4798      	blx	r3
				
				_mcan0_push_message(mcan0_rx_element_buffer.R0, mcan0_rx_element_buffer.R1, mcan0_rx_element_buffer.data, unix_timestamp_ms);
  402cb8:	4b51      	ldr	r3, [pc, #324]	; (402e00 <MCAN0_INT0_Handler+0x19c>)
  402cba:	e9d3 3400 	ldrd	r3, r4, [r3]
  402cbe:	494e      	ldr	r1, [pc, #312]	; (402df8 <MCAN0_INT0_Handler+0x194>)
  402cc0:	484d      	ldr	r0, [pc, #308]	; (402df8 <MCAN0_INT0_Handler+0x194>)
  402cc2:	e9cd 3400 	strd	r3, r4, [sp]
  402cc6:	4a4f      	ldr	r2, [pc, #316]	; (402e04 <MCAN0_INT0_Handler+0x1a0>)
  402cc8:	6849      	ldr	r1, [r1, #4]
  402cca:	6800      	ldr	r0, [r0, #0]
  402ccc:	4b4e      	ldr	r3, [pc, #312]	; (402e08 <MCAN0_INT0_Handler+0x1a4>)
  402cce:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  402cd0:	68bb      	ldr	r3, [r7, #8]
  402cd2:	3301      	adds	r3, #1
  402cd4:	60bb      	str	r3, [r7, #8]
  402cd6:	68bb      	ldr	r3, [r7, #8]
  402cd8:	2b00      	cmp	r3, #0
  402cda:	d0d8      	beq.n	402c8e <MCAN0_INT0_Handler+0x2a>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE)
  402cdc:	68fb      	ldr	r3, [r7, #12]
  402cde:	f003 0301 	and.w	r3, r3, #1
  402ce2:	2b00      	cmp	r3, #0
  402ce4:	d029      	beq.n	402d3a <MCAN0_INT0_Handler+0xd6>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402ce6:	2101      	movs	r1, #1
  402ce8:	483e      	ldr	r0, [pc, #248]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402cea:	4b40      	ldr	r3, [pc, #256]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402cec:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 0 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_0_element(&mcan0_instance, &mcan0_rx_element_fifo_0, mcan0_standard_receive_index);
  402cee:	4b47      	ldr	r3, [pc, #284]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402cf0:	681b      	ldr	r3, [r3, #0]
  402cf2:	461a      	mov	r2, r3
  402cf4:	4946      	ldr	r1, [pc, #280]	; (402e10 <MCAN0_INT0_Handler+0x1ac>)
  402cf6:	483b      	ldr	r0, [pc, #236]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402cf8:	4b46      	ldr	r3, [pc, #280]	; (402e14 <MCAN0_INT0_Handler+0x1b0>)
  402cfa:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 0, mcan0_standard_receive_index);
  402cfc:	4b43      	ldr	r3, [pc, #268]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402cfe:	681b      	ldr	r3, [r3, #0]
  402d00:	461a      	mov	r2, r3
  402d02:	2100      	movs	r1, #0
  402d04:	4837      	ldr	r0, [pc, #220]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402d06:	4b44      	ldr	r3, [pc, #272]	; (402e18 <MCAN0_INT0_Handler+0x1b4>)
  402d08:	4798      	blx	r3

		mcan0_standard_receive_index++;
  402d0a:	4b40      	ldr	r3, [pc, #256]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402d0c:	681b      	ldr	r3, [r3, #0]
  402d0e:	3301      	adds	r3, #1
  402d10:	4a3e      	ldr	r2, [pc, #248]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402d12:	6013      	str	r3, [r2, #0]

		if (mcan0_standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM)
  402d14:	4b3d      	ldr	r3, [pc, #244]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402d16:	681b      	ldr	r3, [r3, #0]
  402d18:	2b10      	cmp	r3, #16
  402d1a:	d102      	bne.n	402d22 <MCAN0_INT0_Handler+0xbe>
		{
			mcan0_standard_receive_index = 0;
  402d1c:	4b3b      	ldr	r3, [pc, #236]	; (402e0c <MCAN0_INT0_Handler+0x1a8>)
  402d1e:	2200      	movs	r2, #0
  402d20:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_0.R0, mcan0_rx_element_fifo_0.R1, mcan0_rx_element_fifo_0.data, unix_timestamp_ms);
  402d22:	4b37      	ldr	r3, [pc, #220]	; (402e00 <MCAN0_INT0_Handler+0x19c>)
  402d24:	e9d3 3400 	ldrd	r3, r4, [r3]
  402d28:	4939      	ldr	r1, [pc, #228]	; (402e10 <MCAN0_INT0_Handler+0x1ac>)
  402d2a:	4839      	ldr	r0, [pc, #228]	; (402e10 <MCAN0_INT0_Handler+0x1ac>)
  402d2c:	e9cd 3400 	strd	r3, r4, [sp]
  402d30:	4a3a      	ldr	r2, [pc, #232]	; (402e1c <MCAN0_INT0_Handler+0x1b8>)
  402d32:	6849      	ldr	r1, [r1, #4]
  402d34:	6800      	ldr	r0, [r0, #0]
  402d36:	4b34      	ldr	r3, [pc, #208]	; (402e08 <MCAN0_INT0_Handler+0x1a4>)
  402d38:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  402d3a:	68fb      	ldr	r3, [r7, #12]
  402d3c:	f003 0310 	and.w	r3, r3, #16
  402d40:	2b00      	cmp	r3, #0
  402d42:	d029      	beq.n	402d98 <MCAN0_INT0_Handler+0x134>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  402d44:	2110      	movs	r1, #16
  402d46:	4827      	ldr	r0, [pc, #156]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402d48:	4b28      	ldr	r3, [pc, #160]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402d4a:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 1 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_1_element(&mcan0_instance, &mcan0_rx_element_fifo_1, mcan0_extended_receive_index);
  402d4c:	4b34      	ldr	r3, [pc, #208]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d4e:	681b      	ldr	r3, [r3, #0]
  402d50:	461a      	mov	r2, r3
  402d52:	4934      	ldr	r1, [pc, #208]	; (402e24 <MCAN0_INT0_Handler+0x1c0>)
  402d54:	4823      	ldr	r0, [pc, #140]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402d56:	4b34      	ldr	r3, [pc, #208]	; (402e28 <MCAN0_INT0_Handler+0x1c4>)
  402d58:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 1, mcan0_extended_receive_index);
  402d5a:	4b31      	ldr	r3, [pc, #196]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d5c:	681b      	ldr	r3, [r3, #0]
  402d5e:	461a      	mov	r2, r3
  402d60:	2101      	movs	r1, #1
  402d62:	4820      	ldr	r0, [pc, #128]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402d64:	4b2c      	ldr	r3, [pc, #176]	; (402e18 <MCAN0_INT0_Handler+0x1b4>)
  402d66:	4798      	blx	r3

		mcan0_extended_receive_index++;
  402d68:	4b2d      	ldr	r3, [pc, #180]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d6a:	681b      	ldr	r3, [r3, #0]
  402d6c:	3301      	adds	r3, #1
  402d6e:	4a2c      	ldr	r2, [pc, #176]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d70:	6013      	str	r3, [r2, #0]

		if (mcan0_extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) 
  402d72:	4b2b      	ldr	r3, [pc, #172]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d74:	681b      	ldr	r3, [r3, #0]
  402d76:	2b10      	cmp	r3, #16
  402d78:	d102      	bne.n	402d80 <MCAN0_INT0_Handler+0x11c>
		{
			mcan0_extended_receive_index = 0;
  402d7a:	4b29      	ldr	r3, [pc, #164]	; (402e20 <MCAN0_INT0_Handler+0x1bc>)
  402d7c:	2200      	movs	r2, #0
  402d7e:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_1.R0, mcan0_rx_element_fifo_1.R1, mcan0_rx_element_fifo_1.data, unix_timestamp_ms);
  402d80:	4b1f      	ldr	r3, [pc, #124]	; (402e00 <MCAN0_INT0_Handler+0x19c>)
  402d82:	e9d3 3400 	ldrd	r3, r4, [r3]
  402d86:	4927      	ldr	r1, [pc, #156]	; (402e24 <MCAN0_INT0_Handler+0x1c0>)
  402d88:	4826      	ldr	r0, [pc, #152]	; (402e24 <MCAN0_INT0_Handler+0x1c0>)
  402d8a:	e9cd 3400 	strd	r3, r4, [sp]
  402d8e:	4a27      	ldr	r2, [pc, #156]	; (402e2c <MCAN0_INT0_Handler+0x1c8>)
  402d90:	6849      	ldr	r1, [r1, #4]
  402d92:	6800      	ldr	r0, [r0, #0]
  402d94:	4b1c      	ldr	r3, [pc, #112]	; (402e08 <MCAN0_INT0_Handler+0x1a4>)
  402d96:	4798      	blx	r3
	}
	
	//Usually occurs if can tx pin is not connected to transceiver or to a transceiver not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  402d98:	68fb      	ldr	r3, [r7, #12]
  402d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  402d9e:	2b00      	cmp	r3, #0
  402da0:	d007      	beq.n	402db2 <MCAN0_INT0_Handler+0x14e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_BUS_OFF);
  402da2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402da6:	480f      	ldr	r0, [pc, #60]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402da8:	4b10      	ldr	r3, [pc, #64]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402daa:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\r CAN0 Bus Off Status \r\n");
		#endif
		
		mcan_stop(&mcan0_instance);
  402dac:	480d      	ldr	r0, [pc, #52]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402dae:	4b20      	ldr	r3, [pc, #128]	; (402e30 <MCAN0_INT0_Handler+0x1cc>)
  402db0:	4798      	blx	r3
		
	}

	//Usually occurs when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  402db2:	68fb      	ldr	r3, [r7, #12]
  402db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  402db8:	2b00      	cmp	r3, #0
  402dba:	d004      	beq.n	402dc6 <MCAN0_INT0_Handler+0x162>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_ACKNOWLEDGE_ERROR);
  402dbc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402dc0:	4808      	ldr	r0, [pc, #32]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402dc2:	4b0a      	ldr	r3, [pc, #40]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402dc4:	4798      	blx	r3
		printf("\n\rCAN0 Acknowledge Error \r\n");
		#endif
	}

	//Usually occurs if can rx pin is not connected to transceiver or receiving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  402dc6:	68fb      	ldr	r3, [r7, #12]
  402dc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402dcc:	2b00      	cmp	r3, #0
  402dce:	d004      	beq.n	402dda <MCAN0_INT0_Handler+0x176>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_FORMAT_ERROR);
  402dd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402dd4:	4803      	ldr	r0, [pc, #12]	; (402de4 <MCAN0_INT0_Handler+0x180>)
  402dd6:	4b05      	ldr	r3, [pc, #20]	; (402dec <MCAN0_INT0_Handler+0x188>)
  402dd8:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\rCAN0 Format Error \r\n");
		#endif
	}
}
  402dda:	bf00      	nop
  402ddc:	3714      	adds	r7, #20
  402dde:	46bd      	mov	sp, r7
  402de0:	bd90      	pop	{r4, r7, pc}
  402de2:	bf00      	nop
  402de4:	2040114c 	.word	0x2040114c
  402de8:	00402723 	.word	0x00402723
  402dec:	0040273d 	.word	0x0040273d
  402df0:	00402513 	.word	0x00402513
  402df4:	0040256f 	.word	0x0040256f
  402df8:	204011b0 	.word	0x204011b0
  402dfc:	0040114d 	.word	0x0040114d
  402e00:	204010d8 	.word	0x204010d8
  402e04:	204011b8 	.word	0x204011b8
  402e08:	00402a75 	.word	0x00402a75
  402e0c:	204011ac 	.word	0x204011ac
  402e10:	20401198 	.word	0x20401198
  402e14:	004011b9 	.word	0x004011b9
  402e18:	004025b3 	.word	0x004025b3
  402e1c:	204011a0 	.word	0x204011a0
  402e20:	20401194 	.word	0x20401194
  402e24:	20401150 	.word	0x20401150
  402e28:	00401225 	.word	0x00401225
  402e2c:	20401158 	.word	0x20401158
  402e30:	0040103d 	.word	0x0040103d

00402e34 <MCAN0_INT1_Handler>:

void MCAN0_INT1_Handler(void)
{
  402e34:	b580      	push	{r7, lr}
  402e36:	b088      	sub	sp, #32
  402e38:	af00      	add	r7, sp, #0
	volatile uint32_t status;
	status = mcan_read_interrupt_status(&mcan0_instance);
  402e3a:	4843      	ldr	r0, [pc, #268]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402e3c:	4b43      	ldr	r3, [pc, #268]	; (402f4c <MCAN0_INT1_Handler+0x118>)
  402e3e:	4798      	blx	r3
  402e40:	4603      	mov	r3, r0
  402e42:	613b      	str	r3, [r7, #16]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  402e44:	693b      	ldr	r3, [r7, #16]
  402e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402e4a:	2b00      	cmp	r3, #0
  402e4c:	d02f      	beq.n	402eae <MCAN0_INT1_Handler+0x7a>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TIMESTAMP_COMPLETE);
  402e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
  402e52:	483d      	ldr	r0, [pc, #244]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402e54:	4b3e      	ldr	r3, [pc, #248]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402e56:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Completed Interrupt\r\n");
		#endif
		if(!mcan0_buffer.adding_in_tx_buffer)
  402e58:	4b3e      	ldr	r3, [pc, #248]	; (402f54 <MCAN0_INT1_Handler+0x120>)
  402e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402e5e:	b2db      	uxtb	r3, r3
  402e60:	2b00      	cmp	r3, #0
  402e62:	d120      	bne.n	402ea6 <MCAN0_INT1_Handler+0x72>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx)>0)
  402e64:	483c      	ldr	r0, [pc, #240]	; (402f58 <MCAN0_INT1_Handler+0x124>)
  402e66:	4b3d      	ldr	r3, [pc, #244]	; (402f5c <MCAN0_INT1_Handler+0x128>)
  402e68:	4798      	blx	r3
  402e6a:	4603      	mov	r3, r0
  402e6c:	2b00      	cmp	r3, #0
  402e6e:	d015      	beq.n	402e9c <MCAN0_INT1_Handler+0x68>
			{
				struct mcan_tx_element tx_elem;

				circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  402e70:	463b      	mov	r3, r7
  402e72:	4619      	mov	r1, r3
  402e74:	4838      	ldr	r0, [pc, #224]	; (402f58 <MCAN0_INT1_Handler+0x124>)
  402e76:	4b3a      	ldr	r3, [pc, #232]	; (402f60 <MCAN0_INT1_Handler+0x12c>)
  402e78:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN0_TX_BUFFER_NUM);
  402e7a:	463b      	mov	r3, r7
  402e7c:	2201      	movs	r2, #1
  402e7e:	4619      	mov	r1, r3
  402e80:	4831      	ldr	r0, [pc, #196]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402e82:	4b38      	ldr	r3, [pc, #224]	; (402f64 <MCAN0_INT1_Handler+0x130>)
  402e84:	4798      	blx	r3
				int16_t stat = mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN0_TX_BUFFER_NUM);
  402e86:	2102      	movs	r1, #2
  402e88:	482f      	ldr	r0, [pc, #188]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402e8a:	4b37      	ldr	r3, [pc, #220]	; (402f68 <MCAN0_INT1_Handler+0x134>)
  402e8c:	4798      	blx	r3
  402e8e:	4603      	mov	r3, r0
  402e90:	83fb      	strh	r3, [r7, #30]
				mcan0_buffer.buffer_being_emptied_by_interruption = true;
  402e92:	4b30      	ldr	r3, [pc, #192]	; (402f54 <MCAN0_INT1_Handler+0x120>)
  402e94:	2201      	movs	r2, #1
  402e96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402e9a:	e008      	b.n	402eae <MCAN0_INT1_Handler+0x7a>
			}
			else
			{
				mcan0_buffer.buffer_being_emptied_by_interruption = false;
  402e9c:	4b2d      	ldr	r3, [pc, #180]	; (402f54 <MCAN0_INT1_Handler+0x120>)
  402e9e:	2200      	movs	r2, #0
  402ea0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402ea4:	e003      	b.n	402eae <MCAN0_INT1_Handler+0x7a>
			}
		}
		else mcan0_buffer.interruption_occurred_while_adding_in_tx_buffer = true;
  402ea6:	4b2b      	ldr	r3, [pc, #172]	; (402f54 <MCAN0_INT1_Handler+0x120>)
  402ea8:	2201      	movs	r2, #1
  402eaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  402eae:	693b      	ldr	r3, [r7, #16]
  402eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402eb4:	2b00      	cmp	r3, #0
  402eb6:	d004      	beq.n	402ec2 <MCAN0_INT1_Handler+0x8e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_CANCELLATION_FINISH);
  402eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ebc:	4822      	ldr	r0, [pc, #136]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402ebe:	4b24      	ldr	r3, [pc, #144]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402ec0:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Cancellation Finished Interrupt \r\n");
		#endif
	}

	if (status & MCAN_TX_FIFO_EMPTY)
  402ec2:	693b      	ldr	r3, [r7, #16]
  402ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  402ec8:	2b00      	cmp	r3, #0
  402eca:	d004      	beq.n	402ed6 <MCAN0_INT1_Handler+0xa2>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_FIFO_EMPTY);
  402ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402ed0:	481d      	ldr	r0, [pc, #116]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402ed2:	4b1f      	ldr	r3, [pc, #124]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402ed4:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx FIFO Empty Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  402ed6:	693b      	ldr	r3, [r7, #16]
  402ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402edc:	2b00      	cmp	r3, #0
  402ede:	d011      	beq.n	402f04 <MCAN0_INT1_Handler+0xd0>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  402ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ee4:	4818      	ldr	r0, [pc, #96]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402ee6:	4b1a      	ldr	r3, [pc, #104]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402ee8:	4798      	blx	r3
		printf("CAN0 Tx Event FIFO New Entry Interrupt \r\n");
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan0_instance);
  402eea:	4817      	ldr	r0, [pc, #92]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402eec:	4b1f      	ldr	r3, [pc, #124]	; (402f6c <MCAN0_INT1_Handler+0x138>)
  402eee:	4798      	blx	r3
  402ef0:	61b8      	str	r0, [r7, #24]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  402ef2:	69bb      	ldr	r3, [r7, #24]
  402ef4:	0a1b      	lsrs	r3, r3, #8
  402ef6:	f003 031f 	and.w	r3, r3, #31
  402efa:	617b      	str	r3, [r7, #20]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan0_instance, fifo_get_index);
  402efc:	6979      	ldr	r1, [r7, #20]
  402efe:	4812      	ldr	r0, [pc, #72]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402f00:	4b1b      	ldr	r3, [pc, #108]	; (402f70 <MCAN0_INT1_Handler+0x13c>)
  402f02:	4798      	blx	r3
	}

	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  402f04:	693b      	ldr	r3, [r7, #16]
  402f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402f0a:	2b00      	cmp	r3, #0
  402f0c:	d004      	beq.n	402f18 <MCAN0_INT1_Handler+0xe4>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  402f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402f12:	480d      	ldr	r0, [pc, #52]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402f14:	4b0e      	ldr	r3, [pc, #56]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402f16:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Watermark Reached Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_FULL)
  402f18:	693b      	ldr	r3, [r7, #16]
  402f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402f1e:	2b00      	cmp	r3, #0
  402f20:	d004      	beq.n	402f2c <MCAN0_INT1_Handler+0xf8>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_FULL);
  402f22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402f26:	4808      	ldr	r0, [pc, #32]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402f28:	4b09      	ldr	r3, [pc, #36]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402f2a:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Full Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  402f2c:	693b      	ldr	r3, [r7, #16]
  402f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402f32:	2b00      	cmp	r3, #0
  402f34:	d004      	beq.n	402f40 <MCAN0_INT1_Handler+0x10c>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  402f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  402f3a:	4803      	ldr	r0, [pc, #12]	; (402f48 <MCAN0_INT1_Handler+0x114>)
  402f3c:	4b04      	ldr	r3, [pc, #16]	; (402f50 <MCAN0_INT1_Handler+0x11c>)
  402f3e:	4798      	blx	r3

		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Element Lost Interrupt\r\n");
		#endif
	}
}
  402f40:	bf00      	nop
  402f42:	3720      	adds	r7, #32
  402f44:	46bd      	mov	sp, r7
  402f46:	bd80      	pop	{r7, pc}
  402f48:	2040114c 	.word	0x2040114c
  402f4c:	00402723 	.word	0x00402723
  402f50:	0040273d 	.word	0x0040273d
  402f54:	20401160 	.word	0x20401160
  402f58:	20401178 	.word	0x20401178
  402f5c:	004021e1 	.word	0x004021e1
  402f60:	00402311 	.word	0x00402311
  402f64:	00401291 	.word	0x00401291
  402f68:	0040263d 	.word	0x0040263d
  402f6c:	00402673 	.word	0x00402673
  402f70:	0040268f 	.word	0x0040268f

00402f74 <MCAN1_INT0_Handler>:

void MCAN1_INT0_Handler(void)
{
  402f74:	b590      	push	{r4, r7, lr}
  402f76:	b087      	sub	sp, #28
  402f78:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan1_instance);
  402f7a:	485e      	ldr	r0, [pc, #376]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  402f7c:	4b5e      	ldr	r3, [pc, #376]	; (4030f8 <MCAN1_INT0_Handler+0x184>)
  402f7e:	4798      	blx	r3
  402f80:	4603      	mov	r3, r0
  402f82:	60fb      	str	r3, [r7, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) 
  402f84:	68fb      	ldr	r3, [r7, #12]
  402f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402f8a:	2b00      	cmp	r3, #0
  402f8c:	d02e      	beq.n	402fec <MCAN1_INT0_Handler+0x78>
	{	
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  402f8e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402f92:	4858      	ldr	r0, [pc, #352]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  402f94:	4b59      	ldr	r3, [pc, #356]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  402f96:	4798      	blx	r3
		
		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Message stored to Dedicated Rx Buffer Interrupt\r\n");
		#endif

		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402f98:	2300      	movs	r3, #0
  402f9a:	60bb      	str	r3, [r7, #8]
  402f9c:	e023      	b.n	402fe6 <MCAN1_INT0_Handler+0x72>
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  402f9e:	68bb      	ldr	r3, [r7, #8]
  402fa0:	4619      	mov	r1, r3
  402fa2:	4857      	ldr	r0, [pc, #348]	; (403100 <MCAN1_INT0_Handler+0x18c>)
  402fa4:	4b57      	ldr	r3, [pc, #348]	; (403104 <MCAN1_INT0_Handler+0x190>)
  402fa6:	4798      	blx	r3
  402fa8:	4603      	mov	r3, r0
  402faa:	2b00      	cmp	r3, #0
  402fac:	d018      	beq.n	402fe0 <MCAN1_INT0_Handler+0x6c>
			{
				rx_buffer_index = i;
  402fae:	68bb      	ldr	r3, [r7, #8]
  402fb0:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan1_instance, i);
  402fb2:	68bb      	ldr	r3, [r7, #8]
  402fb4:	4619      	mov	r1, r3
  402fb6:	484f      	ldr	r0, [pc, #316]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  402fb8:	4b53      	ldr	r3, [pc, #332]	; (403108 <MCAN1_INT0_Handler+0x194>)
  402fba:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan1_instance, &mcan1_rx_element_buffer, rx_buffer_index);
  402fbc:	687b      	ldr	r3, [r7, #4]
  402fbe:	461a      	mov	r2, r3
  402fc0:	4952      	ldr	r1, [pc, #328]	; (40310c <MCAN1_INT0_Handler+0x198>)
  402fc2:	484c      	ldr	r0, [pc, #304]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  402fc4:	4b52      	ldr	r3, [pc, #328]	; (403110 <MCAN1_INT0_Handler+0x19c>)
  402fc6:	4798      	blx	r3
				
				_mcan1_push_message(mcan1_rx_element_buffer.R0, mcan1_rx_element_buffer.R1, mcan1_rx_element_buffer.data, unix_timestamp_ms);
  402fc8:	4b52      	ldr	r3, [pc, #328]	; (403114 <MCAN1_INT0_Handler+0x1a0>)
  402fca:	e9d3 3400 	ldrd	r3, r4, [r3]
  402fce:	494f      	ldr	r1, [pc, #316]	; (40310c <MCAN1_INT0_Handler+0x198>)
  402fd0:	484e      	ldr	r0, [pc, #312]	; (40310c <MCAN1_INT0_Handler+0x198>)
  402fd2:	e9cd 3400 	strd	r3, r4, [sp]
  402fd6:	4a50      	ldr	r2, [pc, #320]	; (403118 <MCAN1_INT0_Handler+0x1a4>)
  402fd8:	6849      	ldr	r1, [r1, #4]
  402fda:	6800      	ldr	r0, [r0, #0]
  402fdc:	4b4f      	ldr	r3, [pc, #316]	; (40311c <MCAN1_INT0_Handler+0x1a8>)
  402fde:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402fe0:	68bb      	ldr	r3, [r7, #8]
  402fe2:	3301      	adds	r3, #1
  402fe4:	60bb      	str	r3, [r7, #8]
  402fe6:	68bb      	ldr	r3, [r7, #8]
  402fe8:	2b00      	cmp	r3, #0
  402fea:	d0d8      	beq.n	402f9e <MCAN1_INT0_Handler+0x2a>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) 
  402fec:	68fb      	ldr	r3, [r7, #12]
  402fee:	f003 0301 	and.w	r3, r3, #1
  402ff2:	2b00      	cmp	r3, #0
  402ff4:	d029      	beq.n	40304a <MCAN1_INT0_Handler+0xd6>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402ff6:	2101      	movs	r1, #1
  402ff8:	483e      	ldr	r0, [pc, #248]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  402ffa:	4b40      	ldr	r3, [pc, #256]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  402ffc:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 0 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_0_element(&mcan1_instance, &mcan1_rx_element_fifo_0, mcan1_standard_receive_index);
  402ffe:	4b48      	ldr	r3, [pc, #288]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  403000:	681b      	ldr	r3, [r3, #0]
  403002:	461a      	mov	r2, r3
  403004:	4947      	ldr	r1, [pc, #284]	; (403124 <MCAN1_INT0_Handler+0x1b0>)
  403006:	483b      	ldr	r0, [pc, #236]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  403008:	4b47      	ldr	r3, [pc, #284]	; (403128 <MCAN1_INT0_Handler+0x1b4>)
  40300a:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 0, mcan1_standard_receive_index);
  40300c:	4b44      	ldr	r3, [pc, #272]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  40300e:	681b      	ldr	r3, [r3, #0]
  403010:	461a      	mov	r2, r3
  403012:	2100      	movs	r1, #0
  403014:	4837      	ldr	r0, [pc, #220]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  403016:	4b45      	ldr	r3, [pc, #276]	; (40312c <MCAN1_INT0_Handler+0x1b8>)
  403018:	4798      	blx	r3
		
		mcan1_standard_receive_index++;
  40301a:	4b41      	ldr	r3, [pc, #260]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	3301      	adds	r3, #1
  403020:	4a3f      	ldr	r2, [pc, #252]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  403022:	6013      	str	r3, [r2, #0]
		
		if (mcan1_standard_receive_index == CONF_MCAN1_RX_FIFO_0_NUM)
  403024:	4b3e      	ldr	r3, [pc, #248]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  403026:	681b      	ldr	r3, [r3, #0]
  403028:	2b10      	cmp	r3, #16
  40302a:	d102      	bne.n	403032 <MCAN1_INT0_Handler+0xbe>
		{
			mcan1_standard_receive_index = 0;
  40302c:	4b3c      	ldr	r3, [pc, #240]	; (403120 <MCAN1_INT0_Handler+0x1ac>)
  40302e:	2200      	movs	r2, #0
  403030:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_0.R0, mcan1_rx_element_fifo_0.R1, mcan1_rx_element_fifo_0.data, unix_timestamp_ms);
  403032:	4b38      	ldr	r3, [pc, #224]	; (403114 <MCAN1_INT0_Handler+0x1a0>)
  403034:	e9d3 3400 	ldrd	r3, r4, [r3]
  403038:	493a      	ldr	r1, [pc, #232]	; (403124 <MCAN1_INT0_Handler+0x1b0>)
  40303a:	483a      	ldr	r0, [pc, #232]	; (403124 <MCAN1_INT0_Handler+0x1b0>)
  40303c:	e9cd 3400 	strd	r3, r4, [sp]
  403040:	4a3b      	ldr	r2, [pc, #236]	; (403130 <MCAN1_INT0_Handler+0x1bc>)
  403042:	6849      	ldr	r1, [r1, #4]
  403044:	6800      	ldr	r0, [r0, #0]
  403046:	4b35      	ldr	r3, [pc, #212]	; (40311c <MCAN1_INT0_Handler+0x1a8>)
  403048:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  40304a:	68fb      	ldr	r3, [r7, #12]
  40304c:	f003 0310 	and.w	r3, r3, #16
  403050:	2b00      	cmp	r3, #0
  403052:	d029      	beq.n	4030a8 <MCAN1_INT0_Handler+0x134>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  403054:	2110      	movs	r1, #16
  403056:	4827      	ldr	r0, [pc, #156]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  403058:	4b28      	ldr	r3, [pc, #160]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  40305a:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 1 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_1_element(&mcan1_instance, &mcan1_rx_element_fifo_1, mcan1_extended_receive_index);
  40305c:	4b35      	ldr	r3, [pc, #212]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  40305e:	681b      	ldr	r3, [r3, #0]
  403060:	461a      	mov	r2, r3
  403062:	4935      	ldr	r1, [pc, #212]	; (403138 <MCAN1_INT0_Handler+0x1c4>)
  403064:	4823      	ldr	r0, [pc, #140]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  403066:	4b35      	ldr	r3, [pc, #212]	; (40313c <MCAN1_INT0_Handler+0x1c8>)
  403068:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 1, mcan1_extended_receive_index);
  40306a:	4b32      	ldr	r3, [pc, #200]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  40306c:	681b      	ldr	r3, [r3, #0]
  40306e:	461a      	mov	r2, r3
  403070:	2101      	movs	r1, #1
  403072:	4820      	ldr	r0, [pc, #128]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  403074:	4b2d      	ldr	r3, [pc, #180]	; (40312c <MCAN1_INT0_Handler+0x1b8>)
  403076:	4798      	blx	r3
		
		mcan1_extended_receive_index++;
  403078:	4b2e      	ldr	r3, [pc, #184]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  40307a:	681b      	ldr	r3, [r3, #0]
  40307c:	3301      	adds	r3, #1
  40307e:	4a2d      	ldr	r2, [pc, #180]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  403080:	6013      	str	r3, [r2, #0]

		if (mcan1_extended_receive_index == CONF_MCAN1_RX_FIFO_1_NUM) 
  403082:	4b2c      	ldr	r3, [pc, #176]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  403084:	681b      	ldr	r3, [r3, #0]
  403086:	2b10      	cmp	r3, #16
  403088:	d102      	bne.n	403090 <MCAN1_INT0_Handler+0x11c>
		{
			mcan1_extended_receive_index = 0;
  40308a:	4b2a      	ldr	r3, [pc, #168]	; (403134 <MCAN1_INT0_Handler+0x1c0>)
  40308c:	2200      	movs	r2, #0
  40308e:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_1.R0, mcan1_rx_element_fifo_1.R1, mcan1_rx_element_fifo_1.data, unix_timestamp_ms);
  403090:	4b20      	ldr	r3, [pc, #128]	; (403114 <MCAN1_INT0_Handler+0x1a0>)
  403092:	e9d3 3400 	ldrd	r3, r4, [r3]
  403096:	4928      	ldr	r1, [pc, #160]	; (403138 <MCAN1_INT0_Handler+0x1c4>)
  403098:	4827      	ldr	r0, [pc, #156]	; (403138 <MCAN1_INT0_Handler+0x1c4>)
  40309a:	e9cd 3400 	strd	r3, r4, [sp]
  40309e:	4a28      	ldr	r2, [pc, #160]	; (403140 <MCAN1_INT0_Handler+0x1cc>)
  4030a0:	6849      	ldr	r1, [r1, #4]
  4030a2:	6800      	ldr	r0, [r0, #0]
  4030a4:	4b1d      	ldr	r3, [pc, #116]	; (40311c <MCAN1_INT0_Handler+0x1a8>)
  4030a6:	4798      	blx	r3
	}
	
	//Usually occurs if can tx pin is not connected to transceiver or to a transceiver not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  4030a8:	68fb      	ldr	r3, [r7, #12]
  4030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  4030ae:	2b00      	cmp	r3, #0
  4030b0:	d007      	beq.n	4030c2 <MCAN1_INT0_Handler+0x14e>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_BUS_OFF);
  4030b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4030b6:	480f      	ldr	r0, [pc, #60]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  4030b8:	4b10      	ldr	r3, [pc, #64]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  4030ba:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Bus Off Status \r\n");
		#endif
		
		mcan_stop(&mcan1_instance);
  4030bc:	480d      	ldr	r0, [pc, #52]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  4030be:	4b21      	ldr	r3, [pc, #132]	; (403144 <MCAN1_INT0_Handler+0x1d0>)
  4030c0:	4798      	blx	r3
		
	}

	//Usually occurs when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  4030c2:	68fb      	ldr	r3, [r7, #12]
  4030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	d004      	beq.n	4030d6 <MCAN1_INT0_Handler+0x162>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_ACKNOWLEDGE_ERROR);
  4030cc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4030d0:	4808      	ldr	r0, [pc, #32]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  4030d2:	4b0a      	ldr	r3, [pc, #40]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  4030d4:	4798      	blx	r3
		printf("\n\rCAN1 Acknowledge Error \r\n");
		#endif
	}
	
	//Usually occurs if can rx pin is not connected to transceiver or receiving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  4030d6:	68fb      	ldr	r3, [r7, #12]
  4030d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  4030dc:	2b00      	cmp	r3, #0
  4030de:	d004      	beq.n	4030ea <MCAN1_INT0_Handler+0x176>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_FORMAT_ERROR);
  4030e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4030e4:	4803      	ldr	r0, [pc, #12]	; (4030f4 <MCAN1_INT0_Handler+0x180>)
  4030e6:	4b05      	ldr	r3, [pc, #20]	; (4030fc <MCAN1_INT0_Handler+0x188>)
  4030e8:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Format Error \r\n");
		#endif	
	}
}
  4030ea:	bf00      	nop
  4030ec:	3714      	adds	r7, #20
  4030ee:	46bd      	mov	sp, r7
  4030f0:	bd90      	pop	{r4, r7, pc}
  4030f2:	bf00      	nop
  4030f4:	204011c0 	.word	0x204011c0
  4030f8:	00402723 	.word	0x00402723
  4030fc:	0040273d 	.word	0x0040273d
  403100:	2040114c 	.word	0x2040114c
  403104:	00402513 	.word	0x00402513
  403108:	0040256f 	.word	0x0040256f
  40310c:	2040113c 	.word	0x2040113c
  403110:	0040114d 	.word	0x0040114d
  403114:	204010d8 	.word	0x204010d8
  403118:	20401144 	.word	0x20401144
  40311c:	00402b6d 	.word	0x00402b6d
  403120:	204011a8 	.word	0x204011a8
  403124:	204011c4 	.word	0x204011c4
  403128:	004011b9 	.word	0x004011b9
  40312c:	004025b3 	.word	0x004025b3
  403130:	204011cc 	.word	0x204011cc
  403134:	20401128 	.word	0x20401128
  403138:	2040112c 	.word	0x2040112c
  40313c:	00401225 	.word	0x00401225
  403140:	20401134 	.word	0x20401134
  403144:	0040103d 	.word	0x0040103d

00403148 <MCAN1_INT1_Handler>:

void MCAN1_INT1_Handler(void)
{
  403148:	b580      	push	{r7, lr}
  40314a:	b088      	sub	sp, #32
  40314c:	af00      	add	r7, sp, #0
	volatile uint32_t status;
	status = mcan_read_interrupt_status(&mcan1_instance);
  40314e:	4842      	ldr	r0, [pc, #264]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403150:	4b42      	ldr	r3, [pc, #264]	; (40325c <MCAN1_INT1_Handler+0x114>)
  403152:	4798      	blx	r3
  403154:	4603      	mov	r3, r0
  403156:	617b      	str	r3, [r7, #20]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  403158:	697b      	ldr	r3, [r7, #20]
  40315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40315e:	2b00      	cmp	r3, #0
  403160:	d02d      	beq.n	4031be <MCAN1_INT1_Handler+0x76>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TIMESTAMP_COMPLETE);
  403162:	f44f 7100 	mov.w	r1, #512	; 0x200
  403166:	483c      	ldr	r0, [pc, #240]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403168:	4b3d      	ldr	r3, [pc, #244]	; (403260 <MCAN1_INT1_Handler+0x118>)
  40316a:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Completed Interrupt\r\n");
		#endif

		if(!mcan1_buffer.adding_in_tx_buffer)
  40316c:	4b3d      	ldr	r3, [pc, #244]	; (403264 <MCAN1_INT1_Handler+0x11c>)
  40316e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  403172:	b2db      	uxtb	r3, r3
  403174:	2b00      	cmp	r3, #0
  403176:	d11e      	bne.n	4031b6 <MCAN1_INT1_Handler+0x6e>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_tx)>0)
  403178:	483b      	ldr	r0, [pc, #236]	; (403268 <MCAN1_INT1_Handler+0x120>)
  40317a:	4b3c      	ldr	r3, [pc, #240]	; (40326c <MCAN1_INT1_Handler+0x124>)
  40317c:	4798      	blx	r3
  40317e:	4603      	mov	r3, r0
  403180:	2b00      	cmp	r3, #0
  403182:	d013      	beq.n	4031ac <MCAN1_INT1_Handler+0x64>
			{
				struct mcan_tx_element tx_elem;
				circ_buf_flex_pop(&mcan1_buffer.buffer_tx, &tx_elem);
  403184:	1d3b      	adds	r3, r7, #4
  403186:	4619      	mov	r1, r3
  403188:	4837      	ldr	r0, [pc, #220]	; (403268 <MCAN1_INT1_Handler+0x120>)
  40318a:	4b39      	ldr	r3, [pc, #228]	; (403270 <MCAN1_INT1_Handler+0x128>)
  40318c:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan1_instance, &tx_elem, CONF_MCAN1_TX_BUFFER_NUM);
  40318e:	1d3b      	adds	r3, r7, #4
  403190:	2201      	movs	r2, #1
  403192:	4619      	mov	r1, r3
  403194:	4830      	ldr	r0, [pc, #192]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403196:	4b37      	ldr	r3, [pc, #220]	; (403274 <MCAN1_INT1_Handler+0x12c>)
  403198:	4798      	blx	r3
				mcan_tx_transfer_request(&mcan1_instance, 1 << CONF_MCAN1_TX_BUFFER_NUM);
  40319a:	2102      	movs	r1, #2
  40319c:	482e      	ldr	r0, [pc, #184]	; (403258 <MCAN1_INT1_Handler+0x110>)
  40319e:	4b36      	ldr	r3, [pc, #216]	; (403278 <MCAN1_INT1_Handler+0x130>)
  4031a0:	4798      	blx	r3
				mcan1_buffer.buffer_being_emptied_by_interruption = true;
  4031a2:	4b30      	ldr	r3, [pc, #192]	; (403264 <MCAN1_INT1_Handler+0x11c>)
  4031a4:	2201      	movs	r2, #1
  4031a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  4031aa:	e008      	b.n	4031be <MCAN1_INT1_Handler+0x76>
			}
			else
			{
				mcan1_buffer.buffer_being_emptied_by_interruption = false;
  4031ac:	4b2d      	ldr	r3, [pc, #180]	; (403264 <MCAN1_INT1_Handler+0x11c>)
  4031ae:	2200      	movs	r2, #0
  4031b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  4031b4:	e003      	b.n	4031be <MCAN1_INT1_Handler+0x76>
			}
		}
		else mcan1_buffer.interruption_occurred_while_adding_in_tx_buffer = true;
  4031b6:	4b2b      	ldr	r3, [pc, #172]	; (403264 <MCAN1_INT1_Handler+0x11c>)
  4031b8:	2201      	movs	r2, #1
  4031ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  4031be:	697b      	ldr	r3, [r7, #20]
  4031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4031c4:	2b00      	cmp	r3, #0
  4031c6:	d004      	beq.n	4031d2 <MCAN1_INT1_Handler+0x8a>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_CANCELLATION_FINISH);
  4031c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4031cc:	4822      	ldr	r0, [pc, #136]	; (403258 <MCAN1_INT1_Handler+0x110>)
  4031ce:	4b24      	ldr	r3, [pc, #144]	; (403260 <MCAN1_INT1_Handler+0x118>)
  4031d0:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Cancellation Finished Interrupt \r\n");
		#endif
	}
	if (status & MCAN_TX_FIFO_EMPTY)
  4031d2:	697b      	ldr	r3, [r7, #20]
  4031d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d004      	beq.n	4031e6 <MCAN1_INT1_Handler+0x9e>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_FIFO_EMPTY);
  4031dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4031e0:	481d      	ldr	r0, [pc, #116]	; (403258 <MCAN1_INT1_Handler+0x110>)
  4031e2:	4b1f      	ldr	r3, [pc, #124]	; (403260 <MCAN1_INT1_Handler+0x118>)
  4031e4:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx FIFO Empty Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  4031e6:	697b      	ldr	r3, [r7, #20]
  4031e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4031ec:	2b00      	cmp	r3, #0
  4031ee:	d011      	beq.n	403214 <MCAN1_INT1_Handler+0xcc>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  4031f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4031f4:	4818      	ldr	r0, [pc, #96]	; (403258 <MCAN1_INT1_Handler+0x110>)
  4031f6:	4b1a      	ldr	r3, [pc, #104]	; (403260 <MCAN1_INT1_Handler+0x118>)
  4031f8:	4798      	blx	r3
		printf("CAN1 Tx Event FIFO New Entry Interrupt \r\n");
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan1_instance);
  4031fa:	4817      	ldr	r0, [pc, #92]	; (403258 <MCAN1_INT1_Handler+0x110>)
  4031fc:	4b1f      	ldr	r3, [pc, #124]	; (40327c <MCAN1_INT1_Handler+0x134>)
  4031fe:	4798      	blx	r3
  403200:	61f8      	str	r0, [r7, #28]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  403202:	69fb      	ldr	r3, [r7, #28]
  403204:	0a1b      	lsrs	r3, r3, #8
  403206:	f003 031f 	and.w	r3, r3, #31
  40320a:	61bb      	str	r3, [r7, #24]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan1_instance, fifo_get_index);
  40320c:	69b9      	ldr	r1, [r7, #24]
  40320e:	4812      	ldr	r0, [pc, #72]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403210:	4b1b      	ldr	r3, [pc, #108]	; (403280 <MCAN1_INT1_Handler+0x138>)
  403212:	4798      	blx	r3
	}
	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  403214:	697b      	ldr	r3, [r7, #20]
  403216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40321a:	2b00      	cmp	r3, #0
  40321c:	d004      	beq.n	403228 <MCAN1_INT1_Handler+0xe0>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  40321e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403222:	480d      	ldr	r0, [pc, #52]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403224:	4b0e      	ldr	r3, [pc, #56]	; (403260 <MCAN1_INT1_Handler+0x118>)
  403226:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Watermark Reached Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_FULL)
  403228:	697b      	ldr	r3, [r7, #20]
  40322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  40322e:	2b00      	cmp	r3, #0
  403230:	d004      	beq.n	40323c <MCAN1_INT1_Handler+0xf4>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_FULL);
  403232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  403236:	4808      	ldr	r0, [pc, #32]	; (403258 <MCAN1_INT1_Handler+0x110>)
  403238:	4b09      	ldr	r3, [pc, #36]	; (403260 <MCAN1_INT1_Handler+0x118>)
  40323a:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Full Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  40323c:	697b      	ldr	r3, [r7, #20]
  40323e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403242:	2b00      	cmp	r3, #0
  403244:	d004      	beq.n	403250 <MCAN1_INT1_Handler+0x108>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  403246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40324a:	4803      	ldr	r0, [pc, #12]	; (403258 <MCAN1_INT1_Handler+0x110>)
  40324c:	4b04      	ldr	r3, [pc, #16]	; (403260 <MCAN1_INT1_Handler+0x118>)
  40324e:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Element Lost Interrupt\r\n");
		#endif
	}
}
  403250:	bf00      	nop
  403252:	3720      	adds	r7, #32
  403254:	46bd      	mov	sp, r7
  403256:	bd80      	pop	{r7, pc}
  403258:	204011c0 	.word	0x204011c0
  40325c:	00402723 	.word	0x00402723
  403260:	0040273d 	.word	0x0040273d
  403264:	204011d4 	.word	0x204011d4
  403268:	204011ec 	.word	0x204011ec
  40326c:	004021e1 	.word	0x004021e1
  403270:	00402311 	.word	0x00402311
  403274:	00401291 	.word	0x00401291
  403278:	0040263d 	.word	0x0040263d
  40327c:	00402673 	.word	0x00402673
  403280:	0040268f 	.word	0x0040268f

00403284 <mcan0_send_message>:
	mcan_set_tx_buffer_element(module_inst, &tx_element, offsetTX);
	mcan_tx_transfer_request(module_inst, 1 << offsetTX);
}

uint8_t mcan0_send_message(uint32_t id_value, uint8_t *data, uint32_t data_length, bool is_extended, bool is_remote_transmission)
{
  403284:	b580      	push	{r7, lr}
  403286:	b08e      	sub	sp, #56	; 0x38
  403288:	af00      	add	r7, sp, #0
  40328a:	60f8      	str	r0, [r7, #12]
  40328c:	60b9      	str	r1, [r7, #8]
  40328e:	607a      	str	r2, [r7, #4]
  403290:	70fb      	strb	r3, [r7, #3]
	uint8_t result;

	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
  403292:	f107 0320 	add.w	r3, r7, #32
  403296:	4618      	mov	r0, r3
  403298:	4b41      	ldr	r3, [pc, #260]	; (4033a0 <mcan0_send_message+0x11c>)
  40329a:	4798      	blx	r3
	if (is_extended)
  40329c:	78fb      	ldrb	r3, [r7, #3]
  40329e:	2b00      	cmp	r3, #0
  4032a0:	d008      	beq.n	4032b4 <mcan0_send_message+0x30>
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
  4032a2:	6a3a      	ldr	r2, [r7, #32]
  4032a4:	68fb      	ldr	r3, [r7, #12]
  4032a6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  4032aa:	4313      	orrs	r3, r2
  4032ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4032b0:	623b      	str	r3, [r7, #32]
  4032b2:	e006      	b.n	4032c2 <mcan0_send_message+0x3e>
			MCAN_TX_ELEMENT_T0_XTD;
	}
	else
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  4032b4:	6a3a      	ldr	r2, [r7, #32]
  4032b6:	68fb      	ldr	r3, [r7, #12]
  4032b8:	0499      	lsls	r1, r3, #18
  4032ba:	4b3a      	ldr	r3, [pc, #232]	; (4033a4 <mcan0_send_message+0x120>)
  4032bc:	400b      	ands	r3, r1
  4032be:	4313      	orrs	r3, r2
  4032c0:	623b      	str	r3, [r7, #32]
	}

	if(is_remote_transmission)
  4032c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  4032c6:	2b00      	cmp	r3, #0
  4032c8:	d003      	beq.n	4032d2 <mcan0_send_message+0x4e>
	{
		tx_element.T0.bit.RTR = 1;
  4032ca:	6a3b      	ldr	r3, [r7, #32]
  4032cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4032d0:	623b      	str	r3, [r7, #32]
	}

	tx_element.T1.bit.DLC = data_length;
  4032d2:	687b      	ldr	r3, [r7, #4]
  4032d4:	b2db      	uxtb	r3, r3
  4032d6:	f003 030f 	and.w	r3, r3, #15
  4032da:	b2da      	uxtb	r2, r3
  4032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4032de:	f362 4313 	bfi	r3, r2, #16, #4
  4032e2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < data_length; i++) {
  4032e4:	2300      	movs	r3, #0
  4032e6:	637b      	str	r3, [r7, #52]	; 0x34
  4032e8:	e00d      	b.n	403306 <mcan0_send_message+0x82>
		tx_element.data[i] = *data; 
  4032ea:	68bb      	ldr	r3, [r7, #8]
  4032ec:	7819      	ldrb	r1, [r3, #0]
  4032ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
  4032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4032f4:	4413      	add	r3, r2
  4032f6:	460a      	mov	r2, r1
  4032f8:	701a      	strb	r2, [r3, #0]
		data++;
  4032fa:	68bb      	ldr	r3, [r7, #8]
  4032fc:	3301      	adds	r3, #1
  4032fe:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < data_length; i++) {
  403300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403302:	3301      	adds	r3, #1
  403304:	637b      	str	r3, [r7, #52]	; 0x34
  403306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  403308:	687b      	ldr	r3, [r7, #4]
  40330a:	429a      	cmp	r2, r3
  40330c:	d3ed      	bcc.n	4032ea <mcan0_send_message+0x66>
	}

	//Set flag to prevent problem with interruption
	mcan0_buffer.adding_in_tx_buffer = true;
  40330e:	4b26      	ldr	r3, [pc, #152]	; (4033a8 <mcan0_send_message+0x124>)
  403310:	2201      	movs	r2, #1
  403312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	result = circ_buf_flex_push(&mcan0_buffer.buffer_tx, &tx_element);
  403316:	f107 0320 	add.w	r3, r7, #32
  40331a:	4619      	mov	r1, r3
  40331c:	4823      	ldr	r0, [pc, #140]	; (4033ac <mcan0_send_message+0x128>)
  40331e:	4b24      	ldr	r3, [pc, #144]	; (4033b0 <mcan0_send_message+0x12c>)
  403320:	4798      	blx	r3
  403322:	4603      	mov	r3, r0
  403324:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	mcan0_buffer.adding_in_tx_buffer = false;
  403328:	4b1f      	ldr	r3, [pc, #124]	; (4033a8 <mcan0_send_message+0x124>)
  40332a:	2200      	movs	r2, #0
  40332c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if(mcan0_buffer.interruption_occurred_while_adding_in_tx_buffer | !mcan0_buffer.buffer_being_emptied_by_interruption)
  403330:	4b1d      	ldr	r3, [pc, #116]	; (4033a8 <mcan0_send_message+0x124>)
  403332:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  403336:	b2db      	uxtb	r3, r3
  403338:	461a      	mov	r2, r3
  40333a:	4b1b      	ldr	r3, [pc, #108]	; (4033a8 <mcan0_send_message+0x124>)
  40333c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  403340:	b2db      	uxtb	r3, r3
  403342:	2b00      	cmp	r3, #0
  403344:	bf0c      	ite	eq
  403346:	2301      	moveq	r3, #1
  403348:	2300      	movne	r3, #0
  40334a:	b2db      	uxtb	r3, r3
  40334c:	4313      	orrs	r3, r2
  40334e:	2b00      	cmp	r3, #0
  403350:	d020      	beq.n	403394 <mcan0_send_message+0x110>
	{
		//No need of this if we've just added a message to the buffer and prevent interruption to deal with messages !
		//We know for sure that there is at least the message in our buffer.
		if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx) > 0)
  403352:	4816      	ldr	r0, [pc, #88]	; (4033ac <mcan0_send_message+0x128>)
  403354:	4b17      	ldr	r3, [pc, #92]	; (4033b4 <mcan0_send_message+0x130>)
  403356:	4798      	blx	r3
  403358:	4603      	mov	r3, r0
  40335a:	2b00      	cmp	r3, #0
  40335c:	d01a      	beq.n	403394 <mcan0_send_message+0x110>
		{
			struct mcan_tx_element tx_elem;
			circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  40335e:	f107 0310 	add.w	r3, r7, #16
  403362:	4619      	mov	r1, r3
  403364:	4811      	ldr	r0, [pc, #68]	; (4033ac <mcan0_send_message+0x128>)
  403366:	4b14      	ldr	r3, [pc, #80]	; (4033b8 <mcan0_send_message+0x134>)
  403368:	4798      	blx	r3
			//we have to offset the buffer number in order to write in the fifo memory.
			mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN0_TX_BUFFER_NUM);
  40336a:	f107 0310 	add.w	r3, r7, #16
  40336e:	2201      	movs	r2, #1
  403370:	4619      	mov	r1, r3
  403372:	4812      	ldr	r0, [pc, #72]	; (4033bc <mcan0_send_message+0x138>)
  403374:	4b12      	ldr	r3, [pc, #72]	; (4033c0 <mcan0_send_message+0x13c>)
  403376:	4798      	blx	r3
			int16_t stat = mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN0_TX_BUFFER_NUM);
  403378:	2102      	movs	r1, #2
  40337a:	4810      	ldr	r0, [pc, #64]	; (4033bc <mcan0_send_message+0x138>)
  40337c:	4b11      	ldr	r3, [pc, #68]	; (4033c4 <mcan0_send_message+0x140>)
  40337e:	4798      	blx	r3
  403380:	4603      	mov	r3, r0
  403382:	863b      	strh	r3, [r7, #48]	; 0x30
			
			//reset flags
			mcan0_buffer.interruption_occurred_while_adding_in_tx_buffer = false;
  403384:	4b08      	ldr	r3, [pc, #32]	; (4033a8 <mcan0_send_message+0x124>)
  403386:	2200      	movs	r2, #0
  403388:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			mcan0_buffer.buffer_being_emptied_by_interruption = true;
  40338c:	4b06      	ldr	r3, [pc, #24]	; (4033a8 <mcan0_send_message+0x124>)
  40338e:	2201      	movs	r2, #1
  403390:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		}
	}

	return result;
  403394:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
	
}
  403398:	4618      	mov	r0, r3
  40339a:	3738      	adds	r7, #56	; 0x38
  40339c:	46bd      	mov	sp, r7
  40339e:	bd80      	pop	{r7, pc}
  4033a0:	004026b3 	.word	0x004026b3
  4033a4:	1ffc0000 	.word	0x1ffc0000
  4033a8:	20401160 	.word	0x20401160
  4033ac:	20401178 	.word	0x20401178
  4033b0:	00402289 	.word	0x00402289
  4033b4:	004021e1 	.word	0x004021e1
  4033b8:	00402311 	.word	0x00402311
  4033bc:	2040114c 	.word	0x2040114c
  4033c0:	00401291 	.word	0x00401291
  4033c4:	0040263d 	.word	0x0040263d

004033c8 <mcan1_available_message>:
uint32_t mcan0_available_message(void)
{
	return circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_rx);
}
uint32_t mcan1_available_message(void)
{
  4033c8:	b580      	push	{r7, lr}
  4033ca:	af00      	add	r7, sp, #0
	return circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_rx);
  4033cc:	4802      	ldr	r0, [pc, #8]	; (4033d8 <mcan1_available_message+0x10>)
  4033ce:	4b03      	ldr	r3, [pc, #12]	; (4033dc <mcan1_available_message+0x14>)
  4033d0:	4798      	blx	r3
  4033d2:	4603      	mov	r3, r0
}
  4033d4:	4618      	mov	r0, r3
  4033d6:	bd80      	pop	{r7, pc}
  4033d8:	204011d4 	.word	0x204011d4
  4033dc:	004021e1 	.word	0x004021e1

004033e0 <mcan1_get_message>:
uint8_t mcan0_get_message(mcan_timestamped_rx_message_t* ts_rx_message)
{
	return circ_buf_flex_pop(&mcan0_buffer.buffer_rx, ts_rx_message);
}
uint8_t mcan1_get_message(mcan_timestamped_rx_message_t* ts_rx_message)
{
  4033e0:	b580      	push	{r7, lr}
  4033e2:	b082      	sub	sp, #8
  4033e4:	af00      	add	r7, sp, #0
  4033e6:	6078      	str	r0, [r7, #4]
	return circ_buf_flex_pop(&mcan1_buffer.buffer_rx, ts_rx_message);
  4033e8:	6879      	ldr	r1, [r7, #4]
  4033ea:	4804      	ldr	r0, [pc, #16]	; (4033fc <mcan1_get_message+0x1c>)
  4033ec:	4b04      	ldr	r3, [pc, #16]	; (403400 <mcan1_get_message+0x20>)
  4033ee:	4798      	blx	r3
  4033f0:	4603      	mov	r3, r0
}
  4033f2:	4618      	mov	r0, r3
  4033f4:	3708      	adds	r7, #8
  4033f6:	46bd      	mov	sp, r7
  4033f8:	bd80      	pop	{r7, pc}
  4033fa:	bf00      	nop
  4033fc:	204011d4 	.word	0x204011d4
  403400:	00402311 	.word	0x00402311

00403404 <__NVIC_SetPriority>:
{
  403404:	b480      	push	{r7}
  403406:	b083      	sub	sp, #12
  403408:	af00      	add	r7, sp, #0
  40340a:	4603      	mov	r3, r0
  40340c:	6039      	str	r1, [r7, #0]
  40340e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403410:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403414:	2b00      	cmp	r3, #0
  403416:	db0a      	blt.n	40342e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403418:	490d      	ldr	r1, [pc, #52]	; (403450 <__NVIC_SetPriority+0x4c>)
  40341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40341e:	683a      	ldr	r2, [r7, #0]
  403420:	b2d2      	uxtb	r2, r2
  403422:	0152      	lsls	r2, r2, #5
  403424:	b2d2      	uxtb	r2, r2
  403426:	440b      	add	r3, r1
  403428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40342c:	e00a      	b.n	403444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40342e:	4909      	ldr	r1, [pc, #36]	; (403454 <__NVIC_SetPriority+0x50>)
  403430:	79fb      	ldrb	r3, [r7, #7]
  403432:	f003 030f 	and.w	r3, r3, #15
  403436:	3b04      	subs	r3, #4
  403438:	683a      	ldr	r2, [r7, #0]
  40343a:	b2d2      	uxtb	r2, r2
  40343c:	0152      	lsls	r2, r2, #5
  40343e:	b2d2      	uxtb	r2, r2
  403440:	440b      	add	r3, r1
  403442:	761a      	strb	r2, [r3, #24]
}
  403444:	bf00      	nop
  403446:	370c      	adds	r7, #12
  403448:	46bd      	mov	sp, r7
  40344a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40344e:	4770      	bx	lr
  403450:	e000e100 	.word	0xe000e100
  403454:	e000ed00 	.word	0xe000ed00

00403458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403458:	b580      	push	{r7, lr}
  40345a:	b082      	sub	sp, #8
  40345c:	af00      	add	r7, sp, #0
  40345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  403460:	687b      	ldr	r3, [r7, #4]
  403462:	3b01      	subs	r3, #1
  403464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403468:	d301      	bcc.n	40346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
  40346a:	2301      	movs	r3, #1
  40346c:	e00f      	b.n	40348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  40346e:	4a0a      	ldr	r2, [pc, #40]	; (403498 <SysTick_Config+0x40>)
  403470:	687b      	ldr	r3, [r7, #4]
  403472:	3b01      	subs	r3, #1
  403474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  403476:	2107      	movs	r1, #7
  403478:	f04f 30ff 	mov.w	r0, #4294967295
  40347c:	4b07      	ldr	r3, [pc, #28]	; (40349c <SysTick_Config+0x44>)
  40347e:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  403480:	4b05      	ldr	r3, [pc, #20]	; (403498 <SysTick_Config+0x40>)
  403482:	2200      	movs	r2, #0
  403484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  403486:	4b04      	ldr	r3, [pc, #16]	; (403498 <SysTick_Config+0x40>)
  403488:	2207      	movs	r2, #7
  40348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
  40348c:	2300      	movs	r3, #0
}
  40348e:	4618      	mov	r0, r3
  403490:	3708      	adds	r7, #8
  403492:	46bd      	mov	sp, r7
  403494:	bd80      	pop	{r7, pc}
  403496:	bf00      	nop
  403498:	e000e010 	.word	0xe000e010
  40349c:	00403405 	.word	0x00403405

004034a0 <osc_get_rate>:
{
  4034a0:	b480      	push	{r7}
  4034a2:	b083      	sub	sp, #12
  4034a4:	af00      	add	r7, sp, #0
  4034a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4034a8:	687b      	ldr	r3, [r7, #4]
  4034aa:	2b07      	cmp	r3, #7
  4034ac:	d825      	bhi.n	4034fa <osc_get_rate+0x5a>
  4034ae:	a201      	add	r2, pc, #4	; (adr r2, 4034b4 <osc_get_rate+0x14>)
  4034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4034b4:	004034d5 	.word	0x004034d5
  4034b8:	004034db 	.word	0x004034db
  4034bc:	004034e1 	.word	0x004034e1
  4034c0:	004034e7 	.word	0x004034e7
  4034c4:	004034eb 	.word	0x004034eb
  4034c8:	004034ef 	.word	0x004034ef
  4034cc:	004034f3 	.word	0x004034f3
  4034d0:	004034f7 	.word	0x004034f7
		return OSC_SLCK_32K_RC_HZ;
  4034d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4034d8:	e010      	b.n	4034fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034de:	e00d      	b.n	4034fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4034e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4034e4:	e00a      	b.n	4034fc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4034e6:	4b08      	ldr	r3, [pc, #32]	; (403508 <osc_get_rate+0x68>)
  4034e8:	e008      	b.n	4034fc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4034ea:	4b08      	ldr	r3, [pc, #32]	; (40350c <osc_get_rate+0x6c>)
  4034ec:	e006      	b.n	4034fc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4034ee:	4b08      	ldr	r3, [pc, #32]	; (403510 <osc_get_rate+0x70>)
  4034f0:	e004      	b.n	4034fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4034f2:	4b07      	ldr	r3, [pc, #28]	; (403510 <osc_get_rate+0x70>)
  4034f4:	e002      	b.n	4034fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4034f6:	4b06      	ldr	r3, [pc, #24]	; (403510 <osc_get_rate+0x70>)
  4034f8:	e000      	b.n	4034fc <osc_get_rate+0x5c>
	return 0;
  4034fa:	2300      	movs	r3, #0
}
  4034fc:	4618      	mov	r0, r3
  4034fe:	370c      	adds	r7, #12
  403500:	46bd      	mov	sp, r7
  403502:	f85d 7b04 	ldr.w	r7, [sp], #4
  403506:	4770      	bx	lr
  403508:	003d0900 	.word	0x003d0900
  40350c:	007a1200 	.word	0x007a1200
  403510:	00b71b00 	.word	0x00b71b00

00403514 <sysclk_get_main_hz>:
{
  403514:	b580      	push	{r7, lr}
  403516:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403518:	2006      	movs	r0, #6
  40351a:	4b05      	ldr	r3, [pc, #20]	; (403530 <sysclk_get_main_hz+0x1c>)
  40351c:	4798      	blx	r3
  40351e:	4602      	mov	r2, r0
  403520:	4613      	mov	r3, r2
  403522:	009b      	lsls	r3, r3, #2
  403524:	4413      	add	r3, r2
  403526:	009a      	lsls	r2, r3, #2
  403528:	4413      	add	r3, r2
}
  40352a:	4618      	mov	r0, r3
  40352c:	bd80      	pop	{r7, pc}
  40352e:	bf00      	nop
  403530:	004034a1 	.word	0x004034a1

00403534 <sysclk_get_cpu_hz>:
{
  403534:	b580      	push	{r7, lr}
  403536:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403538:	4b02      	ldr	r3, [pc, #8]	; (403544 <sysclk_get_cpu_hz+0x10>)
  40353a:	4798      	blx	r3
  40353c:	4603      	mov	r3, r0
}
  40353e:	4618      	mov	r0, r3
  403540:	bd80      	pop	{r7, pc}
  403542:	bf00      	nop
  403544:	00403515 	.word	0x00403515

00403548 <sysclk_get_peripheral_hz>:
{
  403548:	b580      	push	{r7, lr}
  40354a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40354c:	4b02      	ldr	r3, [pc, #8]	; (403558 <sysclk_get_peripheral_hz+0x10>)
  40354e:	4798      	blx	r3
  403550:	4603      	mov	r3, r0
  403552:	085b      	lsrs	r3, r3, #1
}
  403554:	4618      	mov	r0, r3
  403556:	bd80      	pop	{r7, pc}
  403558:	00403515 	.word	0x00403515

0040355c <sysclk_enable_peripheral_clock>:
{
  40355c:	b580      	push	{r7, lr}
  40355e:	b082      	sub	sp, #8
  403560:	af00      	add	r7, sp, #0
  403562:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403564:	6878      	ldr	r0, [r7, #4]
  403566:	4b03      	ldr	r3, [pc, #12]	; (403574 <sysclk_enable_peripheral_clock+0x18>)
  403568:	4798      	blx	r3
}
  40356a:	bf00      	nop
  40356c:	3708      	adds	r7, #8
  40356e:	46bd      	mov	sp, r7
  403570:	bd80      	pop	{r7, pc}
  403572:	bf00      	nop
  403574:	00401879 	.word	0x00401879

00403578 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  403578:	b580      	push	{r7, lr}
  40357a:	b08c      	sub	sp, #48	; 0x30
  40357c:	af00      	add	r7, sp, #0
  40357e:	6078      	str	r0, [r7, #4]
  403580:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  403582:	4b4f      	ldr	r3, [pc, #316]	; (4036c0 <usart_serial_init+0x148>)
  403584:	4798      	blx	r3
  403586:	4603      	mov	r3, r0
  403588:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40358a:	683b      	ldr	r3, [r7, #0]
  40358c:	681b      	ldr	r3, [r3, #0]
  40358e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  403590:	683b      	ldr	r3, [r7, #0]
  403592:	689b      	ldr	r3, [r3, #8]
  403594:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  403596:	683b      	ldr	r3, [r7, #0]
  403598:	681b      	ldr	r3, [r3, #0]
  40359a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40359c:	683b      	ldr	r3, [r7, #0]
  40359e:	685b      	ldr	r3, [r3, #4]
  4035a0:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4035a2:	683b      	ldr	r3, [r7, #0]
  4035a4:	689b      	ldr	r3, [r3, #8]
  4035a6:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4035a8:	683b      	ldr	r3, [r7, #0]
  4035aa:	68db      	ldr	r3, [r3, #12]
  4035ac:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4035ae:	2300      	movs	r3, #0
  4035b0:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4035b2:	687b      	ldr	r3, [r7, #4]
  4035b4:	4a43      	ldr	r2, [pc, #268]	; (4036c4 <usart_serial_init+0x14c>)
  4035b6:	4293      	cmp	r3, r2
  4035b8:	d108      	bne.n	4035cc <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4035ba:	2007      	movs	r0, #7
  4035bc:	4b42      	ldr	r3, [pc, #264]	; (4036c8 <usart_serial_init+0x150>)
  4035be:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4035c4:	4619      	mov	r1, r3
  4035c6:	6878      	ldr	r0, [r7, #4]
  4035c8:	4b40      	ldr	r3, [pc, #256]	; (4036cc <usart_serial_init+0x154>)
  4035ca:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4035cc:	687b      	ldr	r3, [r7, #4]
  4035ce:	4a40      	ldr	r2, [pc, #256]	; (4036d0 <usart_serial_init+0x158>)
  4035d0:	4293      	cmp	r3, r2
  4035d2:	d108      	bne.n	4035e6 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4035d4:	2008      	movs	r0, #8
  4035d6:	4b3c      	ldr	r3, [pc, #240]	; (4036c8 <usart_serial_init+0x150>)
  4035d8:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4035da:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4035de:	4619      	mov	r1, r3
  4035e0:	6878      	ldr	r0, [r7, #4]
  4035e2:	4b3a      	ldr	r3, [pc, #232]	; (4036cc <usart_serial_init+0x154>)
  4035e4:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4035e6:	687b      	ldr	r3, [r7, #4]
  4035e8:	4a3a      	ldr	r2, [pc, #232]	; (4036d4 <usart_serial_init+0x15c>)
  4035ea:	4293      	cmp	r3, r2
  4035ec:	d108      	bne.n	403600 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  4035ee:	202c      	movs	r0, #44	; 0x2c
  4035f0:	4b35      	ldr	r3, [pc, #212]	; (4036c8 <usart_serial_init+0x150>)
  4035f2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4035f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4035f8:	4619      	mov	r1, r3
  4035fa:	6878      	ldr	r0, [r7, #4]
  4035fc:	4b33      	ldr	r3, [pc, #204]	; (4036cc <usart_serial_init+0x154>)
  4035fe:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403600:	687b      	ldr	r3, [r7, #4]
  403602:	4a35      	ldr	r2, [pc, #212]	; (4036d8 <usart_serial_init+0x160>)
  403604:	4293      	cmp	r3, r2
  403606:	d108      	bne.n	40361a <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403608:	202d      	movs	r0, #45	; 0x2d
  40360a:	4b2f      	ldr	r3, [pc, #188]	; (4036c8 <usart_serial_init+0x150>)
  40360c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40360e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403612:	4619      	mov	r1, r3
  403614:	6878      	ldr	r0, [r7, #4]
  403616:	4b2d      	ldr	r3, [pc, #180]	; (4036cc <usart_serial_init+0x154>)
  403618:	4798      	blx	r3
	}
# endif
# ifdef UART4
	if (UART4 == (Uart*)p_usart) {
  40361a:	687b      	ldr	r3, [r7, #4]
  40361c:	4a2f      	ldr	r2, [pc, #188]	; (4036dc <usart_serial_init+0x164>)
  40361e:	4293      	cmp	r3, r2
  403620:	d108      	bne.n	403634 <usart_serial_init+0xbc>
		sysclk_enable_peripheral_clock(ID_UART4);
  403622:	202e      	movs	r0, #46	; 0x2e
  403624:	4b28      	ldr	r3, [pc, #160]	; (4036c8 <usart_serial_init+0x150>)
  403626:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403628:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40362c:	4619      	mov	r1, r3
  40362e:	6878      	ldr	r0, [r7, #4]
  403630:	4b26      	ldr	r3, [pc, #152]	; (4036cc <usart_serial_init+0x154>)
  403632:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403634:	687b      	ldr	r3, [r7, #4]
  403636:	4a2a      	ldr	r2, [pc, #168]	; (4036e0 <usart_serial_init+0x168>)
  403638:	4293      	cmp	r3, r2
  40363a:	d111      	bne.n	403660 <usart_serial_init+0xe8>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  40363c:	200d      	movs	r0, #13
  40363e:	4b22      	ldr	r3, [pc, #136]	; (4036c8 <usart_serial_init+0x150>)
  403640:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403642:	4b1f      	ldr	r3, [pc, #124]	; (4036c0 <usart_serial_init+0x148>)
  403644:	4798      	blx	r3
  403646:	4602      	mov	r2, r0
  403648:	f107 030c 	add.w	r3, r7, #12
  40364c:	4619      	mov	r1, r3
  40364e:	6878      	ldr	r0, [r7, #4]
  403650:	4b24      	ldr	r3, [pc, #144]	; (4036e4 <usart_serial_init+0x16c>)
  403652:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403654:	6878      	ldr	r0, [r7, #4]
  403656:	4b24      	ldr	r3, [pc, #144]	; (4036e8 <usart_serial_init+0x170>)
  403658:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40365a:	6878      	ldr	r0, [r7, #4]
  40365c:	4b23      	ldr	r3, [pc, #140]	; (4036ec <usart_serial_init+0x174>)
  40365e:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403660:	687b      	ldr	r3, [r7, #4]
  403662:	4a23      	ldr	r2, [pc, #140]	; (4036f0 <usart_serial_init+0x178>)
  403664:	4293      	cmp	r3, r2
  403666:	d111      	bne.n	40368c <usart_serial_init+0x114>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403668:	200e      	movs	r0, #14
  40366a:	4b17      	ldr	r3, [pc, #92]	; (4036c8 <usart_serial_init+0x150>)
  40366c:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40366e:	4b14      	ldr	r3, [pc, #80]	; (4036c0 <usart_serial_init+0x148>)
  403670:	4798      	blx	r3
  403672:	4602      	mov	r2, r0
  403674:	f107 030c 	add.w	r3, r7, #12
  403678:	4619      	mov	r1, r3
  40367a:	6878      	ldr	r0, [r7, #4]
  40367c:	4b19      	ldr	r3, [pc, #100]	; (4036e4 <usart_serial_init+0x16c>)
  40367e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  403680:	6878      	ldr	r0, [r7, #4]
  403682:	4b19      	ldr	r3, [pc, #100]	; (4036e8 <usart_serial_init+0x170>)
  403684:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403686:	6878      	ldr	r0, [r7, #4]
  403688:	4b18      	ldr	r3, [pc, #96]	; (4036ec <usart_serial_init+0x174>)
  40368a:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40368c:	687b      	ldr	r3, [r7, #4]
  40368e:	4a19      	ldr	r2, [pc, #100]	; (4036f4 <usart_serial_init+0x17c>)
  403690:	4293      	cmp	r3, r2
  403692:	d111      	bne.n	4036b8 <usart_serial_init+0x140>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  403694:	200f      	movs	r0, #15
  403696:	4b0c      	ldr	r3, [pc, #48]	; (4036c8 <usart_serial_init+0x150>)
  403698:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40369a:	4b09      	ldr	r3, [pc, #36]	; (4036c0 <usart_serial_init+0x148>)
  40369c:	4798      	blx	r3
  40369e:	4602      	mov	r2, r0
  4036a0:	f107 030c 	add.w	r3, r7, #12
  4036a4:	4619      	mov	r1, r3
  4036a6:	6878      	ldr	r0, [r7, #4]
  4036a8:	4b0e      	ldr	r3, [pc, #56]	; (4036e4 <usart_serial_init+0x16c>)
  4036aa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4036ac:	6878      	ldr	r0, [r7, #4]
  4036ae:	4b0e      	ldr	r3, [pc, #56]	; (4036e8 <usart_serial_init+0x170>)
  4036b0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4036b2:	6878      	ldr	r0, [r7, #4]
  4036b4:	4b0d      	ldr	r3, [pc, #52]	; (4036ec <usart_serial_init+0x174>)
  4036b6:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4036b8:	bf00      	nop
  4036ba:	3730      	adds	r7, #48	; 0x30
  4036bc:	46bd      	mov	sp, r7
  4036be:	bd80      	pop	{r7, pc}
  4036c0:	00403549 	.word	0x00403549
  4036c4:	400e0800 	.word	0x400e0800
  4036c8:	0040355d 	.word	0x0040355d
  4036cc:	00401a2d 	.word	0x00401a2d
  4036d0:	400e0a00 	.word	0x400e0a00
  4036d4:	400e1a00 	.word	0x400e1a00
  4036d8:	400e1c00 	.word	0x400e1c00
  4036dc:	400e1e00 	.word	0x400e1e00
  4036e0:	40024000 	.word	0x40024000
  4036e4:	00401bc5 	.word	0x00401bc5
  4036e8:	00401c49 	.word	0x00401c49
  4036ec:	00401c7d 	.word	0x00401c7d
  4036f0:	40028000 	.word	0x40028000
  4036f4:	4002c000 	.word	0x4002c000

004036f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4036f8:	b580      	push	{r7, lr}
  4036fa:	b082      	sub	sp, #8
  4036fc:	af00      	add	r7, sp, #0
  4036fe:	6078      	str	r0, [r7, #4]
  403700:	460b      	mov	r3, r1
  403702:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403704:	687b      	ldr	r3, [r7, #4]
  403706:	4a36      	ldr	r2, [pc, #216]	; (4037e0 <usart_serial_putchar+0xe8>)
  403708:	4293      	cmp	r3, r2
  40370a:	d10a      	bne.n	403722 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  40370c:	bf00      	nop
  40370e:	78fb      	ldrb	r3, [r7, #3]
  403710:	4619      	mov	r1, r3
  403712:	6878      	ldr	r0, [r7, #4]
  403714:	4b33      	ldr	r3, [pc, #204]	; (4037e4 <usart_serial_putchar+0xec>)
  403716:	4798      	blx	r3
  403718:	4603      	mov	r3, r0
  40371a:	2b00      	cmp	r3, #0
  40371c:	d1f7      	bne.n	40370e <usart_serial_putchar+0x16>
		return 1;
  40371e:	2301      	movs	r3, #1
  403720:	e05a      	b.n	4037d8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403722:	687b      	ldr	r3, [r7, #4]
  403724:	4a30      	ldr	r2, [pc, #192]	; (4037e8 <usart_serial_putchar+0xf0>)
  403726:	4293      	cmp	r3, r2
  403728:	d10a      	bne.n	403740 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  40372a:	bf00      	nop
  40372c:	78fb      	ldrb	r3, [r7, #3]
  40372e:	4619      	mov	r1, r3
  403730:	6878      	ldr	r0, [r7, #4]
  403732:	4b2c      	ldr	r3, [pc, #176]	; (4037e4 <usart_serial_putchar+0xec>)
  403734:	4798      	blx	r3
  403736:	4603      	mov	r3, r0
  403738:	2b00      	cmp	r3, #0
  40373a:	d1f7      	bne.n	40372c <usart_serial_putchar+0x34>
		return 1;
  40373c:	2301      	movs	r3, #1
  40373e:	e04b      	b.n	4037d8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403740:	687b      	ldr	r3, [r7, #4]
  403742:	4a2a      	ldr	r2, [pc, #168]	; (4037ec <usart_serial_putchar+0xf4>)
  403744:	4293      	cmp	r3, r2
  403746:	d10a      	bne.n	40375e <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403748:	bf00      	nop
  40374a:	78fb      	ldrb	r3, [r7, #3]
  40374c:	4619      	mov	r1, r3
  40374e:	6878      	ldr	r0, [r7, #4]
  403750:	4b24      	ldr	r3, [pc, #144]	; (4037e4 <usart_serial_putchar+0xec>)
  403752:	4798      	blx	r3
  403754:	4603      	mov	r3, r0
  403756:	2b00      	cmp	r3, #0
  403758:	d1f7      	bne.n	40374a <usart_serial_putchar+0x52>
		return 1;
  40375a:	2301      	movs	r3, #1
  40375c:	e03c      	b.n	4037d8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40375e:	687b      	ldr	r3, [r7, #4]
  403760:	4a23      	ldr	r2, [pc, #140]	; (4037f0 <usart_serial_putchar+0xf8>)
  403762:	4293      	cmp	r3, r2
  403764:	d10a      	bne.n	40377c <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  403766:	bf00      	nop
  403768:	78fb      	ldrb	r3, [r7, #3]
  40376a:	4619      	mov	r1, r3
  40376c:	6878      	ldr	r0, [r7, #4]
  40376e:	4b1d      	ldr	r3, [pc, #116]	; (4037e4 <usart_serial_putchar+0xec>)
  403770:	4798      	blx	r3
  403772:	4603      	mov	r3, r0
  403774:	2b00      	cmp	r3, #0
  403776:	d1f7      	bne.n	403768 <usart_serial_putchar+0x70>
		return 1;
  403778:	2301      	movs	r3, #1
  40377a:	e02d      	b.n	4037d8 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40377c:	687b      	ldr	r3, [r7, #4]
  40377e:	4a1d      	ldr	r2, [pc, #116]	; (4037f4 <usart_serial_putchar+0xfc>)
  403780:	4293      	cmp	r3, r2
  403782:	d10a      	bne.n	40379a <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  403784:	bf00      	nop
  403786:	78fb      	ldrb	r3, [r7, #3]
  403788:	4619      	mov	r1, r3
  40378a:	6878      	ldr	r0, [r7, #4]
  40378c:	4b1a      	ldr	r3, [pc, #104]	; (4037f8 <usart_serial_putchar+0x100>)
  40378e:	4798      	blx	r3
  403790:	4603      	mov	r3, r0
  403792:	2b00      	cmp	r3, #0
  403794:	d1f7      	bne.n	403786 <usart_serial_putchar+0x8e>
		return 1;
  403796:	2301      	movs	r3, #1
  403798:	e01e      	b.n	4037d8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40379a:	687b      	ldr	r3, [r7, #4]
  40379c:	4a17      	ldr	r2, [pc, #92]	; (4037fc <usart_serial_putchar+0x104>)
  40379e:	4293      	cmp	r3, r2
  4037a0:	d10a      	bne.n	4037b8 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4037a2:	bf00      	nop
  4037a4:	78fb      	ldrb	r3, [r7, #3]
  4037a6:	4619      	mov	r1, r3
  4037a8:	6878      	ldr	r0, [r7, #4]
  4037aa:	4b13      	ldr	r3, [pc, #76]	; (4037f8 <usart_serial_putchar+0x100>)
  4037ac:	4798      	blx	r3
  4037ae:	4603      	mov	r3, r0
  4037b0:	2b00      	cmp	r3, #0
  4037b2:	d1f7      	bne.n	4037a4 <usart_serial_putchar+0xac>
		return 1;
  4037b4:	2301      	movs	r3, #1
  4037b6:	e00f      	b.n	4037d8 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4037b8:	687b      	ldr	r3, [r7, #4]
  4037ba:	4a11      	ldr	r2, [pc, #68]	; (403800 <usart_serial_putchar+0x108>)
  4037bc:	4293      	cmp	r3, r2
  4037be:	d10a      	bne.n	4037d6 <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4037c0:	bf00      	nop
  4037c2:	78fb      	ldrb	r3, [r7, #3]
  4037c4:	4619      	mov	r1, r3
  4037c6:	6878      	ldr	r0, [r7, #4]
  4037c8:	4b0b      	ldr	r3, [pc, #44]	; (4037f8 <usart_serial_putchar+0x100>)
  4037ca:	4798      	blx	r3
  4037cc:	4603      	mov	r3, r0
  4037ce:	2b00      	cmp	r3, #0
  4037d0:	d1f7      	bne.n	4037c2 <usart_serial_putchar+0xca>
		return 1;
  4037d2:	2301      	movs	r3, #1
  4037d4:	e000      	b.n	4037d8 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4037d6:	2300      	movs	r3, #0
}
  4037d8:	4618      	mov	r0, r3
  4037da:	3708      	adds	r7, #8
  4037dc:	46bd      	mov	sp, r7
  4037de:	bd80      	pop	{r7, pc}
  4037e0:	400e0800 	.word	0x400e0800
  4037e4:	00401a85 	.word	0x00401a85
  4037e8:	400e0a00 	.word	0x400e0a00
  4037ec:	400e1a00 	.word	0x400e1a00
  4037f0:	400e1c00 	.word	0x400e1c00
  4037f4:	40024000 	.word	0x40024000
  4037f8:	00401ce9 	.word	0x00401ce9
  4037fc:	40028000 	.word	0x40028000
  403800:	4002c000 	.word	0x4002c000

00403804 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403804:	b580      	push	{r7, lr}
  403806:	b084      	sub	sp, #16
  403808:	af00      	add	r7, sp, #0
  40380a:	6078      	str	r0, [r7, #4]
  40380c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  40380e:	2300      	movs	r3, #0
  403810:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403812:	687b      	ldr	r3, [r7, #4]
  403814:	4a34      	ldr	r2, [pc, #208]	; (4038e8 <usart_serial_getchar+0xe4>)
  403816:	4293      	cmp	r3, r2
  403818:	d107      	bne.n	40382a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  40381a:	bf00      	nop
  40381c:	6839      	ldr	r1, [r7, #0]
  40381e:	6878      	ldr	r0, [r7, #4]
  403820:	4b32      	ldr	r3, [pc, #200]	; (4038ec <usart_serial_getchar+0xe8>)
  403822:	4798      	blx	r3
  403824:	4603      	mov	r3, r0
  403826:	2b00      	cmp	r3, #0
  403828:	d1f8      	bne.n	40381c <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40382a:	687b      	ldr	r3, [r7, #4]
  40382c:	4a30      	ldr	r2, [pc, #192]	; (4038f0 <usart_serial_getchar+0xec>)
  40382e:	4293      	cmp	r3, r2
  403830:	d107      	bne.n	403842 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  403832:	bf00      	nop
  403834:	6839      	ldr	r1, [r7, #0]
  403836:	6878      	ldr	r0, [r7, #4]
  403838:	4b2c      	ldr	r3, [pc, #176]	; (4038ec <usart_serial_getchar+0xe8>)
  40383a:	4798      	blx	r3
  40383c:	4603      	mov	r3, r0
  40383e:	2b00      	cmp	r3, #0
  403840:	d1f8      	bne.n	403834 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403842:	687b      	ldr	r3, [r7, #4]
  403844:	4a2b      	ldr	r2, [pc, #172]	; (4038f4 <usart_serial_getchar+0xf0>)
  403846:	4293      	cmp	r3, r2
  403848:	d107      	bne.n	40385a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  40384a:	bf00      	nop
  40384c:	6839      	ldr	r1, [r7, #0]
  40384e:	6878      	ldr	r0, [r7, #4]
  403850:	4b26      	ldr	r3, [pc, #152]	; (4038ec <usart_serial_getchar+0xe8>)
  403852:	4798      	blx	r3
  403854:	4603      	mov	r3, r0
  403856:	2b00      	cmp	r3, #0
  403858:	d1f8      	bne.n	40384c <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40385a:	687b      	ldr	r3, [r7, #4]
  40385c:	4a26      	ldr	r2, [pc, #152]	; (4038f8 <usart_serial_getchar+0xf4>)
  40385e:	4293      	cmp	r3, r2
  403860:	d107      	bne.n	403872 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  403862:	bf00      	nop
  403864:	6839      	ldr	r1, [r7, #0]
  403866:	6878      	ldr	r0, [r7, #4]
  403868:	4b20      	ldr	r3, [pc, #128]	; (4038ec <usart_serial_getchar+0xe8>)
  40386a:	4798      	blx	r3
  40386c:	4603      	mov	r3, r0
  40386e:	2b00      	cmp	r3, #0
  403870:	d1f8      	bne.n	403864 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403872:	687b      	ldr	r3, [r7, #4]
  403874:	4a21      	ldr	r2, [pc, #132]	; (4038fc <usart_serial_getchar+0xf8>)
  403876:	4293      	cmp	r3, r2
  403878:	d10d      	bne.n	403896 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  40387a:	bf00      	nop
  40387c:	f107 030c 	add.w	r3, r7, #12
  403880:	4619      	mov	r1, r3
  403882:	6878      	ldr	r0, [r7, #4]
  403884:	4b1e      	ldr	r3, [pc, #120]	; (403900 <usart_serial_getchar+0xfc>)
  403886:	4798      	blx	r3
  403888:	4603      	mov	r3, r0
  40388a:	2b00      	cmp	r3, #0
  40388c:	d1f6      	bne.n	40387c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  40388e:	68fb      	ldr	r3, [r7, #12]
  403890:	b2da      	uxtb	r2, r3
  403892:	683b      	ldr	r3, [r7, #0]
  403894:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403896:	687b      	ldr	r3, [r7, #4]
  403898:	4a1a      	ldr	r2, [pc, #104]	; (403904 <usart_serial_getchar+0x100>)
  40389a:	4293      	cmp	r3, r2
  40389c:	d10d      	bne.n	4038ba <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  40389e:	bf00      	nop
  4038a0:	f107 030c 	add.w	r3, r7, #12
  4038a4:	4619      	mov	r1, r3
  4038a6:	6878      	ldr	r0, [r7, #4]
  4038a8:	4b15      	ldr	r3, [pc, #84]	; (403900 <usart_serial_getchar+0xfc>)
  4038aa:	4798      	blx	r3
  4038ac:	4603      	mov	r3, r0
  4038ae:	2b00      	cmp	r3, #0
  4038b0:	d1f6      	bne.n	4038a0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4038b2:	68fb      	ldr	r3, [r7, #12]
  4038b4:	b2da      	uxtb	r2, r3
  4038b6:	683b      	ldr	r3, [r7, #0]
  4038b8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4038ba:	687b      	ldr	r3, [r7, #4]
  4038bc:	4a12      	ldr	r2, [pc, #72]	; (403908 <usart_serial_getchar+0x104>)
  4038be:	4293      	cmp	r3, r2
  4038c0:	d10d      	bne.n	4038de <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4038c2:	bf00      	nop
  4038c4:	f107 030c 	add.w	r3, r7, #12
  4038c8:	4619      	mov	r1, r3
  4038ca:	6878      	ldr	r0, [r7, #4]
  4038cc:	4b0c      	ldr	r3, [pc, #48]	; (403900 <usart_serial_getchar+0xfc>)
  4038ce:	4798      	blx	r3
  4038d0:	4603      	mov	r3, r0
  4038d2:	2b00      	cmp	r3, #0
  4038d4:	d1f6      	bne.n	4038c4 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4038d6:	68fb      	ldr	r3, [r7, #12]
  4038d8:	b2da      	uxtb	r2, r3
  4038da:	683b      	ldr	r3, [r7, #0]
  4038dc:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4038de:	bf00      	nop
  4038e0:	3710      	adds	r7, #16
  4038e2:	46bd      	mov	sp, r7
  4038e4:	bd80      	pop	{r7, pc}
  4038e6:	bf00      	nop
  4038e8:	400e0800 	.word	0x400e0800
  4038ec:	00401ab5 	.word	0x00401ab5
  4038f0:	400e0a00 	.word	0x400e0a00
  4038f4:	400e1a00 	.word	0x400e1a00
  4038f8:	400e1c00 	.word	0x400e1c00
  4038fc:	40024000 	.word	0x40024000
  403900:	00401d1b 	.word	0x00401d1b
  403904:	40028000 	.word	0x40028000
  403908:	4002c000 	.word	0x4002c000

0040390c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  40390c:	b580      	push	{r7, lr}
  40390e:	b082      	sub	sp, #8
  403910:	af00      	add	r7, sp, #0
  403912:	6078      	str	r0, [r7, #4]
  403914:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  403916:	4a0f      	ldr	r2, [pc, #60]	; (403954 <stdio_serial_init+0x48>)
  403918:	687b      	ldr	r3, [r7, #4]
  40391a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40391c:	4b0e      	ldr	r3, [pc, #56]	; (403958 <stdio_serial_init+0x4c>)
  40391e:	4a0f      	ldr	r2, [pc, #60]	; (40395c <stdio_serial_init+0x50>)
  403920:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403922:	4b0f      	ldr	r3, [pc, #60]	; (403960 <stdio_serial_init+0x54>)
  403924:	4a0f      	ldr	r2, [pc, #60]	; (403964 <stdio_serial_init+0x58>)
  403926:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403928:	6839      	ldr	r1, [r7, #0]
  40392a:	6878      	ldr	r0, [r7, #4]
  40392c:	4b0e      	ldr	r3, [pc, #56]	; (403968 <stdio_serial_init+0x5c>)
  40392e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403930:	4b0e      	ldr	r3, [pc, #56]	; (40396c <stdio_serial_init+0x60>)
  403932:	681b      	ldr	r3, [r3, #0]
  403934:	689b      	ldr	r3, [r3, #8]
  403936:	2100      	movs	r1, #0
  403938:	4618      	mov	r0, r3
  40393a:	4b0d      	ldr	r3, [pc, #52]	; (403970 <stdio_serial_init+0x64>)
  40393c:	4798      	blx	r3
	setbuf(stdin, NULL);
  40393e:	4b0b      	ldr	r3, [pc, #44]	; (40396c <stdio_serial_init+0x60>)
  403940:	681b      	ldr	r3, [r3, #0]
  403942:	685b      	ldr	r3, [r3, #4]
  403944:	2100      	movs	r1, #0
  403946:	4618      	mov	r0, r3
  403948:	4b09      	ldr	r3, [pc, #36]	; (403970 <stdio_serial_init+0x64>)
  40394a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  40394c:	bf00      	nop
  40394e:	3708      	adds	r7, #8
  403950:	46bd      	mov	sp, r7
  403952:	bd80      	pop	{r7, pc}
  403954:	20401124 	.word	0x20401124
  403958:	20401120 	.word	0x20401120
  40395c:	004036f9 	.word	0x004036f9
  403960:	2040111c 	.word	0x2040111c
  403964:	00403805 	.word	0x00403805
  403968:	00403579 	.word	0x00403579
  40396c:	20400010 	.word	0x20400010
  403970:	00404391 	.word	0x00404391

00403974 <SysTick_Handler>:

volatile uint64_t unix_timestamp_ms = 0;
volatile uint32_t counter = 0;

void SysTick_Handler(void)
{
  403974:	b490      	push	{r4, r7}
  403976:	af00      	add	r7, sp, #0
	counter++;
  403978:	4b08      	ldr	r3, [pc, #32]	; (40399c <SysTick_Handler+0x28>)
  40397a:	681b      	ldr	r3, [r3, #0]
  40397c:	3301      	adds	r3, #1
  40397e:	4a07      	ldr	r2, [pc, #28]	; (40399c <SysTick_Handler+0x28>)
  403980:	6013      	str	r3, [r2, #0]
	unix_timestamp_ms++;
  403982:	4b07      	ldr	r3, [pc, #28]	; (4039a0 <SysTick_Handler+0x2c>)
  403984:	e9d3 3400 	ldrd	r3, r4, [r3]
  403988:	3301      	adds	r3, #1
  40398a:	f144 0400 	adc.w	r4, r4, #0
  40398e:	4a04      	ldr	r2, [pc, #16]	; (4039a0 <SysTick_Handler+0x2c>)
  403990:	e9c2 3400 	strd	r3, r4, [r2]
}
  403994:	bf00      	nop
  403996:	46bd      	mov	sp, r7
  403998:	bc90      	pop	{r4, r7}
  40399a:	4770      	bx	lr
  40399c:	204010e0 	.word	0x204010e0
  4039a0:	204010d8 	.word	0x204010d8

004039a4 <mdelay>:

static void mdelay(uint32_t delay)
{
  4039a4:	b480      	push	{r7}
  4039a6:	b085      	sub	sp, #20
  4039a8:	af00      	add	r7, sp, #0
  4039aa:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	
	ticks = counter;
  4039ac:	4b08      	ldr	r3, [pc, #32]	; (4039d0 <mdelay+0x2c>)
  4039ae:	681b      	ldr	r3, [r3, #0]
  4039b0:	60fb      	str	r3, [r7, #12]
	while ((counter - ticks) < delay);
  4039b2:	bf00      	nop
  4039b4:	4b06      	ldr	r3, [pc, #24]	; (4039d0 <mdelay+0x2c>)
  4039b6:	681a      	ldr	r2, [r3, #0]
  4039b8:	68fb      	ldr	r3, [r7, #12]
  4039ba:	1ad2      	subs	r2, r2, r3
  4039bc:	687b      	ldr	r3, [r7, #4]
  4039be:	429a      	cmp	r2, r3
  4039c0:	d3f8      	bcc.n	4039b4 <mdelay+0x10>
}
  4039c2:	bf00      	nop
  4039c4:	3714      	adds	r7, #20
  4039c6:	46bd      	mov	sp, r7
  4039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039cc:	4770      	bx	lr
  4039ce:	bf00      	nop
  4039d0:	204010e0 	.word	0x204010e0

004039d4 <configure_console>:
/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
  4039d4:	b590      	push	{r4, r7, lr}
  4039d6:	b085      	sub	sp, #20
  4039d8:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  4039da:	4b08      	ldr	r3, [pc, #32]	; (4039fc <configure_console+0x28>)
  4039dc:	463c      	mov	r4, r7
  4039de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4039e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4039e4:	200e      	movs	r0, #14
  4039e6:	4b06      	ldr	r3, [pc, #24]	; (403a00 <configure_console+0x2c>)
  4039e8:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4039ea:	463b      	mov	r3, r7
  4039ec:	4619      	mov	r1, r3
  4039ee:	4805      	ldr	r0, [pc, #20]	; (403a04 <configure_console+0x30>)
  4039f0:	4b05      	ldr	r3, [pc, #20]	; (403a08 <configure_console+0x34>)
  4039f2:	4798      	blx	r3
}
  4039f4:	bf00      	nop
  4039f6:	3714      	adds	r7, #20
  4039f8:	46bd      	mov	sp, r7
  4039fa:	bd90      	pop	{r4, r7, pc}
  4039fc:	00406b08 	.word	0x00406b08
  403a00:	0040355d 	.word	0x0040355d
  403a04:	40028000 	.word	0x40028000
  403a08:	0040390d 	.word	0x0040390d

00403a0c <mcan1_get_message_available>:
		
	}
}

void mcan1_get_message_available(void)
{
  403a0c:	b590      	push	{r4, r7, lr}
  403a0e:	b08b      	sub	sp, #44	; 0x2c
  403a10:	af00      	add	r7, sp, #0
	uint8_t i = 0;
  403a12:	2300      	movs	r3, #0
  403a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(mcan1_available_message() > 0)
  403a18:	e02e      	b.n	403a78 <mcan1_get_message_available+0x6c>
	{
		mcan_timestamped_rx_message_t time_message;

		mcan1_get_message(&time_message);
  403a1a:	463b      	mov	r3, r7
  403a1c:	4618      	mov	r0, r3
  403a1e:	4b1b      	ldr	r3, [pc, #108]	; (403a8c <mcan1_get_message_available+0x80>)
  403a20:	4798      	blx	r3

		printf("[%i][%llu]", i, time_message.timestamp);
  403a22:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
  403a26:	e9d7 3400 	ldrd	r3, r4, [r7]
  403a2a:	461a      	mov	r2, r3
  403a2c:	4623      	mov	r3, r4
  403a2e:	4818      	ldr	r0, [pc, #96]	; (403a90 <mcan1_get_message_available+0x84>)
  403a30:	4c18      	ldr	r4, [pc, #96]	; (403a94 <mcan1_get_message_available+0x88>)
  403a32:	47a0      	blx	r4
		i++;
  403a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403a38:	3301      	adds	r3, #1
  403a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		printf("(%X)", time_message.rx_message.id);
  403a3e:	68fb      	ldr	r3, [r7, #12]
  403a40:	4619      	mov	r1, r3
  403a42:	4815      	ldr	r0, [pc, #84]	; (403a98 <mcan1_get_message_available+0x8c>)
  403a44:	4b13      	ldr	r3, [pc, #76]	; (403a94 <mcan1_get_message_available+0x88>)
  403a46:	4798      	blx	r3

		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  403a48:	2300      	movs	r3, #0
  403a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
  403a4c:	e00c      	b.n	403a68 <mcan1_get_message_available+0x5c>
		{
			printf("|0x%2X", time_message.rx_message.data[j]);
  403a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  403a50:	f107 0228 	add.w	r2, r7, #40	; 0x28
  403a54:	4413      	add	r3, r2
  403a56:	f813 3c17 	ldrb.w	r3, [r3, #-23]
  403a5a:	4619      	mov	r1, r3
  403a5c:	480f      	ldr	r0, [pc, #60]	; (403a9c <mcan1_get_message_available+0x90>)
  403a5e:	4b0d      	ldr	r3, [pc, #52]	; (403a94 <mcan1_get_message_available+0x88>)
  403a60:	4798      	blx	r3
		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  403a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  403a64:	3301      	adds	r3, #1
  403a66:	84bb      	strh	r3, [r7, #36]	; 0x24
  403a68:	7c3b      	ldrb	r3, [r7, #16]
  403a6a:	b29b      	uxth	r3, r3
  403a6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  403a6e:	429a      	cmp	r2, r3
  403a70:	d3ed      	bcc.n	403a4e <mcan1_get_message_available+0x42>
		}
		printf("|\r\n");
  403a72:	480b      	ldr	r0, [pc, #44]	; (403aa0 <mcan1_get_message_available+0x94>)
  403a74:	4b07      	ldr	r3, [pc, #28]	; (403a94 <mcan1_get_message_available+0x88>)
  403a76:	4798      	blx	r3
	while(mcan1_available_message() > 0)
  403a78:	4b0a      	ldr	r3, [pc, #40]	; (403aa4 <mcan1_get_message_available+0x98>)
  403a7a:	4798      	blx	r3
  403a7c:	4603      	mov	r3, r0
  403a7e:	2b00      	cmp	r3, #0
  403a80:	d1cb      	bne.n	403a1a <mcan1_get_message_available+0xe>
		
	}
}
  403a82:	bf00      	nop
  403a84:	372c      	adds	r7, #44	; 0x2c
  403a86:	46bd      	mov	sp, r7
  403a88:	bd90      	pop	{r4, r7, pc}
  403a8a:	bf00      	nop
  403a8c:	004033e1 	.word	0x004033e1
  403a90:	00406b18 	.word	0x00406b18
  403a94:	00403bed 	.word	0x00403bed
  403a98:	00406b24 	.word	0x00406b24
  403a9c:	00406b2c 	.word	0x00406b2c
  403aa0:	00406b34 	.word	0x00406b34
  403aa4:	004033c9 	.word	0x004033c9

00403aa8 <main>:
uint8_t a = 0;

int main(void)
{
  403aa8:	b590      	push	{r4, r7, lr}
  403aaa:	b087      	sub	sp, #28
  403aac:	af02      	add	r7, sp, #8
	sysclk_init();
  403aae:	4b29      	ldr	r3, [pc, #164]	; (403b54 <main+0xac>)
  403ab0:	4798      	blx	r3
	board_init();
  403ab2:	4b29      	ldr	r3, [pc, #164]	; (403b58 <main+0xb0>)
  403ab4:	4798      	blx	r3

	configure_console();
  403ab6:	4b29      	ldr	r3, [pc, #164]	; (403b5c <main+0xb4>)
  403ab8:	4798      	blx	r3
	#define speed 1000000
    mcan0_configure(speed, 64, 64);
  403aba:	2240      	movs	r2, #64	; 0x40
  403abc:	2140      	movs	r1, #64	; 0x40
  403abe:	4828      	ldr	r0, [pc, #160]	; (403b60 <main+0xb8>)
  403ac0:	4b28      	ldr	r3, [pc, #160]	; (403b64 <main+0xbc>)
  403ac2:	4798      	blx	r3
    mcan1_configure(speed, 64, 64);
  403ac4:	2240      	movs	r2, #64	; 0x40
  403ac6:	2140      	movs	r1, #64	; 0x40
  403ac8:	4825      	ldr	r0, [pc, #148]	; (403b60 <main+0xb8>)
  403aca:	4b27      	ldr	r3, [pc, #156]	; (403b68 <main+0xc0>)
  403acc:	4798      	blx	r3
	
	SysTick_Config(sysclk_get_cpu_hz() / 1000);
  403ace:	4b27      	ldr	r3, [pc, #156]	; (403b6c <main+0xc4>)
  403ad0:	4798      	blx	r3
  403ad2:	4602      	mov	r2, r0
  403ad4:	4b26      	ldr	r3, [pc, #152]	; (403b70 <main+0xc8>)
  403ad6:	fba3 2302 	umull	r2, r3, r3, r2
  403ada:	099b      	lsrs	r3, r3, #6
  403adc:	4618      	mov	r0, r3
  403ade:	4b25      	ldr	r3, [pc, #148]	; (403b74 <main+0xcc>)
  403ae0:	4798      	blx	r3
	printf("________________________START_____________________________________\r\n");
  403ae2:	4825      	ldr	r0, [pc, #148]	; (403b78 <main+0xd0>)
  403ae4:	4b25      	ldr	r3, [pc, #148]	; (403b7c <main+0xd4>)
  403ae6:	4798      	blx	r3
	while (1)
	{
		printf("---------------------------------%i--------------------------------\r\n", a);
  403ae8:	4b25      	ldr	r3, [pc, #148]	; (403b80 <main+0xd8>)
  403aea:	781b      	ldrb	r3, [r3, #0]
  403aec:	4619      	mov	r1, r3
  403aee:	4825      	ldr	r0, [pc, #148]	; (403b84 <main+0xdc>)
  403af0:	4b22      	ldr	r3, [pc, #136]	; (403b7c <main+0xd4>)
  403af2:	4798      	blx	r3
		a++;
  403af4:	4b22      	ldr	r3, [pc, #136]	; (403b80 <main+0xd8>)
  403af6:	781b      	ldrb	r3, [r3, #0]
  403af8:	3301      	adds	r3, #1
  403afa:	b2da      	uxtb	r2, r3
  403afc:	4b20      	ldr	r3, [pc, #128]	; (403b80 <main+0xd8>)
  403afe:	701a      	strb	r2, [r3, #0]
		
		mdelay(500);
  403b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403b04:	4b20      	ldr	r3, [pc, #128]	; (403b88 <main+0xe0>)
  403b06:	4798      	blx	r3
		
		mcan1_get_message_available();
  403b08:	4b20      	ldr	r3, [pc, #128]	; (403b8c <main+0xe4>)
  403b0a:	4798      	blx	r3
		
		#define data_len 4
		
		for (uint8_t i = 0; i < 64; i++)
  403b0c:	2300      	movs	r3, #0
  403b0e:	73fb      	strb	r3, [r7, #15]
  403b10:	e012      	b.n	403b38 <main+0x90>
		{
			uint8_t st = mcan0_send_message(i, tx_message, data_len, false, false);
  403b12:	7bf8      	ldrb	r0, [r7, #15]
  403b14:	2300      	movs	r3, #0
  403b16:	9300      	str	r3, [sp, #0]
  403b18:	2300      	movs	r3, #0
  403b1a:	2204      	movs	r2, #4
  403b1c:	491c      	ldr	r1, [pc, #112]	; (403b90 <main+0xe8>)
  403b1e:	4c1d      	ldr	r4, [pc, #116]	; (403b94 <main+0xec>)
  403b20:	47a0      	blx	r4
  403b22:	4603      	mov	r3, r0
  403b24:	71fb      	strb	r3, [r7, #7]
			if(st == CBF_BUFFER_FULL)
  403b26:	79fb      	ldrb	r3, [r7, #7]
  403b28:	2b02      	cmp	r3, #2
  403b2a:	d102      	bne.n	403b32 <main+0x8a>
			{
				printf("SEND CANCELED BUFFER FULL\r\n");
  403b2c:	481a      	ldr	r0, [pc, #104]	; (403b98 <main+0xf0>)
  403b2e:	4b13      	ldr	r3, [pc, #76]	; (403b7c <main+0xd4>)
  403b30:	4798      	blx	r3
		for (uint8_t i = 0; i < 64; i++)
  403b32:	7bfb      	ldrb	r3, [r7, #15]
  403b34:	3301      	adds	r3, #1
  403b36:	73fb      	strb	r3, [r7, #15]
  403b38:	7bfb      	ldrb	r3, [r7, #15]
  403b3a:	2b3f      	cmp	r3, #63	; 0x3f
  403b3c:	d9e9      	bls.n	403b12 <main+0x6a>
			}
		}
	
		for (uint32_t i = 0; i < data_len; i++)
  403b3e:	2300      	movs	r3, #0
  403b40:	60bb      	str	r3, [r7, #8]
  403b42:	e002      	b.n	403b4a <main+0xa2>
  403b44:	68bb      	ldr	r3, [r7, #8]
  403b46:	3301      	adds	r3, #1
  403b48:	60bb      	str	r3, [r7, #8]
  403b4a:	68bb      	ldr	r3, [r7, #8]
  403b4c:	2b03      	cmp	r3, #3
  403b4e:	d9f9      	bls.n	403b44 <main+0x9c>
		printf("---------------------------------%i--------------------------------\r\n", a);
  403b50:	e7ca      	b.n	403ae8 <main+0x40>
  403b52:	bf00      	nop
  403b54:	004004d5 	.word	0x004004d5
  403b58:	00400909 	.word	0x00400909
  403b5c:	004039d5 	.word	0x004039d5
  403b60:	000f4240 	.word	0x000f4240
  403b64:	004027f5 	.word	0x004027f5
  403b68:	00402931 	.word	0x00402931
  403b6c:	00403535 	.word	0x00403535
  403b70:	10624dd3 	.word	0x10624dd3
  403b74:	00403459 	.word	0x00403459
  403b78:	00406b38 	.word	0x00406b38
  403b7c:	00403bed 	.word	0x00403bed
  403b80:	204010e4 	.word	0x204010e4
  403b84:	00406b80 	.word	0x00406b80
  403b88:	004039a5 	.word	0x004039a5
  403b8c:	00403a0d 	.word	0x00403a0d
  403b90:	20400008 	.word	0x20400008
  403b94:	00403285 	.word	0x00403285
  403b98:	00406bc8 	.word	0x00406bc8

00403b9c <__libc_init_array>:
  403b9c:	b570      	push	{r4, r5, r6, lr}
  403b9e:	4e0f      	ldr	r6, [pc, #60]	; (403bdc <__libc_init_array+0x40>)
  403ba0:	4d0f      	ldr	r5, [pc, #60]	; (403be0 <__libc_init_array+0x44>)
  403ba2:	1b76      	subs	r6, r6, r5
  403ba4:	10b6      	asrs	r6, r6, #2
  403ba6:	bf18      	it	ne
  403ba8:	2400      	movne	r4, #0
  403baa:	d005      	beq.n	403bb8 <__libc_init_array+0x1c>
  403bac:	3401      	adds	r4, #1
  403bae:	f855 3b04 	ldr.w	r3, [r5], #4
  403bb2:	4798      	blx	r3
  403bb4:	42a6      	cmp	r6, r4
  403bb6:	d1f9      	bne.n	403bac <__libc_init_array+0x10>
  403bb8:	4e0a      	ldr	r6, [pc, #40]	; (403be4 <__libc_init_array+0x48>)
  403bba:	4d0b      	ldr	r5, [pc, #44]	; (403be8 <__libc_init_array+0x4c>)
  403bbc:	1b76      	subs	r6, r6, r5
  403bbe:	f003 f8c5 	bl	406d4c <_init>
  403bc2:	10b6      	asrs	r6, r6, #2
  403bc4:	bf18      	it	ne
  403bc6:	2400      	movne	r4, #0
  403bc8:	d006      	beq.n	403bd8 <__libc_init_array+0x3c>
  403bca:	3401      	adds	r4, #1
  403bcc:	f855 3b04 	ldr.w	r3, [r5], #4
  403bd0:	4798      	blx	r3
  403bd2:	42a6      	cmp	r6, r4
  403bd4:	d1f9      	bne.n	403bca <__libc_init_array+0x2e>
  403bd6:	bd70      	pop	{r4, r5, r6, pc}
  403bd8:	bd70      	pop	{r4, r5, r6, pc}
  403bda:	bf00      	nop
  403bdc:	00406d58 	.word	0x00406d58
  403be0:	00406d58 	.word	0x00406d58
  403be4:	00406d60 	.word	0x00406d60
  403be8:	00406d58 	.word	0x00406d58

00403bec <iprintf>:
  403bec:	b40f      	push	{r0, r1, r2, r3}
  403bee:	b500      	push	{lr}
  403bf0:	4907      	ldr	r1, [pc, #28]	; (403c10 <iprintf+0x24>)
  403bf2:	b083      	sub	sp, #12
  403bf4:	ab04      	add	r3, sp, #16
  403bf6:	6808      	ldr	r0, [r1, #0]
  403bf8:	f853 2b04 	ldr.w	r2, [r3], #4
  403bfc:	6881      	ldr	r1, [r0, #8]
  403bfe:	9301      	str	r3, [sp, #4]
  403c00:	f000 fcd6 	bl	4045b0 <_vfiprintf_r>
  403c04:	b003      	add	sp, #12
  403c06:	f85d eb04 	ldr.w	lr, [sp], #4
  403c0a:	b004      	add	sp, #16
  403c0c:	4770      	bx	lr
  403c0e:	bf00      	nop
  403c10:	20400010 	.word	0x20400010

00403c14 <malloc>:
  403c14:	4b02      	ldr	r3, [pc, #8]	; (403c20 <malloc+0xc>)
  403c16:	4601      	mov	r1, r0
  403c18:	6818      	ldr	r0, [r3, #0]
  403c1a:	f000 b803 	b.w	403c24 <_malloc_r>
  403c1e:	bf00      	nop
  403c20:	20400010 	.word	0x20400010

00403c24 <_malloc_r>:
  403c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c28:	f101 060b 	add.w	r6, r1, #11
  403c2c:	2e16      	cmp	r6, #22
  403c2e:	b083      	sub	sp, #12
  403c30:	4605      	mov	r5, r0
  403c32:	f240 809e 	bls.w	403d72 <_malloc_r+0x14e>
  403c36:	f036 0607 	bics.w	r6, r6, #7
  403c3a:	f100 80bd 	bmi.w	403db8 <_malloc_r+0x194>
  403c3e:	42b1      	cmp	r1, r6
  403c40:	f200 80ba 	bhi.w	403db8 <_malloc_r+0x194>
  403c44:	f000 fb86 	bl	404354 <__malloc_lock>
  403c48:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403c4c:	f0c0 8293 	bcc.w	404176 <_malloc_r+0x552>
  403c50:	0a73      	lsrs	r3, r6, #9
  403c52:	f000 80b8 	beq.w	403dc6 <_malloc_r+0x1a2>
  403c56:	2b04      	cmp	r3, #4
  403c58:	f200 8179 	bhi.w	403f4e <_malloc_r+0x32a>
  403c5c:	09b3      	lsrs	r3, r6, #6
  403c5e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403c62:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403c66:	00c3      	lsls	r3, r0, #3
  403c68:	4fbf      	ldr	r7, [pc, #764]	; (403f68 <_malloc_r+0x344>)
  403c6a:	443b      	add	r3, r7
  403c6c:	f1a3 0108 	sub.w	r1, r3, #8
  403c70:	685c      	ldr	r4, [r3, #4]
  403c72:	42a1      	cmp	r1, r4
  403c74:	d106      	bne.n	403c84 <_malloc_r+0x60>
  403c76:	e00c      	b.n	403c92 <_malloc_r+0x6e>
  403c78:	2a00      	cmp	r2, #0
  403c7a:	f280 80aa 	bge.w	403dd2 <_malloc_r+0x1ae>
  403c7e:	68e4      	ldr	r4, [r4, #12]
  403c80:	42a1      	cmp	r1, r4
  403c82:	d006      	beq.n	403c92 <_malloc_r+0x6e>
  403c84:	6863      	ldr	r3, [r4, #4]
  403c86:	f023 0303 	bic.w	r3, r3, #3
  403c8a:	1b9a      	subs	r2, r3, r6
  403c8c:	2a0f      	cmp	r2, #15
  403c8e:	ddf3      	ble.n	403c78 <_malloc_r+0x54>
  403c90:	4670      	mov	r0, lr
  403c92:	693c      	ldr	r4, [r7, #16]
  403c94:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403f7c <_malloc_r+0x358>
  403c98:	4574      	cmp	r4, lr
  403c9a:	f000 81ab 	beq.w	403ff4 <_malloc_r+0x3d0>
  403c9e:	6863      	ldr	r3, [r4, #4]
  403ca0:	f023 0303 	bic.w	r3, r3, #3
  403ca4:	1b9a      	subs	r2, r3, r6
  403ca6:	2a0f      	cmp	r2, #15
  403ca8:	f300 8190 	bgt.w	403fcc <_malloc_r+0x3a8>
  403cac:	2a00      	cmp	r2, #0
  403cae:	f8c7 e014 	str.w	lr, [r7, #20]
  403cb2:	f8c7 e010 	str.w	lr, [r7, #16]
  403cb6:	f280 809d 	bge.w	403df4 <_malloc_r+0x1d0>
  403cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403cbe:	f080 8161 	bcs.w	403f84 <_malloc_r+0x360>
  403cc2:	08db      	lsrs	r3, r3, #3
  403cc4:	f103 0c01 	add.w	ip, r3, #1
  403cc8:	1099      	asrs	r1, r3, #2
  403cca:	687a      	ldr	r2, [r7, #4]
  403ccc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403cd0:	f8c4 8008 	str.w	r8, [r4, #8]
  403cd4:	2301      	movs	r3, #1
  403cd6:	408b      	lsls	r3, r1
  403cd8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403cdc:	4313      	orrs	r3, r2
  403cde:	3908      	subs	r1, #8
  403ce0:	60e1      	str	r1, [r4, #12]
  403ce2:	607b      	str	r3, [r7, #4]
  403ce4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ce8:	f8c8 400c 	str.w	r4, [r8, #12]
  403cec:	1082      	asrs	r2, r0, #2
  403cee:	2401      	movs	r4, #1
  403cf0:	4094      	lsls	r4, r2
  403cf2:	429c      	cmp	r4, r3
  403cf4:	f200 808b 	bhi.w	403e0e <_malloc_r+0x1ea>
  403cf8:	421c      	tst	r4, r3
  403cfa:	d106      	bne.n	403d0a <_malloc_r+0xe6>
  403cfc:	f020 0003 	bic.w	r0, r0, #3
  403d00:	0064      	lsls	r4, r4, #1
  403d02:	421c      	tst	r4, r3
  403d04:	f100 0004 	add.w	r0, r0, #4
  403d08:	d0fa      	beq.n	403d00 <_malloc_r+0xdc>
  403d0a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403d0e:	46cc      	mov	ip, r9
  403d10:	4680      	mov	r8, r0
  403d12:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403d16:	459c      	cmp	ip, r3
  403d18:	d107      	bne.n	403d2a <_malloc_r+0x106>
  403d1a:	e16d      	b.n	403ff8 <_malloc_r+0x3d4>
  403d1c:	2a00      	cmp	r2, #0
  403d1e:	f280 817b 	bge.w	404018 <_malloc_r+0x3f4>
  403d22:	68db      	ldr	r3, [r3, #12]
  403d24:	459c      	cmp	ip, r3
  403d26:	f000 8167 	beq.w	403ff8 <_malloc_r+0x3d4>
  403d2a:	6859      	ldr	r1, [r3, #4]
  403d2c:	f021 0103 	bic.w	r1, r1, #3
  403d30:	1b8a      	subs	r2, r1, r6
  403d32:	2a0f      	cmp	r2, #15
  403d34:	ddf2      	ble.n	403d1c <_malloc_r+0xf8>
  403d36:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403d3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403d3e:	9300      	str	r3, [sp, #0]
  403d40:	199c      	adds	r4, r3, r6
  403d42:	4628      	mov	r0, r5
  403d44:	f046 0601 	orr.w	r6, r6, #1
  403d48:	f042 0501 	orr.w	r5, r2, #1
  403d4c:	605e      	str	r6, [r3, #4]
  403d4e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403d52:	f8cc 8008 	str.w	r8, [ip, #8]
  403d56:	617c      	str	r4, [r7, #20]
  403d58:	613c      	str	r4, [r7, #16]
  403d5a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403d5e:	f8c4 e008 	str.w	lr, [r4, #8]
  403d62:	6065      	str	r5, [r4, #4]
  403d64:	505a      	str	r2, [r3, r1]
  403d66:	f000 fafb 	bl	404360 <__malloc_unlock>
  403d6a:	9b00      	ldr	r3, [sp, #0]
  403d6c:	f103 0408 	add.w	r4, r3, #8
  403d70:	e01e      	b.n	403db0 <_malloc_r+0x18c>
  403d72:	2910      	cmp	r1, #16
  403d74:	d820      	bhi.n	403db8 <_malloc_r+0x194>
  403d76:	f000 faed 	bl	404354 <__malloc_lock>
  403d7a:	2610      	movs	r6, #16
  403d7c:	2318      	movs	r3, #24
  403d7e:	2002      	movs	r0, #2
  403d80:	4f79      	ldr	r7, [pc, #484]	; (403f68 <_malloc_r+0x344>)
  403d82:	443b      	add	r3, r7
  403d84:	f1a3 0208 	sub.w	r2, r3, #8
  403d88:	685c      	ldr	r4, [r3, #4]
  403d8a:	4294      	cmp	r4, r2
  403d8c:	f000 813d 	beq.w	40400a <_malloc_r+0x3e6>
  403d90:	6863      	ldr	r3, [r4, #4]
  403d92:	68e1      	ldr	r1, [r4, #12]
  403d94:	68a6      	ldr	r6, [r4, #8]
  403d96:	f023 0303 	bic.w	r3, r3, #3
  403d9a:	4423      	add	r3, r4
  403d9c:	4628      	mov	r0, r5
  403d9e:	685a      	ldr	r2, [r3, #4]
  403da0:	60f1      	str	r1, [r6, #12]
  403da2:	f042 0201 	orr.w	r2, r2, #1
  403da6:	608e      	str	r6, [r1, #8]
  403da8:	605a      	str	r2, [r3, #4]
  403daa:	f000 fad9 	bl	404360 <__malloc_unlock>
  403dae:	3408      	adds	r4, #8
  403db0:	4620      	mov	r0, r4
  403db2:	b003      	add	sp, #12
  403db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403db8:	2400      	movs	r4, #0
  403dba:	230c      	movs	r3, #12
  403dbc:	4620      	mov	r0, r4
  403dbe:	602b      	str	r3, [r5, #0]
  403dc0:	b003      	add	sp, #12
  403dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc6:	2040      	movs	r0, #64	; 0x40
  403dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403dcc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403dd0:	e74a      	b.n	403c68 <_malloc_r+0x44>
  403dd2:	4423      	add	r3, r4
  403dd4:	68e1      	ldr	r1, [r4, #12]
  403dd6:	685a      	ldr	r2, [r3, #4]
  403dd8:	68a6      	ldr	r6, [r4, #8]
  403dda:	f042 0201 	orr.w	r2, r2, #1
  403dde:	60f1      	str	r1, [r6, #12]
  403de0:	4628      	mov	r0, r5
  403de2:	608e      	str	r6, [r1, #8]
  403de4:	605a      	str	r2, [r3, #4]
  403de6:	f000 fabb 	bl	404360 <__malloc_unlock>
  403dea:	3408      	adds	r4, #8
  403dec:	4620      	mov	r0, r4
  403dee:	b003      	add	sp, #12
  403df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403df4:	4423      	add	r3, r4
  403df6:	4628      	mov	r0, r5
  403df8:	685a      	ldr	r2, [r3, #4]
  403dfa:	f042 0201 	orr.w	r2, r2, #1
  403dfe:	605a      	str	r2, [r3, #4]
  403e00:	f000 faae 	bl	404360 <__malloc_unlock>
  403e04:	3408      	adds	r4, #8
  403e06:	4620      	mov	r0, r4
  403e08:	b003      	add	sp, #12
  403e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e0e:	68bc      	ldr	r4, [r7, #8]
  403e10:	6863      	ldr	r3, [r4, #4]
  403e12:	f023 0803 	bic.w	r8, r3, #3
  403e16:	45b0      	cmp	r8, r6
  403e18:	d304      	bcc.n	403e24 <_malloc_r+0x200>
  403e1a:	eba8 0306 	sub.w	r3, r8, r6
  403e1e:	2b0f      	cmp	r3, #15
  403e20:	f300 8085 	bgt.w	403f2e <_malloc_r+0x30a>
  403e24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f80 <_malloc_r+0x35c>
  403e28:	4b50      	ldr	r3, [pc, #320]	; (403f6c <_malloc_r+0x348>)
  403e2a:	f8d9 2000 	ldr.w	r2, [r9]
  403e2e:	681b      	ldr	r3, [r3, #0]
  403e30:	3201      	adds	r2, #1
  403e32:	4433      	add	r3, r6
  403e34:	eb04 0a08 	add.w	sl, r4, r8
  403e38:	f000 8155 	beq.w	4040e6 <_malloc_r+0x4c2>
  403e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403e40:	330f      	adds	r3, #15
  403e42:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403e46:	f02b 0b0f 	bic.w	fp, fp, #15
  403e4a:	4659      	mov	r1, fp
  403e4c:	4628      	mov	r0, r5
  403e4e:	f000 fa8d 	bl	40436c <_sbrk_r>
  403e52:	1c41      	adds	r1, r0, #1
  403e54:	4602      	mov	r2, r0
  403e56:	f000 80fc 	beq.w	404052 <_malloc_r+0x42e>
  403e5a:	4582      	cmp	sl, r0
  403e5c:	f200 80f7 	bhi.w	40404e <_malloc_r+0x42a>
  403e60:	4b43      	ldr	r3, [pc, #268]	; (403f70 <_malloc_r+0x34c>)
  403e62:	6819      	ldr	r1, [r3, #0]
  403e64:	4459      	add	r1, fp
  403e66:	6019      	str	r1, [r3, #0]
  403e68:	f000 814d 	beq.w	404106 <_malloc_r+0x4e2>
  403e6c:	f8d9 0000 	ldr.w	r0, [r9]
  403e70:	3001      	adds	r0, #1
  403e72:	bf1b      	ittet	ne
  403e74:	eba2 0a0a 	subne.w	sl, r2, sl
  403e78:	4451      	addne	r1, sl
  403e7a:	f8c9 2000 	streq.w	r2, [r9]
  403e7e:	6019      	strne	r1, [r3, #0]
  403e80:	f012 0107 	ands.w	r1, r2, #7
  403e84:	f000 8115 	beq.w	4040b2 <_malloc_r+0x48e>
  403e88:	f1c1 0008 	rsb	r0, r1, #8
  403e8c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403e90:	4402      	add	r2, r0
  403e92:	3108      	adds	r1, #8
  403e94:	eb02 090b 	add.w	r9, r2, fp
  403e98:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403e9c:	eba1 0909 	sub.w	r9, r1, r9
  403ea0:	4649      	mov	r1, r9
  403ea2:	4628      	mov	r0, r5
  403ea4:	9301      	str	r3, [sp, #4]
  403ea6:	9200      	str	r2, [sp, #0]
  403ea8:	f000 fa60 	bl	40436c <_sbrk_r>
  403eac:	1c43      	adds	r3, r0, #1
  403eae:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403eb2:	f000 8143 	beq.w	40413c <_malloc_r+0x518>
  403eb6:	1a80      	subs	r0, r0, r2
  403eb8:	4448      	add	r0, r9
  403eba:	f040 0001 	orr.w	r0, r0, #1
  403ebe:	6819      	ldr	r1, [r3, #0]
  403ec0:	60ba      	str	r2, [r7, #8]
  403ec2:	4449      	add	r1, r9
  403ec4:	42bc      	cmp	r4, r7
  403ec6:	6050      	str	r0, [r2, #4]
  403ec8:	6019      	str	r1, [r3, #0]
  403eca:	d017      	beq.n	403efc <_malloc_r+0x2d8>
  403ecc:	f1b8 0f0f 	cmp.w	r8, #15
  403ed0:	f240 80fb 	bls.w	4040ca <_malloc_r+0x4a6>
  403ed4:	6860      	ldr	r0, [r4, #4]
  403ed6:	f1a8 020c 	sub.w	r2, r8, #12
  403eda:	f022 0207 	bic.w	r2, r2, #7
  403ede:	eb04 0e02 	add.w	lr, r4, r2
  403ee2:	f000 0001 	and.w	r0, r0, #1
  403ee6:	f04f 0c05 	mov.w	ip, #5
  403eea:	4310      	orrs	r0, r2
  403eec:	2a0f      	cmp	r2, #15
  403eee:	6060      	str	r0, [r4, #4]
  403ef0:	f8ce c004 	str.w	ip, [lr, #4]
  403ef4:	f8ce c008 	str.w	ip, [lr, #8]
  403ef8:	f200 8117 	bhi.w	40412a <_malloc_r+0x506>
  403efc:	4b1d      	ldr	r3, [pc, #116]	; (403f74 <_malloc_r+0x350>)
  403efe:	68bc      	ldr	r4, [r7, #8]
  403f00:	681a      	ldr	r2, [r3, #0]
  403f02:	4291      	cmp	r1, r2
  403f04:	bf88      	it	hi
  403f06:	6019      	strhi	r1, [r3, #0]
  403f08:	4b1b      	ldr	r3, [pc, #108]	; (403f78 <_malloc_r+0x354>)
  403f0a:	681a      	ldr	r2, [r3, #0]
  403f0c:	4291      	cmp	r1, r2
  403f0e:	6862      	ldr	r2, [r4, #4]
  403f10:	bf88      	it	hi
  403f12:	6019      	strhi	r1, [r3, #0]
  403f14:	f022 0203 	bic.w	r2, r2, #3
  403f18:	4296      	cmp	r6, r2
  403f1a:	eba2 0306 	sub.w	r3, r2, r6
  403f1e:	d801      	bhi.n	403f24 <_malloc_r+0x300>
  403f20:	2b0f      	cmp	r3, #15
  403f22:	dc04      	bgt.n	403f2e <_malloc_r+0x30a>
  403f24:	4628      	mov	r0, r5
  403f26:	f000 fa1b 	bl	404360 <__malloc_unlock>
  403f2a:	2400      	movs	r4, #0
  403f2c:	e740      	b.n	403db0 <_malloc_r+0x18c>
  403f2e:	19a2      	adds	r2, r4, r6
  403f30:	f043 0301 	orr.w	r3, r3, #1
  403f34:	f046 0601 	orr.w	r6, r6, #1
  403f38:	6066      	str	r6, [r4, #4]
  403f3a:	4628      	mov	r0, r5
  403f3c:	60ba      	str	r2, [r7, #8]
  403f3e:	6053      	str	r3, [r2, #4]
  403f40:	f000 fa0e 	bl	404360 <__malloc_unlock>
  403f44:	3408      	adds	r4, #8
  403f46:	4620      	mov	r0, r4
  403f48:	b003      	add	sp, #12
  403f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f4e:	2b14      	cmp	r3, #20
  403f50:	d971      	bls.n	404036 <_malloc_r+0x412>
  403f52:	2b54      	cmp	r3, #84	; 0x54
  403f54:	f200 80a3 	bhi.w	40409e <_malloc_r+0x47a>
  403f58:	0b33      	lsrs	r3, r6, #12
  403f5a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403f5e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403f62:	00c3      	lsls	r3, r0, #3
  403f64:	e680      	b.n	403c68 <_malloc_r+0x44>
  403f66:	bf00      	nop
  403f68:	20400440 	.word	0x20400440
  403f6c:	20401118 	.word	0x20401118
  403f70:	204010e8 	.word	0x204010e8
  403f74:	20401110 	.word	0x20401110
  403f78:	20401114 	.word	0x20401114
  403f7c:	20400448 	.word	0x20400448
  403f80:	20400848 	.word	0x20400848
  403f84:	0a5a      	lsrs	r2, r3, #9
  403f86:	2a04      	cmp	r2, #4
  403f88:	d95b      	bls.n	404042 <_malloc_r+0x41e>
  403f8a:	2a14      	cmp	r2, #20
  403f8c:	f200 80ae 	bhi.w	4040ec <_malloc_r+0x4c8>
  403f90:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403f94:	00c9      	lsls	r1, r1, #3
  403f96:	325b      	adds	r2, #91	; 0x5b
  403f98:	eb07 0c01 	add.w	ip, r7, r1
  403f9c:	5879      	ldr	r1, [r7, r1]
  403f9e:	f1ac 0c08 	sub.w	ip, ip, #8
  403fa2:	458c      	cmp	ip, r1
  403fa4:	f000 8088 	beq.w	4040b8 <_malloc_r+0x494>
  403fa8:	684a      	ldr	r2, [r1, #4]
  403faa:	f022 0203 	bic.w	r2, r2, #3
  403fae:	4293      	cmp	r3, r2
  403fb0:	d273      	bcs.n	40409a <_malloc_r+0x476>
  403fb2:	6889      	ldr	r1, [r1, #8]
  403fb4:	458c      	cmp	ip, r1
  403fb6:	d1f7      	bne.n	403fa8 <_malloc_r+0x384>
  403fb8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403fbc:	687b      	ldr	r3, [r7, #4]
  403fbe:	60e2      	str	r2, [r4, #12]
  403fc0:	f8c4 c008 	str.w	ip, [r4, #8]
  403fc4:	6094      	str	r4, [r2, #8]
  403fc6:	f8cc 400c 	str.w	r4, [ip, #12]
  403fca:	e68f      	b.n	403cec <_malloc_r+0xc8>
  403fcc:	19a1      	adds	r1, r4, r6
  403fce:	f046 0c01 	orr.w	ip, r6, #1
  403fd2:	f042 0601 	orr.w	r6, r2, #1
  403fd6:	f8c4 c004 	str.w	ip, [r4, #4]
  403fda:	4628      	mov	r0, r5
  403fdc:	6179      	str	r1, [r7, #20]
  403fde:	6139      	str	r1, [r7, #16]
  403fe0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403fe4:	f8c1 e008 	str.w	lr, [r1, #8]
  403fe8:	604e      	str	r6, [r1, #4]
  403fea:	50e2      	str	r2, [r4, r3]
  403fec:	f000 f9b8 	bl	404360 <__malloc_unlock>
  403ff0:	3408      	adds	r4, #8
  403ff2:	e6dd      	b.n	403db0 <_malloc_r+0x18c>
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	e679      	b.n	403cec <_malloc_r+0xc8>
  403ff8:	f108 0801 	add.w	r8, r8, #1
  403ffc:	f018 0f03 	tst.w	r8, #3
  404000:	f10c 0c08 	add.w	ip, ip, #8
  404004:	f47f ae85 	bne.w	403d12 <_malloc_r+0xee>
  404008:	e02d      	b.n	404066 <_malloc_r+0x442>
  40400a:	68dc      	ldr	r4, [r3, #12]
  40400c:	42a3      	cmp	r3, r4
  40400e:	bf08      	it	eq
  404010:	3002      	addeq	r0, #2
  404012:	f43f ae3e 	beq.w	403c92 <_malloc_r+0x6e>
  404016:	e6bb      	b.n	403d90 <_malloc_r+0x16c>
  404018:	4419      	add	r1, r3
  40401a:	461c      	mov	r4, r3
  40401c:	684a      	ldr	r2, [r1, #4]
  40401e:	68db      	ldr	r3, [r3, #12]
  404020:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404024:	f042 0201 	orr.w	r2, r2, #1
  404028:	604a      	str	r2, [r1, #4]
  40402a:	4628      	mov	r0, r5
  40402c:	60f3      	str	r3, [r6, #12]
  40402e:	609e      	str	r6, [r3, #8]
  404030:	f000 f996 	bl	404360 <__malloc_unlock>
  404034:	e6bc      	b.n	403db0 <_malloc_r+0x18c>
  404036:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40403a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40403e:	00c3      	lsls	r3, r0, #3
  404040:	e612      	b.n	403c68 <_malloc_r+0x44>
  404042:	099a      	lsrs	r2, r3, #6
  404044:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404048:	00c9      	lsls	r1, r1, #3
  40404a:	3238      	adds	r2, #56	; 0x38
  40404c:	e7a4      	b.n	403f98 <_malloc_r+0x374>
  40404e:	42bc      	cmp	r4, r7
  404050:	d054      	beq.n	4040fc <_malloc_r+0x4d8>
  404052:	68bc      	ldr	r4, [r7, #8]
  404054:	6862      	ldr	r2, [r4, #4]
  404056:	f022 0203 	bic.w	r2, r2, #3
  40405a:	e75d      	b.n	403f18 <_malloc_r+0x2f4>
  40405c:	f859 3908 	ldr.w	r3, [r9], #-8
  404060:	4599      	cmp	r9, r3
  404062:	f040 8086 	bne.w	404172 <_malloc_r+0x54e>
  404066:	f010 0f03 	tst.w	r0, #3
  40406a:	f100 30ff 	add.w	r0, r0, #4294967295
  40406e:	d1f5      	bne.n	40405c <_malloc_r+0x438>
  404070:	687b      	ldr	r3, [r7, #4]
  404072:	ea23 0304 	bic.w	r3, r3, r4
  404076:	607b      	str	r3, [r7, #4]
  404078:	0064      	lsls	r4, r4, #1
  40407a:	429c      	cmp	r4, r3
  40407c:	f63f aec7 	bhi.w	403e0e <_malloc_r+0x1ea>
  404080:	2c00      	cmp	r4, #0
  404082:	f43f aec4 	beq.w	403e0e <_malloc_r+0x1ea>
  404086:	421c      	tst	r4, r3
  404088:	4640      	mov	r0, r8
  40408a:	f47f ae3e 	bne.w	403d0a <_malloc_r+0xe6>
  40408e:	0064      	lsls	r4, r4, #1
  404090:	421c      	tst	r4, r3
  404092:	f100 0004 	add.w	r0, r0, #4
  404096:	d0fa      	beq.n	40408e <_malloc_r+0x46a>
  404098:	e637      	b.n	403d0a <_malloc_r+0xe6>
  40409a:	468c      	mov	ip, r1
  40409c:	e78c      	b.n	403fb8 <_malloc_r+0x394>
  40409e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4040a2:	d815      	bhi.n	4040d0 <_malloc_r+0x4ac>
  4040a4:	0bf3      	lsrs	r3, r6, #15
  4040a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4040aa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4040ae:	00c3      	lsls	r3, r0, #3
  4040b0:	e5da      	b.n	403c68 <_malloc_r+0x44>
  4040b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4040b6:	e6ed      	b.n	403e94 <_malloc_r+0x270>
  4040b8:	687b      	ldr	r3, [r7, #4]
  4040ba:	1092      	asrs	r2, r2, #2
  4040bc:	2101      	movs	r1, #1
  4040be:	fa01 f202 	lsl.w	r2, r1, r2
  4040c2:	4313      	orrs	r3, r2
  4040c4:	607b      	str	r3, [r7, #4]
  4040c6:	4662      	mov	r2, ip
  4040c8:	e779      	b.n	403fbe <_malloc_r+0x39a>
  4040ca:	2301      	movs	r3, #1
  4040cc:	6053      	str	r3, [r2, #4]
  4040ce:	e729      	b.n	403f24 <_malloc_r+0x300>
  4040d0:	f240 5254 	movw	r2, #1364	; 0x554
  4040d4:	4293      	cmp	r3, r2
  4040d6:	d822      	bhi.n	40411e <_malloc_r+0x4fa>
  4040d8:	0cb3      	lsrs	r3, r6, #18
  4040da:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4040de:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4040e2:	00c3      	lsls	r3, r0, #3
  4040e4:	e5c0      	b.n	403c68 <_malloc_r+0x44>
  4040e6:	f103 0b10 	add.w	fp, r3, #16
  4040ea:	e6ae      	b.n	403e4a <_malloc_r+0x226>
  4040ec:	2a54      	cmp	r2, #84	; 0x54
  4040ee:	d829      	bhi.n	404144 <_malloc_r+0x520>
  4040f0:	0b1a      	lsrs	r2, r3, #12
  4040f2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4040f6:	00c9      	lsls	r1, r1, #3
  4040f8:	326e      	adds	r2, #110	; 0x6e
  4040fa:	e74d      	b.n	403f98 <_malloc_r+0x374>
  4040fc:	4b20      	ldr	r3, [pc, #128]	; (404180 <_malloc_r+0x55c>)
  4040fe:	6819      	ldr	r1, [r3, #0]
  404100:	4459      	add	r1, fp
  404102:	6019      	str	r1, [r3, #0]
  404104:	e6b2      	b.n	403e6c <_malloc_r+0x248>
  404106:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40410a:	2800      	cmp	r0, #0
  40410c:	f47f aeae 	bne.w	403e6c <_malloc_r+0x248>
  404110:	eb08 030b 	add.w	r3, r8, fp
  404114:	68ba      	ldr	r2, [r7, #8]
  404116:	f043 0301 	orr.w	r3, r3, #1
  40411a:	6053      	str	r3, [r2, #4]
  40411c:	e6ee      	b.n	403efc <_malloc_r+0x2d8>
  40411e:	207f      	movs	r0, #127	; 0x7f
  404120:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404124:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404128:	e59e      	b.n	403c68 <_malloc_r+0x44>
  40412a:	f104 0108 	add.w	r1, r4, #8
  40412e:	4628      	mov	r0, r5
  404130:	9300      	str	r3, [sp, #0]
  404132:	f001 fb59 	bl	4057e8 <_free_r>
  404136:	9b00      	ldr	r3, [sp, #0]
  404138:	6819      	ldr	r1, [r3, #0]
  40413a:	e6df      	b.n	403efc <_malloc_r+0x2d8>
  40413c:	2001      	movs	r0, #1
  40413e:	f04f 0900 	mov.w	r9, #0
  404142:	e6bc      	b.n	403ebe <_malloc_r+0x29a>
  404144:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404148:	d805      	bhi.n	404156 <_malloc_r+0x532>
  40414a:	0bda      	lsrs	r2, r3, #15
  40414c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404150:	00c9      	lsls	r1, r1, #3
  404152:	3277      	adds	r2, #119	; 0x77
  404154:	e720      	b.n	403f98 <_malloc_r+0x374>
  404156:	f240 5154 	movw	r1, #1364	; 0x554
  40415a:	428a      	cmp	r2, r1
  40415c:	d805      	bhi.n	40416a <_malloc_r+0x546>
  40415e:	0c9a      	lsrs	r2, r3, #18
  404160:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404164:	00c9      	lsls	r1, r1, #3
  404166:	327c      	adds	r2, #124	; 0x7c
  404168:	e716      	b.n	403f98 <_malloc_r+0x374>
  40416a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40416e:	227e      	movs	r2, #126	; 0x7e
  404170:	e712      	b.n	403f98 <_malloc_r+0x374>
  404172:	687b      	ldr	r3, [r7, #4]
  404174:	e780      	b.n	404078 <_malloc_r+0x454>
  404176:	08f0      	lsrs	r0, r6, #3
  404178:	f106 0308 	add.w	r3, r6, #8
  40417c:	e600      	b.n	403d80 <_malloc_r+0x15c>
  40417e:	bf00      	nop
  404180:	204010e8 	.word	0x204010e8

00404184 <memcpy>:
  404184:	4684      	mov	ip, r0
  404186:	ea41 0300 	orr.w	r3, r1, r0
  40418a:	f013 0303 	ands.w	r3, r3, #3
  40418e:	d16d      	bne.n	40426c <memcpy+0xe8>
  404190:	3a40      	subs	r2, #64	; 0x40
  404192:	d341      	bcc.n	404218 <memcpy+0x94>
  404194:	f851 3b04 	ldr.w	r3, [r1], #4
  404198:	f840 3b04 	str.w	r3, [r0], #4
  40419c:	f851 3b04 	ldr.w	r3, [r1], #4
  4041a0:	f840 3b04 	str.w	r3, [r0], #4
  4041a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041a8:	f840 3b04 	str.w	r3, [r0], #4
  4041ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4041b0:	f840 3b04 	str.w	r3, [r0], #4
  4041b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041b8:	f840 3b04 	str.w	r3, [r0], #4
  4041bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4041c0:	f840 3b04 	str.w	r3, [r0], #4
  4041c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041c8:	f840 3b04 	str.w	r3, [r0], #4
  4041cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4041d0:	f840 3b04 	str.w	r3, [r0], #4
  4041d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041d8:	f840 3b04 	str.w	r3, [r0], #4
  4041dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4041e0:	f840 3b04 	str.w	r3, [r0], #4
  4041e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041e8:	f840 3b04 	str.w	r3, [r0], #4
  4041ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4041f0:	f840 3b04 	str.w	r3, [r0], #4
  4041f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4041f8:	f840 3b04 	str.w	r3, [r0], #4
  4041fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404200:	f840 3b04 	str.w	r3, [r0], #4
  404204:	f851 3b04 	ldr.w	r3, [r1], #4
  404208:	f840 3b04 	str.w	r3, [r0], #4
  40420c:	f851 3b04 	ldr.w	r3, [r1], #4
  404210:	f840 3b04 	str.w	r3, [r0], #4
  404214:	3a40      	subs	r2, #64	; 0x40
  404216:	d2bd      	bcs.n	404194 <memcpy+0x10>
  404218:	3230      	adds	r2, #48	; 0x30
  40421a:	d311      	bcc.n	404240 <memcpy+0xbc>
  40421c:	f851 3b04 	ldr.w	r3, [r1], #4
  404220:	f840 3b04 	str.w	r3, [r0], #4
  404224:	f851 3b04 	ldr.w	r3, [r1], #4
  404228:	f840 3b04 	str.w	r3, [r0], #4
  40422c:	f851 3b04 	ldr.w	r3, [r1], #4
  404230:	f840 3b04 	str.w	r3, [r0], #4
  404234:	f851 3b04 	ldr.w	r3, [r1], #4
  404238:	f840 3b04 	str.w	r3, [r0], #4
  40423c:	3a10      	subs	r2, #16
  40423e:	d2ed      	bcs.n	40421c <memcpy+0x98>
  404240:	320c      	adds	r2, #12
  404242:	d305      	bcc.n	404250 <memcpy+0xcc>
  404244:	f851 3b04 	ldr.w	r3, [r1], #4
  404248:	f840 3b04 	str.w	r3, [r0], #4
  40424c:	3a04      	subs	r2, #4
  40424e:	d2f9      	bcs.n	404244 <memcpy+0xc0>
  404250:	3204      	adds	r2, #4
  404252:	d008      	beq.n	404266 <memcpy+0xe2>
  404254:	07d2      	lsls	r2, r2, #31
  404256:	bf1c      	itt	ne
  404258:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40425c:	f800 3b01 	strbne.w	r3, [r0], #1
  404260:	d301      	bcc.n	404266 <memcpy+0xe2>
  404262:	880b      	ldrh	r3, [r1, #0]
  404264:	8003      	strh	r3, [r0, #0]
  404266:	4660      	mov	r0, ip
  404268:	4770      	bx	lr
  40426a:	bf00      	nop
  40426c:	2a08      	cmp	r2, #8
  40426e:	d313      	bcc.n	404298 <memcpy+0x114>
  404270:	078b      	lsls	r3, r1, #30
  404272:	d08d      	beq.n	404190 <memcpy+0xc>
  404274:	f010 0303 	ands.w	r3, r0, #3
  404278:	d08a      	beq.n	404190 <memcpy+0xc>
  40427a:	f1c3 0304 	rsb	r3, r3, #4
  40427e:	1ad2      	subs	r2, r2, r3
  404280:	07db      	lsls	r3, r3, #31
  404282:	bf1c      	itt	ne
  404284:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404288:	f800 3b01 	strbne.w	r3, [r0], #1
  40428c:	d380      	bcc.n	404190 <memcpy+0xc>
  40428e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404292:	f820 3b02 	strh.w	r3, [r0], #2
  404296:	e77b      	b.n	404190 <memcpy+0xc>
  404298:	3a04      	subs	r2, #4
  40429a:	d3d9      	bcc.n	404250 <memcpy+0xcc>
  40429c:	3a01      	subs	r2, #1
  40429e:	f811 3b01 	ldrb.w	r3, [r1], #1
  4042a2:	f800 3b01 	strb.w	r3, [r0], #1
  4042a6:	d2f9      	bcs.n	40429c <memcpy+0x118>
  4042a8:	780b      	ldrb	r3, [r1, #0]
  4042aa:	7003      	strb	r3, [r0, #0]
  4042ac:	784b      	ldrb	r3, [r1, #1]
  4042ae:	7043      	strb	r3, [r0, #1]
  4042b0:	788b      	ldrb	r3, [r1, #2]
  4042b2:	7083      	strb	r3, [r0, #2]
  4042b4:	4660      	mov	r0, ip
  4042b6:	4770      	bx	lr

004042b8 <memset>:
  4042b8:	b470      	push	{r4, r5, r6}
  4042ba:	0786      	lsls	r6, r0, #30
  4042bc:	d046      	beq.n	40434c <memset+0x94>
  4042be:	1e54      	subs	r4, r2, #1
  4042c0:	2a00      	cmp	r2, #0
  4042c2:	d041      	beq.n	404348 <memset+0x90>
  4042c4:	b2ca      	uxtb	r2, r1
  4042c6:	4603      	mov	r3, r0
  4042c8:	e002      	b.n	4042d0 <memset+0x18>
  4042ca:	f114 34ff 	adds.w	r4, r4, #4294967295
  4042ce:	d33b      	bcc.n	404348 <memset+0x90>
  4042d0:	f803 2b01 	strb.w	r2, [r3], #1
  4042d4:	079d      	lsls	r5, r3, #30
  4042d6:	d1f8      	bne.n	4042ca <memset+0x12>
  4042d8:	2c03      	cmp	r4, #3
  4042da:	d92e      	bls.n	40433a <memset+0x82>
  4042dc:	b2cd      	uxtb	r5, r1
  4042de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4042e2:	2c0f      	cmp	r4, #15
  4042e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4042e8:	d919      	bls.n	40431e <memset+0x66>
  4042ea:	f103 0210 	add.w	r2, r3, #16
  4042ee:	4626      	mov	r6, r4
  4042f0:	3e10      	subs	r6, #16
  4042f2:	2e0f      	cmp	r6, #15
  4042f4:	f842 5c10 	str.w	r5, [r2, #-16]
  4042f8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4042fc:	f842 5c08 	str.w	r5, [r2, #-8]
  404300:	f842 5c04 	str.w	r5, [r2, #-4]
  404304:	f102 0210 	add.w	r2, r2, #16
  404308:	d8f2      	bhi.n	4042f0 <memset+0x38>
  40430a:	f1a4 0210 	sub.w	r2, r4, #16
  40430e:	f022 020f 	bic.w	r2, r2, #15
  404312:	f004 040f 	and.w	r4, r4, #15
  404316:	3210      	adds	r2, #16
  404318:	2c03      	cmp	r4, #3
  40431a:	4413      	add	r3, r2
  40431c:	d90d      	bls.n	40433a <memset+0x82>
  40431e:	461e      	mov	r6, r3
  404320:	4622      	mov	r2, r4
  404322:	3a04      	subs	r2, #4
  404324:	2a03      	cmp	r2, #3
  404326:	f846 5b04 	str.w	r5, [r6], #4
  40432a:	d8fa      	bhi.n	404322 <memset+0x6a>
  40432c:	1f22      	subs	r2, r4, #4
  40432e:	f022 0203 	bic.w	r2, r2, #3
  404332:	3204      	adds	r2, #4
  404334:	4413      	add	r3, r2
  404336:	f004 0403 	and.w	r4, r4, #3
  40433a:	b12c      	cbz	r4, 404348 <memset+0x90>
  40433c:	b2c9      	uxtb	r1, r1
  40433e:	441c      	add	r4, r3
  404340:	f803 1b01 	strb.w	r1, [r3], #1
  404344:	429c      	cmp	r4, r3
  404346:	d1fb      	bne.n	404340 <memset+0x88>
  404348:	bc70      	pop	{r4, r5, r6}
  40434a:	4770      	bx	lr
  40434c:	4614      	mov	r4, r2
  40434e:	4603      	mov	r3, r0
  404350:	e7c2      	b.n	4042d8 <memset+0x20>
  404352:	bf00      	nop

00404354 <__malloc_lock>:
  404354:	4801      	ldr	r0, [pc, #4]	; (40435c <__malloc_lock+0x8>)
  404356:	f001 bce1 	b.w	405d1c <__retarget_lock_acquire_recursive>
  40435a:	bf00      	nop
  40435c:	20401218 	.word	0x20401218

00404360 <__malloc_unlock>:
  404360:	4801      	ldr	r0, [pc, #4]	; (404368 <__malloc_unlock+0x8>)
  404362:	f001 bcdd 	b.w	405d20 <__retarget_lock_release_recursive>
  404366:	bf00      	nop
  404368:	20401218 	.word	0x20401218

0040436c <_sbrk_r>:
  40436c:	b538      	push	{r3, r4, r5, lr}
  40436e:	4c07      	ldr	r4, [pc, #28]	; (40438c <_sbrk_r+0x20>)
  404370:	2300      	movs	r3, #0
  404372:	4605      	mov	r5, r0
  404374:	4608      	mov	r0, r1
  404376:	6023      	str	r3, [r4, #0]
  404378:	f7fd fea6 	bl	4020c8 <_sbrk>
  40437c:	1c43      	adds	r3, r0, #1
  40437e:	d000      	beq.n	404382 <_sbrk_r+0x16>
  404380:	bd38      	pop	{r3, r4, r5, pc}
  404382:	6823      	ldr	r3, [r4, #0]
  404384:	2b00      	cmp	r3, #0
  404386:	d0fb      	beq.n	404380 <_sbrk_r+0x14>
  404388:	602b      	str	r3, [r5, #0]
  40438a:	bd38      	pop	{r3, r4, r5, pc}
  40438c:	2040122c 	.word	0x2040122c

00404390 <setbuf>:
  404390:	2900      	cmp	r1, #0
  404392:	bf0c      	ite	eq
  404394:	2202      	moveq	r2, #2
  404396:	2200      	movne	r2, #0
  404398:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40439c:	f000 b800 	b.w	4043a0 <setvbuf>

004043a0 <setvbuf>:
  4043a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4043a4:	4c61      	ldr	r4, [pc, #388]	; (40452c <setvbuf+0x18c>)
  4043a6:	6825      	ldr	r5, [r4, #0]
  4043a8:	b083      	sub	sp, #12
  4043aa:	4604      	mov	r4, r0
  4043ac:	460f      	mov	r7, r1
  4043ae:	4690      	mov	r8, r2
  4043b0:	461e      	mov	r6, r3
  4043b2:	b115      	cbz	r5, 4043ba <setvbuf+0x1a>
  4043b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4043b6:	2b00      	cmp	r3, #0
  4043b8:	d064      	beq.n	404484 <setvbuf+0xe4>
  4043ba:	f1b8 0f02 	cmp.w	r8, #2
  4043be:	d006      	beq.n	4043ce <setvbuf+0x2e>
  4043c0:	f1b8 0f01 	cmp.w	r8, #1
  4043c4:	f200 809f 	bhi.w	404506 <setvbuf+0x166>
  4043c8:	2e00      	cmp	r6, #0
  4043ca:	f2c0 809c 	blt.w	404506 <setvbuf+0x166>
  4043ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4043d0:	07d8      	lsls	r0, r3, #31
  4043d2:	d534      	bpl.n	40443e <setvbuf+0x9e>
  4043d4:	4621      	mov	r1, r4
  4043d6:	4628      	mov	r0, r5
  4043d8:	f001 f888 	bl	4054ec <_fflush_r>
  4043dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4043de:	b141      	cbz	r1, 4043f2 <setvbuf+0x52>
  4043e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043e4:	4299      	cmp	r1, r3
  4043e6:	d002      	beq.n	4043ee <setvbuf+0x4e>
  4043e8:	4628      	mov	r0, r5
  4043ea:	f001 f9fd 	bl	4057e8 <_free_r>
  4043ee:	2300      	movs	r3, #0
  4043f0:	6323      	str	r3, [r4, #48]	; 0x30
  4043f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043f6:	2200      	movs	r2, #0
  4043f8:	61a2      	str	r2, [r4, #24]
  4043fa:	6062      	str	r2, [r4, #4]
  4043fc:	061a      	lsls	r2, r3, #24
  4043fe:	d43a      	bmi.n	404476 <setvbuf+0xd6>
  404400:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404404:	f023 0303 	bic.w	r3, r3, #3
  404408:	f1b8 0f02 	cmp.w	r8, #2
  40440c:	81a3      	strh	r3, [r4, #12]
  40440e:	d01d      	beq.n	40444c <setvbuf+0xac>
  404410:	ab01      	add	r3, sp, #4
  404412:	466a      	mov	r2, sp
  404414:	4621      	mov	r1, r4
  404416:	4628      	mov	r0, r5
  404418:	f001 fc84 	bl	405d24 <__swhatbuf_r>
  40441c:	89a3      	ldrh	r3, [r4, #12]
  40441e:	4318      	orrs	r0, r3
  404420:	81a0      	strh	r0, [r4, #12]
  404422:	2e00      	cmp	r6, #0
  404424:	d132      	bne.n	40448c <setvbuf+0xec>
  404426:	9e00      	ldr	r6, [sp, #0]
  404428:	4630      	mov	r0, r6
  40442a:	f7ff fbf3 	bl	403c14 <malloc>
  40442e:	4607      	mov	r7, r0
  404430:	2800      	cmp	r0, #0
  404432:	d06b      	beq.n	40450c <setvbuf+0x16c>
  404434:	89a3      	ldrh	r3, [r4, #12]
  404436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40443a:	81a3      	strh	r3, [r4, #12]
  40443c:	e028      	b.n	404490 <setvbuf+0xf0>
  40443e:	89a3      	ldrh	r3, [r4, #12]
  404440:	0599      	lsls	r1, r3, #22
  404442:	d4c7      	bmi.n	4043d4 <setvbuf+0x34>
  404444:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404446:	f001 fc69 	bl	405d1c <__retarget_lock_acquire_recursive>
  40444a:	e7c3      	b.n	4043d4 <setvbuf+0x34>
  40444c:	2500      	movs	r5, #0
  40444e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404450:	2600      	movs	r6, #0
  404452:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404456:	f043 0302 	orr.w	r3, r3, #2
  40445a:	2001      	movs	r0, #1
  40445c:	60a6      	str	r6, [r4, #8]
  40445e:	07ce      	lsls	r6, r1, #31
  404460:	81a3      	strh	r3, [r4, #12]
  404462:	6022      	str	r2, [r4, #0]
  404464:	6122      	str	r2, [r4, #16]
  404466:	6160      	str	r0, [r4, #20]
  404468:	d401      	bmi.n	40446e <setvbuf+0xce>
  40446a:	0598      	lsls	r0, r3, #22
  40446c:	d53e      	bpl.n	4044ec <setvbuf+0x14c>
  40446e:	4628      	mov	r0, r5
  404470:	b003      	add	sp, #12
  404472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404476:	6921      	ldr	r1, [r4, #16]
  404478:	4628      	mov	r0, r5
  40447a:	f001 f9b5 	bl	4057e8 <_free_r>
  40447e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404482:	e7bd      	b.n	404400 <setvbuf+0x60>
  404484:	4628      	mov	r0, r5
  404486:	f001 f889 	bl	40559c <__sinit>
  40448a:	e796      	b.n	4043ba <setvbuf+0x1a>
  40448c:	2f00      	cmp	r7, #0
  40448e:	d0cb      	beq.n	404428 <setvbuf+0x88>
  404490:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404492:	2b00      	cmp	r3, #0
  404494:	d033      	beq.n	4044fe <setvbuf+0x15e>
  404496:	9b00      	ldr	r3, [sp, #0]
  404498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40449c:	6027      	str	r7, [r4, #0]
  40449e:	429e      	cmp	r6, r3
  4044a0:	bf1c      	itt	ne
  4044a2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4044a6:	81a2      	strhne	r2, [r4, #12]
  4044a8:	f1b8 0f01 	cmp.w	r8, #1
  4044ac:	bf04      	itt	eq
  4044ae:	f042 0201 	orreq.w	r2, r2, #1
  4044b2:	81a2      	strheq	r2, [r4, #12]
  4044b4:	b292      	uxth	r2, r2
  4044b6:	f012 0308 	ands.w	r3, r2, #8
  4044ba:	6127      	str	r7, [r4, #16]
  4044bc:	6166      	str	r6, [r4, #20]
  4044be:	d00e      	beq.n	4044de <setvbuf+0x13e>
  4044c0:	07d1      	lsls	r1, r2, #31
  4044c2:	d51a      	bpl.n	4044fa <setvbuf+0x15a>
  4044c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4044c6:	4276      	negs	r6, r6
  4044c8:	2300      	movs	r3, #0
  4044ca:	f015 0501 	ands.w	r5, r5, #1
  4044ce:	61a6      	str	r6, [r4, #24]
  4044d0:	60a3      	str	r3, [r4, #8]
  4044d2:	d009      	beq.n	4044e8 <setvbuf+0x148>
  4044d4:	2500      	movs	r5, #0
  4044d6:	4628      	mov	r0, r5
  4044d8:	b003      	add	sp, #12
  4044da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4044de:	60a3      	str	r3, [r4, #8]
  4044e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4044e2:	f015 0501 	ands.w	r5, r5, #1
  4044e6:	d1f5      	bne.n	4044d4 <setvbuf+0x134>
  4044e8:	0593      	lsls	r3, r2, #22
  4044ea:	d4c0      	bmi.n	40446e <setvbuf+0xce>
  4044ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044ee:	f001 fc17 	bl	405d20 <__retarget_lock_release_recursive>
  4044f2:	4628      	mov	r0, r5
  4044f4:	b003      	add	sp, #12
  4044f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4044fa:	60a6      	str	r6, [r4, #8]
  4044fc:	e7f0      	b.n	4044e0 <setvbuf+0x140>
  4044fe:	4628      	mov	r0, r5
  404500:	f001 f84c 	bl	40559c <__sinit>
  404504:	e7c7      	b.n	404496 <setvbuf+0xf6>
  404506:	f04f 35ff 	mov.w	r5, #4294967295
  40450a:	e7b0      	b.n	40446e <setvbuf+0xce>
  40450c:	f8dd 9000 	ldr.w	r9, [sp]
  404510:	45b1      	cmp	r9, r6
  404512:	d004      	beq.n	40451e <setvbuf+0x17e>
  404514:	4648      	mov	r0, r9
  404516:	f7ff fb7d 	bl	403c14 <malloc>
  40451a:	4607      	mov	r7, r0
  40451c:	b920      	cbnz	r0, 404528 <setvbuf+0x188>
  40451e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404522:	f04f 35ff 	mov.w	r5, #4294967295
  404526:	e792      	b.n	40444e <setvbuf+0xae>
  404528:	464e      	mov	r6, r9
  40452a:	e783      	b.n	404434 <setvbuf+0x94>
  40452c:	20400010 	.word	0x20400010

00404530 <__sprint_r.part.0>:
  404530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404534:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404536:	049c      	lsls	r4, r3, #18
  404538:	4693      	mov	fp, r2
  40453a:	d52f      	bpl.n	40459c <__sprint_r.part.0+0x6c>
  40453c:	6893      	ldr	r3, [r2, #8]
  40453e:	6812      	ldr	r2, [r2, #0]
  404540:	b353      	cbz	r3, 404598 <__sprint_r.part.0+0x68>
  404542:	460e      	mov	r6, r1
  404544:	4607      	mov	r7, r0
  404546:	f102 0908 	add.w	r9, r2, #8
  40454a:	e919 0420 	ldmdb	r9, {r5, sl}
  40454e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404552:	d017      	beq.n	404584 <__sprint_r.part.0+0x54>
  404554:	3d04      	subs	r5, #4
  404556:	2400      	movs	r4, #0
  404558:	e001      	b.n	40455e <__sprint_r.part.0+0x2e>
  40455a:	45a0      	cmp	r8, r4
  40455c:	d010      	beq.n	404580 <__sprint_r.part.0+0x50>
  40455e:	4632      	mov	r2, r6
  404560:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404564:	4638      	mov	r0, r7
  404566:	f001 f8bb 	bl	4056e0 <_fputwc_r>
  40456a:	1c43      	adds	r3, r0, #1
  40456c:	f104 0401 	add.w	r4, r4, #1
  404570:	d1f3      	bne.n	40455a <__sprint_r.part.0+0x2a>
  404572:	2300      	movs	r3, #0
  404574:	f8cb 3008 	str.w	r3, [fp, #8]
  404578:	f8cb 3004 	str.w	r3, [fp, #4]
  40457c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404580:	f8db 3008 	ldr.w	r3, [fp, #8]
  404584:	f02a 0a03 	bic.w	sl, sl, #3
  404588:	eba3 030a 	sub.w	r3, r3, sl
  40458c:	f8cb 3008 	str.w	r3, [fp, #8]
  404590:	f109 0908 	add.w	r9, r9, #8
  404594:	2b00      	cmp	r3, #0
  404596:	d1d8      	bne.n	40454a <__sprint_r.part.0+0x1a>
  404598:	2000      	movs	r0, #0
  40459a:	e7ea      	b.n	404572 <__sprint_r.part.0+0x42>
  40459c:	f001 fa0a 	bl	4059b4 <__sfvwrite_r>
  4045a0:	2300      	movs	r3, #0
  4045a2:	f8cb 3008 	str.w	r3, [fp, #8]
  4045a6:	f8cb 3004 	str.w	r3, [fp, #4]
  4045aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ae:	bf00      	nop

004045b0 <_vfiprintf_r>:
  4045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045b4:	b0ad      	sub	sp, #180	; 0xb4
  4045b6:	461d      	mov	r5, r3
  4045b8:	468b      	mov	fp, r1
  4045ba:	4690      	mov	r8, r2
  4045bc:	9307      	str	r3, [sp, #28]
  4045be:	9006      	str	r0, [sp, #24]
  4045c0:	b118      	cbz	r0, 4045ca <_vfiprintf_r+0x1a>
  4045c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4045c4:	2b00      	cmp	r3, #0
  4045c6:	f000 80f3 	beq.w	4047b0 <_vfiprintf_r+0x200>
  4045ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045ce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4045d2:	07df      	lsls	r7, r3, #31
  4045d4:	b281      	uxth	r1, r0
  4045d6:	d402      	bmi.n	4045de <_vfiprintf_r+0x2e>
  4045d8:	058e      	lsls	r6, r1, #22
  4045da:	f140 80fc 	bpl.w	4047d6 <_vfiprintf_r+0x226>
  4045de:	048c      	lsls	r4, r1, #18
  4045e0:	d40a      	bmi.n	4045f8 <_vfiprintf_r+0x48>
  4045e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4045e6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4045ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4045ee:	f8ab 100c 	strh.w	r1, [fp, #12]
  4045f2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4045f6:	b289      	uxth	r1, r1
  4045f8:	0708      	lsls	r0, r1, #28
  4045fa:	f140 80b3 	bpl.w	404764 <_vfiprintf_r+0x1b4>
  4045fe:	f8db 3010 	ldr.w	r3, [fp, #16]
  404602:	2b00      	cmp	r3, #0
  404604:	f000 80ae 	beq.w	404764 <_vfiprintf_r+0x1b4>
  404608:	f001 031a 	and.w	r3, r1, #26
  40460c:	2b0a      	cmp	r3, #10
  40460e:	f000 80b5 	beq.w	40477c <_vfiprintf_r+0x1cc>
  404612:	2300      	movs	r3, #0
  404614:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404618:	930b      	str	r3, [sp, #44]	; 0x2c
  40461a:	9311      	str	r3, [sp, #68]	; 0x44
  40461c:	9310      	str	r3, [sp, #64]	; 0x40
  40461e:	9303      	str	r3, [sp, #12]
  404620:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404624:	46ca      	mov	sl, r9
  404626:	f8cd b010 	str.w	fp, [sp, #16]
  40462a:	f898 3000 	ldrb.w	r3, [r8]
  40462e:	4644      	mov	r4, r8
  404630:	b1fb      	cbz	r3, 404672 <_vfiprintf_r+0xc2>
  404632:	2b25      	cmp	r3, #37	; 0x25
  404634:	d102      	bne.n	40463c <_vfiprintf_r+0x8c>
  404636:	e01c      	b.n	404672 <_vfiprintf_r+0xc2>
  404638:	2b25      	cmp	r3, #37	; 0x25
  40463a:	d003      	beq.n	404644 <_vfiprintf_r+0x94>
  40463c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404640:	2b00      	cmp	r3, #0
  404642:	d1f9      	bne.n	404638 <_vfiprintf_r+0x88>
  404644:	eba4 0508 	sub.w	r5, r4, r8
  404648:	b19d      	cbz	r5, 404672 <_vfiprintf_r+0xc2>
  40464a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40464c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40464e:	f8ca 8000 	str.w	r8, [sl]
  404652:	3301      	adds	r3, #1
  404654:	442a      	add	r2, r5
  404656:	2b07      	cmp	r3, #7
  404658:	f8ca 5004 	str.w	r5, [sl, #4]
  40465c:	9211      	str	r2, [sp, #68]	; 0x44
  40465e:	9310      	str	r3, [sp, #64]	; 0x40
  404660:	dd7a      	ble.n	404758 <_vfiprintf_r+0x1a8>
  404662:	2a00      	cmp	r2, #0
  404664:	f040 84b0 	bne.w	404fc8 <_vfiprintf_r+0xa18>
  404668:	9b03      	ldr	r3, [sp, #12]
  40466a:	9210      	str	r2, [sp, #64]	; 0x40
  40466c:	442b      	add	r3, r5
  40466e:	46ca      	mov	sl, r9
  404670:	9303      	str	r3, [sp, #12]
  404672:	7823      	ldrb	r3, [r4, #0]
  404674:	2b00      	cmp	r3, #0
  404676:	f000 83e0 	beq.w	404e3a <_vfiprintf_r+0x88a>
  40467a:	2000      	movs	r0, #0
  40467c:	f04f 0300 	mov.w	r3, #0
  404680:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404684:	f104 0801 	add.w	r8, r4, #1
  404688:	7862      	ldrb	r2, [r4, #1]
  40468a:	4605      	mov	r5, r0
  40468c:	4606      	mov	r6, r0
  40468e:	4603      	mov	r3, r0
  404690:	f04f 34ff 	mov.w	r4, #4294967295
  404694:	f108 0801 	add.w	r8, r8, #1
  404698:	f1a2 0120 	sub.w	r1, r2, #32
  40469c:	2958      	cmp	r1, #88	; 0x58
  40469e:	f200 82de 	bhi.w	404c5e <_vfiprintf_r+0x6ae>
  4046a2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4046a6:	0221      	.short	0x0221
  4046a8:	02dc02dc 	.word	0x02dc02dc
  4046ac:	02dc0229 	.word	0x02dc0229
  4046b0:	02dc02dc 	.word	0x02dc02dc
  4046b4:	02dc02dc 	.word	0x02dc02dc
  4046b8:	028902dc 	.word	0x028902dc
  4046bc:	02dc0295 	.word	0x02dc0295
  4046c0:	02bd00a2 	.word	0x02bd00a2
  4046c4:	019f02dc 	.word	0x019f02dc
  4046c8:	01a401a4 	.word	0x01a401a4
  4046cc:	01a401a4 	.word	0x01a401a4
  4046d0:	01a401a4 	.word	0x01a401a4
  4046d4:	01a401a4 	.word	0x01a401a4
  4046d8:	02dc01a4 	.word	0x02dc01a4
  4046dc:	02dc02dc 	.word	0x02dc02dc
  4046e0:	02dc02dc 	.word	0x02dc02dc
  4046e4:	02dc02dc 	.word	0x02dc02dc
  4046e8:	02dc02dc 	.word	0x02dc02dc
  4046ec:	01b202dc 	.word	0x01b202dc
  4046f0:	02dc02dc 	.word	0x02dc02dc
  4046f4:	02dc02dc 	.word	0x02dc02dc
  4046f8:	02dc02dc 	.word	0x02dc02dc
  4046fc:	02dc02dc 	.word	0x02dc02dc
  404700:	02dc02dc 	.word	0x02dc02dc
  404704:	02dc0197 	.word	0x02dc0197
  404708:	02dc02dc 	.word	0x02dc02dc
  40470c:	02dc02dc 	.word	0x02dc02dc
  404710:	02dc019b 	.word	0x02dc019b
  404714:	025302dc 	.word	0x025302dc
  404718:	02dc02dc 	.word	0x02dc02dc
  40471c:	02dc02dc 	.word	0x02dc02dc
  404720:	02dc02dc 	.word	0x02dc02dc
  404724:	02dc02dc 	.word	0x02dc02dc
  404728:	02dc02dc 	.word	0x02dc02dc
  40472c:	021b025a 	.word	0x021b025a
  404730:	02dc02dc 	.word	0x02dc02dc
  404734:	026e02dc 	.word	0x026e02dc
  404738:	02dc021b 	.word	0x02dc021b
  40473c:	027302dc 	.word	0x027302dc
  404740:	01f502dc 	.word	0x01f502dc
  404744:	02090182 	.word	0x02090182
  404748:	02dc02d7 	.word	0x02dc02d7
  40474c:	02dc029a 	.word	0x02dc029a
  404750:	02dc00a7 	.word	0x02dc00a7
  404754:	022e02dc 	.word	0x022e02dc
  404758:	f10a 0a08 	add.w	sl, sl, #8
  40475c:	9b03      	ldr	r3, [sp, #12]
  40475e:	442b      	add	r3, r5
  404760:	9303      	str	r3, [sp, #12]
  404762:	e786      	b.n	404672 <_vfiprintf_r+0xc2>
  404764:	4659      	mov	r1, fp
  404766:	9806      	ldr	r0, [sp, #24]
  404768:	f000 fdac 	bl	4052c4 <__swsetup_r>
  40476c:	bb18      	cbnz	r0, 4047b6 <_vfiprintf_r+0x206>
  40476e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404772:	f001 031a 	and.w	r3, r1, #26
  404776:	2b0a      	cmp	r3, #10
  404778:	f47f af4b 	bne.w	404612 <_vfiprintf_r+0x62>
  40477c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404780:	2b00      	cmp	r3, #0
  404782:	f6ff af46 	blt.w	404612 <_vfiprintf_r+0x62>
  404786:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40478a:	07db      	lsls	r3, r3, #31
  40478c:	d405      	bmi.n	40479a <_vfiprintf_r+0x1ea>
  40478e:	058f      	lsls	r7, r1, #22
  404790:	d403      	bmi.n	40479a <_vfiprintf_r+0x1ea>
  404792:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404796:	f001 fac3 	bl	405d20 <__retarget_lock_release_recursive>
  40479a:	462b      	mov	r3, r5
  40479c:	4642      	mov	r2, r8
  40479e:	4659      	mov	r1, fp
  4047a0:	9806      	ldr	r0, [sp, #24]
  4047a2:	f000 fd4d 	bl	405240 <__sbprintf>
  4047a6:	9003      	str	r0, [sp, #12]
  4047a8:	9803      	ldr	r0, [sp, #12]
  4047aa:	b02d      	add	sp, #180	; 0xb4
  4047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047b0:	f000 fef4 	bl	40559c <__sinit>
  4047b4:	e709      	b.n	4045ca <_vfiprintf_r+0x1a>
  4047b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4047ba:	07d9      	lsls	r1, r3, #31
  4047bc:	d404      	bmi.n	4047c8 <_vfiprintf_r+0x218>
  4047be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4047c2:	059a      	lsls	r2, r3, #22
  4047c4:	f140 84aa 	bpl.w	40511c <_vfiprintf_r+0xb6c>
  4047c8:	f04f 33ff 	mov.w	r3, #4294967295
  4047cc:	9303      	str	r3, [sp, #12]
  4047ce:	9803      	ldr	r0, [sp, #12]
  4047d0:	b02d      	add	sp, #180	; 0xb4
  4047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047d6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4047da:	f001 fa9f 	bl	405d1c <__retarget_lock_acquire_recursive>
  4047de:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4047e2:	b281      	uxth	r1, r0
  4047e4:	e6fb      	b.n	4045de <_vfiprintf_r+0x2e>
  4047e6:	4276      	negs	r6, r6
  4047e8:	9207      	str	r2, [sp, #28]
  4047ea:	f043 0304 	orr.w	r3, r3, #4
  4047ee:	f898 2000 	ldrb.w	r2, [r8]
  4047f2:	e74f      	b.n	404694 <_vfiprintf_r+0xe4>
  4047f4:	9608      	str	r6, [sp, #32]
  4047f6:	069e      	lsls	r6, r3, #26
  4047f8:	f100 8450 	bmi.w	40509c <_vfiprintf_r+0xaec>
  4047fc:	9907      	ldr	r1, [sp, #28]
  4047fe:	06dd      	lsls	r5, r3, #27
  404800:	460a      	mov	r2, r1
  404802:	f100 83ef 	bmi.w	404fe4 <_vfiprintf_r+0xa34>
  404806:	0658      	lsls	r0, r3, #25
  404808:	f140 83ec 	bpl.w	404fe4 <_vfiprintf_r+0xa34>
  40480c:	880e      	ldrh	r6, [r1, #0]
  40480e:	3104      	adds	r1, #4
  404810:	2700      	movs	r7, #0
  404812:	2201      	movs	r2, #1
  404814:	9107      	str	r1, [sp, #28]
  404816:	f04f 0100 	mov.w	r1, #0
  40481a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40481e:	2500      	movs	r5, #0
  404820:	1c61      	adds	r1, r4, #1
  404822:	f000 8116 	beq.w	404a52 <_vfiprintf_r+0x4a2>
  404826:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40482a:	9102      	str	r1, [sp, #8]
  40482c:	ea56 0107 	orrs.w	r1, r6, r7
  404830:	f040 8114 	bne.w	404a5c <_vfiprintf_r+0x4ac>
  404834:	2c00      	cmp	r4, #0
  404836:	f040 835c 	bne.w	404ef2 <_vfiprintf_r+0x942>
  40483a:	2a00      	cmp	r2, #0
  40483c:	f040 83b7 	bne.w	404fae <_vfiprintf_r+0x9fe>
  404840:	f013 0301 	ands.w	r3, r3, #1
  404844:	9305      	str	r3, [sp, #20]
  404846:	f000 8457 	beq.w	4050f8 <_vfiprintf_r+0xb48>
  40484a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40484e:	2330      	movs	r3, #48	; 0x30
  404850:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404854:	9b05      	ldr	r3, [sp, #20]
  404856:	42a3      	cmp	r3, r4
  404858:	bfb8      	it	lt
  40485a:	4623      	movlt	r3, r4
  40485c:	9301      	str	r3, [sp, #4]
  40485e:	b10d      	cbz	r5, 404864 <_vfiprintf_r+0x2b4>
  404860:	3301      	adds	r3, #1
  404862:	9301      	str	r3, [sp, #4]
  404864:	9b02      	ldr	r3, [sp, #8]
  404866:	f013 0302 	ands.w	r3, r3, #2
  40486a:	9309      	str	r3, [sp, #36]	; 0x24
  40486c:	d002      	beq.n	404874 <_vfiprintf_r+0x2c4>
  40486e:	9b01      	ldr	r3, [sp, #4]
  404870:	3302      	adds	r3, #2
  404872:	9301      	str	r3, [sp, #4]
  404874:	9b02      	ldr	r3, [sp, #8]
  404876:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40487a:	930a      	str	r3, [sp, #40]	; 0x28
  40487c:	f040 8217 	bne.w	404cae <_vfiprintf_r+0x6fe>
  404880:	9b08      	ldr	r3, [sp, #32]
  404882:	9a01      	ldr	r2, [sp, #4]
  404884:	1a9d      	subs	r5, r3, r2
  404886:	2d00      	cmp	r5, #0
  404888:	f340 8211 	ble.w	404cae <_vfiprintf_r+0x6fe>
  40488c:	2d10      	cmp	r5, #16
  40488e:	f340 8490 	ble.w	4051b2 <_vfiprintf_r+0xc02>
  404892:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404894:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404896:	4ec4      	ldr	r6, [pc, #784]	; (404ba8 <_vfiprintf_r+0x5f8>)
  404898:	46d6      	mov	lr, sl
  40489a:	2710      	movs	r7, #16
  40489c:	46a2      	mov	sl, r4
  40489e:	4619      	mov	r1, r3
  4048a0:	9c06      	ldr	r4, [sp, #24]
  4048a2:	e007      	b.n	4048b4 <_vfiprintf_r+0x304>
  4048a4:	f101 0c02 	add.w	ip, r1, #2
  4048a8:	f10e 0e08 	add.w	lr, lr, #8
  4048ac:	4601      	mov	r1, r0
  4048ae:	3d10      	subs	r5, #16
  4048b0:	2d10      	cmp	r5, #16
  4048b2:	dd11      	ble.n	4048d8 <_vfiprintf_r+0x328>
  4048b4:	1c48      	adds	r0, r1, #1
  4048b6:	3210      	adds	r2, #16
  4048b8:	2807      	cmp	r0, #7
  4048ba:	9211      	str	r2, [sp, #68]	; 0x44
  4048bc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4048c0:	9010      	str	r0, [sp, #64]	; 0x40
  4048c2:	ddef      	ble.n	4048a4 <_vfiprintf_r+0x2f4>
  4048c4:	2a00      	cmp	r2, #0
  4048c6:	f040 81e4 	bne.w	404c92 <_vfiprintf_r+0x6e2>
  4048ca:	3d10      	subs	r5, #16
  4048cc:	2d10      	cmp	r5, #16
  4048ce:	4611      	mov	r1, r2
  4048d0:	f04f 0c01 	mov.w	ip, #1
  4048d4:	46ce      	mov	lr, r9
  4048d6:	dced      	bgt.n	4048b4 <_vfiprintf_r+0x304>
  4048d8:	4654      	mov	r4, sl
  4048da:	4661      	mov	r1, ip
  4048dc:	46f2      	mov	sl, lr
  4048de:	442a      	add	r2, r5
  4048e0:	2907      	cmp	r1, #7
  4048e2:	9211      	str	r2, [sp, #68]	; 0x44
  4048e4:	f8ca 6000 	str.w	r6, [sl]
  4048e8:	f8ca 5004 	str.w	r5, [sl, #4]
  4048ec:	9110      	str	r1, [sp, #64]	; 0x40
  4048ee:	f300 82ec 	bgt.w	404eca <_vfiprintf_r+0x91a>
  4048f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4048f6:	f10a 0a08 	add.w	sl, sl, #8
  4048fa:	1c48      	adds	r0, r1, #1
  4048fc:	2d00      	cmp	r5, #0
  4048fe:	f040 81de 	bne.w	404cbe <_vfiprintf_r+0x70e>
  404902:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404904:	2b00      	cmp	r3, #0
  404906:	f000 81f8 	beq.w	404cfa <_vfiprintf_r+0x74a>
  40490a:	3202      	adds	r2, #2
  40490c:	a90e      	add	r1, sp, #56	; 0x38
  40490e:	2302      	movs	r3, #2
  404910:	2807      	cmp	r0, #7
  404912:	9211      	str	r2, [sp, #68]	; 0x44
  404914:	9010      	str	r0, [sp, #64]	; 0x40
  404916:	e88a 000a 	stmia.w	sl, {r1, r3}
  40491a:	f340 81ea 	ble.w	404cf2 <_vfiprintf_r+0x742>
  40491e:	2a00      	cmp	r2, #0
  404920:	f040 838c 	bne.w	40503c <_vfiprintf_r+0xa8c>
  404924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404926:	2b80      	cmp	r3, #128	; 0x80
  404928:	f04f 0001 	mov.w	r0, #1
  40492c:	4611      	mov	r1, r2
  40492e:	46ca      	mov	sl, r9
  404930:	f040 81e7 	bne.w	404d02 <_vfiprintf_r+0x752>
  404934:	9b08      	ldr	r3, [sp, #32]
  404936:	9d01      	ldr	r5, [sp, #4]
  404938:	1b5e      	subs	r6, r3, r5
  40493a:	2e00      	cmp	r6, #0
  40493c:	f340 81e1 	ble.w	404d02 <_vfiprintf_r+0x752>
  404940:	2e10      	cmp	r6, #16
  404942:	4d9a      	ldr	r5, [pc, #616]	; (404bac <_vfiprintf_r+0x5fc>)
  404944:	f340 8450 	ble.w	4051e8 <_vfiprintf_r+0xc38>
  404948:	46d4      	mov	ip, sl
  40494a:	2710      	movs	r7, #16
  40494c:	46a2      	mov	sl, r4
  40494e:	9c06      	ldr	r4, [sp, #24]
  404950:	e007      	b.n	404962 <_vfiprintf_r+0x3b2>
  404952:	f101 0e02 	add.w	lr, r1, #2
  404956:	f10c 0c08 	add.w	ip, ip, #8
  40495a:	4601      	mov	r1, r0
  40495c:	3e10      	subs	r6, #16
  40495e:	2e10      	cmp	r6, #16
  404960:	dd11      	ble.n	404986 <_vfiprintf_r+0x3d6>
  404962:	1c48      	adds	r0, r1, #1
  404964:	3210      	adds	r2, #16
  404966:	2807      	cmp	r0, #7
  404968:	9211      	str	r2, [sp, #68]	; 0x44
  40496a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40496e:	9010      	str	r0, [sp, #64]	; 0x40
  404970:	ddef      	ble.n	404952 <_vfiprintf_r+0x3a2>
  404972:	2a00      	cmp	r2, #0
  404974:	f040 829d 	bne.w	404eb2 <_vfiprintf_r+0x902>
  404978:	3e10      	subs	r6, #16
  40497a:	2e10      	cmp	r6, #16
  40497c:	f04f 0e01 	mov.w	lr, #1
  404980:	4611      	mov	r1, r2
  404982:	46cc      	mov	ip, r9
  404984:	dced      	bgt.n	404962 <_vfiprintf_r+0x3b2>
  404986:	4654      	mov	r4, sl
  404988:	46e2      	mov	sl, ip
  40498a:	4432      	add	r2, r6
  40498c:	f1be 0f07 	cmp.w	lr, #7
  404990:	9211      	str	r2, [sp, #68]	; 0x44
  404992:	e88a 0060 	stmia.w	sl, {r5, r6}
  404996:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40499a:	f300 8369 	bgt.w	405070 <_vfiprintf_r+0xac0>
  40499e:	f10a 0a08 	add.w	sl, sl, #8
  4049a2:	f10e 0001 	add.w	r0, lr, #1
  4049a6:	4671      	mov	r1, lr
  4049a8:	e1ab      	b.n	404d02 <_vfiprintf_r+0x752>
  4049aa:	9608      	str	r6, [sp, #32]
  4049ac:	f013 0220 	ands.w	r2, r3, #32
  4049b0:	f040 838c 	bne.w	4050cc <_vfiprintf_r+0xb1c>
  4049b4:	f013 0110 	ands.w	r1, r3, #16
  4049b8:	f040 831a 	bne.w	404ff0 <_vfiprintf_r+0xa40>
  4049bc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4049c0:	f000 8316 	beq.w	404ff0 <_vfiprintf_r+0xa40>
  4049c4:	9807      	ldr	r0, [sp, #28]
  4049c6:	460a      	mov	r2, r1
  4049c8:	4601      	mov	r1, r0
  4049ca:	3104      	adds	r1, #4
  4049cc:	8806      	ldrh	r6, [r0, #0]
  4049ce:	9107      	str	r1, [sp, #28]
  4049d0:	2700      	movs	r7, #0
  4049d2:	e720      	b.n	404816 <_vfiprintf_r+0x266>
  4049d4:	9608      	str	r6, [sp, #32]
  4049d6:	f043 0310 	orr.w	r3, r3, #16
  4049da:	e7e7      	b.n	4049ac <_vfiprintf_r+0x3fc>
  4049dc:	9608      	str	r6, [sp, #32]
  4049de:	f043 0310 	orr.w	r3, r3, #16
  4049e2:	e708      	b.n	4047f6 <_vfiprintf_r+0x246>
  4049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4049e8:	f898 2000 	ldrb.w	r2, [r8]
  4049ec:	e652      	b.n	404694 <_vfiprintf_r+0xe4>
  4049ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4049f2:	2600      	movs	r6, #0
  4049f4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4049f8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4049fc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404a00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404a04:	2909      	cmp	r1, #9
  404a06:	d9f5      	bls.n	4049f4 <_vfiprintf_r+0x444>
  404a08:	e646      	b.n	404698 <_vfiprintf_r+0xe8>
  404a0a:	9608      	str	r6, [sp, #32]
  404a0c:	2800      	cmp	r0, #0
  404a0e:	f040 8408 	bne.w	405222 <_vfiprintf_r+0xc72>
  404a12:	f043 0310 	orr.w	r3, r3, #16
  404a16:	069e      	lsls	r6, r3, #26
  404a18:	f100 834c 	bmi.w	4050b4 <_vfiprintf_r+0xb04>
  404a1c:	06dd      	lsls	r5, r3, #27
  404a1e:	f100 82f3 	bmi.w	405008 <_vfiprintf_r+0xa58>
  404a22:	0658      	lsls	r0, r3, #25
  404a24:	f140 82f0 	bpl.w	405008 <_vfiprintf_r+0xa58>
  404a28:	9d07      	ldr	r5, [sp, #28]
  404a2a:	f9b5 6000 	ldrsh.w	r6, [r5]
  404a2e:	462a      	mov	r2, r5
  404a30:	17f7      	asrs	r7, r6, #31
  404a32:	3204      	adds	r2, #4
  404a34:	4630      	mov	r0, r6
  404a36:	4639      	mov	r1, r7
  404a38:	9207      	str	r2, [sp, #28]
  404a3a:	2800      	cmp	r0, #0
  404a3c:	f171 0200 	sbcs.w	r2, r1, #0
  404a40:	f2c0 835d 	blt.w	4050fe <_vfiprintf_r+0xb4e>
  404a44:	1c61      	adds	r1, r4, #1
  404a46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404a4a:	f04f 0201 	mov.w	r2, #1
  404a4e:	f47f aeea 	bne.w	404826 <_vfiprintf_r+0x276>
  404a52:	ea56 0107 	orrs.w	r1, r6, r7
  404a56:	f000 824d 	beq.w	404ef4 <_vfiprintf_r+0x944>
  404a5a:	9302      	str	r3, [sp, #8]
  404a5c:	2a01      	cmp	r2, #1
  404a5e:	f000 828c 	beq.w	404f7a <_vfiprintf_r+0x9ca>
  404a62:	2a02      	cmp	r2, #2
  404a64:	f040 825c 	bne.w	404f20 <_vfiprintf_r+0x970>
  404a68:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404a6a:	46cb      	mov	fp, r9
  404a6c:	0933      	lsrs	r3, r6, #4
  404a6e:	f006 010f 	and.w	r1, r6, #15
  404a72:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404a76:	093a      	lsrs	r2, r7, #4
  404a78:	461e      	mov	r6, r3
  404a7a:	4617      	mov	r7, r2
  404a7c:	5c43      	ldrb	r3, [r0, r1]
  404a7e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404a82:	ea56 0307 	orrs.w	r3, r6, r7
  404a86:	d1f1      	bne.n	404a6c <_vfiprintf_r+0x4bc>
  404a88:	eba9 030b 	sub.w	r3, r9, fp
  404a8c:	9305      	str	r3, [sp, #20]
  404a8e:	e6e1      	b.n	404854 <_vfiprintf_r+0x2a4>
  404a90:	2800      	cmp	r0, #0
  404a92:	f040 83c0 	bne.w	405216 <_vfiprintf_r+0xc66>
  404a96:	0699      	lsls	r1, r3, #26
  404a98:	f100 8367 	bmi.w	40516a <_vfiprintf_r+0xbba>
  404a9c:	06da      	lsls	r2, r3, #27
  404a9e:	f100 80f1 	bmi.w	404c84 <_vfiprintf_r+0x6d4>
  404aa2:	065b      	lsls	r3, r3, #25
  404aa4:	f140 80ee 	bpl.w	404c84 <_vfiprintf_r+0x6d4>
  404aa8:	9a07      	ldr	r2, [sp, #28]
  404aaa:	6813      	ldr	r3, [r2, #0]
  404aac:	3204      	adds	r2, #4
  404aae:	9207      	str	r2, [sp, #28]
  404ab0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ab4:	801a      	strh	r2, [r3, #0]
  404ab6:	e5b8      	b.n	40462a <_vfiprintf_r+0x7a>
  404ab8:	9807      	ldr	r0, [sp, #28]
  404aba:	4a3d      	ldr	r2, [pc, #244]	; (404bb0 <_vfiprintf_r+0x600>)
  404abc:	9608      	str	r6, [sp, #32]
  404abe:	920b      	str	r2, [sp, #44]	; 0x2c
  404ac0:	6806      	ldr	r6, [r0, #0]
  404ac2:	2278      	movs	r2, #120	; 0x78
  404ac4:	2130      	movs	r1, #48	; 0x30
  404ac6:	3004      	adds	r0, #4
  404ac8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404acc:	f043 0302 	orr.w	r3, r3, #2
  404ad0:	9007      	str	r0, [sp, #28]
  404ad2:	2700      	movs	r7, #0
  404ad4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404ad8:	2202      	movs	r2, #2
  404ada:	e69c      	b.n	404816 <_vfiprintf_r+0x266>
  404adc:	9608      	str	r6, [sp, #32]
  404ade:	2800      	cmp	r0, #0
  404ae0:	d099      	beq.n	404a16 <_vfiprintf_r+0x466>
  404ae2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404ae6:	e796      	b.n	404a16 <_vfiprintf_r+0x466>
  404ae8:	f898 2000 	ldrb.w	r2, [r8]
  404aec:	2d00      	cmp	r5, #0
  404aee:	f47f add1 	bne.w	404694 <_vfiprintf_r+0xe4>
  404af2:	2001      	movs	r0, #1
  404af4:	2520      	movs	r5, #32
  404af6:	e5cd      	b.n	404694 <_vfiprintf_r+0xe4>
  404af8:	f043 0301 	orr.w	r3, r3, #1
  404afc:	f898 2000 	ldrb.w	r2, [r8]
  404b00:	e5c8      	b.n	404694 <_vfiprintf_r+0xe4>
  404b02:	9608      	str	r6, [sp, #32]
  404b04:	2800      	cmp	r0, #0
  404b06:	f040 8393 	bne.w	405230 <_vfiprintf_r+0xc80>
  404b0a:	4929      	ldr	r1, [pc, #164]	; (404bb0 <_vfiprintf_r+0x600>)
  404b0c:	910b      	str	r1, [sp, #44]	; 0x2c
  404b0e:	069f      	lsls	r7, r3, #26
  404b10:	f100 82e8 	bmi.w	4050e4 <_vfiprintf_r+0xb34>
  404b14:	9807      	ldr	r0, [sp, #28]
  404b16:	06de      	lsls	r6, r3, #27
  404b18:	4601      	mov	r1, r0
  404b1a:	f100 8270 	bmi.w	404ffe <_vfiprintf_r+0xa4e>
  404b1e:	065d      	lsls	r5, r3, #25
  404b20:	f140 826d 	bpl.w	404ffe <_vfiprintf_r+0xa4e>
  404b24:	3104      	adds	r1, #4
  404b26:	8806      	ldrh	r6, [r0, #0]
  404b28:	9107      	str	r1, [sp, #28]
  404b2a:	2700      	movs	r7, #0
  404b2c:	07d8      	lsls	r0, r3, #31
  404b2e:	f140 8222 	bpl.w	404f76 <_vfiprintf_r+0x9c6>
  404b32:	ea56 0107 	orrs.w	r1, r6, r7
  404b36:	f000 821e 	beq.w	404f76 <_vfiprintf_r+0x9c6>
  404b3a:	2130      	movs	r1, #48	; 0x30
  404b3c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404b40:	f043 0302 	orr.w	r3, r3, #2
  404b44:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404b48:	2202      	movs	r2, #2
  404b4a:	e664      	b.n	404816 <_vfiprintf_r+0x266>
  404b4c:	9608      	str	r6, [sp, #32]
  404b4e:	2800      	cmp	r0, #0
  404b50:	f040 836b 	bne.w	40522a <_vfiprintf_r+0xc7a>
  404b54:	4917      	ldr	r1, [pc, #92]	; (404bb4 <_vfiprintf_r+0x604>)
  404b56:	910b      	str	r1, [sp, #44]	; 0x2c
  404b58:	e7d9      	b.n	404b0e <_vfiprintf_r+0x55e>
  404b5a:	9907      	ldr	r1, [sp, #28]
  404b5c:	9608      	str	r6, [sp, #32]
  404b5e:	680a      	ldr	r2, [r1, #0]
  404b60:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404b64:	f04f 0000 	mov.w	r0, #0
  404b68:	460a      	mov	r2, r1
  404b6a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404b6e:	3204      	adds	r2, #4
  404b70:	2001      	movs	r0, #1
  404b72:	9001      	str	r0, [sp, #4]
  404b74:	9207      	str	r2, [sp, #28]
  404b76:	9005      	str	r0, [sp, #20]
  404b78:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404b7c:	9302      	str	r3, [sp, #8]
  404b7e:	2400      	movs	r4, #0
  404b80:	e670      	b.n	404864 <_vfiprintf_r+0x2b4>
  404b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404b86:	f898 2000 	ldrb.w	r2, [r8]
  404b8a:	e583      	b.n	404694 <_vfiprintf_r+0xe4>
  404b8c:	f898 2000 	ldrb.w	r2, [r8]
  404b90:	2a6c      	cmp	r2, #108	; 0x6c
  404b92:	bf03      	ittte	eq
  404b94:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404b98:	f043 0320 	orreq.w	r3, r3, #32
  404b9c:	f108 0801 	addeq.w	r8, r8, #1
  404ba0:	f043 0310 	orrne.w	r3, r3, #16
  404ba4:	e576      	b.n	404694 <_vfiprintf_r+0xe4>
  404ba6:	bf00      	nop
  404ba8:	00406c18 	.word	0x00406c18
  404bac:	00406c28 	.word	0x00406c28
  404bb0:	00406bfc 	.word	0x00406bfc
  404bb4:	00406be8 	.word	0x00406be8
  404bb8:	9907      	ldr	r1, [sp, #28]
  404bba:	680e      	ldr	r6, [r1, #0]
  404bbc:	460a      	mov	r2, r1
  404bbe:	2e00      	cmp	r6, #0
  404bc0:	f102 0204 	add.w	r2, r2, #4
  404bc4:	f6ff ae0f 	blt.w	4047e6 <_vfiprintf_r+0x236>
  404bc8:	9207      	str	r2, [sp, #28]
  404bca:	f898 2000 	ldrb.w	r2, [r8]
  404bce:	e561      	b.n	404694 <_vfiprintf_r+0xe4>
  404bd0:	f898 2000 	ldrb.w	r2, [r8]
  404bd4:	2001      	movs	r0, #1
  404bd6:	252b      	movs	r5, #43	; 0x2b
  404bd8:	e55c      	b.n	404694 <_vfiprintf_r+0xe4>
  404bda:	9907      	ldr	r1, [sp, #28]
  404bdc:	9608      	str	r6, [sp, #32]
  404bde:	f8d1 b000 	ldr.w	fp, [r1]
  404be2:	f04f 0200 	mov.w	r2, #0
  404be6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404bea:	1d0e      	adds	r6, r1, #4
  404bec:	f1bb 0f00 	cmp.w	fp, #0
  404bf0:	f000 82e5 	beq.w	4051be <_vfiprintf_r+0xc0e>
  404bf4:	1c67      	adds	r7, r4, #1
  404bf6:	f000 82c4 	beq.w	405182 <_vfiprintf_r+0xbd2>
  404bfa:	4622      	mov	r2, r4
  404bfc:	2100      	movs	r1, #0
  404bfe:	4658      	mov	r0, fp
  404c00:	9301      	str	r3, [sp, #4]
  404c02:	f001 f91d 	bl	405e40 <memchr>
  404c06:	9b01      	ldr	r3, [sp, #4]
  404c08:	2800      	cmp	r0, #0
  404c0a:	f000 82e5 	beq.w	4051d8 <_vfiprintf_r+0xc28>
  404c0e:	eba0 020b 	sub.w	r2, r0, fp
  404c12:	9205      	str	r2, [sp, #20]
  404c14:	9607      	str	r6, [sp, #28]
  404c16:	9302      	str	r3, [sp, #8]
  404c18:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404c1c:	2400      	movs	r4, #0
  404c1e:	e619      	b.n	404854 <_vfiprintf_r+0x2a4>
  404c20:	f898 2000 	ldrb.w	r2, [r8]
  404c24:	2a2a      	cmp	r2, #42	; 0x2a
  404c26:	f108 0701 	add.w	r7, r8, #1
  404c2a:	f000 82e9 	beq.w	405200 <_vfiprintf_r+0xc50>
  404c2e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404c32:	2909      	cmp	r1, #9
  404c34:	46b8      	mov	r8, r7
  404c36:	f04f 0400 	mov.w	r4, #0
  404c3a:	f63f ad2d 	bhi.w	404698 <_vfiprintf_r+0xe8>
  404c3e:	f818 2b01 	ldrb.w	r2, [r8], #1
  404c42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404c46:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404c4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404c4e:	2909      	cmp	r1, #9
  404c50:	d9f5      	bls.n	404c3e <_vfiprintf_r+0x68e>
  404c52:	e521      	b.n	404698 <_vfiprintf_r+0xe8>
  404c54:	f043 0320 	orr.w	r3, r3, #32
  404c58:	f898 2000 	ldrb.w	r2, [r8]
  404c5c:	e51a      	b.n	404694 <_vfiprintf_r+0xe4>
  404c5e:	9608      	str	r6, [sp, #32]
  404c60:	2800      	cmp	r0, #0
  404c62:	f040 82db 	bne.w	40521c <_vfiprintf_r+0xc6c>
  404c66:	2a00      	cmp	r2, #0
  404c68:	f000 80e7 	beq.w	404e3a <_vfiprintf_r+0x88a>
  404c6c:	2101      	movs	r1, #1
  404c6e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404c72:	f04f 0200 	mov.w	r2, #0
  404c76:	9101      	str	r1, [sp, #4]
  404c78:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404c7c:	9105      	str	r1, [sp, #20]
  404c7e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404c82:	e77b      	b.n	404b7c <_vfiprintf_r+0x5cc>
  404c84:	9a07      	ldr	r2, [sp, #28]
  404c86:	6813      	ldr	r3, [r2, #0]
  404c88:	3204      	adds	r2, #4
  404c8a:	9207      	str	r2, [sp, #28]
  404c8c:	9a03      	ldr	r2, [sp, #12]
  404c8e:	601a      	str	r2, [r3, #0]
  404c90:	e4cb      	b.n	40462a <_vfiprintf_r+0x7a>
  404c92:	aa0f      	add	r2, sp, #60	; 0x3c
  404c94:	9904      	ldr	r1, [sp, #16]
  404c96:	4620      	mov	r0, r4
  404c98:	f7ff fc4a 	bl	404530 <__sprint_r.part.0>
  404c9c:	2800      	cmp	r0, #0
  404c9e:	f040 8139 	bne.w	404f14 <_vfiprintf_r+0x964>
  404ca2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ca6:	f101 0c01 	add.w	ip, r1, #1
  404caa:	46ce      	mov	lr, r9
  404cac:	e5ff      	b.n	4048ae <_vfiprintf_r+0x2fe>
  404cae:	9910      	ldr	r1, [sp, #64]	; 0x40
  404cb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404cb2:	1c48      	adds	r0, r1, #1
  404cb4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404cb8:	2d00      	cmp	r5, #0
  404cba:	f43f ae22 	beq.w	404902 <_vfiprintf_r+0x352>
  404cbe:	3201      	adds	r2, #1
  404cc0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404cc4:	2101      	movs	r1, #1
  404cc6:	2807      	cmp	r0, #7
  404cc8:	9211      	str	r2, [sp, #68]	; 0x44
  404cca:	9010      	str	r0, [sp, #64]	; 0x40
  404ccc:	f8ca 5000 	str.w	r5, [sl]
  404cd0:	f8ca 1004 	str.w	r1, [sl, #4]
  404cd4:	f340 8108 	ble.w	404ee8 <_vfiprintf_r+0x938>
  404cd8:	2a00      	cmp	r2, #0
  404cda:	f040 81bc 	bne.w	405056 <_vfiprintf_r+0xaa6>
  404cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ce0:	2b00      	cmp	r3, #0
  404ce2:	f43f ae1f 	beq.w	404924 <_vfiprintf_r+0x374>
  404ce6:	ab0e      	add	r3, sp, #56	; 0x38
  404ce8:	2202      	movs	r2, #2
  404cea:	4608      	mov	r0, r1
  404cec:	931c      	str	r3, [sp, #112]	; 0x70
  404cee:	921d      	str	r2, [sp, #116]	; 0x74
  404cf0:	46ca      	mov	sl, r9
  404cf2:	4601      	mov	r1, r0
  404cf4:	f10a 0a08 	add.w	sl, sl, #8
  404cf8:	3001      	adds	r0, #1
  404cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cfc:	2b80      	cmp	r3, #128	; 0x80
  404cfe:	f43f ae19 	beq.w	404934 <_vfiprintf_r+0x384>
  404d02:	9b05      	ldr	r3, [sp, #20]
  404d04:	1ae4      	subs	r4, r4, r3
  404d06:	2c00      	cmp	r4, #0
  404d08:	dd2e      	ble.n	404d68 <_vfiprintf_r+0x7b8>
  404d0a:	2c10      	cmp	r4, #16
  404d0c:	4db3      	ldr	r5, [pc, #716]	; (404fdc <_vfiprintf_r+0xa2c>)
  404d0e:	dd1e      	ble.n	404d4e <_vfiprintf_r+0x79e>
  404d10:	46d6      	mov	lr, sl
  404d12:	2610      	movs	r6, #16
  404d14:	9f06      	ldr	r7, [sp, #24]
  404d16:	f8dd a010 	ldr.w	sl, [sp, #16]
  404d1a:	e006      	b.n	404d2a <_vfiprintf_r+0x77a>
  404d1c:	1c88      	adds	r0, r1, #2
  404d1e:	f10e 0e08 	add.w	lr, lr, #8
  404d22:	4619      	mov	r1, r3
  404d24:	3c10      	subs	r4, #16
  404d26:	2c10      	cmp	r4, #16
  404d28:	dd10      	ble.n	404d4c <_vfiprintf_r+0x79c>
  404d2a:	1c4b      	adds	r3, r1, #1
  404d2c:	3210      	adds	r2, #16
  404d2e:	2b07      	cmp	r3, #7
  404d30:	9211      	str	r2, [sp, #68]	; 0x44
  404d32:	e88e 0060 	stmia.w	lr, {r5, r6}
  404d36:	9310      	str	r3, [sp, #64]	; 0x40
  404d38:	ddf0      	ble.n	404d1c <_vfiprintf_r+0x76c>
  404d3a:	2a00      	cmp	r2, #0
  404d3c:	d165      	bne.n	404e0a <_vfiprintf_r+0x85a>
  404d3e:	3c10      	subs	r4, #16
  404d40:	2c10      	cmp	r4, #16
  404d42:	f04f 0001 	mov.w	r0, #1
  404d46:	4611      	mov	r1, r2
  404d48:	46ce      	mov	lr, r9
  404d4a:	dcee      	bgt.n	404d2a <_vfiprintf_r+0x77a>
  404d4c:	46f2      	mov	sl, lr
  404d4e:	4422      	add	r2, r4
  404d50:	2807      	cmp	r0, #7
  404d52:	9211      	str	r2, [sp, #68]	; 0x44
  404d54:	f8ca 5000 	str.w	r5, [sl]
  404d58:	f8ca 4004 	str.w	r4, [sl, #4]
  404d5c:	9010      	str	r0, [sp, #64]	; 0x40
  404d5e:	f300 8085 	bgt.w	404e6c <_vfiprintf_r+0x8bc>
  404d62:	f10a 0a08 	add.w	sl, sl, #8
  404d66:	3001      	adds	r0, #1
  404d68:	9905      	ldr	r1, [sp, #20]
  404d6a:	f8ca b000 	str.w	fp, [sl]
  404d6e:	440a      	add	r2, r1
  404d70:	2807      	cmp	r0, #7
  404d72:	9211      	str	r2, [sp, #68]	; 0x44
  404d74:	f8ca 1004 	str.w	r1, [sl, #4]
  404d78:	9010      	str	r0, [sp, #64]	; 0x40
  404d7a:	f340 8082 	ble.w	404e82 <_vfiprintf_r+0x8d2>
  404d7e:	2a00      	cmp	r2, #0
  404d80:	f040 8118 	bne.w	404fb4 <_vfiprintf_r+0xa04>
  404d84:	9b02      	ldr	r3, [sp, #8]
  404d86:	9210      	str	r2, [sp, #64]	; 0x40
  404d88:	0758      	lsls	r0, r3, #29
  404d8a:	d535      	bpl.n	404df8 <_vfiprintf_r+0x848>
  404d8c:	9b08      	ldr	r3, [sp, #32]
  404d8e:	9901      	ldr	r1, [sp, #4]
  404d90:	1a5c      	subs	r4, r3, r1
  404d92:	2c00      	cmp	r4, #0
  404d94:	f340 80e7 	ble.w	404f66 <_vfiprintf_r+0x9b6>
  404d98:	46ca      	mov	sl, r9
  404d9a:	2c10      	cmp	r4, #16
  404d9c:	f340 8218 	ble.w	4051d0 <_vfiprintf_r+0xc20>
  404da0:	9910      	ldr	r1, [sp, #64]	; 0x40
  404da2:	4e8f      	ldr	r6, [pc, #572]	; (404fe0 <_vfiprintf_r+0xa30>)
  404da4:	9f06      	ldr	r7, [sp, #24]
  404da6:	f8dd b010 	ldr.w	fp, [sp, #16]
  404daa:	2510      	movs	r5, #16
  404dac:	e006      	b.n	404dbc <_vfiprintf_r+0x80c>
  404dae:	1c88      	adds	r0, r1, #2
  404db0:	f10a 0a08 	add.w	sl, sl, #8
  404db4:	4619      	mov	r1, r3
  404db6:	3c10      	subs	r4, #16
  404db8:	2c10      	cmp	r4, #16
  404dba:	dd11      	ble.n	404de0 <_vfiprintf_r+0x830>
  404dbc:	1c4b      	adds	r3, r1, #1
  404dbe:	3210      	adds	r2, #16
  404dc0:	2b07      	cmp	r3, #7
  404dc2:	9211      	str	r2, [sp, #68]	; 0x44
  404dc4:	f8ca 6000 	str.w	r6, [sl]
  404dc8:	f8ca 5004 	str.w	r5, [sl, #4]
  404dcc:	9310      	str	r3, [sp, #64]	; 0x40
  404dce:	ddee      	ble.n	404dae <_vfiprintf_r+0x7fe>
  404dd0:	bb42      	cbnz	r2, 404e24 <_vfiprintf_r+0x874>
  404dd2:	3c10      	subs	r4, #16
  404dd4:	2c10      	cmp	r4, #16
  404dd6:	f04f 0001 	mov.w	r0, #1
  404dda:	4611      	mov	r1, r2
  404ddc:	46ca      	mov	sl, r9
  404dde:	dced      	bgt.n	404dbc <_vfiprintf_r+0x80c>
  404de0:	4422      	add	r2, r4
  404de2:	2807      	cmp	r0, #7
  404de4:	9211      	str	r2, [sp, #68]	; 0x44
  404de6:	f8ca 6000 	str.w	r6, [sl]
  404dea:	f8ca 4004 	str.w	r4, [sl, #4]
  404dee:	9010      	str	r0, [sp, #64]	; 0x40
  404df0:	dd51      	ble.n	404e96 <_vfiprintf_r+0x8e6>
  404df2:	2a00      	cmp	r2, #0
  404df4:	f040 819b 	bne.w	40512e <_vfiprintf_r+0xb7e>
  404df8:	9b03      	ldr	r3, [sp, #12]
  404dfa:	9a08      	ldr	r2, [sp, #32]
  404dfc:	9901      	ldr	r1, [sp, #4]
  404dfe:	428a      	cmp	r2, r1
  404e00:	bfac      	ite	ge
  404e02:	189b      	addge	r3, r3, r2
  404e04:	185b      	addlt	r3, r3, r1
  404e06:	9303      	str	r3, [sp, #12]
  404e08:	e04e      	b.n	404ea8 <_vfiprintf_r+0x8f8>
  404e0a:	aa0f      	add	r2, sp, #60	; 0x3c
  404e0c:	4651      	mov	r1, sl
  404e0e:	4638      	mov	r0, r7
  404e10:	f7ff fb8e 	bl	404530 <__sprint_r.part.0>
  404e14:	2800      	cmp	r0, #0
  404e16:	f040 813f 	bne.w	405098 <_vfiprintf_r+0xae8>
  404e1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e1e:	1c48      	adds	r0, r1, #1
  404e20:	46ce      	mov	lr, r9
  404e22:	e77f      	b.n	404d24 <_vfiprintf_r+0x774>
  404e24:	aa0f      	add	r2, sp, #60	; 0x3c
  404e26:	4659      	mov	r1, fp
  404e28:	4638      	mov	r0, r7
  404e2a:	f7ff fb81 	bl	404530 <__sprint_r.part.0>
  404e2e:	b960      	cbnz	r0, 404e4a <_vfiprintf_r+0x89a>
  404e30:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e34:	1c48      	adds	r0, r1, #1
  404e36:	46ca      	mov	sl, r9
  404e38:	e7bd      	b.n	404db6 <_vfiprintf_r+0x806>
  404e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404e3c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e40:	2b00      	cmp	r3, #0
  404e42:	f040 81d4 	bne.w	4051ee <_vfiprintf_r+0xc3e>
  404e46:	2300      	movs	r3, #0
  404e48:	9310      	str	r3, [sp, #64]	; 0x40
  404e4a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e4e:	f013 0f01 	tst.w	r3, #1
  404e52:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e56:	d102      	bne.n	404e5e <_vfiprintf_r+0x8ae>
  404e58:	059a      	lsls	r2, r3, #22
  404e5a:	f140 80de 	bpl.w	40501a <_vfiprintf_r+0xa6a>
  404e5e:	065b      	lsls	r3, r3, #25
  404e60:	f53f acb2 	bmi.w	4047c8 <_vfiprintf_r+0x218>
  404e64:	9803      	ldr	r0, [sp, #12]
  404e66:	b02d      	add	sp, #180	; 0xb4
  404e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e6c:	2a00      	cmp	r2, #0
  404e6e:	f040 8106 	bne.w	40507e <_vfiprintf_r+0xace>
  404e72:	9a05      	ldr	r2, [sp, #20]
  404e74:	921d      	str	r2, [sp, #116]	; 0x74
  404e76:	2301      	movs	r3, #1
  404e78:	9211      	str	r2, [sp, #68]	; 0x44
  404e7a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404e7e:	9310      	str	r3, [sp, #64]	; 0x40
  404e80:	46ca      	mov	sl, r9
  404e82:	f10a 0a08 	add.w	sl, sl, #8
  404e86:	9b02      	ldr	r3, [sp, #8]
  404e88:	0759      	lsls	r1, r3, #29
  404e8a:	d504      	bpl.n	404e96 <_vfiprintf_r+0x8e6>
  404e8c:	9b08      	ldr	r3, [sp, #32]
  404e8e:	9901      	ldr	r1, [sp, #4]
  404e90:	1a5c      	subs	r4, r3, r1
  404e92:	2c00      	cmp	r4, #0
  404e94:	dc81      	bgt.n	404d9a <_vfiprintf_r+0x7ea>
  404e96:	9b03      	ldr	r3, [sp, #12]
  404e98:	9908      	ldr	r1, [sp, #32]
  404e9a:	9801      	ldr	r0, [sp, #4]
  404e9c:	4281      	cmp	r1, r0
  404e9e:	bfac      	ite	ge
  404ea0:	185b      	addge	r3, r3, r1
  404ea2:	181b      	addlt	r3, r3, r0
  404ea4:	9303      	str	r3, [sp, #12]
  404ea6:	bb72      	cbnz	r2, 404f06 <_vfiprintf_r+0x956>
  404ea8:	2300      	movs	r3, #0
  404eaa:	9310      	str	r3, [sp, #64]	; 0x40
  404eac:	46ca      	mov	sl, r9
  404eae:	f7ff bbbc 	b.w	40462a <_vfiprintf_r+0x7a>
  404eb2:	aa0f      	add	r2, sp, #60	; 0x3c
  404eb4:	9904      	ldr	r1, [sp, #16]
  404eb6:	4620      	mov	r0, r4
  404eb8:	f7ff fb3a 	bl	404530 <__sprint_r.part.0>
  404ebc:	bb50      	cbnz	r0, 404f14 <_vfiprintf_r+0x964>
  404ebe:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ec2:	f101 0e01 	add.w	lr, r1, #1
  404ec6:	46cc      	mov	ip, r9
  404ec8:	e548      	b.n	40495c <_vfiprintf_r+0x3ac>
  404eca:	2a00      	cmp	r2, #0
  404ecc:	f040 8140 	bne.w	405150 <_vfiprintf_r+0xba0>
  404ed0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404ed4:	2900      	cmp	r1, #0
  404ed6:	f000 811b 	beq.w	405110 <_vfiprintf_r+0xb60>
  404eda:	2201      	movs	r2, #1
  404edc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404ee0:	4610      	mov	r0, r2
  404ee2:	921d      	str	r2, [sp, #116]	; 0x74
  404ee4:	911c      	str	r1, [sp, #112]	; 0x70
  404ee6:	46ca      	mov	sl, r9
  404ee8:	4601      	mov	r1, r0
  404eea:	f10a 0a08 	add.w	sl, sl, #8
  404eee:	3001      	adds	r0, #1
  404ef0:	e507      	b.n	404902 <_vfiprintf_r+0x352>
  404ef2:	9b02      	ldr	r3, [sp, #8]
  404ef4:	2a01      	cmp	r2, #1
  404ef6:	f000 8098 	beq.w	40502a <_vfiprintf_r+0xa7a>
  404efa:	2a02      	cmp	r2, #2
  404efc:	d10d      	bne.n	404f1a <_vfiprintf_r+0x96a>
  404efe:	9302      	str	r3, [sp, #8]
  404f00:	2600      	movs	r6, #0
  404f02:	2700      	movs	r7, #0
  404f04:	e5b0      	b.n	404a68 <_vfiprintf_r+0x4b8>
  404f06:	aa0f      	add	r2, sp, #60	; 0x3c
  404f08:	9904      	ldr	r1, [sp, #16]
  404f0a:	9806      	ldr	r0, [sp, #24]
  404f0c:	f7ff fb10 	bl	404530 <__sprint_r.part.0>
  404f10:	2800      	cmp	r0, #0
  404f12:	d0c9      	beq.n	404ea8 <_vfiprintf_r+0x8f8>
  404f14:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f18:	e797      	b.n	404e4a <_vfiprintf_r+0x89a>
  404f1a:	9302      	str	r3, [sp, #8]
  404f1c:	2600      	movs	r6, #0
  404f1e:	2700      	movs	r7, #0
  404f20:	4649      	mov	r1, r9
  404f22:	e000      	b.n	404f26 <_vfiprintf_r+0x976>
  404f24:	4659      	mov	r1, fp
  404f26:	08f2      	lsrs	r2, r6, #3
  404f28:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404f2c:	08f8      	lsrs	r0, r7, #3
  404f2e:	f006 0307 	and.w	r3, r6, #7
  404f32:	4607      	mov	r7, r0
  404f34:	4616      	mov	r6, r2
  404f36:	3330      	adds	r3, #48	; 0x30
  404f38:	ea56 0207 	orrs.w	r2, r6, r7
  404f3c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404f40:	f101 3bff 	add.w	fp, r1, #4294967295
  404f44:	d1ee      	bne.n	404f24 <_vfiprintf_r+0x974>
  404f46:	9a02      	ldr	r2, [sp, #8]
  404f48:	07d6      	lsls	r6, r2, #31
  404f4a:	f57f ad9d 	bpl.w	404a88 <_vfiprintf_r+0x4d8>
  404f4e:	2b30      	cmp	r3, #48	; 0x30
  404f50:	f43f ad9a 	beq.w	404a88 <_vfiprintf_r+0x4d8>
  404f54:	3902      	subs	r1, #2
  404f56:	2330      	movs	r3, #48	; 0x30
  404f58:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404f5c:	eba9 0301 	sub.w	r3, r9, r1
  404f60:	9305      	str	r3, [sp, #20]
  404f62:	468b      	mov	fp, r1
  404f64:	e476      	b.n	404854 <_vfiprintf_r+0x2a4>
  404f66:	9b03      	ldr	r3, [sp, #12]
  404f68:	9a08      	ldr	r2, [sp, #32]
  404f6a:	428a      	cmp	r2, r1
  404f6c:	bfac      	ite	ge
  404f6e:	189b      	addge	r3, r3, r2
  404f70:	185b      	addlt	r3, r3, r1
  404f72:	9303      	str	r3, [sp, #12]
  404f74:	e798      	b.n	404ea8 <_vfiprintf_r+0x8f8>
  404f76:	2202      	movs	r2, #2
  404f78:	e44d      	b.n	404816 <_vfiprintf_r+0x266>
  404f7a:	2f00      	cmp	r7, #0
  404f7c:	bf08      	it	eq
  404f7e:	2e0a      	cmpeq	r6, #10
  404f80:	d352      	bcc.n	405028 <_vfiprintf_r+0xa78>
  404f82:	46cb      	mov	fp, r9
  404f84:	4630      	mov	r0, r6
  404f86:	4639      	mov	r1, r7
  404f88:	220a      	movs	r2, #10
  404f8a:	2300      	movs	r3, #0
  404f8c:	f001 fc34 	bl	4067f8 <__aeabi_uldivmod>
  404f90:	3230      	adds	r2, #48	; 0x30
  404f92:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404f96:	4630      	mov	r0, r6
  404f98:	4639      	mov	r1, r7
  404f9a:	2300      	movs	r3, #0
  404f9c:	220a      	movs	r2, #10
  404f9e:	f001 fc2b 	bl	4067f8 <__aeabi_uldivmod>
  404fa2:	4606      	mov	r6, r0
  404fa4:	460f      	mov	r7, r1
  404fa6:	ea56 0307 	orrs.w	r3, r6, r7
  404faa:	d1eb      	bne.n	404f84 <_vfiprintf_r+0x9d4>
  404fac:	e56c      	b.n	404a88 <_vfiprintf_r+0x4d8>
  404fae:	9405      	str	r4, [sp, #20]
  404fb0:	46cb      	mov	fp, r9
  404fb2:	e44f      	b.n	404854 <_vfiprintf_r+0x2a4>
  404fb4:	aa0f      	add	r2, sp, #60	; 0x3c
  404fb6:	9904      	ldr	r1, [sp, #16]
  404fb8:	9806      	ldr	r0, [sp, #24]
  404fba:	f7ff fab9 	bl	404530 <__sprint_r.part.0>
  404fbe:	2800      	cmp	r0, #0
  404fc0:	d1a8      	bne.n	404f14 <_vfiprintf_r+0x964>
  404fc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fc4:	46ca      	mov	sl, r9
  404fc6:	e75e      	b.n	404e86 <_vfiprintf_r+0x8d6>
  404fc8:	aa0f      	add	r2, sp, #60	; 0x3c
  404fca:	9904      	ldr	r1, [sp, #16]
  404fcc:	9806      	ldr	r0, [sp, #24]
  404fce:	f7ff faaf 	bl	404530 <__sprint_r.part.0>
  404fd2:	2800      	cmp	r0, #0
  404fd4:	d19e      	bne.n	404f14 <_vfiprintf_r+0x964>
  404fd6:	46ca      	mov	sl, r9
  404fd8:	f7ff bbc0 	b.w	40475c <_vfiprintf_r+0x1ac>
  404fdc:	00406c28 	.word	0x00406c28
  404fe0:	00406c18 	.word	0x00406c18
  404fe4:	3104      	adds	r1, #4
  404fe6:	6816      	ldr	r6, [r2, #0]
  404fe8:	9107      	str	r1, [sp, #28]
  404fea:	2201      	movs	r2, #1
  404fec:	2700      	movs	r7, #0
  404fee:	e412      	b.n	404816 <_vfiprintf_r+0x266>
  404ff0:	9807      	ldr	r0, [sp, #28]
  404ff2:	4601      	mov	r1, r0
  404ff4:	3104      	adds	r1, #4
  404ff6:	6806      	ldr	r6, [r0, #0]
  404ff8:	9107      	str	r1, [sp, #28]
  404ffa:	2700      	movs	r7, #0
  404ffc:	e40b      	b.n	404816 <_vfiprintf_r+0x266>
  404ffe:	680e      	ldr	r6, [r1, #0]
  405000:	3104      	adds	r1, #4
  405002:	9107      	str	r1, [sp, #28]
  405004:	2700      	movs	r7, #0
  405006:	e591      	b.n	404b2c <_vfiprintf_r+0x57c>
  405008:	9907      	ldr	r1, [sp, #28]
  40500a:	680e      	ldr	r6, [r1, #0]
  40500c:	460a      	mov	r2, r1
  40500e:	17f7      	asrs	r7, r6, #31
  405010:	3204      	adds	r2, #4
  405012:	9207      	str	r2, [sp, #28]
  405014:	4630      	mov	r0, r6
  405016:	4639      	mov	r1, r7
  405018:	e50f      	b.n	404a3a <_vfiprintf_r+0x48a>
  40501a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40501e:	f000 fe7f 	bl	405d20 <__retarget_lock_release_recursive>
  405022:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405026:	e71a      	b.n	404e5e <_vfiprintf_r+0x8ae>
  405028:	9b02      	ldr	r3, [sp, #8]
  40502a:	9302      	str	r3, [sp, #8]
  40502c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405030:	3630      	adds	r6, #48	; 0x30
  405032:	2301      	movs	r3, #1
  405034:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405038:	9305      	str	r3, [sp, #20]
  40503a:	e40b      	b.n	404854 <_vfiprintf_r+0x2a4>
  40503c:	aa0f      	add	r2, sp, #60	; 0x3c
  40503e:	9904      	ldr	r1, [sp, #16]
  405040:	9806      	ldr	r0, [sp, #24]
  405042:	f7ff fa75 	bl	404530 <__sprint_r.part.0>
  405046:	2800      	cmp	r0, #0
  405048:	f47f af64 	bne.w	404f14 <_vfiprintf_r+0x964>
  40504c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40504e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405050:	1c48      	adds	r0, r1, #1
  405052:	46ca      	mov	sl, r9
  405054:	e651      	b.n	404cfa <_vfiprintf_r+0x74a>
  405056:	aa0f      	add	r2, sp, #60	; 0x3c
  405058:	9904      	ldr	r1, [sp, #16]
  40505a:	9806      	ldr	r0, [sp, #24]
  40505c:	f7ff fa68 	bl	404530 <__sprint_r.part.0>
  405060:	2800      	cmp	r0, #0
  405062:	f47f af57 	bne.w	404f14 <_vfiprintf_r+0x964>
  405066:	9910      	ldr	r1, [sp, #64]	; 0x40
  405068:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40506a:	1c48      	adds	r0, r1, #1
  40506c:	46ca      	mov	sl, r9
  40506e:	e448      	b.n	404902 <_vfiprintf_r+0x352>
  405070:	2a00      	cmp	r2, #0
  405072:	f040 8091 	bne.w	405198 <_vfiprintf_r+0xbe8>
  405076:	2001      	movs	r0, #1
  405078:	4611      	mov	r1, r2
  40507a:	46ca      	mov	sl, r9
  40507c:	e641      	b.n	404d02 <_vfiprintf_r+0x752>
  40507e:	aa0f      	add	r2, sp, #60	; 0x3c
  405080:	9904      	ldr	r1, [sp, #16]
  405082:	9806      	ldr	r0, [sp, #24]
  405084:	f7ff fa54 	bl	404530 <__sprint_r.part.0>
  405088:	2800      	cmp	r0, #0
  40508a:	f47f af43 	bne.w	404f14 <_vfiprintf_r+0x964>
  40508e:	9810      	ldr	r0, [sp, #64]	; 0x40
  405090:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405092:	3001      	adds	r0, #1
  405094:	46ca      	mov	sl, r9
  405096:	e667      	b.n	404d68 <_vfiprintf_r+0x7b8>
  405098:	46d3      	mov	fp, sl
  40509a:	e6d6      	b.n	404e4a <_vfiprintf_r+0x89a>
  40509c:	9e07      	ldr	r6, [sp, #28]
  40509e:	3607      	adds	r6, #7
  4050a0:	f026 0207 	bic.w	r2, r6, #7
  4050a4:	f102 0108 	add.w	r1, r2, #8
  4050a8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4050ac:	9107      	str	r1, [sp, #28]
  4050ae:	2201      	movs	r2, #1
  4050b0:	f7ff bbb1 	b.w	404816 <_vfiprintf_r+0x266>
  4050b4:	9e07      	ldr	r6, [sp, #28]
  4050b6:	3607      	adds	r6, #7
  4050b8:	f026 0607 	bic.w	r6, r6, #7
  4050bc:	e9d6 0100 	ldrd	r0, r1, [r6]
  4050c0:	f106 0208 	add.w	r2, r6, #8
  4050c4:	9207      	str	r2, [sp, #28]
  4050c6:	4606      	mov	r6, r0
  4050c8:	460f      	mov	r7, r1
  4050ca:	e4b6      	b.n	404a3a <_vfiprintf_r+0x48a>
  4050cc:	9e07      	ldr	r6, [sp, #28]
  4050ce:	3607      	adds	r6, #7
  4050d0:	f026 0207 	bic.w	r2, r6, #7
  4050d4:	f102 0108 	add.w	r1, r2, #8
  4050d8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4050dc:	9107      	str	r1, [sp, #28]
  4050de:	2200      	movs	r2, #0
  4050e0:	f7ff bb99 	b.w	404816 <_vfiprintf_r+0x266>
  4050e4:	9e07      	ldr	r6, [sp, #28]
  4050e6:	3607      	adds	r6, #7
  4050e8:	f026 0107 	bic.w	r1, r6, #7
  4050ec:	f101 0008 	add.w	r0, r1, #8
  4050f0:	9007      	str	r0, [sp, #28]
  4050f2:	e9d1 6700 	ldrd	r6, r7, [r1]
  4050f6:	e519      	b.n	404b2c <_vfiprintf_r+0x57c>
  4050f8:	46cb      	mov	fp, r9
  4050fa:	f7ff bbab 	b.w	404854 <_vfiprintf_r+0x2a4>
  4050fe:	252d      	movs	r5, #45	; 0x2d
  405100:	4276      	negs	r6, r6
  405102:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405106:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40510a:	2201      	movs	r2, #1
  40510c:	f7ff bb88 	b.w	404820 <_vfiprintf_r+0x270>
  405110:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405112:	b9b3      	cbnz	r3, 405142 <_vfiprintf_r+0xb92>
  405114:	4611      	mov	r1, r2
  405116:	2001      	movs	r0, #1
  405118:	46ca      	mov	sl, r9
  40511a:	e5f2      	b.n	404d02 <_vfiprintf_r+0x752>
  40511c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405120:	f000 fdfe 	bl	405d20 <__retarget_lock_release_recursive>
  405124:	f04f 33ff 	mov.w	r3, #4294967295
  405128:	9303      	str	r3, [sp, #12]
  40512a:	f7ff bb50 	b.w	4047ce <_vfiprintf_r+0x21e>
  40512e:	aa0f      	add	r2, sp, #60	; 0x3c
  405130:	9904      	ldr	r1, [sp, #16]
  405132:	9806      	ldr	r0, [sp, #24]
  405134:	f7ff f9fc 	bl	404530 <__sprint_r.part.0>
  405138:	2800      	cmp	r0, #0
  40513a:	f47f aeeb 	bne.w	404f14 <_vfiprintf_r+0x964>
  40513e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405140:	e6a9      	b.n	404e96 <_vfiprintf_r+0x8e6>
  405142:	ab0e      	add	r3, sp, #56	; 0x38
  405144:	2202      	movs	r2, #2
  405146:	931c      	str	r3, [sp, #112]	; 0x70
  405148:	921d      	str	r2, [sp, #116]	; 0x74
  40514a:	2001      	movs	r0, #1
  40514c:	46ca      	mov	sl, r9
  40514e:	e5d0      	b.n	404cf2 <_vfiprintf_r+0x742>
  405150:	aa0f      	add	r2, sp, #60	; 0x3c
  405152:	9904      	ldr	r1, [sp, #16]
  405154:	9806      	ldr	r0, [sp, #24]
  405156:	f7ff f9eb 	bl	404530 <__sprint_r.part.0>
  40515a:	2800      	cmp	r0, #0
  40515c:	f47f aeda 	bne.w	404f14 <_vfiprintf_r+0x964>
  405160:	9910      	ldr	r1, [sp, #64]	; 0x40
  405162:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405164:	1c48      	adds	r0, r1, #1
  405166:	46ca      	mov	sl, r9
  405168:	e5a4      	b.n	404cb4 <_vfiprintf_r+0x704>
  40516a:	9a07      	ldr	r2, [sp, #28]
  40516c:	9903      	ldr	r1, [sp, #12]
  40516e:	6813      	ldr	r3, [r2, #0]
  405170:	17cd      	asrs	r5, r1, #31
  405172:	4608      	mov	r0, r1
  405174:	3204      	adds	r2, #4
  405176:	4629      	mov	r1, r5
  405178:	9207      	str	r2, [sp, #28]
  40517a:	e9c3 0100 	strd	r0, r1, [r3]
  40517e:	f7ff ba54 	b.w	40462a <_vfiprintf_r+0x7a>
  405182:	4658      	mov	r0, fp
  405184:	9607      	str	r6, [sp, #28]
  405186:	9302      	str	r3, [sp, #8]
  405188:	f001 f8fa 	bl	406380 <strlen>
  40518c:	2400      	movs	r4, #0
  40518e:	9005      	str	r0, [sp, #20]
  405190:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405194:	f7ff bb5e 	b.w	404854 <_vfiprintf_r+0x2a4>
  405198:	aa0f      	add	r2, sp, #60	; 0x3c
  40519a:	9904      	ldr	r1, [sp, #16]
  40519c:	9806      	ldr	r0, [sp, #24]
  40519e:	f7ff f9c7 	bl	404530 <__sprint_r.part.0>
  4051a2:	2800      	cmp	r0, #0
  4051a4:	f47f aeb6 	bne.w	404f14 <_vfiprintf_r+0x964>
  4051a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051ac:	1c48      	adds	r0, r1, #1
  4051ae:	46ca      	mov	sl, r9
  4051b0:	e5a7      	b.n	404d02 <_vfiprintf_r+0x752>
  4051b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051b6:	4e20      	ldr	r6, [pc, #128]	; (405238 <_vfiprintf_r+0xc88>)
  4051b8:	3101      	adds	r1, #1
  4051ba:	f7ff bb90 	b.w	4048de <_vfiprintf_r+0x32e>
  4051be:	2c06      	cmp	r4, #6
  4051c0:	bf28      	it	cs
  4051c2:	2406      	movcs	r4, #6
  4051c4:	9405      	str	r4, [sp, #20]
  4051c6:	9607      	str	r6, [sp, #28]
  4051c8:	9401      	str	r4, [sp, #4]
  4051ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 40523c <_vfiprintf_r+0xc8c>
  4051ce:	e4d5      	b.n	404b7c <_vfiprintf_r+0x5cc>
  4051d0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4051d2:	4e19      	ldr	r6, [pc, #100]	; (405238 <_vfiprintf_r+0xc88>)
  4051d4:	3001      	adds	r0, #1
  4051d6:	e603      	b.n	404de0 <_vfiprintf_r+0x830>
  4051d8:	9405      	str	r4, [sp, #20]
  4051da:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4051de:	9607      	str	r6, [sp, #28]
  4051e0:	9302      	str	r3, [sp, #8]
  4051e2:	4604      	mov	r4, r0
  4051e4:	f7ff bb36 	b.w	404854 <_vfiprintf_r+0x2a4>
  4051e8:	4686      	mov	lr, r0
  4051ea:	f7ff bbce 	b.w	40498a <_vfiprintf_r+0x3da>
  4051ee:	9806      	ldr	r0, [sp, #24]
  4051f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4051f2:	4659      	mov	r1, fp
  4051f4:	f7ff f99c 	bl	404530 <__sprint_r.part.0>
  4051f8:	2800      	cmp	r0, #0
  4051fa:	f43f ae24 	beq.w	404e46 <_vfiprintf_r+0x896>
  4051fe:	e624      	b.n	404e4a <_vfiprintf_r+0x89a>
  405200:	9907      	ldr	r1, [sp, #28]
  405202:	f898 2001 	ldrb.w	r2, [r8, #1]
  405206:	680c      	ldr	r4, [r1, #0]
  405208:	3104      	adds	r1, #4
  40520a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40520e:	46b8      	mov	r8, r7
  405210:	9107      	str	r1, [sp, #28]
  405212:	f7ff ba3f 	b.w	404694 <_vfiprintf_r+0xe4>
  405216:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40521a:	e43c      	b.n	404a96 <_vfiprintf_r+0x4e6>
  40521c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405220:	e521      	b.n	404c66 <_vfiprintf_r+0x6b6>
  405222:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405226:	f7ff bbf4 	b.w	404a12 <_vfiprintf_r+0x462>
  40522a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40522e:	e491      	b.n	404b54 <_vfiprintf_r+0x5a4>
  405230:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405234:	e469      	b.n	404b0a <_vfiprintf_r+0x55a>
  405236:	bf00      	nop
  405238:	00406c18 	.word	0x00406c18
  40523c:	00406c10 	.word	0x00406c10

00405240 <__sbprintf>:
  405240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405244:	460c      	mov	r4, r1
  405246:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40524a:	8989      	ldrh	r1, [r1, #12]
  40524c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40524e:	89e5      	ldrh	r5, [r4, #14]
  405250:	9619      	str	r6, [sp, #100]	; 0x64
  405252:	f021 0102 	bic.w	r1, r1, #2
  405256:	4606      	mov	r6, r0
  405258:	69e0      	ldr	r0, [r4, #28]
  40525a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40525e:	4617      	mov	r7, r2
  405260:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405264:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405266:	f8ad 500e 	strh.w	r5, [sp, #14]
  40526a:	4698      	mov	r8, r3
  40526c:	ad1a      	add	r5, sp, #104	; 0x68
  40526e:	2300      	movs	r3, #0
  405270:	9007      	str	r0, [sp, #28]
  405272:	a816      	add	r0, sp, #88	; 0x58
  405274:	9209      	str	r2, [sp, #36]	; 0x24
  405276:	9306      	str	r3, [sp, #24]
  405278:	9500      	str	r5, [sp, #0]
  40527a:	9504      	str	r5, [sp, #16]
  40527c:	9102      	str	r1, [sp, #8]
  40527e:	9105      	str	r1, [sp, #20]
  405280:	f000 fd48 	bl	405d14 <__retarget_lock_init_recursive>
  405284:	4643      	mov	r3, r8
  405286:	463a      	mov	r2, r7
  405288:	4669      	mov	r1, sp
  40528a:	4630      	mov	r0, r6
  40528c:	f7ff f990 	bl	4045b0 <_vfiprintf_r>
  405290:	1e05      	subs	r5, r0, #0
  405292:	db07      	blt.n	4052a4 <__sbprintf+0x64>
  405294:	4630      	mov	r0, r6
  405296:	4669      	mov	r1, sp
  405298:	f000 f928 	bl	4054ec <_fflush_r>
  40529c:	2800      	cmp	r0, #0
  40529e:	bf18      	it	ne
  4052a0:	f04f 35ff 	movne.w	r5, #4294967295
  4052a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4052a8:	065b      	lsls	r3, r3, #25
  4052aa:	d503      	bpl.n	4052b4 <__sbprintf+0x74>
  4052ac:	89a3      	ldrh	r3, [r4, #12]
  4052ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052b2:	81a3      	strh	r3, [r4, #12]
  4052b4:	9816      	ldr	r0, [sp, #88]	; 0x58
  4052b6:	f000 fd2f 	bl	405d18 <__retarget_lock_close_recursive>
  4052ba:	4628      	mov	r0, r5
  4052bc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4052c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004052c4 <__swsetup_r>:
  4052c4:	b538      	push	{r3, r4, r5, lr}
  4052c6:	4b30      	ldr	r3, [pc, #192]	; (405388 <__swsetup_r+0xc4>)
  4052c8:	681b      	ldr	r3, [r3, #0]
  4052ca:	4605      	mov	r5, r0
  4052cc:	460c      	mov	r4, r1
  4052ce:	b113      	cbz	r3, 4052d6 <__swsetup_r+0x12>
  4052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4052d2:	2a00      	cmp	r2, #0
  4052d4:	d038      	beq.n	405348 <__swsetup_r+0x84>
  4052d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4052da:	b293      	uxth	r3, r2
  4052dc:	0718      	lsls	r0, r3, #28
  4052de:	d50c      	bpl.n	4052fa <__swsetup_r+0x36>
  4052e0:	6920      	ldr	r0, [r4, #16]
  4052e2:	b1a8      	cbz	r0, 405310 <__swsetup_r+0x4c>
  4052e4:	f013 0201 	ands.w	r2, r3, #1
  4052e8:	d01e      	beq.n	405328 <__swsetup_r+0x64>
  4052ea:	6963      	ldr	r3, [r4, #20]
  4052ec:	2200      	movs	r2, #0
  4052ee:	425b      	negs	r3, r3
  4052f0:	61a3      	str	r3, [r4, #24]
  4052f2:	60a2      	str	r2, [r4, #8]
  4052f4:	b1f0      	cbz	r0, 405334 <__swsetup_r+0x70>
  4052f6:	2000      	movs	r0, #0
  4052f8:	bd38      	pop	{r3, r4, r5, pc}
  4052fa:	06d9      	lsls	r1, r3, #27
  4052fc:	d53c      	bpl.n	405378 <__swsetup_r+0xb4>
  4052fe:	0758      	lsls	r0, r3, #29
  405300:	d426      	bmi.n	405350 <__swsetup_r+0x8c>
  405302:	6920      	ldr	r0, [r4, #16]
  405304:	f042 0308 	orr.w	r3, r2, #8
  405308:	81a3      	strh	r3, [r4, #12]
  40530a:	b29b      	uxth	r3, r3
  40530c:	2800      	cmp	r0, #0
  40530e:	d1e9      	bne.n	4052e4 <__swsetup_r+0x20>
  405310:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405314:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405318:	d0e4      	beq.n	4052e4 <__swsetup_r+0x20>
  40531a:	4628      	mov	r0, r5
  40531c:	4621      	mov	r1, r4
  40531e:	f000 fd2f 	bl	405d80 <__smakebuf_r>
  405322:	89a3      	ldrh	r3, [r4, #12]
  405324:	6920      	ldr	r0, [r4, #16]
  405326:	e7dd      	b.n	4052e4 <__swsetup_r+0x20>
  405328:	0799      	lsls	r1, r3, #30
  40532a:	bf58      	it	pl
  40532c:	6962      	ldrpl	r2, [r4, #20]
  40532e:	60a2      	str	r2, [r4, #8]
  405330:	2800      	cmp	r0, #0
  405332:	d1e0      	bne.n	4052f6 <__swsetup_r+0x32>
  405334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405338:	061a      	lsls	r2, r3, #24
  40533a:	d5dd      	bpl.n	4052f8 <__swsetup_r+0x34>
  40533c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405340:	81a3      	strh	r3, [r4, #12]
  405342:	f04f 30ff 	mov.w	r0, #4294967295
  405346:	bd38      	pop	{r3, r4, r5, pc}
  405348:	4618      	mov	r0, r3
  40534a:	f000 f927 	bl	40559c <__sinit>
  40534e:	e7c2      	b.n	4052d6 <__swsetup_r+0x12>
  405350:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405352:	b151      	cbz	r1, 40536a <__swsetup_r+0xa6>
  405354:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405358:	4299      	cmp	r1, r3
  40535a:	d004      	beq.n	405366 <__swsetup_r+0xa2>
  40535c:	4628      	mov	r0, r5
  40535e:	f000 fa43 	bl	4057e8 <_free_r>
  405362:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405366:	2300      	movs	r3, #0
  405368:	6323      	str	r3, [r4, #48]	; 0x30
  40536a:	2300      	movs	r3, #0
  40536c:	6920      	ldr	r0, [r4, #16]
  40536e:	6063      	str	r3, [r4, #4]
  405370:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405374:	6020      	str	r0, [r4, #0]
  405376:	e7c5      	b.n	405304 <__swsetup_r+0x40>
  405378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40537c:	2309      	movs	r3, #9
  40537e:	602b      	str	r3, [r5, #0]
  405380:	f04f 30ff 	mov.w	r0, #4294967295
  405384:	81a2      	strh	r2, [r4, #12]
  405386:	bd38      	pop	{r3, r4, r5, pc}
  405388:	20400010 	.word	0x20400010

0040538c <register_fini>:
  40538c:	4b02      	ldr	r3, [pc, #8]	; (405398 <register_fini+0xc>)
  40538e:	b113      	cbz	r3, 405396 <register_fini+0xa>
  405390:	4802      	ldr	r0, [pc, #8]	; (40539c <register_fini+0x10>)
  405392:	f000 b805 	b.w	4053a0 <atexit>
  405396:	4770      	bx	lr
  405398:	00000000 	.word	0x00000000
  40539c:	0040560d 	.word	0x0040560d

004053a0 <atexit>:
  4053a0:	2300      	movs	r3, #0
  4053a2:	4601      	mov	r1, r0
  4053a4:	461a      	mov	r2, r3
  4053a6:	4618      	mov	r0, r3
  4053a8:	f001 b8fe 	b.w	4065a8 <__register_exitproc>

004053ac <__sflush_r>:
  4053ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4053b0:	b29a      	uxth	r2, r3
  4053b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053b6:	460d      	mov	r5, r1
  4053b8:	0711      	lsls	r1, r2, #28
  4053ba:	4680      	mov	r8, r0
  4053bc:	d43a      	bmi.n	405434 <__sflush_r+0x88>
  4053be:	686a      	ldr	r2, [r5, #4]
  4053c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4053c4:	2a00      	cmp	r2, #0
  4053c6:	81ab      	strh	r3, [r5, #12]
  4053c8:	dd6f      	ble.n	4054aa <__sflush_r+0xfe>
  4053ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053cc:	2c00      	cmp	r4, #0
  4053ce:	d049      	beq.n	405464 <__sflush_r+0xb8>
  4053d0:	2200      	movs	r2, #0
  4053d2:	b29b      	uxth	r3, r3
  4053d4:	f8d8 6000 	ldr.w	r6, [r8]
  4053d8:	f8c8 2000 	str.w	r2, [r8]
  4053dc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4053e0:	d067      	beq.n	4054b2 <__sflush_r+0x106>
  4053e2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4053e4:	075f      	lsls	r7, r3, #29
  4053e6:	d505      	bpl.n	4053f4 <__sflush_r+0x48>
  4053e8:	6869      	ldr	r1, [r5, #4]
  4053ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4053ec:	1a52      	subs	r2, r2, r1
  4053ee:	b10b      	cbz	r3, 4053f4 <__sflush_r+0x48>
  4053f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4053f2:	1ad2      	subs	r2, r2, r3
  4053f4:	2300      	movs	r3, #0
  4053f6:	69e9      	ldr	r1, [r5, #28]
  4053f8:	4640      	mov	r0, r8
  4053fa:	47a0      	blx	r4
  4053fc:	1c44      	adds	r4, r0, #1
  4053fe:	d03c      	beq.n	40547a <__sflush_r+0xce>
  405400:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405404:	692a      	ldr	r2, [r5, #16]
  405406:	602a      	str	r2, [r5, #0]
  405408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40540c:	2200      	movs	r2, #0
  40540e:	81ab      	strh	r3, [r5, #12]
  405410:	04db      	lsls	r3, r3, #19
  405412:	606a      	str	r2, [r5, #4]
  405414:	d447      	bmi.n	4054a6 <__sflush_r+0xfa>
  405416:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405418:	f8c8 6000 	str.w	r6, [r8]
  40541c:	b311      	cbz	r1, 405464 <__sflush_r+0xb8>
  40541e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405422:	4299      	cmp	r1, r3
  405424:	d002      	beq.n	40542c <__sflush_r+0x80>
  405426:	4640      	mov	r0, r8
  405428:	f000 f9de 	bl	4057e8 <_free_r>
  40542c:	2000      	movs	r0, #0
  40542e:	6328      	str	r0, [r5, #48]	; 0x30
  405430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405434:	692e      	ldr	r6, [r5, #16]
  405436:	b1ae      	cbz	r6, 405464 <__sflush_r+0xb8>
  405438:	682c      	ldr	r4, [r5, #0]
  40543a:	602e      	str	r6, [r5, #0]
  40543c:	0791      	lsls	r1, r2, #30
  40543e:	bf0c      	ite	eq
  405440:	696b      	ldreq	r3, [r5, #20]
  405442:	2300      	movne	r3, #0
  405444:	1ba4      	subs	r4, r4, r6
  405446:	60ab      	str	r3, [r5, #8]
  405448:	e00a      	b.n	405460 <__sflush_r+0xb4>
  40544a:	4623      	mov	r3, r4
  40544c:	4632      	mov	r2, r6
  40544e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405450:	69e9      	ldr	r1, [r5, #28]
  405452:	4640      	mov	r0, r8
  405454:	47b8      	blx	r7
  405456:	2800      	cmp	r0, #0
  405458:	eba4 0400 	sub.w	r4, r4, r0
  40545c:	4406      	add	r6, r0
  40545e:	dd04      	ble.n	40546a <__sflush_r+0xbe>
  405460:	2c00      	cmp	r4, #0
  405462:	dcf2      	bgt.n	40544a <__sflush_r+0x9e>
  405464:	2000      	movs	r0, #0
  405466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40546a:	89ab      	ldrh	r3, [r5, #12]
  40546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405470:	81ab      	strh	r3, [r5, #12]
  405472:	f04f 30ff 	mov.w	r0, #4294967295
  405476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40547a:	f8d8 4000 	ldr.w	r4, [r8]
  40547e:	2c1d      	cmp	r4, #29
  405480:	d8f3      	bhi.n	40546a <__sflush_r+0xbe>
  405482:	4b19      	ldr	r3, [pc, #100]	; (4054e8 <__sflush_r+0x13c>)
  405484:	40e3      	lsrs	r3, r4
  405486:	43db      	mvns	r3, r3
  405488:	f013 0301 	ands.w	r3, r3, #1
  40548c:	d1ed      	bne.n	40546a <__sflush_r+0xbe>
  40548e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405492:	606b      	str	r3, [r5, #4]
  405494:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405498:	6929      	ldr	r1, [r5, #16]
  40549a:	81ab      	strh	r3, [r5, #12]
  40549c:	04da      	lsls	r2, r3, #19
  40549e:	6029      	str	r1, [r5, #0]
  4054a0:	d5b9      	bpl.n	405416 <__sflush_r+0x6a>
  4054a2:	2c00      	cmp	r4, #0
  4054a4:	d1b7      	bne.n	405416 <__sflush_r+0x6a>
  4054a6:	6528      	str	r0, [r5, #80]	; 0x50
  4054a8:	e7b5      	b.n	405416 <__sflush_r+0x6a>
  4054aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4054ac:	2a00      	cmp	r2, #0
  4054ae:	dc8c      	bgt.n	4053ca <__sflush_r+0x1e>
  4054b0:	e7d8      	b.n	405464 <__sflush_r+0xb8>
  4054b2:	2301      	movs	r3, #1
  4054b4:	69e9      	ldr	r1, [r5, #28]
  4054b6:	4640      	mov	r0, r8
  4054b8:	47a0      	blx	r4
  4054ba:	1c43      	adds	r3, r0, #1
  4054bc:	4602      	mov	r2, r0
  4054be:	d002      	beq.n	4054c6 <__sflush_r+0x11a>
  4054c0:	89ab      	ldrh	r3, [r5, #12]
  4054c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4054c4:	e78e      	b.n	4053e4 <__sflush_r+0x38>
  4054c6:	f8d8 3000 	ldr.w	r3, [r8]
  4054ca:	2b00      	cmp	r3, #0
  4054cc:	d0f8      	beq.n	4054c0 <__sflush_r+0x114>
  4054ce:	2b1d      	cmp	r3, #29
  4054d0:	d001      	beq.n	4054d6 <__sflush_r+0x12a>
  4054d2:	2b16      	cmp	r3, #22
  4054d4:	d102      	bne.n	4054dc <__sflush_r+0x130>
  4054d6:	f8c8 6000 	str.w	r6, [r8]
  4054da:	e7c3      	b.n	405464 <__sflush_r+0xb8>
  4054dc:	89ab      	ldrh	r3, [r5, #12]
  4054de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4054e2:	81ab      	strh	r3, [r5, #12]
  4054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054e8:	20400001 	.word	0x20400001

004054ec <_fflush_r>:
  4054ec:	b538      	push	{r3, r4, r5, lr}
  4054ee:	460d      	mov	r5, r1
  4054f0:	4604      	mov	r4, r0
  4054f2:	b108      	cbz	r0, 4054f8 <_fflush_r+0xc>
  4054f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4054f6:	b1bb      	cbz	r3, 405528 <_fflush_r+0x3c>
  4054f8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4054fc:	b188      	cbz	r0, 405522 <_fflush_r+0x36>
  4054fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405500:	07db      	lsls	r3, r3, #31
  405502:	d401      	bmi.n	405508 <_fflush_r+0x1c>
  405504:	0581      	lsls	r1, r0, #22
  405506:	d517      	bpl.n	405538 <_fflush_r+0x4c>
  405508:	4620      	mov	r0, r4
  40550a:	4629      	mov	r1, r5
  40550c:	f7ff ff4e 	bl	4053ac <__sflush_r>
  405510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405512:	07da      	lsls	r2, r3, #31
  405514:	4604      	mov	r4, r0
  405516:	d402      	bmi.n	40551e <_fflush_r+0x32>
  405518:	89ab      	ldrh	r3, [r5, #12]
  40551a:	059b      	lsls	r3, r3, #22
  40551c:	d507      	bpl.n	40552e <_fflush_r+0x42>
  40551e:	4620      	mov	r0, r4
  405520:	bd38      	pop	{r3, r4, r5, pc}
  405522:	4604      	mov	r4, r0
  405524:	4620      	mov	r0, r4
  405526:	bd38      	pop	{r3, r4, r5, pc}
  405528:	f000 f838 	bl	40559c <__sinit>
  40552c:	e7e4      	b.n	4054f8 <_fflush_r+0xc>
  40552e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405530:	f000 fbf6 	bl	405d20 <__retarget_lock_release_recursive>
  405534:	4620      	mov	r0, r4
  405536:	bd38      	pop	{r3, r4, r5, pc}
  405538:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40553a:	f000 fbef 	bl	405d1c <__retarget_lock_acquire_recursive>
  40553e:	e7e3      	b.n	405508 <_fflush_r+0x1c>

00405540 <_cleanup_r>:
  405540:	4901      	ldr	r1, [pc, #4]	; (405548 <_cleanup_r+0x8>)
  405542:	f000 bbaf 	b.w	405ca4 <_fwalk_reent>
  405546:	bf00      	nop
  405548:	00406691 	.word	0x00406691

0040554c <std.isra.0>:
  40554c:	b510      	push	{r4, lr}
  40554e:	2300      	movs	r3, #0
  405550:	4604      	mov	r4, r0
  405552:	8181      	strh	r1, [r0, #12]
  405554:	81c2      	strh	r2, [r0, #14]
  405556:	6003      	str	r3, [r0, #0]
  405558:	6043      	str	r3, [r0, #4]
  40555a:	6083      	str	r3, [r0, #8]
  40555c:	6643      	str	r3, [r0, #100]	; 0x64
  40555e:	6103      	str	r3, [r0, #16]
  405560:	6143      	str	r3, [r0, #20]
  405562:	6183      	str	r3, [r0, #24]
  405564:	4619      	mov	r1, r3
  405566:	2208      	movs	r2, #8
  405568:	305c      	adds	r0, #92	; 0x5c
  40556a:	f7fe fea5 	bl	4042b8 <memset>
  40556e:	4807      	ldr	r0, [pc, #28]	; (40558c <std.isra.0+0x40>)
  405570:	4907      	ldr	r1, [pc, #28]	; (405590 <std.isra.0+0x44>)
  405572:	4a08      	ldr	r2, [pc, #32]	; (405594 <std.isra.0+0x48>)
  405574:	4b08      	ldr	r3, [pc, #32]	; (405598 <std.isra.0+0x4c>)
  405576:	6220      	str	r0, [r4, #32]
  405578:	61e4      	str	r4, [r4, #28]
  40557a:	6261      	str	r1, [r4, #36]	; 0x24
  40557c:	62a2      	str	r2, [r4, #40]	; 0x28
  40557e:	62e3      	str	r3, [r4, #44]	; 0x2c
  405580:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405588:	f000 bbc4 	b.w	405d14 <__retarget_lock_init_recursive>
  40558c:	004062f5 	.word	0x004062f5
  405590:	00406319 	.word	0x00406319
  405594:	00406355 	.word	0x00406355
  405598:	00406375 	.word	0x00406375

0040559c <__sinit>:
  40559c:	b510      	push	{r4, lr}
  40559e:	4604      	mov	r4, r0
  4055a0:	4812      	ldr	r0, [pc, #72]	; (4055ec <__sinit+0x50>)
  4055a2:	f000 fbbb 	bl	405d1c <__retarget_lock_acquire_recursive>
  4055a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4055a8:	b9d2      	cbnz	r2, 4055e0 <__sinit+0x44>
  4055aa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4055ae:	4810      	ldr	r0, [pc, #64]	; (4055f0 <__sinit+0x54>)
  4055b0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4055b4:	2103      	movs	r1, #3
  4055b6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4055ba:	63e0      	str	r0, [r4, #60]	; 0x3c
  4055bc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4055c0:	6860      	ldr	r0, [r4, #4]
  4055c2:	2104      	movs	r1, #4
  4055c4:	f7ff ffc2 	bl	40554c <std.isra.0>
  4055c8:	2201      	movs	r2, #1
  4055ca:	2109      	movs	r1, #9
  4055cc:	68a0      	ldr	r0, [r4, #8]
  4055ce:	f7ff ffbd 	bl	40554c <std.isra.0>
  4055d2:	2202      	movs	r2, #2
  4055d4:	2112      	movs	r1, #18
  4055d6:	68e0      	ldr	r0, [r4, #12]
  4055d8:	f7ff ffb8 	bl	40554c <std.isra.0>
  4055dc:	2301      	movs	r3, #1
  4055de:	63a3      	str	r3, [r4, #56]	; 0x38
  4055e0:	4802      	ldr	r0, [pc, #8]	; (4055ec <__sinit+0x50>)
  4055e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4055e6:	f000 bb9b 	b.w	405d20 <__retarget_lock_release_recursive>
  4055ea:	bf00      	nop
  4055ec:	20401214 	.word	0x20401214
  4055f0:	00405541 	.word	0x00405541

004055f4 <__sfp_lock_acquire>:
  4055f4:	4801      	ldr	r0, [pc, #4]	; (4055fc <__sfp_lock_acquire+0x8>)
  4055f6:	f000 bb91 	b.w	405d1c <__retarget_lock_acquire_recursive>
  4055fa:	bf00      	nop
  4055fc:	20401228 	.word	0x20401228

00405600 <__sfp_lock_release>:
  405600:	4801      	ldr	r0, [pc, #4]	; (405608 <__sfp_lock_release+0x8>)
  405602:	f000 bb8d 	b.w	405d20 <__retarget_lock_release_recursive>
  405606:	bf00      	nop
  405608:	20401228 	.word	0x20401228

0040560c <__libc_fini_array>:
  40560c:	b538      	push	{r3, r4, r5, lr}
  40560e:	4c0a      	ldr	r4, [pc, #40]	; (405638 <__libc_fini_array+0x2c>)
  405610:	4d0a      	ldr	r5, [pc, #40]	; (40563c <__libc_fini_array+0x30>)
  405612:	1b64      	subs	r4, r4, r5
  405614:	10a4      	asrs	r4, r4, #2
  405616:	d00a      	beq.n	40562e <__libc_fini_array+0x22>
  405618:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40561c:	3b01      	subs	r3, #1
  40561e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405622:	3c01      	subs	r4, #1
  405624:	f855 3904 	ldr.w	r3, [r5], #-4
  405628:	4798      	blx	r3
  40562a:	2c00      	cmp	r4, #0
  40562c:	d1f9      	bne.n	405622 <__libc_fini_array+0x16>
  40562e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405632:	f001 bb95 	b.w	406d60 <_fini>
  405636:	bf00      	nop
  405638:	00406d70 	.word	0x00406d70
  40563c:	00406d6c 	.word	0x00406d6c

00405640 <__fputwc>:
  405640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405644:	b082      	sub	sp, #8
  405646:	4680      	mov	r8, r0
  405648:	4689      	mov	r9, r1
  40564a:	4614      	mov	r4, r2
  40564c:	f000 fb54 	bl	405cf8 <__locale_mb_cur_max>
  405650:	2801      	cmp	r0, #1
  405652:	d036      	beq.n	4056c2 <__fputwc+0x82>
  405654:	464a      	mov	r2, r9
  405656:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40565a:	a901      	add	r1, sp, #4
  40565c:	4640      	mov	r0, r8
  40565e:	f000 ff55 	bl	40650c <_wcrtomb_r>
  405662:	1c42      	adds	r2, r0, #1
  405664:	4606      	mov	r6, r0
  405666:	d025      	beq.n	4056b4 <__fputwc+0x74>
  405668:	b3a8      	cbz	r0, 4056d6 <__fputwc+0x96>
  40566a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40566e:	2500      	movs	r5, #0
  405670:	f10d 0a04 	add.w	sl, sp, #4
  405674:	e009      	b.n	40568a <__fputwc+0x4a>
  405676:	6823      	ldr	r3, [r4, #0]
  405678:	1c5a      	adds	r2, r3, #1
  40567a:	6022      	str	r2, [r4, #0]
  40567c:	f883 e000 	strb.w	lr, [r3]
  405680:	3501      	adds	r5, #1
  405682:	42b5      	cmp	r5, r6
  405684:	d227      	bcs.n	4056d6 <__fputwc+0x96>
  405686:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40568a:	68a3      	ldr	r3, [r4, #8]
  40568c:	3b01      	subs	r3, #1
  40568e:	2b00      	cmp	r3, #0
  405690:	60a3      	str	r3, [r4, #8]
  405692:	daf0      	bge.n	405676 <__fputwc+0x36>
  405694:	69a7      	ldr	r7, [r4, #24]
  405696:	42bb      	cmp	r3, r7
  405698:	4671      	mov	r1, lr
  40569a:	4622      	mov	r2, r4
  40569c:	4640      	mov	r0, r8
  40569e:	db02      	blt.n	4056a6 <__fputwc+0x66>
  4056a0:	f1be 0f0a 	cmp.w	lr, #10
  4056a4:	d1e7      	bne.n	405676 <__fputwc+0x36>
  4056a6:	f000 fed9 	bl	40645c <__swbuf_r>
  4056aa:	1c43      	adds	r3, r0, #1
  4056ac:	d1e8      	bne.n	405680 <__fputwc+0x40>
  4056ae:	b002      	add	sp, #8
  4056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056b4:	89a3      	ldrh	r3, [r4, #12]
  4056b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056ba:	81a3      	strh	r3, [r4, #12]
  4056bc:	b002      	add	sp, #8
  4056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056c2:	f109 33ff 	add.w	r3, r9, #4294967295
  4056c6:	2bfe      	cmp	r3, #254	; 0xfe
  4056c8:	d8c4      	bhi.n	405654 <__fputwc+0x14>
  4056ca:	fa5f fe89 	uxtb.w	lr, r9
  4056ce:	4606      	mov	r6, r0
  4056d0:	f88d e004 	strb.w	lr, [sp, #4]
  4056d4:	e7cb      	b.n	40566e <__fputwc+0x2e>
  4056d6:	4648      	mov	r0, r9
  4056d8:	b002      	add	sp, #8
  4056da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4056de:	bf00      	nop

004056e0 <_fputwc_r>:
  4056e0:	b530      	push	{r4, r5, lr}
  4056e2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4056e4:	f013 0f01 	tst.w	r3, #1
  4056e8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4056ec:	4614      	mov	r4, r2
  4056ee:	b083      	sub	sp, #12
  4056f0:	4605      	mov	r5, r0
  4056f2:	b29a      	uxth	r2, r3
  4056f4:	d101      	bne.n	4056fa <_fputwc_r+0x1a>
  4056f6:	0590      	lsls	r0, r2, #22
  4056f8:	d51c      	bpl.n	405734 <_fputwc_r+0x54>
  4056fa:	0490      	lsls	r0, r2, #18
  4056fc:	d406      	bmi.n	40570c <_fputwc_r+0x2c>
  4056fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405708:	81a3      	strh	r3, [r4, #12]
  40570a:	6662      	str	r2, [r4, #100]	; 0x64
  40570c:	4628      	mov	r0, r5
  40570e:	4622      	mov	r2, r4
  405710:	f7ff ff96 	bl	405640 <__fputwc>
  405714:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405716:	07da      	lsls	r2, r3, #31
  405718:	4605      	mov	r5, r0
  40571a:	d402      	bmi.n	405722 <_fputwc_r+0x42>
  40571c:	89a3      	ldrh	r3, [r4, #12]
  40571e:	059b      	lsls	r3, r3, #22
  405720:	d502      	bpl.n	405728 <_fputwc_r+0x48>
  405722:	4628      	mov	r0, r5
  405724:	b003      	add	sp, #12
  405726:	bd30      	pop	{r4, r5, pc}
  405728:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40572a:	f000 faf9 	bl	405d20 <__retarget_lock_release_recursive>
  40572e:	4628      	mov	r0, r5
  405730:	b003      	add	sp, #12
  405732:	bd30      	pop	{r4, r5, pc}
  405734:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405736:	9101      	str	r1, [sp, #4]
  405738:	f000 faf0 	bl	405d1c <__retarget_lock_acquire_recursive>
  40573c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405740:	9901      	ldr	r1, [sp, #4]
  405742:	b29a      	uxth	r2, r3
  405744:	e7d9      	b.n	4056fa <_fputwc_r+0x1a>
  405746:	bf00      	nop

00405748 <_malloc_trim_r>:
  405748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40574a:	4f24      	ldr	r7, [pc, #144]	; (4057dc <_malloc_trim_r+0x94>)
  40574c:	460c      	mov	r4, r1
  40574e:	4606      	mov	r6, r0
  405750:	f7fe fe00 	bl	404354 <__malloc_lock>
  405754:	68bb      	ldr	r3, [r7, #8]
  405756:	685d      	ldr	r5, [r3, #4]
  405758:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40575c:	310f      	adds	r1, #15
  40575e:	f025 0503 	bic.w	r5, r5, #3
  405762:	4429      	add	r1, r5
  405764:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405768:	f021 010f 	bic.w	r1, r1, #15
  40576c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405770:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405774:	db07      	blt.n	405786 <_malloc_trim_r+0x3e>
  405776:	2100      	movs	r1, #0
  405778:	4630      	mov	r0, r6
  40577a:	f7fe fdf7 	bl	40436c <_sbrk_r>
  40577e:	68bb      	ldr	r3, [r7, #8]
  405780:	442b      	add	r3, r5
  405782:	4298      	cmp	r0, r3
  405784:	d004      	beq.n	405790 <_malloc_trim_r+0x48>
  405786:	4630      	mov	r0, r6
  405788:	f7fe fdea 	bl	404360 <__malloc_unlock>
  40578c:	2000      	movs	r0, #0
  40578e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405790:	4261      	negs	r1, r4
  405792:	4630      	mov	r0, r6
  405794:	f7fe fdea 	bl	40436c <_sbrk_r>
  405798:	3001      	adds	r0, #1
  40579a:	d00d      	beq.n	4057b8 <_malloc_trim_r+0x70>
  40579c:	4b10      	ldr	r3, [pc, #64]	; (4057e0 <_malloc_trim_r+0x98>)
  40579e:	68ba      	ldr	r2, [r7, #8]
  4057a0:	6819      	ldr	r1, [r3, #0]
  4057a2:	1b2d      	subs	r5, r5, r4
  4057a4:	f045 0501 	orr.w	r5, r5, #1
  4057a8:	4630      	mov	r0, r6
  4057aa:	1b09      	subs	r1, r1, r4
  4057ac:	6055      	str	r5, [r2, #4]
  4057ae:	6019      	str	r1, [r3, #0]
  4057b0:	f7fe fdd6 	bl	404360 <__malloc_unlock>
  4057b4:	2001      	movs	r0, #1
  4057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4057b8:	2100      	movs	r1, #0
  4057ba:	4630      	mov	r0, r6
  4057bc:	f7fe fdd6 	bl	40436c <_sbrk_r>
  4057c0:	68ba      	ldr	r2, [r7, #8]
  4057c2:	1a83      	subs	r3, r0, r2
  4057c4:	2b0f      	cmp	r3, #15
  4057c6:	ddde      	ble.n	405786 <_malloc_trim_r+0x3e>
  4057c8:	4c06      	ldr	r4, [pc, #24]	; (4057e4 <_malloc_trim_r+0x9c>)
  4057ca:	4905      	ldr	r1, [pc, #20]	; (4057e0 <_malloc_trim_r+0x98>)
  4057cc:	6824      	ldr	r4, [r4, #0]
  4057ce:	f043 0301 	orr.w	r3, r3, #1
  4057d2:	1b00      	subs	r0, r0, r4
  4057d4:	6053      	str	r3, [r2, #4]
  4057d6:	6008      	str	r0, [r1, #0]
  4057d8:	e7d5      	b.n	405786 <_malloc_trim_r+0x3e>
  4057da:	bf00      	nop
  4057dc:	20400440 	.word	0x20400440
  4057e0:	204010e8 	.word	0x204010e8
  4057e4:	20400848 	.word	0x20400848

004057e8 <_free_r>:
  4057e8:	2900      	cmp	r1, #0
  4057ea:	d044      	beq.n	405876 <_free_r+0x8e>
  4057ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057f0:	460d      	mov	r5, r1
  4057f2:	4680      	mov	r8, r0
  4057f4:	f7fe fdae 	bl	404354 <__malloc_lock>
  4057f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4057fc:	4969      	ldr	r1, [pc, #420]	; (4059a4 <_free_r+0x1bc>)
  4057fe:	f027 0301 	bic.w	r3, r7, #1
  405802:	f1a5 0408 	sub.w	r4, r5, #8
  405806:	18e2      	adds	r2, r4, r3
  405808:	688e      	ldr	r6, [r1, #8]
  40580a:	6850      	ldr	r0, [r2, #4]
  40580c:	42b2      	cmp	r2, r6
  40580e:	f020 0003 	bic.w	r0, r0, #3
  405812:	d05e      	beq.n	4058d2 <_free_r+0xea>
  405814:	07fe      	lsls	r6, r7, #31
  405816:	6050      	str	r0, [r2, #4]
  405818:	d40b      	bmi.n	405832 <_free_r+0x4a>
  40581a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40581e:	1be4      	subs	r4, r4, r7
  405820:	f101 0e08 	add.w	lr, r1, #8
  405824:	68a5      	ldr	r5, [r4, #8]
  405826:	4575      	cmp	r5, lr
  405828:	443b      	add	r3, r7
  40582a:	d06d      	beq.n	405908 <_free_r+0x120>
  40582c:	68e7      	ldr	r7, [r4, #12]
  40582e:	60ef      	str	r7, [r5, #12]
  405830:	60bd      	str	r5, [r7, #8]
  405832:	1815      	adds	r5, r2, r0
  405834:	686d      	ldr	r5, [r5, #4]
  405836:	07ed      	lsls	r5, r5, #31
  405838:	d53e      	bpl.n	4058b8 <_free_r+0xd0>
  40583a:	f043 0201 	orr.w	r2, r3, #1
  40583e:	6062      	str	r2, [r4, #4]
  405840:	50e3      	str	r3, [r4, r3]
  405842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405846:	d217      	bcs.n	405878 <_free_r+0x90>
  405848:	08db      	lsrs	r3, r3, #3
  40584a:	1c58      	adds	r0, r3, #1
  40584c:	109a      	asrs	r2, r3, #2
  40584e:	684d      	ldr	r5, [r1, #4]
  405850:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405854:	60a7      	str	r7, [r4, #8]
  405856:	2301      	movs	r3, #1
  405858:	4093      	lsls	r3, r2
  40585a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40585e:	432b      	orrs	r3, r5
  405860:	3a08      	subs	r2, #8
  405862:	60e2      	str	r2, [r4, #12]
  405864:	604b      	str	r3, [r1, #4]
  405866:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40586a:	60fc      	str	r4, [r7, #12]
  40586c:	4640      	mov	r0, r8
  40586e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405872:	f7fe bd75 	b.w	404360 <__malloc_unlock>
  405876:	4770      	bx	lr
  405878:	0a5a      	lsrs	r2, r3, #9
  40587a:	2a04      	cmp	r2, #4
  40587c:	d852      	bhi.n	405924 <_free_r+0x13c>
  40587e:	099a      	lsrs	r2, r3, #6
  405880:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405884:	00ff      	lsls	r7, r7, #3
  405886:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40588a:	19c8      	adds	r0, r1, r7
  40588c:	59ca      	ldr	r2, [r1, r7]
  40588e:	3808      	subs	r0, #8
  405890:	4290      	cmp	r0, r2
  405892:	d04f      	beq.n	405934 <_free_r+0x14c>
  405894:	6851      	ldr	r1, [r2, #4]
  405896:	f021 0103 	bic.w	r1, r1, #3
  40589a:	428b      	cmp	r3, r1
  40589c:	d232      	bcs.n	405904 <_free_r+0x11c>
  40589e:	6892      	ldr	r2, [r2, #8]
  4058a0:	4290      	cmp	r0, r2
  4058a2:	d1f7      	bne.n	405894 <_free_r+0xac>
  4058a4:	68c3      	ldr	r3, [r0, #12]
  4058a6:	60a0      	str	r0, [r4, #8]
  4058a8:	60e3      	str	r3, [r4, #12]
  4058aa:	609c      	str	r4, [r3, #8]
  4058ac:	60c4      	str	r4, [r0, #12]
  4058ae:	4640      	mov	r0, r8
  4058b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058b4:	f7fe bd54 	b.w	404360 <__malloc_unlock>
  4058b8:	6895      	ldr	r5, [r2, #8]
  4058ba:	4f3b      	ldr	r7, [pc, #236]	; (4059a8 <_free_r+0x1c0>)
  4058bc:	42bd      	cmp	r5, r7
  4058be:	4403      	add	r3, r0
  4058c0:	d040      	beq.n	405944 <_free_r+0x15c>
  4058c2:	68d0      	ldr	r0, [r2, #12]
  4058c4:	60e8      	str	r0, [r5, #12]
  4058c6:	f043 0201 	orr.w	r2, r3, #1
  4058ca:	6085      	str	r5, [r0, #8]
  4058cc:	6062      	str	r2, [r4, #4]
  4058ce:	50e3      	str	r3, [r4, r3]
  4058d0:	e7b7      	b.n	405842 <_free_r+0x5a>
  4058d2:	07ff      	lsls	r7, r7, #31
  4058d4:	4403      	add	r3, r0
  4058d6:	d407      	bmi.n	4058e8 <_free_r+0x100>
  4058d8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4058dc:	1aa4      	subs	r4, r4, r2
  4058de:	4413      	add	r3, r2
  4058e0:	68a0      	ldr	r0, [r4, #8]
  4058e2:	68e2      	ldr	r2, [r4, #12]
  4058e4:	60c2      	str	r2, [r0, #12]
  4058e6:	6090      	str	r0, [r2, #8]
  4058e8:	4a30      	ldr	r2, [pc, #192]	; (4059ac <_free_r+0x1c4>)
  4058ea:	6812      	ldr	r2, [r2, #0]
  4058ec:	f043 0001 	orr.w	r0, r3, #1
  4058f0:	4293      	cmp	r3, r2
  4058f2:	6060      	str	r0, [r4, #4]
  4058f4:	608c      	str	r4, [r1, #8]
  4058f6:	d3b9      	bcc.n	40586c <_free_r+0x84>
  4058f8:	4b2d      	ldr	r3, [pc, #180]	; (4059b0 <_free_r+0x1c8>)
  4058fa:	4640      	mov	r0, r8
  4058fc:	6819      	ldr	r1, [r3, #0]
  4058fe:	f7ff ff23 	bl	405748 <_malloc_trim_r>
  405902:	e7b3      	b.n	40586c <_free_r+0x84>
  405904:	4610      	mov	r0, r2
  405906:	e7cd      	b.n	4058a4 <_free_r+0xbc>
  405908:	1811      	adds	r1, r2, r0
  40590a:	6849      	ldr	r1, [r1, #4]
  40590c:	07c9      	lsls	r1, r1, #31
  40590e:	d444      	bmi.n	40599a <_free_r+0x1b2>
  405910:	6891      	ldr	r1, [r2, #8]
  405912:	68d2      	ldr	r2, [r2, #12]
  405914:	60ca      	str	r2, [r1, #12]
  405916:	4403      	add	r3, r0
  405918:	f043 0001 	orr.w	r0, r3, #1
  40591c:	6091      	str	r1, [r2, #8]
  40591e:	6060      	str	r0, [r4, #4]
  405920:	50e3      	str	r3, [r4, r3]
  405922:	e7a3      	b.n	40586c <_free_r+0x84>
  405924:	2a14      	cmp	r2, #20
  405926:	d816      	bhi.n	405956 <_free_r+0x16e>
  405928:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40592c:	00ff      	lsls	r7, r7, #3
  40592e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405932:	e7aa      	b.n	40588a <_free_r+0xa2>
  405934:	10aa      	asrs	r2, r5, #2
  405936:	2301      	movs	r3, #1
  405938:	684d      	ldr	r5, [r1, #4]
  40593a:	4093      	lsls	r3, r2
  40593c:	432b      	orrs	r3, r5
  40593e:	604b      	str	r3, [r1, #4]
  405940:	4603      	mov	r3, r0
  405942:	e7b0      	b.n	4058a6 <_free_r+0xbe>
  405944:	f043 0201 	orr.w	r2, r3, #1
  405948:	614c      	str	r4, [r1, #20]
  40594a:	610c      	str	r4, [r1, #16]
  40594c:	60e5      	str	r5, [r4, #12]
  40594e:	60a5      	str	r5, [r4, #8]
  405950:	6062      	str	r2, [r4, #4]
  405952:	50e3      	str	r3, [r4, r3]
  405954:	e78a      	b.n	40586c <_free_r+0x84>
  405956:	2a54      	cmp	r2, #84	; 0x54
  405958:	d806      	bhi.n	405968 <_free_r+0x180>
  40595a:	0b1a      	lsrs	r2, r3, #12
  40595c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405960:	00ff      	lsls	r7, r7, #3
  405962:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405966:	e790      	b.n	40588a <_free_r+0xa2>
  405968:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40596c:	d806      	bhi.n	40597c <_free_r+0x194>
  40596e:	0bda      	lsrs	r2, r3, #15
  405970:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405974:	00ff      	lsls	r7, r7, #3
  405976:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40597a:	e786      	b.n	40588a <_free_r+0xa2>
  40597c:	f240 5054 	movw	r0, #1364	; 0x554
  405980:	4282      	cmp	r2, r0
  405982:	d806      	bhi.n	405992 <_free_r+0x1aa>
  405984:	0c9a      	lsrs	r2, r3, #18
  405986:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40598a:	00ff      	lsls	r7, r7, #3
  40598c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405990:	e77b      	b.n	40588a <_free_r+0xa2>
  405992:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405996:	257e      	movs	r5, #126	; 0x7e
  405998:	e777      	b.n	40588a <_free_r+0xa2>
  40599a:	f043 0101 	orr.w	r1, r3, #1
  40599e:	6061      	str	r1, [r4, #4]
  4059a0:	6013      	str	r3, [r2, #0]
  4059a2:	e763      	b.n	40586c <_free_r+0x84>
  4059a4:	20400440 	.word	0x20400440
  4059a8:	20400448 	.word	0x20400448
  4059ac:	2040084c 	.word	0x2040084c
  4059b0:	20401118 	.word	0x20401118

004059b4 <__sfvwrite_r>:
  4059b4:	6893      	ldr	r3, [r2, #8]
  4059b6:	2b00      	cmp	r3, #0
  4059b8:	d073      	beq.n	405aa2 <__sfvwrite_r+0xee>
  4059ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4059be:	898b      	ldrh	r3, [r1, #12]
  4059c0:	b083      	sub	sp, #12
  4059c2:	460c      	mov	r4, r1
  4059c4:	0719      	lsls	r1, r3, #28
  4059c6:	9000      	str	r0, [sp, #0]
  4059c8:	4616      	mov	r6, r2
  4059ca:	d526      	bpl.n	405a1a <__sfvwrite_r+0x66>
  4059cc:	6922      	ldr	r2, [r4, #16]
  4059ce:	b322      	cbz	r2, 405a1a <__sfvwrite_r+0x66>
  4059d0:	f013 0002 	ands.w	r0, r3, #2
  4059d4:	6835      	ldr	r5, [r6, #0]
  4059d6:	d02c      	beq.n	405a32 <__sfvwrite_r+0x7e>
  4059d8:	f04f 0900 	mov.w	r9, #0
  4059dc:	4fb0      	ldr	r7, [pc, #704]	; (405ca0 <__sfvwrite_r+0x2ec>)
  4059de:	46c8      	mov	r8, r9
  4059e0:	46b2      	mov	sl, r6
  4059e2:	45b8      	cmp	r8, r7
  4059e4:	4643      	mov	r3, r8
  4059e6:	464a      	mov	r2, r9
  4059e8:	bf28      	it	cs
  4059ea:	463b      	movcs	r3, r7
  4059ec:	9800      	ldr	r0, [sp, #0]
  4059ee:	f1b8 0f00 	cmp.w	r8, #0
  4059f2:	d050      	beq.n	405a96 <__sfvwrite_r+0xe2>
  4059f4:	69e1      	ldr	r1, [r4, #28]
  4059f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4059f8:	47b0      	blx	r6
  4059fa:	2800      	cmp	r0, #0
  4059fc:	dd58      	ble.n	405ab0 <__sfvwrite_r+0xfc>
  4059fe:	f8da 3008 	ldr.w	r3, [sl, #8]
  405a02:	1a1b      	subs	r3, r3, r0
  405a04:	4481      	add	r9, r0
  405a06:	eba8 0800 	sub.w	r8, r8, r0
  405a0a:	f8ca 3008 	str.w	r3, [sl, #8]
  405a0e:	2b00      	cmp	r3, #0
  405a10:	d1e7      	bne.n	4059e2 <__sfvwrite_r+0x2e>
  405a12:	2000      	movs	r0, #0
  405a14:	b003      	add	sp, #12
  405a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a1a:	4621      	mov	r1, r4
  405a1c:	9800      	ldr	r0, [sp, #0]
  405a1e:	f7ff fc51 	bl	4052c4 <__swsetup_r>
  405a22:	2800      	cmp	r0, #0
  405a24:	f040 8133 	bne.w	405c8e <__sfvwrite_r+0x2da>
  405a28:	89a3      	ldrh	r3, [r4, #12]
  405a2a:	6835      	ldr	r5, [r6, #0]
  405a2c:	f013 0002 	ands.w	r0, r3, #2
  405a30:	d1d2      	bne.n	4059d8 <__sfvwrite_r+0x24>
  405a32:	f013 0901 	ands.w	r9, r3, #1
  405a36:	d145      	bne.n	405ac4 <__sfvwrite_r+0x110>
  405a38:	464f      	mov	r7, r9
  405a3a:	9601      	str	r6, [sp, #4]
  405a3c:	b337      	cbz	r7, 405a8c <__sfvwrite_r+0xd8>
  405a3e:	059a      	lsls	r2, r3, #22
  405a40:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405a44:	f140 8083 	bpl.w	405b4e <__sfvwrite_r+0x19a>
  405a48:	4547      	cmp	r7, r8
  405a4a:	46c3      	mov	fp, r8
  405a4c:	f0c0 80ab 	bcc.w	405ba6 <__sfvwrite_r+0x1f2>
  405a50:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405a54:	f040 80ac 	bne.w	405bb0 <__sfvwrite_r+0x1fc>
  405a58:	6820      	ldr	r0, [r4, #0]
  405a5a:	46ba      	mov	sl, r7
  405a5c:	465a      	mov	r2, fp
  405a5e:	4649      	mov	r1, r9
  405a60:	f000 fa3e 	bl	405ee0 <memmove>
  405a64:	68a2      	ldr	r2, [r4, #8]
  405a66:	6823      	ldr	r3, [r4, #0]
  405a68:	eba2 0208 	sub.w	r2, r2, r8
  405a6c:	445b      	add	r3, fp
  405a6e:	60a2      	str	r2, [r4, #8]
  405a70:	6023      	str	r3, [r4, #0]
  405a72:	9a01      	ldr	r2, [sp, #4]
  405a74:	6893      	ldr	r3, [r2, #8]
  405a76:	eba3 030a 	sub.w	r3, r3, sl
  405a7a:	44d1      	add	r9, sl
  405a7c:	eba7 070a 	sub.w	r7, r7, sl
  405a80:	6093      	str	r3, [r2, #8]
  405a82:	2b00      	cmp	r3, #0
  405a84:	d0c5      	beq.n	405a12 <__sfvwrite_r+0x5e>
  405a86:	89a3      	ldrh	r3, [r4, #12]
  405a88:	2f00      	cmp	r7, #0
  405a8a:	d1d8      	bne.n	405a3e <__sfvwrite_r+0x8a>
  405a8c:	f8d5 9000 	ldr.w	r9, [r5]
  405a90:	686f      	ldr	r7, [r5, #4]
  405a92:	3508      	adds	r5, #8
  405a94:	e7d2      	b.n	405a3c <__sfvwrite_r+0x88>
  405a96:	f8d5 9000 	ldr.w	r9, [r5]
  405a9a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405a9e:	3508      	adds	r5, #8
  405aa0:	e79f      	b.n	4059e2 <__sfvwrite_r+0x2e>
  405aa2:	2000      	movs	r0, #0
  405aa4:	4770      	bx	lr
  405aa6:	4621      	mov	r1, r4
  405aa8:	9800      	ldr	r0, [sp, #0]
  405aaa:	f7ff fd1f 	bl	4054ec <_fflush_r>
  405aae:	b370      	cbz	r0, 405b0e <__sfvwrite_r+0x15a>
  405ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ab8:	f04f 30ff 	mov.w	r0, #4294967295
  405abc:	81a3      	strh	r3, [r4, #12]
  405abe:	b003      	add	sp, #12
  405ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ac4:	4681      	mov	r9, r0
  405ac6:	4633      	mov	r3, r6
  405ac8:	464e      	mov	r6, r9
  405aca:	46a8      	mov	r8, r5
  405acc:	469a      	mov	sl, r3
  405ace:	464d      	mov	r5, r9
  405ad0:	b34e      	cbz	r6, 405b26 <__sfvwrite_r+0x172>
  405ad2:	b380      	cbz	r0, 405b36 <__sfvwrite_r+0x182>
  405ad4:	6820      	ldr	r0, [r4, #0]
  405ad6:	6923      	ldr	r3, [r4, #16]
  405ad8:	6962      	ldr	r2, [r4, #20]
  405ada:	45b1      	cmp	r9, r6
  405adc:	46cb      	mov	fp, r9
  405ade:	bf28      	it	cs
  405ae0:	46b3      	movcs	fp, r6
  405ae2:	4298      	cmp	r0, r3
  405ae4:	465f      	mov	r7, fp
  405ae6:	d904      	bls.n	405af2 <__sfvwrite_r+0x13e>
  405ae8:	68a3      	ldr	r3, [r4, #8]
  405aea:	4413      	add	r3, r2
  405aec:	459b      	cmp	fp, r3
  405aee:	f300 80a6 	bgt.w	405c3e <__sfvwrite_r+0x28a>
  405af2:	4593      	cmp	fp, r2
  405af4:	db4b      	blt.n	405b8e <__sfvwrite_r+0x1da>
  405af6:	4613      	mov	r3, r2
  405af8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405afa:	69e1      	ldr	r1, [r4, #28]
  405afc:	9800      	ldr	r0, [sp, #0]
  405afe:	462a      	mov	r2, r5
  405b00:	47b8      	blx	r7
  405b02:	1e07      	subs	r7, r0, #0
  405b04:	ddd4      	ble.n	405ab0 <__sfvwrite_r+0xfc>
  405b06:	ebb9 0907 	subs.w	r9, r9, r7
  405b0a:	d0cc      	beq.n	405aa6 <__sfvwrite_r+0xf2>
  405b0c:	2001      	movs	r0, #1
  405b0e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405b12:	1bdb      	subs	r3, r3, r7
  405b14:	443d      	add	r5, r7
  405b16:	1bf6      	subs	r6, r6, r7
  405b18:	f8ca 3008 	str.w	r3, [sl, #8]
  405b1c:	2b00      	cmp	r3, #0
  405b1e:	f43f af78 	beq.w	405a12 <__sfvwrite_r+0x5e>
  405b22:	2e00      	cmp	r6, #0
  405b24:	d1d5      	bne.n	405ad2 <__sfvwrite_r+0x11e>
  405b26:	f108 0308 	add.w	r3, r8, #8
  405b2a:	e913 0060 	ldmdb	r3, {r5, r6}
  405b2e:	4698      	mov	r8, r3
  405b30:	3308      	adds	r3, #8
  405b32:	2e00      	cmp	r6, #0
  405b34:	d0f9      	beq.n	405b2a <__sfvwrite_r+0x176>
  405b36:	4632      	mov	r2, r6
  405b38:	210a      	movs	r1, #10
  405b3a:	4628      	mov	r0, r5
  405b3c:	f000 f980 	bl	405e40 <memchr>
  405b40:	2800      	cmp	r0, #0
  405b42:	f000 80a1 	beq.w	405c88 <__sfvwrite_r+0x2d4>
  405b46:	3001      	adds	r0, #1
  405b48:	eba0 0905 	sub.w	r9, r0, r5
  405b4c:	e7c2      	b.n	405ad4 <__sfvwrite_r+0x120>
  405b4e:	6820      	ldr	r0, [r4, #0]
  405b50:	6923      	ldr	r3, [r4, #16]
  405b52:	4298      	cmp	r0, r3
  405b54:	d802      	bhi.n	405b5c <__sfvwrite_r+0x1a8>
  405b56:	6963      	ldr	r3, [r4, #20]
  405b58:	429f      	cmp	r7, r3
  405b5a:	d25d      	bcs.n	405c18 <__sfvwrite_r+0x264>
  405b5c:	45b8      	cmp	r8, r7
  405b5e:	bf28      	it	cs
  405b60:	46b8      	movcs	r8, r7
  405b62:	4642      	mov	r2, r8
  405b64:	4649      	mov	r1, r9
  405b66:	f000 f9bb 	bl	405ee0 <memmove>
  405b6a:	68a3      	ldr	r3, [r4, #8]
  405b6c:	6822      	ldr	r2, [r4, #0]
  405b6e:	eba3 0308 	sub.w	r3, r3, r8
  405b72:	4442      	add	r2, r8
  405b74:	60a3      	str	r3, [r4, #8]
  405b76:	6022      	str	r2, [r4, #0]
  405b78:	b10b      	cbz	r3, 405b7e <__sfvwrite_r+0x1ca>
  405b7a:	46c2      	mov	sl, r8
  405b7c:	e779      	b.n	405a72 <__sfvwrite_r+0xbe>
  405b7e:	4621      	mov	r1, r4
  405b80:	9800      	ldr	r0, [sp, #0]
  405b82:	f7ff fcb3 	bl	4054ec <_fflush_r>
  405b86:	2800      	cmp	r0, #0
  405b88:	d192      	bne.n	405ab0 <__sfvwrite_r+0xfc>
  405b8a:	46c2      	mov	sl, r8
  405b8c:	e771      	b.n	405a72 <__sfvwrite_r+0xbe>
  405b8e:	465a      	mov	r2, fp
  405b90:	4629      	mov	r1, r5
  405b92:	f000 f9a5 	bl	405ee0 <memmove>
  405b96:	68a2      	ldr	r2, [r4, #8]
  405b98:	6823      	ldr	r3, [r4, #0]
  405b9a:	eba2 020b 	sub.w	r2, r2, fp
  405b9e:	445b      	add	r3, fp
  405ba0:	60a2      	str	r2, [r4, #8]
  405ba2:	6023      	str	r3, [r4, #0]
  405ba4:	e7af      	b.n	405b06 <__sfvwrite_r+0x152>
  405ba6:	6820      	ldr	r0, [r4, #0]
  405ba8:	46b8      	mov	r8, r7
  405baa:	46ba      	mov	sl, r7
  405bac:	46bb      	mov	fp, r7
  405bae:	e755      	b.n	405a5c <__sfvwrite_r+0xa8>
  405bb0:	6962      	ldr	r2, [r4, #20]
  405bb2:	6820      	ldr	r0, [r4, #0]
  405bb4:	6921      	ldr	r1, [r4, #16]
  405bb6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405bba:	eba0 0a01 	sub.w	sl, r0, r1
  405bbe:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405bc2:	f10a 0001 	add.w	r0, sl, #1
  405bc6:	ea4f 0868 	mov.w	r8, r8, asr #1
  405bca:	4438      	add	r0, r7
  405bcc:	4540      	cmp	r0, r8
  405bce:	4642      	mov	r2, r8
  405bd0:	bf84      	itt	hi
  405bd2:	4680      	movhi	r8, r0
  405bd4:	4642      	movhi	r2, r8
  405bd6:	055b      	lsls	r3, r3, #21
  405bd8:	d544      	bpl.n	405c64 <__sfvwrite_r+0x2b0>
  405bda:	4611      	mov	r1, r2
  405bdc:	9800      	ldr	r0, [sp, #0]
  405bde:	f7fe f821 	bl	403c24 <_malloc_r>
  405be2:	4683      	mov	fp, r0
  405be4:	2800      	cmp	r0, #0
  405be6:	d055      	beq.n	405c94 <__sfvwrite_r+0x2e0>
  405be8:	4652      	mov	r2, sl
  405bea:	6921      	ldr	r1, [r4, #16]
  405bec:	f7fe faca 	bl	404184 <memcpy>
  405bf0:	89a3      	ldrh	r3, [r4, #12]
  405bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405bfa:	81a3      	strh	r3, [r4, #12]
  405bfc:	eb0b 000a 	add.w	r0, fp, sl
  405c00:	eba8 030a 	sub.w	r3, r8, sl
  405c04:	f8c4 b010 	str.w	fp, [r4, #16]
  405c08:	f8c4 8014 	str.w	r8, [r4, #20]
  405c0c:	6020      	str	r0, [r4, #0]
  405c0e:	60a3      	str	r3, [r4, #8]
  405c10:	46b8      	mov	r8, r7
  405c12:	46ba      	mov	sl, r7
  405c14:	46bb      	mov	fp, r7
  405c16:	e721      	b.n	405a5c <__sfvwrite_r+0xa8>
  405c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405c1c:	42b9      	cmp	r1, r7
  405c1e:	bf28      	it	cs
  405c20:	4639      	movcs	r1, r7
  405c22:	464a      	mov	r2, r9
  405c24:	fb91 f1f3 	sdiv	r1, r1, r3
  405c28:	9800      	ldr	r0, [sp, #0]
  405c2a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405c2c:	fb03 f301 	mul.w	r3, r3, r1
  405c30:	69e1      	ldr	r1, [r4, #28]
  405c32:	47b0      	blx	r6
  405c34:	f1b0 0a00 	subs.w	sl, r0, #0
  405c38:	f73f af1b 	bgt.w	405a72 <__sfvwrite_r+0xbe>
  405c3c:	e738      	b.n	405ab0 <__sfvwrite_r+0xfc>
  405c3e:	461a      	mov	r2, r3
  405c40:	4629      	mov	r1, r5
  405c42:	9301      	str	r3, [sp, #4]
  405c44:	f000 f94c 	bl	405ee0 <memmove>
  405c48:	6822      	ldr	r2, [r4, #0]
  405c4a:	9b01      	ldr	r3, [sp, #4]
  405c4c:	9800      	ldr	r0, [sp, #0]
  405c4e:	441a      	add	r2, r3
  405c50:	6022      	str	r2, [r4, #0]
  405c52:	4621      	mov	r1, r4
  405c54:	f7ff fc4a 	bl	4054ec <_fflush_r>
  405c58:	9b01      	ldr	r3, [sp, #4]
  405c5a:	2800      	cmp	r0, #0
  405c5c:	f47f af28 	bne.w	405ab0 <__sfvwrite_r+0xfc>
  405c60:	461f      	mov	r7, r3
  405c62:	e750      	b.n	405b06 <__sfvwrite_r+0x152>
  405c64:	9800      	ldr	r0, [sp, #0]
  405c66:	f000 f99f 	bl	405fa8 <_realloc_r>
  405c6a:	4683      	mov	fp, r0
  405c6c:	2800      	cmp	r0, #0
  405c6e:	d1c5      	bne.n	405bfc <__sfvwrite_r+0x248>
  405c70:	9d00      	ldr	r5, [sp, #0]
  405c72:	6921      	ldr	r1, [r4, #16]
  405c74:	4628      	mov	r0, r5
  405c76:	f7ff fdb7 	bl	4057e8 <_free_r>
  405c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c7e:	220c      	movs	r2, #12
  405c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405c84:	602a      	str	r2, [r5, #0]
  405c86:	e715      	b.n	405ab4 <__sfvwrite_r+0x100>
  405c88:	f106 0901 	add.w	r9, r6, #1
  405c8c:	e722      	b.n	405ad4 <__sfvwrite_r+0x120>
  405c8e:	f04f 30ff 	mov.w	r0, #4294967295
  405c92:	e6bf      	b.n	405a14 <__sfvwrite_r+0x60>
  405c94:	9a00      	ldr	r2, [sp, #0]
  405c96:	230c      	movs	r3, #12
  405c98:	6013      	str	r3, [r2, #0]
  405c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405c9e:	e709      	b.n	405ab4 <__sfvwrite_r+0x100>
  405ca0:	7ffffc00 	.word	0x7ffffc00

00405ca4 <_fwalk_reent>:
  405ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405ca8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405cac:	d01f      	beq.n	405cee <_fwalk_reent+0x4a>
  405cae:	4688      	mov	r8, r1
  405cb0:	4606      	mov	r6, r0
  405cb2:	f04f 0900 	mov.w	r9, #0
  405cb6:	687d      	ldr	r5, [r7, #4]
  405cb8:	68bc      	ldr	r4, [r7, #8]
  405cba:	3d01      	subs	r5, #1
  405cbc:	d411      	bmi.n	405ce2 <_fwalk_reent+0x3e>
  405cbe:	89a3      	ldrh	r3, [r4, #12]
  405cc0:	2b01      	cmp	r3, #1
  405cc2:	f105 35ff 	add.w	r5, r5, #4294967295
  405cc6:	d908      	bls.n	405cda <_fwalk_reent+0x36>
  405cc8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405ccc:	3301      	adds	r3, #1
  405cce:	4621      	mov	r1, r4
  405cd0:	4630      	mov	r0, r6
  405cd2:	d002      	beq.n	405cda <_fwalk_reent+0x36>
  405cd4:	47c0      	blx	r8
  405cd6:	ea49 0900 	orr.w	r9, r9, r0
  405cda:	1c6b      	adds	r3, r5, #1
  405cdc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405ce0:	d1ed      	bne.n	405cbe <_fwalk_reent+0x1a>
  405ce2:	683f      	ldr	r7, [r7, #0]
  405ce4:	2f00      	cmp	r7, #0
  405ce6:	d1e6      	bne.n	405cb6 <_fwalk_reent+0x12>
  405ce8:	4648      	mov	r0, r9
  405cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405cee:	46b9      	mov	r9, r7
  405cf0:	4648      	mov	r0, r9
  405cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405cf6:	bf00      	nop

00405cf8 <__locale_mb_cur_max>:
  405cf8:	4b04      	ldr	r3, [pc, #16]	; (405d0c <__locale_mb_cur_max+0x14>)
  405cfa:	4a05      	ldr	r2, [pc, #20]	; (405d10 <__locale_mb_cur_max+0x18>)
  405cfc:	681b      	ldr	r3, [r3, #0]
  405cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405d00:	2b00      	cmp	r3, #0
  405d02:	bf08      	it	eq
  405d04:	4613      	moveq	r3, r2
  405d06:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405d0a:	4770      	bx	lr
  405d0c:	20400010 	.word	0x20400010
  405d10:	20400854 	.word	0x20400854

00405d14 <__retarget_lock_init_recursive>:
  405d14:	4770      	bx	lr
  405d16:	bf00      	nop

00405d18 <__retarget_lock_close_recursive>:
  405d18:	4770      	bx	lr
  405d1a:	bf00      	nop

00405d1c <__retarget_lock_acquire_recursive>:
  405d1c:	4770      	bx	lr
  405d1e:	bf00      	nop

00405d20 <__retarget_lock_release_recursive>:
  405d20:	4770      	bx	lr
  405d22:	bf00      	nop

00405d24 <__swhatbuf_r>:
  405d24:	b570      	push	{r4, r5, r6, lr}
  405d26:	460c      	mov	r4, r1
  405d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405d2c:	2900      	cmp	r1, #0
  405d2e:	b090      	sub	sp, #64	; 0x40
  405d30:	4615      	mov	r5, r2
  405d32:	461e      	mov	r6, r3
  405d34:	db14      	blt.n	405d60 <__swhatbuf_r+0x3c>
  405d36:	aa01      	add	r2, sp, #4
  405d38:	f000 fd0c 	bl	406754 <_fstat_r>
  405d3c:	2800      	cmp	r0, #0
  405d3e:	db0f      	blt.n	405d60 <__swhatbuf_r+0x3c>
  405d40:	9a02      	ldr	r2, [sp, #8]
  405d42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405d46:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405d4a:	fab2 f282 	clz	r2, r2
  405d4e:	0952      	lsrs	r2, r2, #5
  405d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405d54:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405d58:	6032      	str	r2, [r6, #0]
  405d5a:	602b      	str	r3, [r5, #0]
  405d5c:	b010      	add	sp, #64	; 0x40
  405d5e:	bd70      	pop	{r4, r5, r6, pc}
  405d60:	89a2      	ldrh	r2, [r4, #12]
  405d62:	2300      	movs	r3, #0
  405d64:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405d68:	6033      	str	r3, [r6, #0]
  405d6a:	d004      	beq.n	405d76 <__swhatbuf_r+0x52>
  405d6c:	2240      	movs	r2, #64	; 0x40
  405d6e:	4618      	mov	r0, r3
  405d70:	602a      	str	r2, [r5, #0]
  405d72:	b010      	add	sp, #64	; 0x40
  405d74:	bd70      	pop	{r4, r5, r6, pc}
  405d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405d7a:	602b      	str	r3, [r5, #0]
  405d7c:	b010      	add	sp, #64	; 0x40
  405d7e:	bd70      	pop	{r4, r5, r6, pc}

00405d80 <__smakebuf_r>:
  405d80:	898a      	ldrh	r2, [r1, #12]
  405d82:	0792      	lsls	r2, r2, #30
  405d84:	460b      	mov	r3, r1
  405d86:	d506      	bpl.n	405d96 <__smakebuf_r+0x16>
  405d88:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405d8c:	2101      	movs	r1, #1
  405d8e:	601a      	str	r2, [r3, #0]
  405d90:	611a      	str	r2, [r3, #16]
  405d92:	6159      	str	r1, [r3, #20]
  405d94:	4770      	bx	lr
  405d96:	b5f0      	push	{r4, r5, r6, r7, lr}
  405d98:	b083      	sub	sp, #12
  405d9a:	ab01      	add	r3, sp, #4
  405d9c:	466a      	mov	r2, sp
  405d9e:	460c      	mov	r4, r1
  405da0:	4606      	mov	r6, r0
  405da2:	f7ff ffbf 	bl	405d24 <__swhatbuf_r>
  405da6:	9900      	ldr	r1, [sp, #0]
  405da8:	4605      	mov	r5, r0
  405daa:	4630      	mov	r0, r6
  405dac:	f7fd ff3a 	bl	403c24 <_malloc_r>
  405db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405db4:	b1d8      	cbz	r0, 405dee <__smakebuf_r+0x6e>
  405db6:	9a01      	ldr	r2, [sp, #4]
  405db8:	4f15      	ldr	r7, [pc, #84]	; (405e10 <__smakebuf_r+0x90>)
  405dba:	9900      	ldr	r1, [sp, #0]
  405dbc:	63f7      	str	r7, [r6, #60]	; 0x3c
  405dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405dc2:	81a3      	strh	r3, [r4, #12]
  405dc4:	6020      	str	r0, [r4, #0]
  405dc6:	6120      	str	r0, [r4, #16]
  405dc8:	6161      	str	r1, [r4, #20]
  405dca:	b91a      	cbnz	r2, 405dd4 <__smakebuf_r+0x54>
  405dcc:	432b      	orrs	r3, r5
  405dce:	81a3      	strh	r3, [r4, #12]
  405dd0:	b003      	add	sp, #12
  405dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405dd4:	4630      	mov	r0, r6
  405dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405dda:	f000 fccf 	bl	40677c <_isatty_r>
  405dde:	b1a0      	cbz	r0, 405e0a <__smakebuf_r+0x8a>
  405de0:	89a3      	ldrh	r3, [r4, #12]
  405de2:	f023 0303 	bic.w	r3, r3, #3
  405de6:	f043 0301 	orr.w	r3, r3, #1
  405dea:	b21b      	sxth	r3, r3
  405dec:	e7ee      	b.n	405dcc <__smakebuf_r+0x4c>
  405dee:	059a      	lsls	r2, r3, #22
  405df0:	d4ee      	bmi.n	405dd0 <__smakebuf_r+0x50>
  405df2:	f023 0303 	bic.w	r3, r3, #3
  405df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405dfa:	f043 0302 	orr.w	r3, r3, #2
  405dfe:	2101      	movs	r1, #1
  405e00:	81a3      	strh	r3, [r4, #12]
  405e02:	6022      	str	r2, [r4, #0]
  405e04:	6122      	str	r2, [r4, #16]
  405e06:	6161      	str	r1, [r4, #20]
  405e08:	e7e2      	b.n	405dd0 <__smakebuf_r+0x50>
  405e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e0e:	e7dd      	b.n	405dcc <__smakebuf_r+0x4c>
  405e10:	00405541 	.word	0x00405541

00405e14 <__ascii_mbtowc>:
  405e14:	b082      	sub	sp, #8
  405e16:	b149      	cbz	r1, 405e2c <__ascii_mbtowc+0x18>
  405e18:	b15a      	cbz	r2, 405e32 <__ascii_mbtowc+0x1e>
  405e1a:	b16b      	cbz	r3, 405e38 <__ascii_mbtowc+0x24>
  405e1c:	7813      	ldrb	r3, [r2, #0]
  405e1e:	600b      	str	r3, [r1, #0]
  405e20:	7812      	ldrb	r2, [r2, #0]
  405e22:	1c10      	adds	r0, r2, #0
  405e24:	bf18      	it	ne
  405e26:	2001      	movne	r0, #1
  405e28:	b002      	add	sp, #8
  405e2a:	4770      	bx	lr
  405e2c:	a901      	add	r1, sp, #4
  405e2e:	2a00      	cmp	r2, #0
  405e30:	d1f3      	bne.n	405e1a <__ascii_mbtowc+0x6>
  405e32:	4610      	mov	r0, r2
  405e34:	b002      	add	sp, #8
  405e36:	4770      	bx	lr
  405e38:	f06f 0001 	mvn.w	r0, #1
  405e3c:	e7f4      	b.n	405e28 <__ascii_mbtowc+0x14>
  405e3e:	bf00      	nop

00405e40 <memchr>:
  405e40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405e44:	2a10      	cmp	r2, #16
  405e46:	db2b      	blt.n	405ea0 <memchr+0x60>
  405e48:	f010 0f07 	tst.w	r0, #7
  405e4c:	d008      	beq.n	405e60 <memchr+0x20>
  405e4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405e52:	3a01      	subs	r2, #1
  405e54:	428b      	cmp	r3, r1
  405e56:	d02d      	beq.n	405eb4 <memchr+0x74>
  405e58:	f010 0f07 	tst.w	r0, #7
  405e5c:	b342      	cbz	r2, 405eb0 <memchr+0x70>
  405e5e:	d1f6      	bne.n	405e4e <memchr+0xe>
  405e60:	b4f0      	push	{r4, r5, r6, r7}
  405e62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405e66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405e6a:	f022 0407 	bic.w	r4, r2, #7
  405e6e:	f07f 0700 	mvns.w	r7, #0
  405e72:	2300      	movs	r3, #0
  405e74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405e78:	3c08      	subs	r4, #8
  405e7a:	ea85 0501 	eor.w	r5, r5, r1
  405e7e:	ea86 0601 	eor.w	r6, r6, r1
  405e82:	fa85 f547 	uadd8	r5, r5, r7
  405e86:	faa3 f587 	sel	r5, r3, r7
  405e8a:	fa86 f647 	uadd8	r6, r6, r7
  405e8e:	faa5 f687 	sel	r6, r5, r7
  405e92:	b98e      	cbnz	r6, 405eb8 <memchr+0x78>
  405e94:	d1ee      	bne.n	405e74 <memchr+0x34>
  405e96:	bcf0      	pop	{r4, r5, r6, r7}
  405e98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405e9c:	f002 0207 	and.w	r2, r2, #7
  405ea0:	b132      	cbz	r2, 405eb0 <memchr+0x70>
  405ea2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ea6:	3a01      	subs	r2, #1
  405ea8:	ea83 0301 	eor.w	r3, r3, r1
  405eac:	b113      	cbz	r3, 405eb4 <memchr+0x74>
  405eae:	d1f8      	bne.n	405ea2 <memchr+0x62>
  405eb0:	2000      	movs	r0, #0
  405eb2:	4770      	bx	lr
  405eb4:	3801      	subs	r0, #1
  405eb6:	4770      	bx	lr
  405eb8:	2d00      	cmp	r5, #0
  405eba:	bf06      	itte	eq
  405ebc:	4635      	moveq	r5, r6
  405ebe:	3803      	subeq	r0, #3
  405ec0:	3807      	subne	r0, #7
  405ec2:	f015 0f01 	tst.w	r5, #1
  405ec6:	d107      	bne.n	405ed8 <memchr+0x98>
  405ec8:	3001      	adds	r0, #1
  405eca:	f415 7f80 	tst.w	r5, #256	; 0x100
  405ece:	bf02      	ittt	eq
  405ed0:	3001      	addeq	r0, #1
  405ed2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405ed6:	3001      	addeq	r0, #1
  405ed8:	bcf0      	pop	{r4, r5, r6, r7}
  405eda:	3801      	subs	r0, #1
  405edc:	4770      	bx	lr
  405ede:	bf00      	nop

00405ee0 <memmove>:
  405ee0:	4288      	cmp	r0, r1
  405ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ee4:	d90d      	bls.n	405f02 <memmove+0x22>
  405ee6:	188b      	adds	r3, r1, r2
  405ee8:	4298      	cmp	r0, r3
  405eea:	d20a      	bcs.n	405f02 <memmove+0x22>
  405eec:	1884      	adds	r4, r0, r2
  405eee:	2a00      	cmp	r2, #0
  405ef0:	d051      	beq.n	405f96 <memmove+0xb6>
  405ef2:	4622      	mov	r2, r4
  405ef4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405ef8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405efc:	4299      	cmp	r1, r3
  405efe:	d1f9      	bne.n	405ef4 <memmove+0x14>
  405f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f02:	2a0f      	cmp	r2, #15
  405f04:	d948      	bls.n	405f98 <memmove+0xb8>
  405f06:	ea41 0300 	orr.w	r3, r1, r0
  405f0a:	079b      	lsls	r3, r3, #30
  405f0c:	d146      	bne.n	405f9c <memmove+0xbc>
  405f0e:	f100 0410 	add.w	r4, r0, #16
  405f12:	f101 0310 	add.w	r3, r1, #16
  405f16:	4615      	mov	r5, r2
  405f18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405f1c:	f844 6c10 	str.w	r6, [r4, #-16]
  405f20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405f24:	f844 6c0c 	str.w	r6, [r4, #-12]
  405f28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405f2c:	f844 6c08 	str.w	r6, [r4, #-8]
  405f30:	3d10      	subs	r5, #16
  405f32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405f36:	f844 6c04 	str.w	r6, [r4, #-4]
  405f3a:	2d0f      	cmp	r5, #15
  405f3c:	f103 0310 	add.w	r3, r3, #16
  405f40:	f104 0410 	add.w	r4, r4, #16
  405f44:	d8e8      	bhi.n	405f18 <memmove+0x38>
  405f46:	f1a2 0310 	sub.w	r3, r2, #16
  405f4a:	f023 030f 	bic.w	r3, r3, #15
  405f4e:	f002 0e0f 	and.w	lr, r2, #15
  405f52:	3310      	adds	r3, #16
  405f54:	f1be 0f03 	cmp.w	lr, #3
  405f58:	4419      	add	r1, r3
  405f5a:	4403      	add	r3, r0
  405f5c:	d921      	bls.n	405fa2 <memmove+0xc2>
  405f5e:	1f1e      	subs	r6, r3, #4
  405f60:	460d      	mov	r5, r1
  405f62:	4674      	mov	r4, lr
  405f64:	3c04      	subs	r4, #4
  405f66:	f855 7b04 	ldr.w	r7, [r5], #4
  405f6a:	f846 7f04 	str.w	r7, [r6, #4]!
  405f6e:	2c03      	cmp	r4, #3
  405f70:	d8f8      	bhi.n	405f64 <memmove+0x84>
  405f72:	f1ae 0404 	sub.w	r4, lr, #4
  405f76:	f024 0403 	bic.w	r4, r4, #3
  405f7a:	3404      	adds	r4, #4
  405f7c:	4421      	add	r1, r4
  405f7e:	4423      	add	r3, r4
  405f80:	f002 0203 	and.w	r2, r2, #3
  405f84:	b162      	cbz	r2, 405fa0 <memmove+0xc0>
  405f86:	3b01      	subs	r3, #1
  405f88:	440a      	add	r2, r1
  405f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  405f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405f92:	428a      	cmp	r2, r1
  405f94:	d1f9      	bne.n	405f8a <memmove+0xaa>
  405f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405f98:	4603      	mov	r3, r0
  405f9a:	e7f3      	b.n	405f84 <memmove+0xa4>
  405f9c:	4603      	mov	r3, r0
  405f9e:	e7f2      	b.n	405f86 <memmove+0xa6>
  405fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fa2:	4672      	mov	r2, lr
  405fa4:	e7ee      	b.n	405f84 <memmove+0xa4>
  405fa6:	bf00      	nop

00405fa8 <_realloc_r>:
  405fa8:	2900      	cmp	r1, #0
  405faa:	f000 8095 	beq.w	4060d8 <_realloc_r+0x130>
  405fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fb2:	460d      	mov	r5, r1
  405fb4:	4616      	mov	r6, r2
  405fb6:	b083      	sub	sp, #12
  405fb8:	4680      	mov	r8, r0
  405fba:	f106 070b 	add.w	r7, r6, #11
  405fbe:	f7fe f9c9 	bl	404354 <__malloc_lock>
  405fc2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405fc6:	2f16      	cmp	r7, #22
  405fc8:	f02e 0403 	bic.w	r4, lr, #3
  405fcc:	f1a5 0908 	sub.w	r9, r5, #8
  405fd0:	d83c      	bhi.n	40604c <_realloc_r+0xa4>
  405fd2:	2210      	movs	r2, #16
  405fd4:	4617      	mov	r7, r2
  405fd6:	42be      	cmp	r6, r7
  405fd8:	d83d      	bhi.n	406056 <_realloc_r+0xae>
  405fda:	4294      	cmp	r4, r2
  405fdc:	da43      	bge.n	406066 <_realloc_r+0xbe>
  405fde:	4bc4      	ldr	r3, [pc, #784]	; (4062f0 <_realloc_r+0x348>)
  405fe0:	6899      	ldr	r1, [r3, #8]
  405fe2:	eb09 0004 	add.w	r0, r9, r4
  405fe6:	4288      	cmp	r0, r1
  405fe8:	f000 80b4 	beq.w	406154 <_realloc_r+0x1ac>
  405fec:	6843      	ldr	r3, [r0, #4]
  405fee:	f023 0101 	bic.w	r1, r3, #1
  405ff2:	4401      	add	r1, r0
  405ff4:	6849      	ldr	r1, [r1, #4]
  405ff6:	07c9      	lsls	r1, r1, #31
  405ff8:	d54c      	bpl.n	406094 <_realloc_r+0xec>
  405ffa:	f01e 0f01 	tst.w	lr, #1
  405ffe:	f000 809b 	beq.w	406138 <_realloc_r+0x190>
  406002:	4631      	mov	r1, r6
  406004:	4640      	mov	r0, r8
  406006:	f7fd fe0d 	bl	403c24 <_malloc_r>
  40600a:	4606      	mov	r6, r0
  40600c:	2800      	cmp	r0, #0
  40600e:	d03a      	beq.n	406086 <_realloc_r+0xde>
  406010:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406014:	f023 0301 	bic.w	r3, r3, #1
  406018:	444b      	add	r3, r9
  40601a:	f1a0 0208 	sub.w	r2, r0, #8
  40601e:	429a      	cmp	r2, r3
  406020:	f000 8121 	beq.w	406266 <_realloc_r+0x2be>
  406024:	1f22      	subs	r2, r4, #4
  406026:	2a24      	cmp	r2, #36	; 0x24
  406028:	f200 8107 	bhi.w	40623a <_realloc_r+0x292>
  40602c:	2a13      	cmp	r2, #19
  40602e:	f200 80db 	bhi.w	4061e8 <_realloc_r+0x240>
  406032:	4603      	mov	r3, r0
  406034:	462a      	mov	r2, r5
  406036:	6811      	ldr	r1, [r2, #0]
  406038:	6019      	str	r1, [r3, #0]
  40603a:	6851      	ldr	r1, [r2, #4]
  40603c:	6059      	str	r1, [r3, #4]
  40603e:	6892      	ldr	r2, [r2, #8]
  406040:	609a      	str	r2, [r3, #8]
  406042:	4629      	mov	r1, r5
  406044:	4640      	mov	r0, r8
  406046:	f7ff fbcf 	bl	4057e8 <_free_r>
  40604a:	e01c      	b.n	406086 <_realloc_r+0xde>
  40604c:	f027 0707 	bic.w	r7, r7, #7
  406050:	2f00      	cmp	r7, #0
  406052:	463a      	mov	r2, r7
  406054:	dabf      	bge.n	405fd6 <_realloc_r+0x2e>
  406056:	2600      	movs	r6, #0
  406058:	230c      	movs	r3, #12
  40605a:	4630      	mov	r0, r6
  40605c:	f8c8 3000 	str.w	r3, [r8]
  406060:	b003      	add	sp, #12
  406062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406066:	462e      	mov	r6, r5
  406068:	1be3      	subs	r3, r4, r7
  40606a:	2b0f      	cmp	r3, #15
  40606c:	d81e      	bhi.n	4060ac <_realloc_r+0x104>
  40606e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406072:	f003 0301 	and.w	r3, r3, #1
  406076:	4323      	orrs	r3, r4
  406078:	444c      	add	r4, r9
  40607a:	f8c9 3004 	str.w	r3, [r9, #4]
  40607e:	6863      	ldr	r3, [r4, #4]
  406080:	f043 0301 	orr.w	r3, r3, #1
  406084:	6063      	str	r3, [r4, #4]
  406086:	4640      	mov	r0, r8
  406088:	f7fe f96a 	bl	404360 <__malloc_unlock>
  40608c:	4630      	mov	r0, r6
  40608e:	b003      	add	sp, #12
  406090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406094:	f023 0303 	bic.w	r3, r3, #3
  406098:	18e1      	adds	r1, r4, r3
  40609a:	4291      	cmp	r1, r2
  40609c:	db1f      	blt.n	4060de <_realloc_r+0x136>
  40609e:	68c3      	ldr	r3, [r0, #12]
  4060a0:	6882      	ldr	r2, [r0, #8]
  4060a2:	462e      	mov	r6, r5
  4060a4:	60d3      	str	r3, [r2, #12]
  4060a6:	460c      	mov	r4, r1
  4060a8:	609a      	str	r2, [r3, #8]
  4060aa:	e7dd      	b.n	406068 <_realloc_r+0xc0>
  4060ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4060b0:	eb09 0107 	add.w	r1, r9, r7
  4060b4:	f002 0201 	and.w	r2, r2, #1
  4060b8:	444c      	add	r4, r9
  4060ba:	f043 0301 	orr.w	r3, r3, #1
  4060be:	4317      	orrs	r7, r2
  4060c0:	f8c9 7004 	str.w	r7, [r9, #4]
  4060c4:	604b      	str	r3, [r1, #4]
  4060c6:	6863      	ldr	r3, [r4, #4]
  4060c8:	f043 0301 	orr.w	r3, r3, #1
  4060cc:	3108      	adds	r1, #8
  4060ce:	6063      	str	r3, [r4, #4]
  4060d0:	4640      	mov	r0, r8
  4060d2:	f7ff fb89 	bl	4057e8 <_free_r>
  4060d6:	e7d6      	b.n	406086 <_realloc_r+0xde>
  4060d8:	4611      	mov	r1, r2
  4060da:	f7fd bda3 	b.w	403c24 <_malloc_r>
  4060de:	f01e 0f01 	tst.w	lr, #1
  4060e2:	d18e      	bne.n	406002 <_realloc_r+0x5a>
  4060e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4060e8:	eba9 0a01 	sub.w	sl, r9, r1
  4060ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  4060f0:	f021 0103 	bic.w	r1, r1, #3
  4060f4:	440b      	add	r3, r1
  4060f6:	4423      	add	r3, r4
  4060f8:	4293      	cmp	r3, r2
  4060fa:	db25      	blt.n	406148 <_realloc_r+0x1a0>
  4060fc:	68c2      	ldr	r2, [r0, #12]
  4060fe:	6881      	ldr	r1, [r0, #8]
  406100:	4656      	mov	r6, sl
  406102:	60ca      	str	r2, [r1, #12]
  406104:	6091      	str	r1, [r2, #8]
  406106:	f8da 100c 	ldr.w	r1, [sl, #12]
  40610a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40610e:	1f22      	subs	r2, r4, #4
  406110:	2a24      	cmp	r2, #36	; 0x24
  406112:	60c1      	str	r1, [r0, #12]
  406114:	6088      	str	r0, [r1, #8]
  406116:	f200 8094 	bhi.w	406242 <_realloc_r+0x29a>
  40611a:	2a13      	cmp	r2, #19
  40611c:	d96f      	bls.n	4061fe <_realloc_r+0x256>
  40611e:	6829      	ldr	r1, [r5, #0]
  406120:	f8ca 1008 	str.w	r1, [sl, #8]
  406124:	6869      	ldr	r1, [r5, #4]
  406126:	f8ca 100c 	str.w	r1, [sl, #12]
  40612a:	2a1b      	cmp	r2, #27
  40612c:	f200 80a2 	bhi.w	406274 <_realloc_r+0x2cc>
  406130:	3508      	adds	r5, #8
  406132:	f10a 0210 	add.w	r2, sl, #16
  406136:	e063      	b.n	406200 <_realloc_r+0x258>
  406138:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40613c:	eba9 0a03 	sub.w	sl, r9, r3
  406140:	f8da 1004 	ldr.w	r1, [sl, #4]
  406144:	f021 0103 	bic.w	r1, r1, #3
  406148:	1863      	adds	r3, r4, r1
  40614a:	4293      	cmp	r3, r2
  40614c:	f6ff af59 	blt.w	406002 <_realloc_r+0x5a>
  406150:	4656      	mov	r6, sl
  406152:	e7d8      	b.n	406106 <_realloc_r+0x15e>
  406154:	6841      	ldr	r1, [r0, #4]
  406156:	f021 0b03 	bic.w	fp, r1, #3
  40615a:	44a3      	add	fp, r4
  40615c:	f107 0010 	add.w	r0, r7, #16
  406160:	4583      	cmp	fp, r0
  406162:	da56      	bge.n	406212 <_realloc_r+0x26a>
  406164:	f01e 0f01 	tst.w	lr, #1
  406168:	f47f af4b 	bne.w	406002 <_realloc_r+0x5a>
  40616c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406170:	eba9 0a01 	sub.w	sl, r9, r1
  406174:	f8da 1004 	ldr.w	r1, [sl, #4]
  406178:	f021 0103 	bic.w	r1, r1, #3
  40617c:	448b      	add	fp, r1
  40617e:	4558      	cmp	r0, fp
  406180:	dce2      	bgt.n	406148 <_realloc_r+0x1a0>
  406182:	4656      	mov	r6, sl
  406184:	f8da 100c 	ldr.w	r1, [sl, #12]
  406188:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40618c:	1f22      	subs	r2, r4, #4
  40618e:	2a24      	cmp	r2, #36	; 0x24
  406190:	60c1      	str	r1, [r0, #12]
  406192:	6088      	str	r0, [r1, #8]
  406194:	f200 808f 	bhi.w	4062b6 <_realloc_r+0x30e>
  406198:	2a13      	cmp	r2, #19
  40619a:	f240 808a 	bls.w	4062b2 <_realloc_r+0x30a>
  40619e:	6829      	ldr	r1, [r5, #0]
  4061a0:	f8ca 1008 	str.w	r1, [sl, #8]
  4061a4:	6869      	ldr	r1, [r5, #4]
  4061a6:	f8ca 100c 	str.w	r1, [sl, #12]
  4061aa:	2a1b      	cmp	r2, #27
  4061ac:	f200 808a 	bhi.w	4062c4 <_realloc_r+0x31c>
  4061b0:	3508      	adds	r5, #8
  4061b2:	f10a 0210 	add.w	r2, sl, #16
  4061b6:	6829      	ldr	r1, [r5, #0]
  4061b8:	6011      	str	r1, [r2, #0]
  4061ba:	6869      	ldr	r1, [r5, #4]
  4061bc:	6051      	str	r1, [r2, #4]
  4061be:	68a9      	ldr	r1, [r5, #8]
  4061c0:	6091      	str	r1, [r2, #8]
  4061c2:	eb0a 0107 	add.w	r1, sl, r7
  4061c6:	ebab 0207 	sub.w	r2, fp, r7
  4061ca:	f042 0201 	orr.w	r2, r2, #1
  4061ce:	6099      	str	r1, [r3, #8]
  4061d0:	604a      	str	r2, [r1, #4]
  4061d2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4061d6:	f003 0301 	and.w	r3, r3, #1
  4061da:	431f      	orrs	r7, r3
  4061dc:	4640      	mov	r0, r8
  4061de:	f8ca 7004 	str.w	r7, [sl, #4]
  4061e2:	f7fe f8bd 	bl	404360 <__malloc_unlock>
  4061e6:	e751      	b.n	40608c <_realloc_r+0xe4>
  4061e8:	682b      	ldr	r3, [r5, #0]
  4061ea:	6003      	str	r3, [r0, #0]
  4061ec:	686b      	ldr	r3, [r5, #4]
  4061ee:	6043      	str	r3, [r0, #4]
  4061f0:	2a1b      	cmp	r2, #27
  4061f2:	d82d      	bhi.n	406250 <_realloc_r+0x2a8>
  4061f4:	f100 0308 	add.w	r3, r0, #8
  4061f8:	f105 0208 	add.w	r2, r5, #8
  4061fc:	e71b      	b.n	406036 <_realloc_r+0x8e>
  4061fe:	4632      	mov	r2, r6
  406200:	6829      	ldr	r1, [r5, #0]
  406202:	6011      	str	r1, [r2, #0]
  406204:	6869      	ldr	r1, [r5, #4]
  406206:	6051      	str	r1, [r2, #4]
  406208:	68a9      	ldr	r1, [r5, #8]
  40620a:	6091      	str	r1, [r2, #8]
  40620c:	461c      	mov	r4, r3
  40620e:	46d1      	mov	r9, sl
  406210:	e72a      	b.n	406068 <_realloc_r+0xc0>
  406212:	eb09 0107 	add.w	r1, r9, r7
  406216:	ebab 0b07 	sub.w	fp, fp, r7
  40621a:	f04b 0201 	orr.w	r2, fp, #1
  40621e:	6099      	str	r1, [r3, #8]
  406220:	604a      	str	r2, [r1, #4]
  406222:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406226:	f003 0301 	and.w	r3, r3, #1
  40622a:	431f      	orrs	r7, r3
  40622c:	4640      	mov	r0, r8
  40622e:	f845 7c04 	str.w	r7, [r5, #-4]
  406232:	f7fe f895 	bl	404360 <__malloc_unlock>
  406236:	462e      	mov	r6, r5
  406238:	e728      	b.n	40608c <_realloc_r+0xe4>
  40623a:	4629      	mov	r1, r5
  40623c:	f7ff fe50 	bl	405ee0 <memmove>
  406240:	e6ff      	b.n	406042 <_realloc_r+0x9a>
  406242:	4629      	mov	r1, r5
  406244:	4630      	mov	r0, r6
  406246:	461c      	mov	r4, r3
  406248:	46d1      	mov	r9, sl
  40624a:	f7ff fe49 	bl	405ee0 <memmove>
  40624e:	e70b      	b.n	406068 <_realloc_r+0xc0>
  406250:	68ab      	ldr	r3, [r5, #8]
  406252:	6083      	str	r3, [r0, #8]
  406254:	68eb      	ldr	r3, [r5, #12]
  406256:	60c3      	str	r3, [r0, #12]
  406258:	2a24      	cmp	r2, #36	; 0x24
  40625a:	d017      	beq.n	40628c <_realloc_r+0x2e4>
  40625c:	f100 0310 	add.w	r3, r0, #16
  406260:	f105 0210 	add.w	r2, r5, #16
  406264:	e6e7      	b.n	406036 <_realloc_r+0x8e>
  406266:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40626a:	f023 0303 	bic.w	r3, r3, #3
  40626e:	441c      	add	r4, r3
  406270:	462e      	mov	r6, r5
  406272:	e6f9      	b.n	406068 <_realloc_r+0xc0>
  406274:	68a9      	ldr	r1, [r5, #8]
  406276:	f8ca 1010 	str.w	r1, [sl, #16]
  40627a:	68e9      	ldr	r1, [r5, #12]
  40627c:	f8ca 1014 	str.w	r1, [sl, #20]
  406280:	2a24      	cmp	r2, #36	; 0x24
  406282:	d00c      	beq.n	40629e <_realloc_r+0x2f6>
  406284:	3510      	adds	r5, #16
  406286:	f10a 0218 	add.w	r2, sl, #24
  40628a:	e7b9      	b.n	406200 <_realloc_r+0x258>
  40628c:	692b      	ldr	r3, [r5, #16]
  40628e:	6103      	str	r3, [r0, #16]
  406290:	696b      	ldr	r3, [r5, #20]
  406292:	6143      	str	r3, [r0, #20]
  406294:	f105 0218 	add.w	r2, r5, #24
  406298:	f100 0318 	add.w	r3, r0, #24
  40629c:	e6cb      	b.n	406036 <_realloc_r+0x8e>
  40629e:	692a      	ldr	r2, [r5, #16]
  4062a0:	f8ca 2018 	str.w	r2, [sl, #24]
  4062a4:	696a      	ldr	r2, [r5, #20]
  4062a6:	f8ca 201c 	str.w	r2, [sl, #28]
  4062aa:	3518      	adds	r5, #24
  4062ac:	f10a 0220 	add.w	r2, sl, #32
  4062b0:	e7a6      	b.n	406200 <_realloc_r+0x258>
  4062b2:	4632      	mov	r2, r6
  4062b4:	e77f      	b.n	4061b6 <_realloc_r+0x20e>
  4062b6:	4629      	mov	r1, r5
  4062b8:	4630      	mov	r0, r6
  4062ba:	9301      	str	r3, [sp, #4]
  4062bc:	f7ff fe10 	bl	405ee0 <memmove>
  4062c0:	9b01      	ldr	r3, [sp, #4]
  4062c2:	e77e      	b.n	4061c2 <_realloc_r+0x21a>
  4062c4:	68a9      	ldr	r1, [r5, #8]
  4062c6:	f8ca 1010 	str.w	r1, [sl, #16]
  4062ca:	68e9      	ldr	r1, [r5, #12]
  4062cc:	f8ca 1014 	str.w	r1, [sl, #20]
  4062d0:	2a24      	cmp	r2, #36	; 0x24
  4062d2:	d003      	beq.n	4062dc <_realloc_r+0x334>
  4062d4:	3510      	adds	r5, #16
  4062d6:	f10a 0218 	add.w	r2, sl, #24
  4062da:	e76c      	b.n	4061b6 <_realloc_r+0x20e>
  4062dc:	692a      	ldr	r2, [r5, #16]
  4062de:	f8ca 2018 	str.w	r2, [sl, #24]
  4062e2:	696a      	ldr	r2, [r5, #20]
  4062e4:	f8ca 201c 	str.w	r2, [sl, #28]
  4062e8:	3518      	adds	r5, #24
  4062ea:	f10a 0220 	add.w	r2, sl, #32
  4062ee:	e762      	b.n	4061b6 <_realloc_r+0x20e>
  4062f0:	20400440 	.word	0x20400440

004062f4 <__sread>:
  4062f4:	b510      	push	{r4, lr}
  4062f6:	460c      	mov	r4, r1
  4062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4062fc:	f000 fa66 	bl	4067cc <_read_r>
  406300:	2800      	cmp	r0, #0
  406302:	db03      	blt.n	40630c <__sread+0x18>
  406304:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406306:	4403      	add	r3, r0
  406308:	6523      	str	r3, [r4, #80]	; 0x50
  40630a:	bd10      	pop	{r4, pc}
  40630c:	89a3      	ldrh	r3, [r4, #12]
  40630e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406312:	81a3      	strh	r3, [r4, #12]
  406314:	bd10      	pop	{r4, pc}
  406316:	bf00      	nop

00406318 <__swrite>:
  406318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40631c:	4616      	mov	r6, r2
  40631e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406322:	461f      	mov	r7, r3
  406324:	05d3      	lsls	r3, r2, #23
  406326:	460c      	mov	r4, r1
  406328:	4605      	mov	r5, r0
  40632a:	d507      	bpl.n	40633c <__swrite+0x24>
  40632c:	2200      	movs	r2, #0
  40632e:	2302      	movs	r3, #2
  406330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406334:	f000 fa34 	bl	4067a0 <_lseek_r>
  406338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40633c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406344:	81a2      	strh	r2, [r4, #12]
  406346:	463b      	mov	r3, r7
  406348:	4632      	mov	r2, r6
  40634a:	4628      	mov	r0, r5
  40634c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406350:	f000 b914 	b.w	40657c <_write_r>

00406354 <__sseek>:
  406354:	b510      	push	{r4, lr}
  406356:	460c      	mov	r4, r1
  406358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40635c:	f000 fa20 	bl	4067a0 <_lseek_r>
  406360:	89a3      	ldrh	r3, [r4, #12]
  406362:	1c42      	adds	r2, r0, #1
  406364:	bf0e      	itee	eq
  406366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40636a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40636e:	6520      	strne	r0, [r4, #80]	; 0x50
  406370:	81a3      	strh	r3, [r4, #12]
  406372:	bd10      	pop	{r4, pc}

00406374 <__sclose>:
  406374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406378:	f000 b978 	b.w	40666c <_close_r>
  40637c:	0000      	movs	r0, r0
	...

00406380 <strlen>:
  406380:	f890 f000 	pld	[r0]
  406384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406388:	f020 0107 	bic.w	r1, r0, #7
  40638c:	f06f 0c00 	mvn.w	ip, #0
  406390:	f010 0407 	ands.w	r4, r0, #7
  406394:	f891 f020 	pld	[r1, #32]
  406398:	f040 8049 	bne.w	40642e <strlen+0xae>
  40639c:	f04f 0400 	mov.w	r4, #0
  4063a0:	f06f 0007 	mvn.w	r0, #7
  4063a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4063a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4063ac:	f100 0008 	add.w	r0, r0, #8
  4063b0:	fa82 f24c 	uadd8	r2, r2, ip
  4063b4:	faa4 f28c 	sel	r2, r4, ip
  4063b8:	fa83 f34c 	uadd8	r3, r3, ip
  4063bc:	faa2 f38c 	sel	r3, r2, ip
  4063c0:	bb4b      	cbnz	r3, 406416 <strlen+0x96>
  4063c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4063c6:	fa82 f24c 	uadd8	r2, r2, ip
  4063ca:	f100 0008 	add.w	r0, r0, #8
  4063ce:	faa4 f28c 	sel	r2, r4, ip
  4063d2:	fa83 f34c 	uadd8	r3, r3, ip
  4063d6:	faa2 f38c 	sel	r3, r2, ip
  4063da:	b9e3      	cbnz	r3, 406416 <strlen+0x96>
  4063dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4063e0:	fa82 f24c 	uadd8	r2, r2, ip
  4063e4:	f100 0008 	add.w	r0, r0, #8
  4063e8:	faa4 f28c 	sel	r2, r4, ip
  4063ec:	fa83 f34c 	uadd8	r3, r3, ip
  4063f0:	faa2 f38c 	sel	r3, r2, ip
  4063f4:	b97b      	cbnz	r3, 406416 <strlen+0x96>
  4063f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4063fa:	f101 0120 	add.w	r1, r1, #32
  4063fe:	fa82 f24c 	uadd8	r2, r2, ip
  406402:	f100 0008 	add.w	r0, r0, #8
  406406:	faa4 f28c 	sel	r2, r4, ip
  40640a:	fa83 f34c 	uadd8	r3, r3, ip
  40640e:	faa2 f38c 	sel	r3, r2, ip
  406412:	2b00      	cmp	r3, #0
  406414:	d0c6      	beq.n	4063a4 <strlen+0x24>
  406416:	2a00      	cmp	r2, #0
  406418:	bf04      	itt	eq
  40641a:	3004      	addeq	r0, #4
  40641c:	461a      	moveq	r2, r3
  40641e:	ba12      	rev	r2, r2
  406420:	fab2 f282 	clz	r2, r2
  406424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40642c:	4770      	bx	lr
  40642e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406432:	f004 0503 	and.w	r5, r4, #3
  406436:	f1c4 0000 	rsb	r0, r4, #0
  40643a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40643e:	f014 0f04 	tst.w	r4, #4
  406442:	f891 f040 	pld	[r1, #64]	; 0x40
  406446:	fa0c f505 	lsl.w	r5, ip, r5
  40644a:	ea62 0205 	orn	r2, r2, r5
  40644e:	bf1c      	itt	ne
  406450:	ea63 0305 	ornne	r3, r3, r5
  406454:	4662      	movne	r2, ip
  406456:	f04f 0400 	mov.w	r4, #0
  40645a:	e7a9      	b.n	4063b0 <strlen+0x30>

0040645c <__swbuf_r>:
  40645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40645e:	460d      	mov	r5, r1
  406460:	4614      	mov	r4, r2
  406462:	4606      	mov	r6, r0
  406464:	b110      	cbz	r0, 40646c <__swbuf_r+0x10>
  406466:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406468:	2b00      	cmp	r3, #0
  40646a:	d04b      	beq.n	406504 <__swbuf_r+0xa8>
  40646c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406470:	69a3      	ldr	r3, [r4, #24]
  406472:	60a3      	str	r3, [r4, #8]
  406474:	b291      	uxth	r1, r2
  406476:	0708      	lsls	r0, r1, #28
  406478:	d539      	bpl.n	4064ee <__swbuf_r+0x92>
  40647a:	6923      	ldr	r3, [r4, #16]
  40647c:	2b00      	cmp	r3, #0
  40647e:	d036      	beq.n	4064ee <__swbuf_r+0x92>
  406480:	b2ed      	uxtb	r5, r5
  406482:	0489      	lsls	r1, r1, #18
  406484:	462f      	mov	r7, r5
  406486:	d515      	bpl.n	4064b4 <__swbuf_r+0x58>
  406488:	6822      	ldr	r2, [r4, #0]
  40648a:	6961      	ldr	r1, [r4, #20]
  40648c:	1ad3      	subs	r3, r2, r3
  40648e:	428b      	cmp	r3, r1
  406490:	da1c      	bge.n	4064cc <__swbuf_r+0x70>
  406492:	3301      	adds	r3, #1
  406494:	68a1      	ldr	r1, [r4, #8]
  406496:	1c50      	adds	r0, r2, #1
  406498:	3901      	subs	r1, #1
  40649a:	60a1      	str	r1, [r4, #8]
  40649c:	6020      	str	r0, [r4, #0]
  40649e:	7015      	strb	r5, [r2, #0]
  4064a0:	6962      	ldr	r2, [r4, #20]
  4064a2:	429a      	cmp	r2, r3
  4064a4:	d01a      	beq.n	4064dc <__swbuf_r+0x80>
  4064a6:	89a3      	ldrh	r3, [r4, #12]
  4064a8:	07db      	lsls	r3, r3, #31
  4064aa:	d501      	bpl.n	4064b0 <__swbuf_r+0x54>
  4064ac:	2d0a      	cmp	r5, #10
  4064ae:	d015      	beq.n	4064dc <__swbuf_r+0x80>
  4064b0:	4638      	mov	r0, r7
  4064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4064b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4064b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4064ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4064be:	81a2      	strh	r2, [r4, #12]
  4064c0:	6822      	ldr	r2, [r4, #0]
  4064c2:	6661      	str	r1, [r4, #100]	; 0x64
  4064c4:	6961      	ldr	r1, [r4, #20]
  4064c6:	1ad3      	subs	r3, r2, r3
  4064c8:	428b      	cmp	r3, r1
  4064ca:	dbe2      	blt.n	406492 <__swbuf_r+0x36>
  4064cc:	4621      	mov	r1, r4
  4064ce:	4630      	mov	r0, r6
  4064d0:	f7ff f80c 	bl	4054ec <_fflush_r>
  4064d4:	b940      	cbnz	r0, 4064e8 <__swbuf_r+0x8c>
  4064d6:	6822      	ldr	r2, [r4, #0]
  4064d8:	2301      	movs	r3, #1
  4064da:	e7db      	b.n	406494 <__swbuf_r+0x38>
  4064dc:	4621      	mov	r1, r4
  4064de:	4630      	mov	r0, r6
  4064e0:	f7ff f804 	bl	4054ec <_fflush_r>
  4064e4:	2800      	cmp	r0, #0
  4064e6:	d0e3      	beq.n	4064b0 <__swbuf_r+0x54>
  4064e8:	f04f 37ff 	mov.w	r7, #4294967295
  4064ec:	e7e0      	b.n	4064b0 <__swbuf_r+0x54>
  4064ee:	4621      	mov	r1, r4
  4064f0:	4630      	mov	r0, r6
  4064f2:	f7fe fee7 	bl	4052c4 <__swsetup_r>
  4064f6:	2800      	cmp	r0, #0
  4064f8:	d1f6      	bne.n	4064e8 <__swbuf_r+0x8c>
  4064fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4064fe:	6923      	ldr	r3, [r4, #16]
  406500:	b291      	uxth	r1, r2
  406502:	e7bd      	b.n	406480 <__swbuf_r+0x24>
  406504:	f7ff f84a 	bl	40559c <__sinit>
  406508:	e7b0      	b.n	40646c <__swbuf_r+0x10>
  40650a:	bf00      	nop

0040650c <_wcrtomb_r>:
  40650c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40650e:	4606      	mov	r6, r0
  406510:	b085      	sub	sp, #20
  406512:	461f      	mov	r7, r3
  406514:	b189      	cbz	r1, 40653a <_wcrtomb_r+0x2e>
  406516:	4c10      	ldr	r4, [pc, #64]	; (406558 <_wcrtomb_r+0x4c>)
  406518:	4d10      	ldr	r5, [pc, #64]	; (40655c <_wcrtomb_r+0x50>)
  40651a:	6824      	ldr	r4, [r4, #0]
  40651c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40651e:	2c00      	cmp	r4, #0
  406520:	bf08      	it	eq
  406522:	462c      	moveq	r4, r5
  406524:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406528:	47a0      	blx	r4
  40652a:	1c43      	adds	r3, r0, #1
  40652c:	d103      	bne.n	406536 <_wcrtomb_r+0x2a>
  40652e:	2200      	movs	r2, #0
  406530:	238a      	movs	r3, #138	; 0x8a
  406532:	603a      	str	r2, [r7, #0]
  406534:	6033      	str	r3, [r6, #0]
  406536:	b005      	add	sp, #20
  406538:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40653a:	460c      	mov	r4, r1
  40653c:	4906      	ldr	r1, [pc, #24]	; (406558 <_wcrtomb_r+0x4c>)
  40653e:	4a07      	ldr	r2, [pc, #28]	; (40655c <_wcrtomb_r+0x50>)
  406540:	6809      	ldr	r1, [r1, #0]
  406542:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406544:	2900      	cmp	r1, #0
  406546:	bf08      	it	eq
  406548:	4611      	moveq	r1, r2
  40654a:	4622      	mov	r2, r4
  40654c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406550:	a901      	add	r1, sp, #4
  406552:	47a0      	blx	r4
  406554:	e7e9      	b.n	40652a <_wcrtomb_r+0x1e>
  406556:	bf00      	nop
  406558:	20400010 	.word	0x20400010
  40655c:	20400854 	.word	0x20400854

00406560 <__ascii_wctomb>:
  406560:	b121      	cbz	r1, 40656c <__ascii_wctomb+0xc>
  406562:	2aff      	cmp	r2, #255	; 0xff
  406564:	d804      	bhi.n	406570 <__ascii_wctomb+0x10>
  406566:	700a      	strb	r2, [r1, #0]
  406568:	2001      	movs	r0, #1
  40656a:	4770      	bx	lr
  40656c:	4608      	mov	r0, r1
  40656e:	4770      	bx	lr
  406570:	238a      	movs	r3, #138	; 0x8a
  406572:	6003      	str	r3, [r0, #0]
  406574:	f04f 30ff 	mov.w	r0, #4294967295
  406578:	4770      	bx	lr
  40657a:	bf00      	nop

0040657c <_write_r>:
  40657c:	b570      	push	{r4, r5, r6, lr}
  40657e:	460d      	mov	r5, r1
  406580:	4c08      	ldr	r4, [pc, #32]	; (4065a4 <_write_r+0x28>)
  406582:	4611      	mov	r1, r2
  406584:	4606      	mov	r6, r0
  406586:	461a      	mov	r2, r3
  406588:	4628      	mov	r0, r5
  40658a:	2300      	movs	r3, #0
  40658c:	6023      	str	r3, [r4, #0]
  40658e:	f7fa ff19 	bl	4013c4 <_write>
  406592:	1c43      	adds	r3, r0, #1
  406594:	d000      	beq.n	406598 <_write_r+0x1c>
  406596:	bd70      	pop	{r4, r5, r6, pc}
  406598:	6823      	ldr	r3, [r4, #0]
  40659a:	2b00      	cmp	r3, #0
  40659c:	d0fb      	beq.n	406596 <_write_r+0x1a>
  40659e:	6033      	str	r3, [r6, #0]
  4065a0:	bd70      	pop	{r4, r5, r6, pc}
  4065a2:	bf00      	nop
  4065a4:	2040122c 	.word	0x2040122c

004065a8 <__register_exitproc>:
  4065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4065ac:	4d2c      	ldr	r5, [pc, #176]	; (406660 <__register_exitproc+0xb8>)
  4065ae:	4606      	mov	r6, r0
  4065b0:	6828      	ldr	r0, [r5, #0]
  4065b2:	4698      	mov	r8, r3
  4065b4:	460f      	mov	r7, r1
  4065b6:	4691      	mov	r9, r2
  4065b8:	f7ff fbb0 	bl	405d1c <__retarget_lock_acquire_recursive>
  4065bc:	4b29      	ldr	r3, [pc, #164]	; (406664 <__register_exitproc+0xbc>)
  4065be:	681c      	ldr	r4, [r3, #0]
  4065c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4065c4:	2b00      	cmp	r3, #0
  4065c6:	d03e      	beq.n	406646 <__register_exitproc+0x9e>
  4065c8:	685a      	ldr	r2, [r3, #4]
  4065ca:	2a1f      	cmp	r2, #31
  4065cc:	dc1c      	bgt.n	406608 <__register_exitproc+0x60>
  4065ce:	f102 0e01 	add.w	lr, r2, #1
  4065d2:	b176      	cbz	r6, 4065f2 <__register_exitproc+0x4a>
  4065d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4065d8:	2401      	movs	r4, #1
  4065da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4065de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4065e2:	4094      	lsls	r4, r2
  4065e4:	4320      	orrs	r0, r4
  4065e6:	2e02      	cmp	r6, #2
  4065e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4065ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4065f0:	d023      	beq.n	40663a <__register_exitproc+0x92>
  4065f2:	3202      	adds	r2, #2
  4065f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4065f8:	6828      	ldr	r0, [r5, #0]
  4065fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4065fe:	f7ff fb8f 	bl	405d20 <__retarget_lock_release_recursive>
  406602:	2000      	movs	r0, #0
  406604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406608:	4b17      	ldr	r3, [pc, #92]	; (406668 <__register_exitproc+0xc0>)
  40660a:	b30b      	cbz	r3, 406650 <__register_exitproc+0xa8>
  40660c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406610:	f7fd fb00 	bl	403c14 <malloc>
  406614:	4603      	mov	r3, r0
  406616:	b1d8      	cbz	r0, 406650 <__register_exitproc+0xa8>
  406618:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40661c:	6002      	str	r2, [r0, #0]
  40661e:	2100      	movs	r1, #0
  406620:	6041      	str	r1, [r0, #4]
  406622:	460a      	mov	r2, r1
  406624:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406628:	f04f 0e01 	mov.w	lr, #1
  40662c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406630:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406634:	2e00      	cmp	r6, #0
  406636:	d0dc      	beq.n	4065f2 <__register_exitproc+0x4a>
  406638:	e7cc      	b.n	4065d4 <__register_exitproc+0x2c>
  40663a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40663e:	430c      	orrs	r4, r1
  406640:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406644:	e7d5      	b.n	4065f2 <__register_exitproc+0x4a>
  406646:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40664a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40664e:	e7bb      	b.n	4065c8 <__register_exitproc+0x20>
  406650:	6828      	ldr	r0, [r5, #0]
  406652:	f7ff fb65 	bl	405d20 <__retarget_lock_release_recursive>
  406656:	f04f 30ff 	mov.w	r0, #4294967295
  40665a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40665e:	bf00      	nop
  406660:	20400850 	.word	0x20400850
  406664:	00406be4 	.word	0x00406be4
  406668:	00403c15 	.word	0x00403c15

0040666c <_close_r>:
  40666c:	b538      	push	{r3, r4, r5, lr}
  40666e:	4c07      	ldr	r4, [pc, #28]	; (40668c <_close_r+0x20>)
  406670:	2300      	movs	r3, #0
  406672:	4605      	mov	r5, r0
  406674:	4608      	mov	r0, r1
  406676:	6023      	str	r3, [r4, #0]
  406678:	f7fb fd52 	bl	402120 <_close>
  40667c:	1c43      	adds	r3, r0, #1
  40667e:	d000      	beq.n	406682 <_close_r+0x16>
  406680:	bd38      	pop	{r3, r4, r5, pc}
  406682:	6823      	ldr	r3, [r4, #0]
  406684:	2b00      	cmp	r3, #0
  406686:	d0fb      	beq.n	406680 <_close_r+0x14>
  406688:	602b      	str	r3, [r5, #0]
  40668a:	bd38      	pop	{r3, r4, r5, pc}
  40668c:	2040122c 	.word	0x2040122c

00406690 <_fclose_r>:
  406690:	b570      	push	{r4, r5, r6, lr}
  406692:	b159      	cbz	r1, 4066ac <_fclose_r+0x1c>
  406694:	4605      	mov	r5, r0
  406696:	460c      	mov	r4, r1
  406698:	b110      	cbz	r0, 4066a0 <_fclose_r+0x10>
  40669a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40669c:	2b00      	cmp	r3, #0
  40669e:	d03c      	beq.n	40671a <_fclose_r+0x8a>
  4066a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4066a2:	07d8      	lsls	r0, r3, #31
  4066a4:	d505      	bpl.n	4066b2 <_fclose_r+0x22>
  4066a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066aa:	b92b      	cbnz	r3, 4066b8 <_fclose_r+0x28>
  4066ac:	2600      	movs	r6, #0
  4066ae:	4630      	mov	r0, r6
  4066b0:	bd70      	pop	{r4, r5, r6, pc}
  4066b2:	89a3      	ldrh	r3, [r4, #12]
  4066b4:	0599      	lsls	r1, r3, #22
  4066b6:	d53c      	bpl.n	406732 <_fclose_r+0xa2>
  4066b8:	4621      	mov	r1, r4
  4066ba:	4628      	mov	r0, r5
  4066bc:	f7fe fe76 	bl	4053ac <__sflush_r>
  4066c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4066c2:	4606      	mov	r6, r0
  4066c4:	b133      	cbz	r3, 4066d4 <_fclose_r+0x44>
  4066c6:	69e1      	ldr	r1, [r4, #28]
  4066c8:	4628      	mov	r0, r5
  4066ca:	4798      	blx	r3
  4066cc:	2800      	cmp	r0, #0
  4066ce:	bfb8      	it	lt
  4066d0:	f04f 36ff 	movlt.w	r6, #4294967295
  4066d4:	89a3      	ldrh	r3, [r4, #12]
  4066d6:	061a      	lsls	r2, r3, #24
  4066d8:	d422      	bmi.n	406720 <_fclose_r+0x90>
  4066da:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4066dc:	b141      	cbz	r1, 4066f0 <_fclose_r+0x60>
  4066de:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4066e2:	4299      	cmp	r1, r3
  4066e4:	d002      	beq.n	4066ec <_fclose_r+0x5c>
  4066e6:	4628      	mov	r0, r5
  4066e8:	f7ff f87e 	bl	4057e8 <_free_r>
  4066ec:	2300      	movs	r3, #0
  4066ee:	6323      	str	r3, [r4, #48]	; 0x30
  4066f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4066f2:	b121      	cbz	r1, 4066fe <_fclose_r+0x6e>
  4066f4:	4628      	mov	r0, r5
  4066f6:	f7ff f877 	bl	4057e8 <_free_r>
  4066fa:	2300      	movs	r3, #0
  4066fc:	6463      	str	r3, [r4, #68]	; 0x44
  4066fe:	f7fe ff79 	bl	4055f4 <__sfp_lock_acquire>
  406702:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406704:	2200      	movs	r2, #0
  406706:	07db      	lsls	r3, r3, #31
  406708:	81a2      	strh	r2, [r4, #12]
  40670a:	d50e      	bpl.n	40672a <_fclose_r+0x9a>
  40670c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40670e:	f7ff fb03 	bl	405d18 <__retarget_lock_close_recursive>
  406712:	f7fe ff75 	bl	405600 <__sfp_lock_release>
  406716:	4630      	mov	r0, r6
  406718:	bd70      	pop	{r4, r5, r6, pc}
  40671a:	f7fe ff3f 	bl	40559c <__sinit>
  40671e:	e7bf      	b.n	4066a0 <_fclose_r+0x10>
  406720:	6921      	ldr	r1, [r4, #16]
  406722:	4628      	mov	r0, r5
  406724:	f7ff f860 	bl	4057e8 <_free_r>
  406728:	e7d7      	b.n	4066da <_fclose_r+0x4a>
  40672a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40672c:	f7ff faf8 	bl	405d20 <__retarget_lock_release_recursive>
  406730:	e7ec      	b.n	40670c <_fclose_r+0x7c>
  406732:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406734:	f7ff faf2 	bl	405d1c <__retarget_lock_acquire_recursive>
  406738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40673c:	2b00      	cmp	r3, #0
  40673e:	d1bb      	bne.n	4066b8 <_fclose_r+0x28>
  406740:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406742:	f016 0601 	ands.w	r6, r6, #1
  406746:	d1b1      	bne.n	4066ac <_fclose_r+0x1c>
  406748:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40674a:	f7ff fae9 	bl	405d20 <__retarget_lock_release_recursive>
  40674e:	4630      	mov	r0, r6
  406750:	bd70      	pop	{r4, r5, r6, pc}
  406752:	bf00      	nop

00406754 <_fstat_r>:
  406754:	b538      	push	{r3, r4, r5, lr}
  406756:	460b      	mov	r3, r1
  406758:	4c07      	ldr	r4, [pc, #28]	; (406778 <_fstat_r+0x24>)
  40675a:	4605      	mov	r5, r0
  40675c:	4611      	mov	r1, r2
  40675e:	4618      	mov	r0, r3
  406760:	2300      	movs	r3, #0
  406762:	6023      	str	r3, [r4, #0]
  406764:	f7fb fce8 	bl	402138 <_fstat>
  406768:	1c43      	adds	r3, r0, #1
  40676a:	d000      	beq.n	40676e <_fstat_r+0x1a>
  40676c:	bd38      	pop	{r3, r4, r5, pc}
  40676e:	6823      	ldr	r3, [r4, #0]
  406770:	2b00      	cmp	r3, #0
  406772:	d0fb      	beq.n	40676c <_fstat_r+0x18>
  406774:	602b      	str	r3, [r5, #0]
  406776:	bd38      	pop	{r3, r4, r5, pc}
  406778:	2040122c 	.word	0x2040122c

0040677c <_isatty_r>:
  40677c:	b538      	push	{r3, r4, r5, lr}
  40677e:	4c07      	ldr	r4, [pc, #28]	; (40679c <_isatty_r+0x20>)
  406780:	2300      	movs	r3, #0
  406782:	4605      	mov	r5, r0
  406784:	4608      	mov	r0, r1
  406786:	6023      	str	r3, [r4, #0]
  406788:	f7fb fce6 	bl	402158 <_isatty>
  40678c:	1c43      	adds	r3, r0, #1
  40678e:	d000      	beq.n	406792 <_isatty_r+0x16>
  406790:	bd38      	pop	{r3, r4, r5, pc}
  406792:	6823      	ldr	r3, [r4, #0]
  406794:	2b00      	cmp	r3, #0
  406796:	d0fb      	beq.n	406790 <_isatty_r+0x14>
  406798:	602b      	str	r3, [r5, #0]
  40679a:	bd38      	pop	{r3, r4, r5, pc}
  40679c:	2040122c 	.word	0x2040122c

004067a0 <_lseek_r>:
  4067a0:	b570      	push	{r4, r5, r6, lr}
  4067a2:	460d      	mov	r5, r1
  4067a4:	4c08      	ldr	r4, [pc, #32]	; (4067c8 <_lseek_r+0x28>)
  4067a6:	4611      	mov	r1, r2
  4067a8:	4606      	mov	r6, r0
  4067aa:	461a      	mov	r2, r3
  4067ac:	4628      	mov	r0, r5
  4067ae:	2300      	movs	r3, #0
  4067b0:	6023      	str	r3, [r4, #0]
  4067b2:	f7fb fcdc 	bl	40216e <_lseek>
  4067b6:	1c43      	adds	r3, r0, #1
  4067b8:	d000      	beq.n	4067bc <_lseek_r+0x1c>
  4067ba:	bd70      	pop	{r4, r5, r6, pc}
  4067bc:	6823      	ldr	r3, [r4, #0]
  4067be:	2b00      	cmp	r3, #0
  4067c0:	d0fb      	beq.n	4067ba <_lseek_r+0x1a>
  4067c2:	6033      	str	r3, [r6, #0]
  4067c4:	bd70      	pop	{r4, r5, r6, pc}
  4067c6:	bf00      	nop
  4067c8:	2040122c 	.word	0x2040122c

004067cc <_read_r>:
  4067cc:	b570      	push	{r4, r5, r6, lr}
  4067ce:	460d      	mov	r5, r1
  4067d0:	4c08      	ldr	r4, [pc, #32]	; (4067f4 <_read_r+0x28>)
  4067d2:	4611      	mov	r1, r2
  4067d4:	4606      	mov	r6, r0
  4067d6:	461a      	mov	r2, r3
  4067d8:	4628      	mov	r0, r5
  4067da:	2300      	movs	r3, #0
  4067dc:	6023      	str	r3, [r4, #0]
  4067de:	f7fa fdc7 	bl	401370 <_read>
  4067e2:	1c43      	adds	r3, r0, #1
  4067e4:	d000      	beq.n	4067e8 <_read_r+0x1c>
  4067e6:	bd70      	pop	{r4, r5, r6, pc}
  4067e8:	6823      	ldr	r3, [r4, #0]
  4067ea:	2b00      	cmp	r3, #0
  4067ec:	d0fb      	beq.n	4067e6 <_read_r+0x1a>
  4067ee:	6033      	str	r3, [r6, #0]
  4067f0:	bd70      	pop	{r4, r5, r6, pc}
  4067f2:	bf00      	nop
  4067f4:	2040122c 	.word	0x2040122c

004067f8 <__aeabi_uldivmod>:
  4067f8:	b953      	cbnz	r3, 406810 <__aeabi_uldivmod+0x18>
  4067fa:	b94a      	cbnz	r2, 406810 <__aeabi_uldivmod+0x18>
  4067fc:	2900      	cmp	r1, #0
  4067fe:	bf08      	it	eq
  406800:	2800      	cmpeq	r0, #0
  406802:	bf1c      	itt	ne
  406804:	f04f 31ff 	movne.w	r1, #4294967295
  406808:	f04f 30ff 	movne.w	r0, #4294967295
  40680c:	f000 b97a 	b.w	406b04 <__aeabi_idiv0>
  406810:	f1ad 0c08 	sub.w	ip, sp, #8
  406814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406818:	f000 f806 	bl	406828 <__udivmoddi4>
  40681c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406824:	b004      	add	sp, #16
  406826:	4770      	bx	lr

00406828 <__udivmoddi4>:
  406828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40682c:	468c      	mov	ip, r1
  40682e:	460d      	mov	r5, r1
  406830:	4604      	mov	r4, r0
  406832:	9e08      	ldr	r6, [sp, #32]
  406834:	2b00      	cmp	r3, #0
  406836:	d151      	bne.n	4068dc <__udivmoddi4+0xb4>
  406838:	428a      	cmp	r2, r1
  40683a:	4617      	mov	r7, r2
  40683c:	d96d      	bls.n	40691a <__udivmoddi4+0xf2>
  40683e:	fab2 fe82 	clz	lr, r2
  406842:	f1be 0f00 	cmp.w	lr, #0
  406846:	d00b      	beq.n	406860 <__udivmoddi4+0x38>
  406848:	f1ce 0c20 	rsb	ip, lr, #32
  40684c:	fa01 f50e 	lsl.w	r5, r1, lr
  406850:	fa20 fc0c 	lsr.w	ip, r0, ip
  406854:	fa02 f70e 	lsl.w	r7, r2, lr
  406858:	ea4c 0c05 	orr.w	ip, ip, r5
  40685c:	fa00 f40e 	lsl.w	r4, r0, lr
  406860:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406864:	0c25      	lsrs	r5, r4, #16
  406866:	fbbc f8fa 	udiv	r8, ip, sl
  40686a:	fa1f f987 	uxth.w	r9, r7
  40686e:	fb0a cc18 	mls	ip, sl, r8, ip
  406872:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406876:	fb08 f309 	mul.w	r3, r8, r9
  40687a:	42ab      	cmp	r3, r5
  40687c:	d90a      	bls.n	406894 <__udivmoddi4+0x6c>
  40687e:	19ed      	adds	r5, r5, r7
  406880:	f108 32ff 	add.w	r2, r8, #4294967295
  406884:	f080 8123 	bcs.w	406ace <__udivmoddi4+0x2a6>
  406888:	42ab      	cmp	r3, r5
  40688a:	f240 8120 	bls.w	406ace <__udivmoddi4+0x2a6>
  40688e:	f1a8 0802 	sub.w	r8, r8, #2
  406892:	443d      	add	r5, r7
  406894:	1aed      	subs	r5, r5, r3
  406896:	b2a4      	uxth	r4, r4
  406898:	fbb5 f0fa 	udiv	r0, r5, sl
  40689c:	fb0a 5510 	mls	r5, sl, r0, r5
  4068a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4068a4:	fb00 f909 	mul.w	r9, r0, r9
  4068a8:	45a1      	cmp	r9, r4
  4068aa:	d909      	bls.n	4068c0 <__udivmoddi4+0x98>
  4068ac:	19e4      	adds	r4, r4, r7
  4068ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4068b2:	f080 810a 	bcs.w	406aca <__udivmoddi4+0x2a2>
  4068b6:	45a1      	cmp	r9, r4
  4068b8:	f240 8107 	bls.w	406aca <__udivmoddi4+0x2a2>
  4068bc:	3802      	subs	r0, #2
  4068be:	443c      	add	r4, r7
  4068c0:	eba4 0409 	sub.w	r4, r4, r9
  4068c4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4068c8:	2100      	movs	r1, #0
  4068ca:	2e00      	cmp	r6, #0
  4068cc:	d061      	beq.n	406992 <__udivmoddi4+0x16a>
  4068ce:	fa24 f40e 	lsr.w	r4, r4, lr
  4068d2:	2300      	movs	r3, #0
  4068d4:	6034      	str	r4, [r6, #0]
  4068d6:	6073      	str	r3, [r6, #4]
  4068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068dc:	428b      	cmp	r3, r1
  4068de:	d907      	bls.n	4068f0 <__udivmoddi4+0xc8>
  4068e0:	2e00      	cmp	r6, #0
  4068e2:	d054      	beq.n	40698e <__udivmoddi4+0x166>
  4068e4:	2100      	movs	r1, #0
  4068e6:	e886 0021 	stmia.w	r6, {r0, r5}
  4068ea:	4608      	mov	r0, r1
  4068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068f0:	fab3 f183 	clz	r1, r3
  4068f4:	2900      	cmp	r1, #0
  4068f6:	f040 808e 	bne.w	406a16 <__udivmoddi4+0x1ee>
  4068fa:	42ab      	cmp	r3, r5
  4068fc:	d302      	bcc.n	406904 <__udivmoddi4+0xdc>
  4068fe:	4282      	cmp	r2, r0
  406900:	f200 80fa 	bhi.w	406af8 <__udivmoddi4+0x2d0>
  406904:	1a84      	subs	r4, r0, r2
  406906:	eb65 0503 	sbc.w	r5, r5, r3
  40690a:	2001      	movs	r0, #1
  40690c:	46ac      	mov	ip, r5
  40690e:	2e00      	cmp	r6, #0
  406910:	d03f      	beq.n	406992 <__udivmoddi4+0x16a>
  406912:	e886 1010 	stmia.w	r6, {r4, ip}
  406916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40691a:	b912      	cbnz	r2, 406922 <__udivmoddi4+0xfa>
  40691c:	2701      	movs	r7, #1
  40691e:	fbb7 f7f2 	udiv	r7, r7, r2
  406922:	fab7 fe87 	clz	lr, r7
  406926:	f1be 0f00 	cmp.w	lr, #0
  40692a:	d134      	bne.n	406996 <__udivmoddi4+0x16e>
  40692c:	1beb      	subs	r3, r5, r7
  40692e:	0c3a      	lsrs	r2, r7, #16
  406930:	fa1f fc87 	uxth.w	ip, r7
  406934:	2101      	movs	r1, #1
  406936:	fbb3 f8f2 	udiv	r8, r3, r2
  40693a:	0c25      	lsrs	r5, r4, #16
  40693c:	fb02 3318 	mls	r3, r2, r8, r3
  406940:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406944:	fb0c f308 	mul.w	r3, ip, r8
  406948:	42ab      	cmp	r3, r5
  40694a:	d907      	bls.n	40695c <__udivmoddi4+0x134>
  40694c:	19ed      	adds	r5, r5, r7
  40694e:	f108 30ff 	add.w	r0, r8, #4294967295
  406952:	d202      	bcs.n	40695a <__udivmoddi4+0x132>
  406954:	42ab      	cmp	r3, r5
  406956:	f200 80d1 	bhi.w	406afc <__udivmoddi4+0x2d4>
  40695a:	4680      	mov	r8, r0
  40695c:	1aed      	subs	r5, r5, r3
  40695e:	b2a3      	uxth	r3, r4
  406960:	fbb5 f0f2 	udiv	r0, r5, r2
  406964:	fb02 5510 	mls	r5, r2, r0, r5
  406968:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40696c:	fb0c fc00 	mul.w	ip, ip, r0
  406970:	45a4      	cmp	ip, r4
  406972:	d907      	bls.n	406984 <__udivmoddi4+0x15c>
  406974:	19e4      	adds	r4, r4, r7
  406976:	f100 33ff 	add.w	r3, r0, #4294967295
  40697a:	d202      	bcs.n	406982 <__udivmoddi4+0x15a>
  40697c:	45a4      	cmp	ip, r4
  40697e:	f200 80b8 	bhi.w	406af2 <__udivmoddi4+0x2ca>
  406982:	4618      	mov	r0, r3
  406984:	eba4 040c 	sub.w	r4, r4, ip
  406988:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40698c:	e79d      	b.n	4068ca <__udivmoddi4+0xa2>
  40698e:	4631      	mov	r1, r6
  406990:	4630      	mov	r0, r6
  406992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406996:	f1ce 0420 	rsb	r4, lr, #32
  40699a:	fa05 f30e 	lsl.w	r3, r5, lr
  40699e:	fa07 f70e 	lsl.w	r7, r7, lr
  4069a2:	fa20 f804 	lsr.w	r8, r0, r4
  4069a6:	0c3a      	lsrs	r2, r7, #16
  4069a8:	fa25 f404 	lsr.w	r4, r5, r4
  4069ac:	ea48 0803 	orr.w	r8, r8, r3
  4069b0:	fbb4 f1f2 	udiv	r1, r4, r2
  4069b4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4069b8:	fb02 4411 	mls	r4, r2, r1, r4
  4069bc:	fa1f fc87 	uxth.w	ip, r7
  4069c0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4069c4:	fb01 f30c 	mul.w	r3, r1, ip
  4069c8:	42ab      	cmp	r3, r5
  4069ca:	fa00 f40e 	lsl.w	r4, r0, lr
  4069ce:	d909      	bls.n	4069e4 <__udivmoddi4+0x1bc>
  4069d0:	19ed      	adds	r5, r5, r7
  4069d2:	f101 30ff 	add.w	r0, r1, #4294967295
  4069d6:	f080 808a 	bcs.w	406aee <__udivmoddi4+0x2c6>
  4069da:	42ab      	cmp	r3, r5
  4069dc:	f240 8087 	bls.w	406aee <__udivmoddi4+0x2c6>
  4069e0:	3902      	subs	r1, #2
  4069e2:	443d      	add	r5, r7
  4069e4:	1aeb      	subs	r3, r5, r3
  4069e6:	fa1f f588 	uxth.w	r5, r8
  4069ea:	fbb3 f0f2 	udiv	r0, r3, r2
  4069ee:	fb02 3310 	mls	r3, r2, r0, r3
  4069f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4069f6:	fb00 f30c 	mul.w	r3, r0, ip
  4069fa:	42ab      	cmp	r3, r5
  4069fc:	d907      	bls.n	406a0e <__udivmoddi4+0x1e6>
  4069fe:	19ed      	adds	r5, r5, r7
  406a00:	f100 38ff 	add.w	r8, r0, #4294967295
  406a04:	d26f      	bcs.n	406ae6 <__udivmoddi4+0x2be>
  406a06:	42ab      	cmp	r3, r5
  406a08:	d96d      	bls.n	406ae6 <__udivmoddi4+0x2be>
  406a0a:	3802      	subs	r0, #2
  406a0c:	443d      	add	r5, r7
  406a0e:	1aeb      	subs	r3, r5, r3
  406a10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406a14:	e78f      	b.n	406936 <__udivmoddi4+0x10e>
  406a16:	f1c1 0720 	rsb	r7, r1, #32
  406a1a:	fa22 f807 	lsr.w	r8, r2, r7
  406a1e:	408b      	lsls	r3, r1
  406a20:	fa05 f401 	lsl.w	r4, r5, r1
  406a24:	ea48 0303 	orr.w	r3, r8, r3
  406a28:	fa20 fe07 	lsr.w	lr, r0, r7
  406a2c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406a30:	40fd      	lsrs	r5, r7
  406a32:	ea4e 0e04 	orr.w	lr, lr, r4
  406a36:	fbb5 f9fc 	udiv	r9, r5, ip
  406a3a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406a3e:	fb0c 5519 	mls	r5, ip, r9, r5
  406a42:	fa1f f883 	uxth.w	r8, r3
  406a46:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406a4a:	fb09 f408 	mul.w	r4, r9, r8
  406a4e:	42ac      	cmp	r4, r5
  406a50:	fa02 f201 	lsl.w	r2, r2, r1
  406a54:	fa00 fa01 	lsl.w	sl, r0, r1
  406a58:	d908      	bls.n	406a6c <__udivmoddi4+0x244>
  406a5a:	18ed      	adds	r5, r5, r3
  406a5c:	f109 30ff 	add.w	r0, r9, #4294967295
  406a60:	d243      	bcs.n	406aea <__udivmoddi4+0x2c2>
  406a62:	42ac      	cmp	r4, r5
  406a64:	d941      	bls.n	406aea <__udivmoddi4+0x2c2>
  406a66:	f1a9 0902 	sub.w	r9, r9, #2
  406a6a:	441d      	add	r5, r3
  406a6c:	1b2d      	subs	r5, r5, r4
  406a6e:	fa1f fe8e 	uxth.w	lr, lr
  406a72:	fbb5 f0fc 	udiv	r0, r5, ip
  406a76:	fb0c 5510 	mls	r5, ip, r0, r5
  406a7a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406a7e:	fb00 f808 	mul.w	r8, r0, r8
  406a82:	45a0      	cmp	r8, r4
  406a84:	d907      	bls.n	406a96 <__udivmoddi4+0x26e>
  406a86:	18e4      	adds	r4, r4, r3
  406a88:	f100 35ff 	add.w	r5, r0, #4294967295
  406a8c:	d229      	bcs.n	406ae2 <__udivmoddi4+0x2ba>
  406a8e:	45a0      	cmp	r8, r4
  406a90:	d927      	bls.n	406ae2 <__udivmoddi4+0x2ba>
  406a92:	3802      	subs	r0, #2
  406a94:	441c      	add	r4, r3
  406a96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406a9a:	eba4 0408 	sub.w	r4, r4, r8
  406a9e:	fba0 8902 	umull	r8, r9, r0, r2
  406aa2:	454c      	cmp	r4, r9
  406aa4:	46c6      	mov	lr, r8
  406aa6:	464d      	mov	r5, r9
  406aa8:	d315      	bcc.n	406ad6 <__udivmoddi4+0x2ae>
  406aaa:	d012      	beq.n	406ad2 <__udivmoddi4+0x2aa>
  406aac:	b156      	cbz	r6, 406ac4 <__udivmoddi4+0x29c>
  406aae:	ebba 030e 	subs.w	r3, sl, lr
  406ab2:	eb64 0405 	sbc.w	r4, r4, r5
  406ab6:	fa04 f707 	lsl.w	r7, r4, r7
  406aba:	40cb      	lsrs	r3, r1
  406abc:	431f      	orrs	r7, r3
  406abe:	40cc      	lsrs	r4, r1
  406ac0:	6037      	str	r7, [r6, #0]
  406ac2:	6074      	str	r4, [r6, #4]
  406ac4:	2100      	movs	r1, #0
  406ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406aca:	4618      	mov	r0, r3
  406acc:	e6f8      	b.n	4068c0 <__udivmoddi4+0x98>
  406ace:	4690      	mov	r8, r2
  406ad0:	e6e0      	b.n	406894 <__udivmoddi4+0x6c>
  406ad2:	45c2      	cmp	sl, r8
  406ad4:	d2ea      	bcs.n	406aac <__udivmoddi4+0x284>
  406ad6:	ebb8 0e02 	subs.w	lr, r8, r2
  406ada:	eb69 0503 	sbc.w	r5, r9, r3
  406ade:	3801      	subs	r0, #1
  406ae0:	e7e4      	b.n	406aac <__udivmoddi4+0x284>
  406ae2:	4628      	mov	r0, r5
  406ae4:	e7d7      	b.n	406a96 <__udivmoddi4+0x26e>
  406ae6:	4640      	mov	r0, r8
  406ae8:	e791      	b.n	406a0e <__udivmoddi4+0x1e6>
  406aea:	4681      	mov	r9, r0
  406aec:	e7be      	b.n	406a6c <__udivmoddi4+0x244>
  406aee:	4601      	mov	r1, r0
  406af0:	e778      	b.n	4069e4 <__udivmoddi4+0x1bc>
  406af2:	3802      	subs	r0, #2
  406af4:	443c      	add	r4, r7
  406af6:	e745      	b.n	406984 <__udivmoddi4+0x15c>
  406af8:	4608      	mov	r0, r1
  406afa:	e708      	b.n	40690e <__udivmoddi4+0xe6>
  406afc:	f1a8 0802 	sub.w	r8, r8, #2
  406b00:	443d      	add	r5, r7
  406b02:	e72b      	b.n	40695c <__udivmoddi4+0x134>

00406b04 <__aeabi_idiv0>:
  406b04:	4770      	bx	lr
  406b06:	bf00      	nop
  406b08:	0001c200 	.word	0x0001c200
  406b0c:	000000c0 	.word	0x000000c0
  406b10:	00000800 	.word	0x00000800
  406b14:	00000000 	.word	0x00000000
  406b18:	5d69255b 	.word	0x5d69255b
  406b1c:	6c6c255b 	.word	0x6c6c255b
  406b20:	00005d75 	.word	0x00005d75
  406b24:	29582528 	.word	0x29582528
  406b28:	00000000 	.word	0x00000000
  406b2c:	2578307c 	.word	0x2578307c
  406b30:	00005832 	.word	0x00005832
  406b34:	000a0d7c 	.word	0x000a0d7c
  406b38:	5f5f5f5f 	.word	0x5f5f5f5f
  406b3c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b40:	5f5f5f5f 	.word	0x5f5f5f5f
  406b44:	5f5f5f5f 	.word	0x5f5f5f5f
  406b48:	5f5f5f5f 	.word	0x5f5f5f5f
  406b4c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b50:	52415453 	.word	0x52415453
  406b54:	5f5f5f54 	.word	0x5f5f5f54
  406b58:	5f5f5f5f 	.word	0x5f5f5f5f
  406b5c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b60:	5f5f5f5f 	.word	0x5f5f5f5f
  406b64:	5f5f5f5f 	.word	0x5f5f5f5f
  406b68:	5f5f5f5f 	.word	0x5f5f5f5f
  406b6c:	5f5f5f5f 	.word	0x5f5f5f5f
  406b70:	5f5f5f5f 	.word	0x5f5f5f5f
  406b74:	5f5f5f5f 	.word	0x5f5f5f5f
  406b78:	0a0d5f5f 	.word	0x0a0d5f5f
  406b7c:	00000000 	.word	0x00000000
  406b80:	2d2d2d2d 	.word	0x2d2d2d2d
  406b84:	2d2d2d2d 	.word	0x2d2d2d2d
  406b88:	2d2d2d2d 	.word	0x2d2d2d2d
  406b8c:	2d2d2d2d 	.word	0x2d2d2d2d
  406b90:	2d2d2d2d 	.word	0x2d2d2d2d
  406b94:	2d2d2d2d 	.word	0x2d2d2d2d
  406b98:	2d2d2d2d 	.word	0x2d2d2d2d
  406b9c:	2d2d2d2d 	.word	0x2d2d2d2d
  406ba0:	2d69252d 	.word	0x2d69252d
  406ba4:	2d2d2d2d 	.word	0x2d2d2d2d
  406ba8:	2d2d2d2d 	.word	0x2d2d2d2d
  406bac:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb0:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb4:	2d2d2d2d 	.word	0x2d2d2d2d
  406bb8:	2d2d2d2d 	.word	0x2d2d2d2d
  406bbc:	2d2d2d2d 	.word	0x2d2d2d2d
  406bc0:	0d2d2d2d 	.word	0x0d2d2d2d
  406bc4:	0000000a 	.word	0x0000000a
  406bc8:	444e4553 	.word	0x444e4553
  406bcc:	4e414320 	.word	0x4e414320
  406bd0:	454c4543 	.word	0x454c4543
  406bd4:	55422044 	.word	0x55422044
  406bd8:	52454646 	.word	0x52454646
  406bdc:	4c554620 	.word	0x4c554620
  406be0:	000a0d4c 	.word	0x000a0d4c

00406be4 <_global_impure_ptr>:
  406be4:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  406bf4:	46454443 00000000 33323130 37363534     CDEF....01234567
  406c04:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406c14:	0000296c                                l)..

00406c18 <blanks.7217>:
  406c18:	20202020 20202020 20202020 20202020                     

00406c28 <zeroes.7218>:
  406c28:	30303030 30303030 30303030 30303030     0000000000000000
  406c38:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406c48 <_ctype_>:
  406c48:	20202000 20202020 28282020 20282828     .         ((((( 
  406c58:	20202020 20202020 20202020 20202020                     
  406c68:	10108820 10101010 10101010 10101010      ...............
  406c78:	04040410 04040404 10040404 10101010     ................
  406c88:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406c98:	01010101 01010101 01010101 10101010     ................
  406ca8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406cb8:	02020202 02020202 02020202 10101010     ................
  406cc8:	00000020 00000000 00000000 00000000      ...............
	...

00406d4c <_init>:
  406d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d4e:	bf00      	nop
  406d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d52:	bc08      	pop	{r3}
  406d54:	469e      	mov	lr, r3
  406d56:	4770      	bx	lr

00406d58 <__init_array_start>:
  406d58:	0040538d 	.word	0x0040538d

00406d5c <__frame_dummy_init_array_entry>:
  406d5c:	0040018d                                ..@.

00406d60 <_fini>:
  406d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d62:	bf00      	nop
  406d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406d66:	bc08      	pop	{r3}
  406d68:	469e      	mov	lr, r3
  406d6a:	4770      	bx	lr

00406d6c <__fini_array_start>:
  406d6c:	00400169 	.word	0x00400169
