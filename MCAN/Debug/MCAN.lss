
MCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a94  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406a94  00406a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00406a9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000870  204009c0  00407460  000209c0  2**3
                  ALLOC
  4 .stack        00002000  20401230  00407cd0  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20403230  00409cd0  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000189d0  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002bfa  00000000  00000000  00039417  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007e50  00000000  00000000  0003c011  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d80  00000000  00000000  00043e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce8  00000000  00000000  00044be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002156d  00000000  00000000  000458c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d103  00000000  00000000  00066e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096533  00000000  00000000  00073f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000046c4  00000000  00000000  0010a46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 32 40 20 4d 1b 40 00 fd 1b 40 00 fd 1b 40 00     02@ M.@...@...@.
  400010:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 fd 1b 40 00     ..@...@.......@.
  40003c:	9d 36 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     .6@...@...@...@.
  40004c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40005c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 e1 12 40 00     ..@...@.......@.
  40006c:	f9 12 40 00 11 13 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40007c:	fd 1b 40 00 29 13 40 00 41 13 40 00 fd 1b 40 00     ..@.).@.A.@...@.
  40008c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40009c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000ac:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000bc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000cc:	95 29 40 00 65 2b 40 00 99 2c 40 00 6d 2e 40 00     .)@.e+@..,@.m.@.
  4000dc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000ec:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  4000fc:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40010c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ......@...@...@.
  40012c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40013c:	fd 1b 40 00 fd 1b 40 00 fd 1b 40 00 fd 1b 40 00     ..@...@...@...@.
  40014c:	fd 1b 40 00 fd 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00406a9c 	.word	0x00406a9c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00406a9c 	.word	0x00406a9c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00406a9c 	.word	0x00406a9c
  4001d0:	00000000 	.word	0x00000000

004001d4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	2b07      	cmp	r3, #7
  4001e0:	d831      	bhi.n	400246 <osc_enable+0x72>
  4001e2:	a201      	add	r2, pc, #4	; (adr r2, 4001e8 <osc_enable+0x14>)
  4001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e8:	00400245 	.word	0x00400245
  4001ec:	00400209 	.word	0x00400209
  4001f0:	00400211 	.word	0x00400211
  4001f4:	00400219 	.word	0x00400219
  4001f8:	00400221 	.word	0x00400221
  4001fc:	00400229 	.word	0x00400229
  400200:	00400231 	.word	0x00400231
  400204:	0040023b 	.word	0x0040023b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400208:	2000      	movs	r0, #0
  40020a:	4b11      	ldr	r3, [pc, #68]	; (400250 <osc_enable+0x7c>)
  40020c:	4798      	blx	r3
		break;
  40020e:	e01a      	b.n	400246 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400210:	2001      	movs	r0, #1
  400212:	4b0f      	ldr	r3, [pc, #60]	; (400250 <osc_enable+0x7c>)
  400214:	4798      	blx	r3
		break;
  400216:	e016      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400218:	2000      	movs	r0, #0
  40021a:	4b0e      	ldr	r3, [pc, #56]	; (400254 <osc_enable+0x80>)
  40021c:	4798      	blx	r3
		break;
  40021e:	e012      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400220:	2010      	movs	r0, #16
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <osc_enable+0x80>)
  400224:	4798      	blx	r3
		break;
  400226:	e00e      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400228:	2020      	movs	r0, #32
  40022a:	4b0a      	ldr	r3, [pc, #40]	; (400254 <osc_enable+0x80>)
  40022c:	4798      	blx	r3
		break;
  40022e:	e00a      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400230:	213e      	movs	r1, #62	; 0x3e
  400232:	2000      	movs	r0, #0
  400234:	4b08      	ldr	r3, [pc, #32]	; (400258 <osc_enable+0x84>)
  400236:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400238:	e005      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40023a:	213e      	movs	r1, #62	; 0x3e
  40023c:	2001      	movs	r0, #1
  40023e:	4b06      	ldr	r3, [pc, #24]	; (400258 <osc_enable+0x84>)
  400240:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400242:	e000      	b.n	400246 <osc_enable+0x72>
		break;
  400244:	bf00      	nop
	}
}
  400246:	bf00      	nop
  400248:	3708      	adds	r7, #8
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	00401459 	.word	0x00401459
  400254:	004014c5 	.word	0x004014c5
  400258:	00401535 	.word	0x00401535

0040025c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40025c:	b580      	push	{r7, lr}
  40025e:	b082      	sub	sp, #8
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b07      	cmp	r3, #7
  400268:	d826      	bhi.n	4002b8 <osc_is_ready+0x5c>
  40026a:	a201      	add	r2, pc, #4	; (adr r2, 400270 <osc_is_ready+0x14>)
  40026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400270:	00400291 	.word	0x00400291
  400274:	00400295 	.word	0x00400295
  400278:	00400295 	.word	0x00400295
  40027c:	004002a7 	.word	0x004002a7
  400280:	004002a7 	.word	0x004002a7
  400284:	004002a7 	.word	0x004002a7
  400288:	004002a7 	.word	0x004002a7
  40028c:	004002a7 	.word	0x004002a7
	case OSC_SLCK_32K_RC:
		return 1;
  400290:	2301      	movs	r3, #1
  400292:	e012      	b.n	4002ba <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <osc_is_ready+0x68>)
  400296:	4798      	blx	r3
  400298:	4603      	mov	r3, r0
  40029a:	2b00      	cmp	r3, #0
  40029c:	bf14      	ite	ne
  40029e:	2301      	movne	r3, #1
  4002a0:	2300      	moveq	r3, #0
  4002a2:	b2db      	uxtb	r3, r3
  4002a4:	e009      	b.n	4002ba <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <osc_is_ready+0x6c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	bf14      	ite	ne
  4002b0:	2301      	movne	r3, #1
  4002b2:	2300      	moveq	r3, #0
  4002b4:	b2db      	uxtb	r3, r3
  4002b6:	e000      	b.n	4002ba <osc_is_ready+0x5e>
	}

	return 0;
  4002b8:	2300      	movs	r3, #0
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	3708      	adds	r7, #8
  4002be:	46bd      	mov	sp, r7
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	00401491 	.word	0x00401491
  4002c8:	004015ad 	.word	0x004015ad

004002cc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d4:	687b      	ldr	r3, [r7, #4]
  4002d6:	2b07      	cmp	r3, #7
  4002d8:	d825      	bhi.n	400326 <osc_get_rate+0x5a>
  4002da:	a201      	add	r2, pc, #4	; (adr r2, 4002e0 <osc_get_rate+0x14>)
  4002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e0:	00400301 	.word	0x00400301
  4002e4:	00400307 	.word	0x00400307
  4002e8:	0040030d 	.word	0x0040030d
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400304:	e010      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030a:	e00d      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400310:	e00a      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x68>)
  400314:	e008      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x6c>)
  400318:	e006      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x70>)
  40031c:	e004      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <osc_get_rate+0x70>)
  400320:	e002      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400322:	4b06      	ldr	r3, [pc, #24]	; (40033c <osc_get_rate+0x70>)
  400324:	e000      	b.n	400328 <osc_get_rate+0x5c>
	}

	return 0;
  400326:	2300      	movs	r3, #0
}
  400328:	4618      	mov	r0, r3
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	003d0900 	.word	0x003d0900
  400338:	007a1200 	.word	0x007a1200
  40033c:	00b71b00 	.word	0x00b71b00

00400340 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400340:	b580      	push	{r7, lr}
  400342:	b082      	sub	sp, #8
  400344:	af00      	add	r7, sp, #0
  400346:	4603      	mov	r3, r0
  400348:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40034a:	bf00      	nop
  40034c:	79fb      	ldrb	r3, [r7, #7]
  40034e:	4618      	mov	r0, r3
  400350:	4b05      	ldr	r3, [pc, #20]	; (400368 <osc_wait_ready+0x28>)
  400352:	4798      	blx	r3
  400354:	4603      	mov	r3, r0
  400356:	f083 0301 	eor.w	r3, r3, #1
  40035a:	b2db      	uxtb	r3, r3
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f5      	bne.n	40034c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	0040025d 	.word	0x0040025d

0040036c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40036c:	b580      	push	{r7, lr}
  40036e:	b086      	sub	sp, #24
  400370:	af00      	add	r7, sp, #0
  400372:	60f8      	str	r0, [r7, #12]
  400374:	607a      	str	r2, [r7, #4]
  400376:	603b      	str	r3, [r7, #0]
  400378:	460b      	mov	r3, r1
  40037a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40037c:	687b      	ldr	r3, [r7, #4]
  40037e:	2b00      	cmp	r3, #0
  400380:	d107      	bne.n	400392 <pll_config_init+0x26>
  400382:	683b      	ldr	r3, [r7, #0]
  400384:	2b00      	cmp	r3, #0
  400386:	d104      	bne.n	400392 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400388:	68fb      	ldr	r3, [r7, #12]
  40038a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40038e:	601a      	str	r2, [r3, #0]
  400390:	e019      	b.n	4003c6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400392:	7afb      	ldrb	r3, [r7, #11]
  400394:	4618      	mov	r0, r3
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <pll_config_init+0x64>)
  400398:	4798      	blx	r3
  40039a:	4602      	mov	r2, r0
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	fbb2 f3f3 	udiv	r3, r2, r3
  4003a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4003a4:	697b      	ldr	r3, [r7, #20]
  4003a6:	683a      	ldr	r2, [r7, #0]
  4003a8:	fb02 f303 	mul.w	r3, r2, r3
  4003ac:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	3b01      	subs	r3, #1
  4003b2:	041a      	lsls	r2, r3, #16
  4003b4:	4b07      	ldr	r3, [pc, #28]	; (4003d4 <pll_config_init+0x68>)
  4003b6:	4013      	ands	r3, r2
  4003b8:	687a      	ldr	r2, [r7, #4]
  4003ba:	b2d2      	uxtb	r2, r2
  4003bc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4003be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003c2:	68fb      	ldr	r3, [r7, #12]
  4003c4:	601a      	str	r2, [r3, #0]
	}
}
  4003c6:	bf00      	nop
  4003c8:	3718      	adds	r7, #24
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004002cd 	.word	0x004002cd
  4003d4:	07ff0000 	.word	0x07ff0000

004003d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
  4003e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d108      	bne.n	4003fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <pll_enable+0x38>)
  4003ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ec:	4a09      	ldr	r2, [pc, #36]	; (400414 <pll_enable+0x3c>)
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003f8:	e005      	b.n	400406 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003fa:	4a06      	ldr	r2, [pc, #24]	; (400414 <pll_enable+0x3c>)
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	681b      	ldr	r3, [r3, #0]
  400400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400404:	61d3      	str	r3, [r2, #28]
}
  400406:	bf00      	nop
  400408:	3708      	adds	r7, #8
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004015c9 	.word	0x004015c9
  400414:	400e0600 	.word	0x400e0600

00400418 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400418:	b580      	push	{r7, lr}
  40041a:	b082      	sub	sp, #8
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	2b00      	cmp	r3, #0
  400424:	d103      	bne.n	40042e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <pll_is_locked+0x24>)
  400428:	4798      	blx	r3
  40042a:	4603      	mov	r3, r0
  40042c:	e002      	b.n	400434 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <pll_is_locked+0x28>)
  400430:	4798      	blx	r3
  400432:	4603      	mov	r3, r0
	}
}
  400434:	4618      	mov	r0, r3
  400436:	3708      	adds	r7, #8
  400438:	46bd      	mov	sp, r7
  40043a:	bd80      	pop	{r7, pc}
  40043c:	004015e5 	.word	0x004015e5
  400440:	00401629 	.word	0x00401629

00400444 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	4603      	mov	r3, r0
  40044c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40044e:	79fb      	ldrb	r3, [r7, #7]
  400450:	3b03      	subs	r3, #3
  400452:	2b04      	cmp	r3, #4
  400454:	d808      	bhi.n	400468 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4618      	mov	r0, r3
  40045a:	4b06      	ldr	r3, [pc, #24]	; (400474 <pll_enable_source+0x30>)
  40045c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4618      	mov	r0, r3
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <pll_enable_source+0x34>)
  400464:	4798      	blx	r3
		break;
  400466:	e000      	b.n	40046a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400468:	bf00      	nop
	}
}
  40046a:	bf00      	nop
  40046c:	3708      	adds	r7, #8
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	004001d5 	.word	0x004001d5
  400478:	00400341 	.word	0x00400341

0040047c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	b082      	sub	sp, #8
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400484:	bf00      	nop
  400486:	6878      	ldr	r0, [r7, #4]
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <pll_wait_for_lock+0x20>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d0f9      	beq.n	400486 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400492:	2300      	movs	r3, #0
}
  400494:	4618      	mov	r0, r3
  400496:	3708      	adds	r7, #8
  400498:	46bd      	mov	sp, r7
  40049a:	bd80      	pop	{r7, pc}
  40049c:	00400419 	.word	0x00400419

004004a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004a4:	2006      	movs	r0, #6
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <sysclk_get_main_hz+0x1c>)
  4004a8:	4798      	blx	r3
  4004aa:	4602      	mov	r2, r0
  4004ac:	4613      	mov	r3, r2
  4004ae:	009b      	lsls	r3, r3, #2
  4004b0:	4413      	add	r3, r2
  4004b2:	009a      	lsls	r2, r3, #2
  4004b4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd80      	pop	{r7, pc}
  4004ba:	bf00      	nop
  4004bc:	004002cd 	.word	0x004002cd

004004c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <sysclk_get_cpu_hz+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004ca:	4618      	mov	r0, r3
  4004cc:	bd80      	pop	{r7, pc}
  4004ce:	bf00      	nop
  4004d0:	004004a1 	.word	0x004004a1

004004d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d4:	b590      	push	{r4, r7, lr}
  4004d6:	b083      	sub	sp, #12
  4004d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4004da:	4813      	ldr	r0, [pc, #76]	; (400528 <sysclk_init+0x54>)
  4004dc:	4b13      	ldr	r3, [pc, #76]	; (40052c <sysclk_init+0x58>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <sysclk_init+0x5c>)
  4004e4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004e6:	1d38      	adds	r0, r7, #4
  4004e8:	2319      	movs	r3, #25
  4004ea:	2201      	movs	r2, #1
  4004ec:	2106      	movs	r1, #6
  4004ee:	4c11      	ldr	r4, [pc, #68]	; (400534 <sysclk_init+0x60>)
  4004f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004f2:	1d3b      	adds	r3, r7, #4
  4004f4:	2100      	movs	r1, #0
  4004f6:	4618      	mov	r0, r3
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <sysclk_init+0x64>)
  4004fa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0f      	ldr	r3, [pc, #60]	; (40053c <sysclk_init+0x68>)
  400500:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <sysclk_init+0x6c>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2000      	movs	r0, #0
  40050a:	4b0e      	ldr	r3, [pc, #56]	; (400544 <sysclk_init+0x70>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <sysclk_init+0x74>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <sysclk_init+0x78>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	085b      	lsrs	r3, r3, #1
  40051a:	4618      	mov	r0, r3
  40051c:	4b03      	ldr	r3, [pc, #12]	; (40052c <sysclk_init+0x58>)
  40051e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400520:	bf00      	nop
  400522:	370c      	adds	r7, #12
  400524:	46bd      	mov	sp, r7
  400526:	bd90      	pop	{r4, r7, pc}
  400528:	08f0d180 	.word	0x08f0d180
  40052c:	00401d6d 	.word	0x00401d6d
  400530:	00400445 	.word	0x00400445
  400534:	0040036d 	.word	0x0040036d
  400538:	004003d9 	.word	0x004003d9
  40053c:	0040047d 	.word	0x0040047d
  400540:	00401359 	.word	0x00401359
  400544:	004013d5 	.word	0x004013d5
  400548:	00401c05 	.word	0x00401c05
  40054c:	004004c1 	.word	0x004004c1

00400550 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400550:	b580      	push	{r7, lr}
  400552:	b082      	sub	sp, #8
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400558:	6878      	ldr	r0, [r7, #4]
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <sysclk_enable_peripheral_clock+0x18>)
  40055c:	4798      	blx	r3
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	00401645 	.word	0x00401645

0040056c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400570:	200a      	movs	r0, #10
  400572:	4b08      	ldr	r3, [pc, #32]	; (400594 <ioport_init+0x28>)
  400574:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400576:	200b      	movs	r0, #11
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <ioport_init+0x28>)
  40057a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40057c:	200c      	movs	r0, #12
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <ioport_init+0x28>)
  400580:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400582:	2010      	movs	r0, #16
  400584:	4b03      	ldr	r3, [pc, #12]	; (400594 <ioport_init+0x28>)
  400586:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400588:	2011      	movs	r0, #17
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <ioport_init+0x28>)
  40058c:	4798      	blx	r3
	arch_ioport_init();
}
  40058e:	bf00      	nop
  400590:	bd80      	pop	{r7, pc}
  400592:	bf00      	nop
  400594:	00400551 	.word	0x00400551

00400598 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400598:	b480      	push	{r7}
  40059a:	b089      	sub	sp, #36	; 0x24
  40059c:	af00      	add	r7, sp, #0
  40059e:	6078      	str	r0, [r7, #4]
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	61fb      	str	r3, [r7, #28]
  4005a4:	69fb      	ldr	r3, [r7, #28]
  4005a6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4005a8:	69bb      	ldr	r3, [r7, #24]
  4005aa:	095a      	lsrs	r2, r3, #5
  4005ac:	69fb      	ldr	r3, [r7, #28]
  4005ae:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4005b0:	697b      	ldr	r3, [r7, #20]
  4005b2:	f003 031f 	and.w	r3, r3, #31
  4005b6:	2101      	movs	r1, #1
  4005b8:	fa01 f303 	lsl.w	r3, r1, r3
  4005bc:	613a      	str	r2, [r7, #16]
  4005be:	60fb      	str	r3, [r7, #12]
  4005c0:	693b      	ldr	r3, [r7, #16]
  4005c2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <ioport_disable_pin+0x48>)
  4005c8:	4413      	add	r3, r2
  4005ca:	025b      	lsls	r3, r3, #9
  4005cc:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005ce:	68fb      	ldr	r3, [r7, #12]
  4005d0:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4005d2:	bf00      	nop
  4005d4:	3724      	adds	r7, #36	; 0x24
  4005d6:	46bd      	mov	sp, r7
  4005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	00200707 	.word	0x00200707

004005e4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b08d      	sub	sp, #52	; 0x34
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
  4005ec:	6039      	str	r1, [r7, #0]
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4005f2:	683b      	ldr	r3, [r7, #0]
  4005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  4005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005f8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005fc:	095a      	lsrs	r2, r3, #5
  4005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400600:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400602:	6a3b      	ldr	r3, [r7, #32]
  400604:	f003 031f 	and.w	r3, r3, #31
  400608:	2101      	movs	r1, #1
  40060a:	fa01 f303 	lsl.w	r3, r1, r3
  40060e:	61fa      	str	r2, [r7, #28]
  400610:	61bb      	str	r3, [r7, #24]
  400612:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400614:	617b      	str	r3, [r7, #20]
  400616:	69fb      	ldr	r3, [r7, #28]
  400618:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40061a:	693a      	ldr	r2, [r7, #16]
  40061c:	4b37      	ldr	r3, [pc, #220]	; (4006fc <ioport_set_pin_mode+0x118>)
  40061e:	4413      	add	r3, r2
  400620:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400622:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400624:	697b      	ldr	r3, [r7, #20]
  400626:	f003 0308 	and.w	r3, r3, #8
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	69ba      	ldr	r2, [r7, #24]
  400632:	665a      	str	r2, [r3, #100]	; 0x64
  400634:	e002      	b.n	40063c <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	69ba      	ldr	r2, [r7, #24]
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	f003 0310 	and.w	r3, r3, #16
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	69ba      	ldr	r2, [r7, #24]
  40064a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40064e:	e003      	b.n	400658 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	69ba      	ldr	r2, [r7, #24]
  400654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400658:	697b      	ldr	r3, [r7, #20]
  40065a:	f003 0320 	and.w	r3, r3, #32
  40065e:	2b00      	cmp	r3, #0
  400660:	d003      	beq.n	40066a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	69ba      	ldr	r2, [r7, #24]
  400666:	651a      	str	r2, [r3, #80]	; 0x50
  400668:	e002      	b.n	400670 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	69ba      	ldr	r2, [r7, #24]
  40066e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400670:	697b      	ldr	r3, [r7, #20]
  400672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400676:	2b00      	cmp	r3, #0
  400678:	d003      	beq.n	400682 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	69ba      	ldr	r2, [r7, #24]
  40067e:	621a      	str	r2, [r3, #32]
  400680:	e002      	b.n	400688 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	69ba      	ldr	r2, [r7, #24]
  400686:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400688:	697b      	ldr	r3, [r7, #20]
  40068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40068e:	2b00      	cmp	r3, #0
  400690:	d004      	beq.n	40069c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400692:	68fb      	ldr	r3, [r7, #12]
  400694:	69ba      	ldr	r2, [r7, #24]
  400696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40069a:	e003      	b.n	4006a4 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	69ba      	ldr	r2, [r7, #24]
  4006a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4006a4:	697b      	ldr	r3, [r7, #20]
  4006a6:	f003 0301 	and.w	r3, r3, #1
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d006      	beq.n	4006bc <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b2:	69bb      	ldr	r3, [r7, #24]
  4006b4:	431a      	orrs	r2, r3
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	671a      	str	r2, [r3, #112]	; 0x70
  4006ba:	e006      	b.n	4006ca <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006bc:	68fb      	ldr	r3, [r7, #12]
  4006be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	43db      	mvns	r3, r3
  4006c4:	401a      	ands	r2, r3
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4006ca:	697b      	ldr	r3, [r7, #20]
  4006cc:	f003 0302 	and.w	r3, r3, #2
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d006      	beq.n	4006e2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006d8:	69bb      	ldr	r3, [r7, #24]
  4006da:	431a      	orrs	r2, r3
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4006e0:	e006      	b.n	4006f0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e6:	69bb      	ldr	r3, [r7, #24]
  4006e8:	43db      	mvns	r3, r3
  4006ea:	401a      	ands	r2, r3
  4006ec:	68fb      	ldr	r3, [r7, #12]
  4006ee:	675a      	str	r2, [r3, #116]	; 0x74
  4006f0:	bf00      	nop
  4006f2:	3734      	adds	r7, #52	; 0x34
  4006f4:	46bd      	mov	sp, r7
  4006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fa:	4770      	bx	lr
  4006fc:	00200707 	.word	0x00200707

00400700 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400700:	b480      	push	{r7}
  400702:	b08d      	sub	sp, #52	; 0x34
  400704:	af00      	add	r7, sp, #0
  400706:	6078      	str	r0, [r7, #4]
  400708:	460b      	mov	r3, r1
  40070a:	70fb      	strb	r3, [r7, #3]
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400710:	78fb      	ldrb	r3, [r7, #3]
  400712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400718:	627b      	str	r3, [r7, #36]	; 0x24
  40071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40071c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40071e:	6a3b      	ldr	r3, [r7, #32]
  400720:	095b      	lsrs	r3, r3, #5
  400722:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400724:	69fa      	ldr	r2, [r7, #28]
  400726:	4b17      	ldr	r3, [pc, #92]	; (400784 <ioport_set_pin_dir+0x84>)
  400728:	4413      	add	r3, r2
  40072a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40072c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40072e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400732:	2b01      	cmp	r3, #1
  400734:	d109      	bne.n	40074a <ioport_set_pin_dir+0x4a>
  400736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400738:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40073a:	697b      	ldr	r3, [r7, #20]
  40073c:	f003 031f 	and.w	r3, r3, #31
  400740:	2201      	movs	r2, #1
  400742:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400744:	69bb      	ldr	r3, [r7, #24]
  400746:	611a      	str	r2, [r3, #16]
  400748:	e00c      	b.n	400764 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40074a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40074e:	2b00      	cmp	r3, #0
  400750:	d108      	bne.n	400764 <ioport_set_pin_dir+0x64>
  400752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400754:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400756:	693b      	ldr	r3, [r7, #16]
  400758:	f003 031f 	and.w	r3, r3, #31
  40075c:	2201      	movs	r2, #1
  40075e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400760:	69bb      	ldr	r3, [r7, #24]
  400762:	615a      	str	r2, [r3, #20]
  400764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400766:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400768:	68fb      	ldr	r3, [r7, #12]
  40076a:	f003 031f 	and.w	r3, r3, #31
  40076e:	2201      	movs	r2, #1
  400770:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400772:	69bb      	ldr	r3, [r7, #24]
  400774:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400778:	bf00      	nop
  40077a:	3734      	adds	r7, #52	; 0x34
  40077c:	46bd      	mov	sp, r7
  40077e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400782:	4770      	bx	lr
  400784:	00200707 	.word	0x00200707

00400788 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400788:	b480      	push	{r7}
  40078a:	b08b      	sub	sp, #44	; 0x2c
  40078c:	af00      	add	r7, sp, #0
  40078e:	6078      	str	r0, [r7, #4]
  400790:	460b      	mov	r3, r1
  400792:	70fb      	strb	r3, [r7, #3]
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	627b      	str	r3, [r7, #36]	; 0x24
  400798:	78fb      	ldrb	r3, [r7, #3]
  40079a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a0:	61fb      	str	r3, [r7, #28]
  4007a2:	69fb      	ldr	r3, [r7, #28]
  4007a4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4007a6:	69bb      	ldr	r3, [r7, #24]
  4007a8:	095b      	lsrs	r3, r3, #5
  4007aa:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007ac:	697a      	ldr	r2, [r7, #20]
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <ioport_set_pin_level+0x68>)
  4007b0:	4413      	add	r3, r2
  4007b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007b4:	613b      	str	r3, [r7, #16]

	if (level) {
  4007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d009      	beq.n	4007d2 <ioport_set_pin_level+0x4a>
  4007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	f003 031f 	and.w	r3, r3, #31
  4007c8:	2201      	movs	r2, #1
  4007ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007cc:	693b      	ldr	r3, [r7, #16]
  4007ce:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4007d0:	e008      	b.n	4007e4 <ioport_set_pin_level+0x5c>
  4007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4007d6:	68bb      	ldr	r3, [r7, #8]
  4007d8:	f003 031f 	and.w	r3, r3, #31
  4007dc:	2201      	movs	r2, #1
  4007de:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007e0:	693b      	ldr	r3, [r7, #16]
  4007e2:	635a      	str	r2, [r3, #52]	; 0x34
  4007e4:	bf00      	nop
  4007e6:	372c      	adds	r7, #44	; 0x2c
  4007e8:	46bd      	mov	sp, r7
  4007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ee:	4770      	bx	lr
  4007f0:	00200707 	.word	0x00200707

004007f4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4007f4:	b480      	push	{r7}
  4007f6:	b08d      	sub	sp, #52	; 0x34
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	6078      	str	r0, [r7, #4]
  4007fc:	460b      	mov	r3, r1
  4007fe:	70fb      	strb	r3, [r7, #3]
  400800:	687b      	ldr	r3, [r7, #4]
  400802:	62fb      	str	r3, [r7, #44]	; 0x2c
  400804:	78fb      	ldrb	r3, [r7, #3]
  400806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40080c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400810:	095a      	lsrs	r2, r3, #5
  400812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400814:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400816:	6a3b      	ldr	r3, [r7, #32]
  400818:	f003 031f 	and.w	r3, r3, #31
  40081c:	2101      	movs	r1, #1
  40081e:	fa01 f303 	lsl.w	r3, r1, r3
  400822:	61fa      	str	r2, [r7, #28]
  400824:	61bb      	str	r3, [r7, #24]
  400826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40082a:	75fb      	strb	r3, [r7, #23]
  40082c:	69fb      	ldr	r3, [r7, #28]
  40082e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400830:	693a      	ldr	r2, [r7, #16]
  400832:	4b23      	ldr	r3, [pc, #140]	; (4008c0 <ioport_set_pin_sense_mode+0xcc>)
  400834:	4413      	add	r3, r2
  400836:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400838:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40083a:	7dfb      	ldrb	r3, [r7, #23]
  40083c:	3b01      	subs	r3, #1
  40083e:	2b03      	cmp	r3, #3
  400840:	d82e      	bhi.n	4008a0 <ioport_set_pin_sense_mode+0xac>
  400842:	a201      	add	r2, pc, #4	; (adr r2, 400848 <ioport_set_pin_sense_mode+0x54>)
  400844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400848:	0040087d 	.word	0x0040087d
  40084c:	0040088f 	.word	0x0040088f
  400850:	00400859 	.word	0x00400859
  400854:	0040086b 	.word	0x0040086b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400858:	68fb      	ldr	r3, [r7, #12]
  40085a:	69ba      	ldr	r2, [r7, #24]
  40085c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	69ba      	ldr	r2, [r7, #24]
  400864:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400868:	e01f      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	69ba      	ldr	r2, [r7, #24]
  40086e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	69ba      	ldr	r2, [r7, #24]
  400876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087a:	e016      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	69ba      	ldr	r2, [r7, #24]
  400880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	69ba      	ldr	r2, [r7, #24]
  400888:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40088c:	e00d      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	69ba      	ldr	r2, [r7, #24]
  400892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	69ba      	ldr	r2, [r7, #24]
  40089a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40089e:	e004      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4008a0:	68fb      	ldr	r3, [r7, #12]
  4008a2:	69ba      	ldr	r2, [r7, #24]
  4008a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4008a8:	e003      	b.n	4008b2 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	69ba      	ldr	r2, [r7, #24]
  4008ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4008b2:	bf00      	nop
  4008b4:	3734      	adds	r7, #52	; 0x34
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	00200707 	.word	0x00200707

004008c4 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4008c4:	b480      	push	{r7}
  4008c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008cc:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4008d0:	4a0c      	ldr	r2, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d2:	4b0c      	ldr	r3, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4008d8:	f023 0301 	bic.w	r3, r3, #1
  4008dc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008e0:	4a08      	ldr	r2, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4008e8:	f023 0301 	bic.w	r3, r3, #1
  4008ec:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  4008f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4008f4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4008f8:	bf00      	nop
  4008fa:	46bd      	mov	sp, r7
  4008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	e000ed00 	.word	0xe000ed00

00400908 <board_init>:
#endif

void board_init(void)
{
  400908:	b580      	push	{r7, lr}
  40090a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40090c:	4b2e      	ldr	r3, [pc, #184]	; (4009c8 <board_init+0xc0>)
  40090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400912:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400914:	4b2d      	ldr	r3, [pc, #180]	; (4009cc <board_init+0xc4>)
  400916:	4a2e      	ldr	r2, [pc, #184]	; (4009d0 <board_init+0xc8>)
  400918:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40091a:	4b2c      	ldr	r3, [pc, #176]	; (4009cc <board_init+0xc4>)
  40091c:	4a2d      	ldr	r2, [pc, #180]	; (4009d4 <board_init+0xcc>)
  40091e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400920:	4b2d      	ldr	r3, [pc, #180]	; (4009d8 <board_init+0xd0>)
  400922:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400924:	4b2d      	ldr	r3, [pc, #180]	; (4009dc <board_init+0xd4>)
  400926:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400928:	2101      	movs	r1, #1
  40092a:	2048      	movs	r0, #72	; 0x48
  40092c:	4b2c      	ldr	r3, [pc, #176]	; (4009e0 <board_init+0xd8>)
  40092e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400930:	2101      	movs	r1, #1
  400932:	2048      	movs	r0, #72	; 0x48
  400934:	4b2b      	ldr	r3, [pc, #172]	; (4009e4 <board_init+0xdc>)
  400936:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400938:	2100      	movs	r1, #0
  40093a:	200b      	movs	r0, #11
  40093c:	4b28      	ldr	r3, [pc, #160]	; (4009e0 <board_init+0xd8>)
  40093e:	4798      	blx	r3
  400940:	2188      	movs	r1, #136	; 0x88
  400942:	200b      	movs	r0, #11
  400944:	4b28      	ldr	r3, [pc, #160]	; (4009e8 <board_init+0xe0>)
  400946:	4798      	blx	r3
  400948:	2102      	movs	r1, #2
  40094a:	200b      	movs	r0, #11
  40094c:	4b27      	ldr	r3, [pc, #156]	; (4009ec <board_init+0xe4>)
  40094e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400950:	2100      	movs	r1, #0
  400952:	2015      	movs	r0, #21
  400954:	4b24      	ldr	r3, [pc, #144]	; (4009e8 <board_init+0xe0>)
  400956:	4798      	blx	r3
  400958:	2015      	movs	r0, #21
  40095a:	4b25      	ldr	r3, [pc, #148]	; (4009f0 <board_init+0xe8>)
  40095c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40095e:	4a25      	ldr	r2, [pc, #148]	; (4009f4 <board_init+0xec>)
  400960:	4b24      	ldr	r3, [pc, #144]	; (4009f4 <board_init+0xec>)
  400962:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400966:	f043 0310 	orr.w	r3, r3, #16
  40096a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  40096e:	2103      	movs	r1, #3
  400970:	2024      	movs	r0, #36	; 0x24
  400972:	4b1d      	ldr	r3, [pc, #116]	; (4009e8 <board_init+0xe0>)
  400974:	4798      	blx	r3
  400976:	2024      	movs	r0, #36	; 0x24
  400978:	4b1d      	ldr	r3, [pc, #116]	; (4009f0 <board_init+0xe8>)
  40097a:	4798      	blx	r3
#endif


#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	ioport_set_pin_peripheral_mode(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
  40097c:	2100      	movs	r1, #0
  40097e:	2023      	movs	r0, #35	; 0x23
  400980:	4b19      	ldr	r3, [pc, #100]	; (4009e8 <board_init+0xe0>)
  400982:	4798      	blx	r3
  400984:	2023      	movs	r0, #35	; 0x23
  400986:	4b1a      	ldr	r3, [pc, #104]	; (4009f0 <board_init+0xe8>)
  400988:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
  40098a:	2100      	movs	r1, #0
  40098c:	2022      	movs	r0, #34	; 0x22
  40098e:	4b16      	ldr	r3, [pc, #88]	; (4009e8 <board_init+0xe0>)
  400990:	4798      	blx	r3
  400992:	2022      	movs	r0, #34	; 0x22
  400994:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <board_init+0xe8>)
  400996:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN0_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  400998:	2101      	movs	r1, #1
  40099a:	2080      	movs	r0, #128	; 0x80
  40099c:	4b10      	ldr	r3, [pc, #64]	; (4009e0 <board_init+0xd8>)
  40099e:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN0_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  4009a0:	2101      	movs	r1, #1
  4009a2:	2081      	movs	r0, #129	; 0x81
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <board_init+0xd8>)
  4009a6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  4009a8:	2102      	movs	r1, #2
  4009aa:	204c      	movs	r0, #76	; 0x4c
  4009ac:	4b0e      	ldr	r3, [pc, #56]	; (4009e8 <board_init+0xe0>)
  4009ae:	4798      	blx	r3
  4009b0:	204c      	movs	r0, #76	; 0x4c
  4009b2:	4b0f      	ldr	r3, [pc, #60]	; (4009f0 <board_init+0xe8>)
  4009b4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  4009b6:	2102      	movs	r1, #2
  4009b8:	204e      	movs	r0, #78	; 0x4e
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <board_init+0xe0>)
  4009bc:	4798      	blx	r3
  4009be:	204e      	movs	r0, #78	; 0x4e
  4009c0:	4b0b      	ldr	r3, [pc, #44]	; (4009f0 <board_init+0xe8>)
  4009c2:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  4009c4:	bf00      	nop
  4009c6:	bd80      	pop	{r7, pc}
  4009c8:	400e1850 	.word	0x400e1850
  4009cc:	400e0c00 	.word	0x400e0c00
  4009d0:	5a00080c 	.word	0x5a00080c
  4009d4:	5a00070c 	.word	0x5a00070c
  4009d8:	004008c5 	.word	0x004008c5
  4009dc:	0040056d 	.word	0x0040056d
  4009e0:	00400701 	.word	0x00400701
  4009e4:	00400789 	.word	0x00400789
  4009e8:	004005e5 	.word	0x004005e5
  4009ec:	004007f5 	.word	0x004007f5
  4009f0:	00400599 	.word	0x00400599
  4009f4:	40088000 	.word	0x40088000

004009f8 <_mcan_message_memory_init>:
 *
 * \param hw  Base address of the MCAN
 *
 */
static void _mcan_message_memory_init(Mcan *hw)
{
  4009f8:	b480      	push	{r7}
  4009fa:	b083      	sub	sp, #12
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	6078      	str	r0, [r7, #4]
	if (hw == MCAN0) {
  400a00:	687b      	ldr	r3, [r7, #4]
  400a02:	4a48      	ldr	r2, [pc, #288]	; (400b24 <_mcan_message_memory_init+0x12c>)
  400a04:	4293      	cmp	r3, r2
  400a06:	d13d      	bne.n	400a84 <_mcan_message_memory_init+0x8c>
		hw->MCAN_SIDFC = ((uint32_t)mcan0_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a08:	4a47      	ldr	r2, [pc, #284]	; (400b28 <_mcan_message_memory_init+0x130>)
  400a0a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a0e:	4013      	ands	r3, r2
  400a10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400a14:	687b      	ldr	r3, [r7, #4]
  400a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan0_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a1a:	4a44      	ldr	r2, [pc, #272]	; (400b2c <_mcan_message_memory_init+0x134>)
  400a1c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a20:	4013      	ands	r3, r2
  400a22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a26:	687b      	ldr	r3, [r7, #4]
  400a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan0_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400a2c:	4a40      	ldr	r2, [pc, #256]	; (400b30 <_mcan_message_memory_init+0x138>)
  400a2e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a32:	4013      	ands	r3, r2
  400a34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN0_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan0_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400a3e:	4a3d      	ldr	r2, [pc, #244]	; (400b34 <_mcan_message_memory_init+0x13c>)
  400a40:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a44:	4013      	ands	r3, r2
  400a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400a4a:	687b      	ldr	r3, [r7, #4]
  400a4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN0_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan0_rx_buffer & BIT_2_TO_15_MASK);
  400a50:	4a39      	ldr	r2, [pc, #228]	; (400b38 <_mcan_message_memory_init+0x140>)
  400a52:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a56:	4013      	ands	r3, r2
  400a58:	687a      	ldr	r2, [r7, #4]
  400a5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a5e:	4b37      	ldr	r3, [pc, #220]	; (400b3c <_mcan_message_memory_init+0x144>)
  400a60:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400a64:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN0_TX_BUFFER_NUM) |
  400a66:	4b36      	ldr	r3, [pc, #216]	; (400b40 <_mcan_message_memory_init+0x148>)
  400a68:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan0_tx_buffer & BIT_2_TO_15_MASK) |
  400a6a:	687a      	ldr	r2, [r7, #4]
  400a6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN0_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan0_tx_event_fifo & BIT_2_TO_15_MASK) |
  400a70:	4a34      	ldr	r2, [pc, #208]	; (400b44 <_mcan_message_memory_init+0x14c>)
  400a72:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a76:	4013      	ands	r3, r2
  400a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400a7c:	687b      	ldr	r3, [r7, #4]
  400a7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  400a82:	e040      	b.n	400b06 <_mcan_message_memory_init+0x10e>
				MCAN_TXEFC_EFS(CONF_MCAN0_TX_EVENT_FIFO);
	} else if (hw == MCAN1) {
  400a84:	687b      	ldr	r3, [r7, #4]
  400a86:	4a30      	ldr	r2, [pc, #192]	; (400b48 <_mcan_message_memory_init+0x150>)
  400a88:	4293      	cmp	r3, r2
  400a8a:	d13c      	bne.n	400b06 <_mcan_message_memory_init+0x10e>
		hw->MCAN_SIDFC = ((uint32_t)mcan1_rx_standard_filter & BIT_2_TO_15_MASK) |
  400a8c:	4a2f      	ldr	r2, [pc, #188]	; (400b4c <_mcan_message_memory_init+0x154>)
  400a8e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400a92:	4013      	ands	r3, r2
  400a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				MCAN_SIDFC_LSS(CONF_MCAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->MCAN_XIDFC = ((uint32_t)mcan1_rx_extended_filter & BIT_2_TO_15_MASK) |
  400a9e:	4a2c      	ldr	r2, [pc, #176]	; (400b50 <_mcan_message_memory_init+0x158>)
  400aa0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400aa4:	4013      	ands	r3, r2
  400aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				MCAN_XIDFC_LSE(CONF_MCAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->MCAN_RXF0C = ((uint32_t)mcan1_rx_fifo_0 & BIT_2_TO_15_MASK) |
  400ab0:	4a28      	ldr	r2, [pc, #160]	; (400b54 <_mcan_message_memory_init+0x15c>)
  400ab2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ab6:	4013      	ands	r3, r2
  400ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400abc:	687b      	ldr	r3, [r7, #4]
  400abe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				MCAN_RXF0C_F0S(CONF_MCAN1_RX_FIFO_0_NUM);
		hw->MCAN_RXF1C = ((uint32_t)mcan1_rx_fifo_1 & BIT_2_TO_15_MASK) |
  400ac2:	4a25      	ldr	r2, [pc, #148]	; (400b58 <_mcan_message_memory_init+0x160>)
  400ac4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ac8:	4013      	ands	r3, r2
  400aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
  400ace:	687b      	ldr	r3, [r7, #4]
  400ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				MCAN_RXF1C_F1S(CONF_MCAN1_RX_FIFO_1_NUM);
		hw->MCAN_RXBC = ((uint32_t)mcan1_rx_buffer & BIT_2_TO_15_MASK);
  400ad4:	4a21      	ldr	r2, [pc, #132]	; (400b5c <_mcan_message_memory_init+0x164>)
  400ad6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400ada:	4013      	ands	r3, r2
  400adc:	687a      	ldr	r2, [r7, #4]
  400ade:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400ae2:	4b1f      	ldr	r3, [pc, #124]	; (400b60 <_mcan_message_memory_init+0x168>)
  400ae4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  400ae8:	401a      	ands	r2, r3
				MCAN_TXBC_NDTB(CONF_MCAN1_TX_BUFFER_NUM) |
  400aea:	4b15      	ldr	r3, [pc, #84]	; (400b40 <_mcan_message_memory_init+0x148>)
  400aec:	4313      	orrs	r3, r2
		hw->MCAN_TXBC = ((uint32_t)mcan1_tx_buffer & BIT_2_TO_15_MASK) |
  400aee:	687a      	ldr	r2, [r7, #4]
  400af0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
				MCAN_TXBC_TFQS(CONF_MCAN1_TX_FIFO_QUEUE_NUM);
		hw->MCAN_TXEFC = ((uint32_t)mcan1_tx_event_fifo & BIT_2_TO_15_MASK) |
  400af4:	4a1b      	ldr	r2, [pc, #108]	; (400b64 <_mcan_message_memory_init+0x16c>)
  400af6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  400afa:	4013      	ands	r3, r2
  400afc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_MCAN_ELEMENT_DATA_SIZE <= 24) {
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2200      	movs	r2, #0
  400b0a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 8) / 4);
  400b0e:	687b      	ldr	r3, [r7, #4]
  400b10:	2200      	movs	r2, #0
  400b12:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		hw->MCAN_RXESC = MCAN_RXESC_RBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F0DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5) |
				MCAN_RXESC_F1DS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
		hw->MCAN_TXESC = MCAN_TXESC_TBDS((CONF_MCAN_ELEMENT_DATA_SIZE - 32) / 16 + 5);
	}
}
  400b16:	bf00      	nop
  400b18:	370c      	adds	r7, #12
  400b1a:	46bd      	mov	sp, r7
  400b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b20:	4770      	bx	lr
  400b22:	bf00      	nop
  400b24:	40030000 	.word	0x40030000
  400b28:	20400c1c 	.word	0x20400c1c
  400b2c:	20400c9c 	.word	0x20400c9c
  400b30:	204009ec 	.word	0x204009ec
  400b34:	20400aec 	.word	0x20400aec
  400b38:	204009dc 	.word	0x204009dc
  400b3c:	20400bec 	.word	0x20400bec
  400b40:	01010000 	.word	0x01010000
  400b44:	20400c0c 	.word	0x20400c0c
  400b48:	40034000 	.word	0x40034000
  400b4c:	20400f5c 	.word	0x20400f5c
  400b50:	20400fdc 	.word	0x20400fdc
  400b54:	20400d2c 	.word	0x20400d2c
  400b58:	20400e2c 	.word	0x20400e2c
  400b5c:	20400d1c 	.word	0x20400d1c
  400b60:	20400f2c 	.word	0x20400f2c
  400b64:	20400f4c 	.word	0x20400f4c

00400b68 <_mcan_set_configuration>:
 *
 * \param hw  Base address of the MCAN
 * \param config  default configuration parameters.
 */
static void _mcan_set_configuration(Mcan *hw, struct mcan_config *config)
{
  400b68:	b480      	push	{r7}
  400b6a:	b083      	sub	sp, #12
  400b6c:	af00      	add	r7, sp, #0
  400b6e:	6078      	str	r0, [r7, #4]
  400b70:	6039      	str	r1, [r7, #0]
	if (config->tdc_enable) {
		hw->MCAN_DBTP |= MCAN_DBTP_TDC_ENABLED;
	}
#else
	/* Timing setting. */
	hw->MCAN_BTP = MCAN_BTP_BRP(CONF_MCAN_NBTP_NBRP_VALUE) |
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	4a65      	ldr	r2, [pc, #404]	; (400d0c <_mcan_set_configuration+0x1a4>)
  400b76:	61da      	str	r2, [r3, #28]
			MCAN_BTP_TSEG2(CONF_MCAN_NBTP_NTSEG2_VALUE);
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
			MCAN_FBTP_FSJW(CONF_MCAN_FBTP_FSJW_VALUE) |
			MCAN_FBTP_FTSEG1(CONF_MCAN_FBTP_FTSEG1_VALUE) |
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
			MCAN_FBTP_TDCO(config->delay_compensation_offset);
  400b78:	683b      	ldr	r3, [r7, #0]
  400b7a:	7bdb      	ldrb	r3, [r3, #15]
  400b7c:	061b      	lsls	r3, r3, #24
  400b7e:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			MCAN_FBTP_FTSEG2(CONF_MCAN_FBTP_FTSEG2_VALUE) |
  400b82:	4b63      	ldr	r3, [pc, #396]	; (400d10 <_mcan_set_configuration+0x1a8>)
  400b84:	4313      	orrs	r3, r2
	hw->MCAN_FBTP = MCAN_FBTP_FBRP(CONF_MCAN_FBTP_FBRP_VALUE) |
  400b86:	687a      	ldr	r2, [r7, #4]
  400b88:	60d3      	str	r3, [r2, #12]

	if (config->tdc_enable) {
  400b8a:	683b      	ldr	r3, [r7, #0]
  400b8c:	7b9b      	ldrb	r3, [r3, #14]
  400b8e:	2b00      	cmp	r3, #0
  400b90:	d005      	beq.n	400b9e <_mcan_set_configuration+0x36>
		hw->MCAN_FBTP |= MCAN_FBTP_TDC_ENABLED;
  400b92:	687b      	ldr	r3, [r7, #4]
  400b94:	68db      	ldr	r3, [r3, #12]
  400b96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
  400b9a:	687b      	ldr	r3, [r7, #4]
  400b9c:	60da      	str	r2, [r3, #12]
	}
#endif
	hw->MCAN_RWD |= MCAN_RWD_WDC(config->watchdog_configuration);
  400b9e:	687b      	ldr	r3, [r7, #4]
  400ba0:	695b      	ldr	r3, [r3, #20]
  400ba2:	683a      	ldr	r2, [r7, #0]
  400ba4:	7852      	ldrb	r2, [r2, #1]
  400ba6:	431a      	orrs	r2, r3
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	615a      	str	r2, [r3, #20]

	if (config->transmit_pause) {
  400bac:	683b      	ldr	r3, [r7, #0]
  400bae:	789b      	ldrb	r3, [r3, #2]
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d005      	beq.n	400bc0 <_mcan_set_configuration+0x58>
		hw->MCAN_CCCR |= MCAN_CCCR_TXP;
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	699b      	ldr	r3, [r3, #24]
  400bb8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	619a      	str	r2, [r3, #24]
	}

	if (!config->automatic_retransmission) {
  400bc0:	683b      	ldr	r3, [r7, #0]
  400bc2:	795b      	ldrb	r3, [r3, #5]
  400bc4:	f083 0301 	eor.w	r3, r3, #1
  400bc8:	b2db      	uxtb	r3, r3
  400bca:	2b00      	cmp	r3, #0
  400bcc:	d005      	beq.n	400bda <_mcan_set_configuration+0x72>
		hw->MCAN_CCCR |= MCAN_CCCR_DAR;
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	699b      	ldr	r3, [r3, #24]
  400bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
  400bd6:	687b      	ldr	r3, [r7, #4]
  400bd8:	619a      	str	r2, [r3, #24]
	}

	if (config->clock_stop_request) {
  400bda:	683b      	ldr	r3, [r7, #0]
  400bdc:	799b      	ldrb	r3, [r3, #6]
  400bde:	2b00      	cmp	r3, #0
  400be0:	d005      	beq.n	400bee <_mcan_set_configuration+0x86>
		hw->MCAN_CCCR |= MCAN_CCCR_CSR;
  400be2:	687b      	ldr	r3, [r7, #4]
  400be4:	699b      	ldr	r3, [r3, #24]
  400be6:	f043 0210 	orr.w	r2, r3, #16
  400bea:	687b      	ldr	r3, [r7, #4]
  400bec:	619a      	str	r2, [r3, #24]
	}

	hw->MCAN_TSCC = MCAN_TSCC_TCP(config->timestamp_prescaler) |
  400bee:	683b      	ldr	r3, [r7, #0]
  400bf0:	7a1b      	ldrb	r3, [r3, #8]
  400bf2:	041b      	lsls	r3, r3, #16
  400bf4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400bf8:	f043 0201 	orr.w	r2, r3, #1
  400bfc:	687b      	ldr	r3, [r7, #4]
  400bfe:	621a      	str	r2, [r3, #32]
			MCAN_TSCC_TSS_TCP_INC;

	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c00:	683b      	ldr	r3, [r7, #0]
  400c02:	895b      	ldrh	r3, [r3, #10]
  400c04:	041b      	lsls	r3, r3, #16
  400c06:	461a      	mov	r2, r3
			config->timeout_mode | config->timeout_enable;
  400c08:	683b      	ldr	r3, [r7, #0]
  400c0a:	7b1b      	ldrb	r3, [r3, #12]
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c0c:	4313      	orrs	r3, r2
			config->timeout_mode | config->timeout_enable;
  400c0e:	683a      	ldr	r2, [r7, #0]
  400c10:	7b52      	ldrb	r2, [r2, #13]
  400c12:	431a      	orrs	r2, r3
	hw->MCAN_TOCC = MCAN_TOCC_TOP(config->timeout_period) |
  400c14:	687b      	ldr	r3, [r7, #4]
  400c16:	629a      	str	r2, [r3, #40]	; 0x28

	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400c18:	683b      	ldr	r3, [r7, #0]
  400c1a:	7c1b      	ldrb	r3, [r3, #16]
  400c1c:	011b      	lsls	r3, r3, #4
  400c1e:	f003 0230 	and.w	r2, r3, #48	; 0x30
			MCAN_GFC_ANFE(config->nonmatching_frames_action_extended);
  400c22:	683b      	ldr	r3, [r7, #0]
  400c24:	7c5b      	ldrb	r3, [r3, #17]
  400c26:	009b      	lsls	r3, r3, #2
  400c28:	f003 030c 	and.w	r3, r3, #12
	hw->MCAN_GFC = MCAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
  400c2c:	431a      	orrs	r2, r3
  400c2e:	687b      	ldr	r3, [r7, #4]
  400c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->remote_frames_standard_reject) {
  400c34:	683b      	ldr	r3, [r7, #0]
  400c36:	7c9b      	ldrb	r3, [r3, #18]
  400c38:	2b00      	cmp	r3, #0
  400c3a:	d007      	beq.n	400c4c <_mcan_set_configuration+0xe4>
		hw->MCAN_GFC |= MCAN_GFC_RRFS;
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400c42:	f043 0202 	orr.w	r2, r3, #2
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
	if (config->remote_frames_extended_reject) {
  400c4c:	683b      	ldr	r3, [r7, #0]
  400c4e:	7cdb      	ldrb	r3, [r3, #19]
  400c50:	2b00      	cmp	r3, #0
  400c52:	d007      	beq.n	400c64 <_mcan_set_configuration+0xfc>
		hw->MCAN_GFC|= MCAN_GFC_RRFE;
  400c54:	687b      	ldr	r3, [r7, #4]
  400c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  400c5a:	f043 0201 	orr.w	r2, r3, #1
  400c5e:	687b      	ldr	r3, [r7, #4]
  400c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	hw->MCAN_XIDAM = config->extended_id_mask;
  400c64:	683b      	ldr	r3, [r7, #0]
  400c66:	695a      	ldr	r2, [r3, #20]
  400c68:	687b      	ldr	r3, [r7, #4]
  400c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	if (config->rx_fifo_0_overwrite) {
  400c6e:	683b      	ldr	r3, [r7, #0]
  400c70:	7e1b      	ldrb	r3, [r3, #24]
  400c72:	2b00      	cmp	r3, #0
  400c74:	d007      	beq.n	400c86 <_mcan_set_configuration+0x11e>
		hw->MCAN_RXF0C |= MCAN_RXF0C_F0OM;
  400c76:	687b      	ldr	r3, [r7, #4]
  400c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
  400c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400c80:	687b      	ldr	r3, [r7, #4]
  400c82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
	hw->MCAN_RXF0C |= MCAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400c8c:	683b      	ldr	r3, [r7, #0]
  400c8e:	7e5b      	ldrb	r3, [r3, #25]
  400c90:	061b      	lsls	r3, r3, #24
  400c92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400c96:	431a      	orrs	r2, r3
  400c98:	687b      	ldr	r3, [r7, #4]
  400c9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if (config->rx_fifo_1_overwrite) {
  400c9e:	683b      	ldr	r3, [r7, #0]
  400ca0:	7e9b      	ldrb	r3, [r3, #26]
  400ca2:	2b00      	cmp	r3, #0
  400ca4:	d007      	beq.n	400cb6 <_mcan_set_configuration+0x14e>
		hw->MCAN_RXF1C |= MCAN_RXF1C_F1OM;
  400ca6:	687b      	ldr	r3, [r7, #4]
  400ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
  400cac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}
	hw->MCAN_RXF1C |= MCAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
  400cb6:	687b      	ldr	r3, [r7, #4]
  400cb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400cbc:	683b      	ldr	r3, [r7, #0]
  400cbe:	7edb      	ldrb	r3, [r3, #27]
  400cc0:	061b      	lsls	r3, r3, #24
  400cc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
  400cc6:	431a      	orrs	r2, r3
  400cc8:	687b      	ldr	r3, [r7, #4]
  400cca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	if (config->tx_queue_mode) {
  400cce:	683b      	ldr	r3, [r7, #0]
  400cd0:	7f1b      	ldrb	r3, [r3, #28]
  400cd2:	2b00      	cmp	r3, #0
  400cd4:	d007      	beq.n	400ce6 <_mcan_set_configuration+0x17e>
		hw->MCAN_TXBC |= MCAN_TXBC_TFQM;
  400cd6:	687b      	ldr	r3, [r7, #4]
  400cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
  400cdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  400ce0:	687b      	ldr	r3, [r7, #4]
  400ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}

	hw->MCAN_TXEFC |= MCAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
  400ce6:	687b      	ldr	r3, [r7, #4]
  400ce8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
  400cec:	683b      	ldr	r3, [r7, #0]
  400cee:	7f5b      	ldrb	r3, [r3, #29]
  400cf0:	061b      	lsls	r3, r3, #24
  400cf2:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  400cf6:	431a      	orrs	r2, r3
  400cf8:	687b      	ldr	r3, [r7, #4]
  400cfa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
  400cfe:	bf00      	nop
  400d00:	370c      	adds	r7, #12
  400d02:	46bd      	mov	sp, r7
  400d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d08:	4770      	bx	lr
  400d0a:	bf00      	nop
  400d0c:	00070a73 	.word	0x00070a73
  400d10:	00050a73 	.word	0x00050a73

00400d14 <_mcan_enable_peripheral_clock>:
 *
 * \param module_inst  MCAN instance
 *
 */
static void _mcan_enable_peripheral_clock(struct mcan_module *const module_inst)
{
  400d14:	b580      	push	{r7, lr}
  400d16:	b082      	sub	sp, #8
  400d18:	af00      	add	r7, sp, #0
  400d1a:	6078      	str	r0, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	681b      	ldr	r3, [r3, #0]
  400d20:	4a09      	ldr	r2, [pc, #36]	; (400d48 <_mcan_enable_peripheral_clock+0x34>)
  400d22:	4293      	cmp	r3, r2
  400d24:	d103      	bne.n	400d2e <_mcan_enable_peripheral_clock+0x1a>
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN0);
  400d26:	2023      	movs	r0, #35	; 0x23
  400d28:	4b08      	ldr	r3, [pc, #32]	; (400d4c <_mcan_enable_peripheral_clock+0x38>)
  400d2a:	4798      	blx	r3
	} else if (module_inst->hw == MCAN1) {
		/* Turn on the digital interface clock. */
		pmc_enable_periph_clk(ID_MCAN1);
	}
}
  400d2c:	e007      	b.n	400d3e <_mcan_enable_peripheral_clock+0x2a>
	} else if (module_inst->hw == MCAN1) {
  400d2e:	687b      	ldr	r3, [r7, #4]
  400d30:	681b      	ldr	r3, [r3, #0]
  400d32:	4a07      	ldr	r2, [pc, #28]	; (400d50 <_mcan_enable_peripheral_clock+0x3c>)
  400d34:	4293      	cmp	r3, r2
  400d36:	d102      	bne.n	400d3e <_mcan_enable_peripheral_clock+0x2a>
		pmc_enable_periph_clk(ID_MCAN1);
  400d38:	2025      	movs	r0, #37	; 0x25
  400d3a:	4b04      	ldr	r3, [pc, #16]	; (400d4c <_mcan_enable_peripheral_clock+0x38>)
  400d3c:	4798      	blx	r3
}
  400d3e:	bf00      	nop
  400d40:	3708      	adds	r7, #8
  400d42:	46bd      	mov	sp, r7
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	40030000 	.word	0x40030000
  400d4c:	00401645 	.word	0x00401645
  400d50:	40034000 	.word	0x40034000

00400d54 <mcan_init>:
 * \param hw  Base address of MCAN.
 * \param config default configuration .
 */
void mcan_init(struct mcan_module *const module_inst, Mcan *hw,
		struct mcan_config *config)
{
  400d54:	b580      	push	{r7, lr}
  400d56:	b084      	sub	sp, #16
  400d58:	af00      	add	r7, sp, #0
  400d5a:	60f8      	str	r0, [r7, #12]
  400d5c:	60b9      	str	r1, [r7, #8]
  400d5e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
  400d60:	68fb      	ldr	r3, [r7, #12]
  400d62:	68ba      	ldr	r2, [r7, #8]
  400d64:	601a      	str	r2, [r3, #0]

	pmc_disable_pck(PMC_PCK_5);
  400d66:	2005      	movs	r0, #5
  400d68:	4b14      	ldr	r3, [pc, #80]	; (400dbc <mcan_init+0x68>)
  400d6a:	4798      	blx	r3
	pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));
  400d6c:	2190      	movs	r1, #144	; 0x90
  400d6e:	2005      	movs	r0, #5
  400d70:	4b13      	ldr	r3, [pc, #76]	; (400dc0 <mcan_init+0x6c>)
  400d72:	4798      	blx	r3
	pmc_enable_pck(PMC_PCK_5);
  400d74:	2005      	movs	r0, #5
  400d76:	4b13      	ldr	r3, [pc, #76]	; (400dc4 <mcan_init+0x70>)
  400d78:	4798      	blx	r3

	/* Enable peripheral clock */
	_mcan_enable_peripheral_clock(module_inst);
  400d7a:	68f8      	ldr	r0, [r7, #12]
  400d7c:	4b12      	ldr	r3, [pc, #72]	; (400dc8 <mcan_init+0x74>)
  400d7e:	4798      	blx	r3


	/* Configuration Change Enable. */
	hw->MCAN_CCCR |= MCAN_CCCR_CCE;
  400d80:	68bb      	ldr	r3, [r7, #8]
  400d82:	699b      	ldr	r3, [r3, #24]
  400d84:	f043 0202 	orr.w	r2, r3, #2
  400d88:	68bb      	ldr	r3, [r7, #8]
  400d8a:	619a      	str	r2, [r3, #24]
	
	/* Initialize the message memory address. */
	_mcan_message_memory_init(hw);
  400d8c:	68b8      	ldr	r0, [r7, #8]
  400d8e:	4b0f      	ldr	r3, [pc, #60]	; (400dcc <mcan_init+0x78>)
  400d90:	4798      	blx	r3

	/* Set the configuration. */
	_mcan_set_configuration(hw, config);
  400d92:	6879      	ldr	r1, [r7, #4]
  400d94:	68b8      	ldr	r0, [r7, #8]
  400d96:	4b0e      	ldr	r3, [pc, #56]	; (400dd0 <mcan_init+0x7c>)
  400d98:	4798      	blx	r3

	
	
	/* Enable the interrupt setting which no need change. */
	hw->MCAN_ILE = MCAN_ILE_EINT0 | MCAN_ILE_EINT1;
  400d9a:	68bb      	ldr	r3, [r7, #8]
  400d9c:	2203      	movs	r2, #3
  400d9e:	65da      	str	r2, [r3, #92]	; 0x5c
	hw->MCAN_TXBTIE = 0xFFFFFFFFul;
  400da0:	68bb      	ldr	r3, [r7, #8]
  400da2:	f04f 32ff 	mov.w	r2, #4294967295
  400da6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	hw->MCAN_TXBCIE = 0xFFFFFFFFul;
  400daa:	68bb      	ldr	r3, [r7, #8]
  400dac:	f04f 32ff 	mov.w	r2, #4294967295
  400db0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400db4:	bf00      	nop
  400db6:	3710      	adds	r7, #16
  400db8:	46bd      	mov	sp, r7
  400dba:	bd80      	pop	{r7, pc}
  400dbc:	00401759 	.word	0x00401759
  400dc0:	00401681 	.word	0x00401681
  400dc4:	00401731 	.word	0x00401731
  400dc8:	00400d15 	.word	0x00400d15
  400dcc:	004009f9 	.word	0x004009f9
  400dd0:	00400b69 	.word	0x00400b69

00400dd4 <mcan_start>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_start(struct mcan_module *const module_inst)
{
  400dd4:	b480      	push	{r7}
  400dd6:	b083      	sub	sp, #12
  400dd8:	af00      	add	r7, sp, #0
  400dda:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR &= ~MCAN_CCCR_INIT;
  400ddc:	687b      	ldr	r3, [r7, #4]
  400dde:	681b      	ldr	r3, [r3, #0]
  400de0:	687a      	ldr	r2, [r7, #4]
  400de2:	6812      	ldr	r2, [r2, #0]
  400de4:	6992      	ldr	r2, [r2, #24]
  400de6:	f022 0201 	bic.w	r2, r2, #1
  400dea:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT);
  400dec:	bf00      	nop
  400dee:	687b      	ldr	r3, [r7, #4]
  400df0:	681b      	ldr	r3, [r3, #0]
  400df2:	699b      	ldr	r3, [r3, #24]
  400df4:	f003 0301 	and.w	r3, r3, #1
  400df8:	2b00      	cmp	r3, #0
  400dfa:	d1f8      	bne.n	400dee <mcan_start+0x1a>
}
  400dfc:	bf00      	nop
  400dfe:	370c      	adds	r7, #12
  400e00:	46bd      	mov	sp, r7
  400e02:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e06:	4770      	bx	lr

00400e08 <mcan_stop>:
 *
 * \param module_inst  MCAN instance
 *
 */
void mcan_stop(struct mcan_module *const module_inst)
{
  400e08:	b480      	push	{r7}
  400e0a:	b083      	sub	sp, #12
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	6078      	str	r0, [r7, #4]
	module_inst->hw->MCAN_CCCR |= MCAN_CCCR_INIT;
  400e10:	687b      	ldr	r3, [r7, #4]
  400e12:	681b      	ldr	r3, [r3, #0]
  400e14:	687a      	ldr	r2, [r7, #4]
  400e16:	6812      	ldr	r2, [r2, #0]
  400e18:	6992      	ldr	r2, [r2, #24]
  400e1a:	f042 0201 	orr.w	r2, r2, #1
  400e1e:	619a      	str	r2, [r3, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->MCAN_CCCR & MCAN_CCCR_INIT));
  400e20:	bf00      	nop
  400e22:	687b      	ldr	r3, [r7, #4]
  400e24:	681b      	ldr	r3, [r3, #0]
  400e26:	699b      	ldr	r3, [r3, #24]
  400e28:	f003 0301 	and.w	r3, r3, #1
  400e2c:	2b00      	cmp	r3, #0
  400e2e:	d0f8      	beq.n	400e22 <mcan_stop+0x1a>
}
  400e30:	bf00      	nop
  400e32:	370c      	adds	r7, #12
  400e34:	46bd      	mov	sp, r7
  400e36:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e3a:	4770      	bx	lr

00400e3c <mcan_set_rx_standard_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_standard_filter(
		struct mcan_module *const module_inst,
		struct mcan_standard_message_filter_element *sd_filter, uint32_t index)
{
  400e3c:	b480      	push	{r7}
  400e3e:	b085      	sub	sp, #20
  400e40:	af00      	add	r7, sp, #0
  400e42:	60f8      	str	r0, [r7, #12]
  400e44:	60b9      	str	r1, [r7, #8]
  400e46:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400e48:	68fb      	ldr	r3, [r7, #12]
  400e4a:	681b      	ldr	r3, [r3, #0]
  400e4c:	4a0f      	ldr	r2, [pc, #60]	; (400e8c <mcan_set_rx_standard_filter+0x50>)
  400e4e:	4293      	cmp	r3, r2
  400e50:	d107      	bne.n	400e62 <mcan_set_rx_standard_filter+0x26>
		mcan0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400e52:	68bb      	ldr	r3, [r7, #8]
  400e54:	681a      	ldr	r2, [r3, #0]
  400e56:	490e      	ldr	r1, [pc, #56]	; (400e90 <mcan_set_rx_standard_filter+0x54>)
  400e58:	687b      	ldr	r3, [r7, #4]
  400e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  400e5e:	2300      	movs	r3, #0
  400e60:	e00e      	b.n	400e80 <mcan_set_rx_standard_filter+0x44>
	} else if (module_inst->hw == MCAN1) {
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	681b      	ldr	r3, [r3, #0]
  400e66:	4a0b      	ldr	r2, [pc, #44]	; (400e94 <mcan_set_rx_standard_filter+0x58>)
  400e68:	4293      	cmp	r3, r2
  400e6a:	d107      	bne.n	400e7c <mcan_set_rx_standard_filter+0x40>
		mcan1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
  400e6c:	68bb      	ldr	r3, [r7, #8]
  400e6e:	681a      	ldr	r2, [r3, #0]
  400e70:	4909      	ldr	r1, [pc, #36]	; (400e98 <mcan_set_rx_standard_filter+0x5c>)
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return STATUS_OK;
  400e78:	2300      	movs	r3, #0
  400e7a:	e001      	b.n	400e80 <mcan_set_rx_standard_filter+0x44>
	}
	return ERR_INVALID_ARG;
  400e7c:	f06f 0307 	mvn.w	r3, #7
}
  400e80:	4618      	mov	r0, r3
  400e82:	3714      	adds	r7, #20
  400e84:	46bd      	mov	sp, r7
  400e86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e8a:	4770      	bx	lr
  400e8c:	40030000 	.word	0x40030000
  400e90:	20400c1c 	.word	0x20400c1c
  400e94:	40034000 	.word	0x40034000
  400e98:	20400f5c 	.word	0x20400f5c

00400e9c <mcan_set_rx_extended_filter>:
 * \return status code.
 */
enum status_code mcan_set_rx_extended_filter(
		struct mcan_module *const module_inst,
		struct mcan_extended_message_filter_element *et_filter, uint32_t index)
{
  400e9c:	b480      	push	{r7}
  400e9e:	b085      	sub	sp, #20
  400ea0:	af00      	add	r7, sp, #0
  400ea2:	60f8      	str	r0, [r7, #12]
  400ea4:	60b9      	str	r1, [r7, #8]
  400ea6:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400ea8:	68fb      	ldr	r3, [r7, #12]
  400eaa:	681b      	ldr	r3, [r3, #0]
  400eac:	4a16      	ldr	r2, [pc, #88]	; (400f08 <mcan_set_rx_extended_filter+0x6c>)
  400eae:	4293      	cmp	r3, r2
  400eb0:	d10e      	bne.n	400ed0 <mcan_set_rx_extended_filter+0x34>
		mcan0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  400eb2:	68bb      	ldr	r3, [r7, #8]
  400eb4:	681a      	ldr	r2, [r3, #0]
  400eb6:	4915      	ldr	r1, [pc, #84]	; (400f0c <mcan_set_rx_extended_filter+0x70>)
  400eb8:	687b      	ldr	r3, [r7, #4]
  400eba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  400ebe:	68bb      	ldr	r3, [r7, #8]
  400ec0:	685a      	ldr	r2, [r3, #4]
  400ec2:	4912      	ldr	r1, [pc, #72]	; (400f0c <mcan_set_rx_extended_filter+0x70>)
  400ec4:	687b      	ldr	r3, [r7, #4]
  400ec6:	00db      	lsls	r3, r3, #3
  400ec8:	440b      	add	r3, r1
  400eca:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  400ecc:	2300      	movs	r3, #0
  400ece:	e015      	b.n	400efc <mcan_set_rx_extended_filter+0x60>
	} else if (module_inst->hw == MCAN1) {
  400ed0:	68fb      	ldr	r3, [r7, #12]
  400ed2:	681b      	ldr	r3, [r3, #0]
  400ed4:	4a0e      	ldr	r2, [pc, #56]	; (400f10 <mcan_set_rx_extended_filter+0x74>)
  400ed6:	4293      	cmp	r3, r2
  400ed8:	d10e      	bne.n	400ef8 <mcan_set_rx_extended_filter+0x5c>
		mcan1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
  400eda:	68bb      	ldr	r3, [r7, #8]
  400edc:	681a      	ldr	r2, [r3, #0]
  400ede:	490d      	ldr	r1, [pc, #52]	; (400f14 <mcan_set_rx_extended_filter+0x78>)
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		mcan1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
  400ee6:	68bb      	ldr	r3, [r7, #8]
  400ee8:	685a      	ldr	r2, [r3, #4]
  400eea:	490a      	ldr	r1, [pc, #40]	; (400f14 <mcan_set_rx_extended_filter+0x78>)
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	00db      	lsls	r3, r3, #3
  400ef0:	440b      	add	r3, r1
  400ef2:	605a      	str	r2, [r3, #4]
		return STATUS_OK;
  400ef4:	2300      	movs	r3, #0
  400ef6:	e001      	b.n	400efc <mcan_set_rx_extended_filter+0x60>
	}
	return ERR_INVALID_ARG;
  400ef8:	f06f 0307 	mvn.w	r3, #7
}
  400efc:	4618      	mov	r0, r3
  400efe:	3714      	adds	r7, #20
  400f00:	46bd      	mov	sp, r7
  400f02:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f06:	4770      	bx	lr
  400f08:	40030000 	.word	0x40030000
  400f0c:	20400c9c 	.word	0x20400c9c
  400f10:	40034000 	.word	0x40034000
  400f14:	20400fdc 	.word	0x20400fdc

00400f18 <mcan_get_rx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_buffer *rx_element, uint32_t index)
{
  400f18:	b580      	push	{r7, lr}
  400f1a:	b084      	sub	sp, #16
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	60f8      	str	r0, [r7, #12]
  400f20:	60b9      	str	r1, [r7, #8]
  400f22:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	681b      	ldr	r3, [r3, #0]
  400f28:	4a11      	ldr	r2, [pc, #68]	; (400f70 <mcan_get_rx_buffer_element+0x58>)
  400f2a:	4293      	cmp	r3, r2
  400f2c:	d10a      	bne.n	400f44 <mcan_get_rx_buffer_element+0x2c>
		memcpy(rx_element, &mcan0_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	011b      	lsls	r3, r3, #4
  400f32:	4a10      	ldr	r2, [pc, #64]	; (400f74 <mcan_get_rx_buffer_element+0x5c>)
  400f34:	4413      	add	r3, r2
  400f36:	2210      	movs	r2, #16
  400f38:	4619      	mov	r1, r3
  400f3a:	68b8      	ldr	r0, [r7, #8]
  400f3c:	4b0e      	ldr	r3, [pc, #56]	; (400f78 <mcan_get_rx_buffer_element+0x60>)
  400f3e:	4798      	blx	r3
		return STATUS_OK;
  400f40:	2300      	movs	r3, #0
  400f42:	e011      	b.n	400f68 <mcan_get_rx_buffer_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  400f44:	68fb      	ldr	r3, [r7, #12]
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	4a0c      	ldr	r2, [pc, #48]	; (400f7c <mcan_get_rx_buffer_element+0x64>)
  400f4a:	4293      	cmp	r3, r2
  400f4c:	d10a      	bne.n	400f64 <mcan_get_rx_buffer_element+0x4c>
		memcpy(rx_element, &mcan1_rx_buffer[index], sizeof(struct mcan_rx_element_buffer));
  400f4e:	687b      	ldr	r3, [r7, #4]
  400f50:	011b      	lsls	r3, r3, #4
  400f52:	4a0b      	ldr	r2, [pc, #44]	; (400f80 <mcan_get_rx_buffer_element+0x68>)
  400f54:	4413      	add	r3, r2
  400f56:	2210      	movs	r2, #16
  400f58:	4619      	mov	r1, r3
  400f5a:	68b8      	ldr	r0, [r7, #8]
  400f5c:	4b06      	ldr	r3, [pc, #24]	; (400f78 <mcan_get_rx_buffer_element+0x60>)
  400f5e:	4798      	blx	r3
		return STATUS_OK;
  400f60:	2300      	movs	r3, #0
  400f62:	e001      	b.n	400f68 <mcan_get_rx_buffer_element+0x50>
	}
	return ERR_INVALID_ARG;
  400f64:	f06f 0307 	mvn.w	r3, #7
}
  400f68:	4618      	mov	r0, r3
  400f6a:	3710      	adds	r7, #16
  400f6c:	46bd      	mov	sp, r7
  400f6e:	bd80      	pop	{r7, pc}
  400f70:	40030000 	.word	0x40030000
  400f74:	204009dc 	.word	0x204009dc
  400f78:	00403ea5 	.word	0x00403ea5
  400f7c:	40034000 	.word	0x40034000
  400f80:	20400d1c 	.word	0x20400d1c

00400f84 <mcan_get_rx_fifo_0_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_0_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_0 *rx_element, uint32_t index)
{
  400f84:	b580      	push	{r7, lr}
  400f86:	b084      	sub	sp, #16
  400f88:	af00      	add	r7, sp, #0
  400f8a:	60f8      	str	r0, [r7, #12]
  400f8c:	60b9      	str	r1, [r7, #8]
  400f8e:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400f90:	68fb      	ldr	r3, [r7, #12]
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	4a11      	ldr	r2, [pc, #68]	; (400fdc <mcan_get_rx_fifo_0_element+0x58>)
  400f96:	4293      	cmp	r3, r2
  400f98:	d10a      	bne.n	400fb0 <mcan_get_rx_fifo_0_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400f9a:	687b      	ldr	r3, [r7, #4]
  400f9c:	011b      	lsls	r3, r3, #4
  400f9e:	4a10      	ldr	r2, [pc, #64]	; (400fe0 <mcan_get_rx_fifo_0_element+0x5c>)
  400fa0:	4413      	add	r3, r2
  400fa2:	2210      	movs	r2, #16
  400fa4:	4619      	mov	r1, r3
  400fa6:	68b8      	ldr	r0, [r7, #8]
  400fa8:	4b0e      	ldr	r3, [pc, #56]	; (400fe4 <mcan_get_rx_fifo_0_element+0x60>)
  400faa:	4798      	blx	r3
		return STATUS_OK;
  400fac:	2300      	movs	r3, #0
  400fae:	e011      	b.n	400fd4 <mcan_get_rx_fifo_0_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  400fb0:	68fb      	ldr	r3, [r7, #12]
  400fb2:	681b      	ldr	r3, [r3, #0]
  400fb4:	4a0c      	ldr	r2, [pc, #48]	; (400fe8 <mcan_get_rx_fifo_0_element+0x64>)
  400fb6:	4293      	cmp	r3, r2
  400fb8:	d10a      	bne.n	400fd0 <mcan_get_rx_fifo_0_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_0[index], sizeof(struct mcan_rx_element_buffer));
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	011b      	lsls	r3, r3, #4
  400fbe:	4a0b      	ldr	r2, [pc, #44]	; (400fec <mcan_get_rx_fifo_0_element+0x68>)
  400fc0:	4413      	add	r3, r2
  400fc2:	2210      	movs	r2, #16
  400fc4:	4619      	mov	r1, r3
  400fc6:	68b8      	ldr	r0, [r7, #8]
  400fc8:	4b06      	ldr	r3, [pc, #24]	; (400fe4 <mcan_get_rx_fifo_0_element+0x60>)
  400fca:	4798      	blx	r3
		return STATUS_OK;
  400fcc:	2300      	movs	r3, #0
  400fce:	e001      	b.n	400fd4 <mcan_get_rx_fifo_0_element+0x50>
	}
	return ERR_INVALID_ARG;
  400fd0:	f06f 0307 	mvn.w	r3, #7
}
  400fd4:	4618      	mov	r0, r3
  400fd6:	3710      	adds	r7, #16
  400fd8:	46bd      	mov	sp, r7
  400fda:	bd80      	pop	{r7, pc}
  400fdc:	40030000 	.word	0x40030000
  400fe0:	204009ec 	.word	0x204009ec
  400fe4:	00403ea5 	.word	0x00403ea5
  400fe8:	40034000 	.word	0x40034000
  400fec:	20400d2c 	.word	0x20400d2c

00400ff0 <mcan_get_rx_fifo_1_element>:
 * \return status code.
 */
enum status_code mcan_get_rx_fifo_1_element(
		struct mcan_module *const module_inst,
		struct mcan_rx_element_fifo_1 *rx_element, uint32_t index)
{
  400ff0:	b580      	push	{r7, lr}
  400ff2:	b084      	sub	sp, #16
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	60f8      	str	r0, [r7, #12]
  400ff8:	60b9      	str	r1, [r7, #8]
  400ffa:	607a      	str	r2, [r7, #4]
	if (module_inst->hw == MCAN0) {
  400ffc:	68fb      	ldr	r3, [r7, #12]
  400ffe:	681b      	ldr	r3, [r3, #0]
  401000:	4a11      	ldr	r2, [pc, #68]	; (401048 <mcan_get_rx_fifo_1_element+0x58>)
  401002:	4293      	cmp	r3, r2
  401004:	d10a      	bne.n	40101c <mcan_get_rx_fifo_1_element+0x2c>
		memcpy(rx_element, &mcan0_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	011b      	lsls	r3, r3, #4
  40100a:	4a10      	ldr	r2, [pc, #64]	; (40104c <mcan_get_rx_fifo_1_element+0x5c>)
  40100c:	4413      	add	r3, r2
  40100e:	2210      	movs	r2, #16
  401010:	4619      	mov	r1, r3
  401012:	68b8      	ldr	r0, [r7, #8]
  401014:	4b0e      	ldr	r3, [pc, #56]	; (401050 <mcan_get_rx_fifo_1_element+0x60>)
  401016:	4798      	blx	r3
		return STATUS_OK;
  401018:	2300      	movs	r3, #0
  40101a:	e011      	b.n	401040 <mcan_get_rx_fifo_1_element+0x50>
	} else if (module_inst->hw == MCAN1) {
  40101c:	68fb      	ldr	r3, [r7, #12]
  40101e:	681b      	ldr	r3, [r3, #0]
  401020:	4a0c      	ldr	r2, [pc, #48]	; (401054 <mcan_get_rx_fifo_1_element+0x64>)
  401022:	4293      	cmp	r3, r2
  401024:	d10a      	bne.n	40103c <mcan_get_rx_fifo_1_element+0x4c>
		memcpy(rx_element, &mcan1_rx_fifo_1[index], sizeof(struct mcan_rx_element_buffer));
  401026:	687b      	ldr	r3, [r7, #4]
  401028:	011b      	lsls	r3, r3, #4
  40102a:	4a0b      	ldr	r2, [pc, #44]	; (401058 <mcan_get_rx_fifo_1_element+0x68>)
  40102c:	4413      	add	r3, r2
  40102e:	2210      	movs	r2, #16
  401030:	4619      	mov	r1, r3
  401032:	68b8      	ldr	r0, [r7, #8]
  401034:	4b06      	ldr	r3, [pc, #24]	; (401050 <mcan_get_rx_fifo_1_element+0x60>)
  401036:	4798      	blx	r3
		return STATUS_OK;
  401038:	2300      	movs	r3, #0
  40103a:	e001      	b.n	401040 <mcan_get_rx_fifo_1_element+0x50>
	}
	return ERR_INVALID_ARG;
  40103c:	f06f 0307 	mvn.w	r3, #7
}
  401040:	4618      	mov	r0, r3
  401042:	3710      	adds	r7, #16
  401044:	46bd      	mov	sp, r7
  401046:	bd80      	pop	{r7, pc}
  401048:	40030000 	.word	0x40030000
  40104c:	20400aec 	.word	0x20400aec
  401050:	00403ea5 	.word	0x00403ea5
  401054:	40034000 	.word	0x40034000
  401058:	20400e2c 	.word	0x20400e2c

0040105c <mcan_set_tx_buffer_element>:
 * \return status code.
 */
enum status_code mcan_set_tx_buffer_element(
		struct mcan_module *const module_inst,
		struct mcan_tx_element *tx_element, uint32_t index)
{
  40105c:	b480      	push	{r7}
  40105e:	b087      	sub	sp, #28
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	uint32_t i;
	if (module_inst->hw == MCAN0) {
  401068:	68fb      	ldr	r3, [r7, #12]
  40106a:	681b      	ldr	r3, [r3, #0]
  40106c:	4a2f      	ldr	r2, [pc, #188]	; (40112c <mcan_set_tx_buffer_element+0xd0>)
  40106e:	4293      	cmp	r3, r2
  401070:	d127      	bne.n	4010c2 <mcan_set_tx_buffer_element+0x66>
		mcan0_tx_buffer[index].T0.reg = tx_element->T0.reg;
  401072:	68bb      	ldr	r3, [r7, #8]
  401074:	681a      	ldr	r2, [r3, #0]
  401076:	492e      	ldr	r1, [pc, #184]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	011b      	lsls	r3, r3, #4
  40107c:	440b      	add	r3, r1
  40107e:	601a      	str	r2, [r3, #0]
		mcan0_tx_buffer[index].T1.reg = tx_element->T1.reg;
  401080:	68bb      	ldr	r3, [r7, #8]
  401082:	685a      	ldr	r2, [r3, #4]
  401084:	492a      	ldr	r1, [pc, #168]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  401086:	687b      	ldr	r3, [r7, #4]
  401088:	011b      	lsls	r3, r3, #4
  40108a:	440b      	add	r3, r1
  40108c:	3304      	adds	r3, #4
  40108e:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  401090:	2300      	movs	r3, #0
  401092:	617b      	str	r3, [r7, #20]
  401094:	e010      	b.n	4010b8 <mcan_set_tx_buffer_element+0x5c>
			mcan0_tx_buffer[index].data[i] = tx_element->data[i];
  401096:	68ba      	ldr	r2, [r7, #8]
  401098:	697b      	ldr	r3, [r7, #20]
  40109a:	4413      	add	r3, r2
  40109c:	3308      	adds	r3, #8
  40109e:	7819      	ldrb	r1, [r3, #0]
  4010a0:	4a23      	ldr	r2, [pc, #140]	; (401130 <mcan_set_tx_buffer_element+0xd4>)
  4010a2:	687b      	ldr	r3, [r7, #4]
  4010a4:	011b      	lsls	r3, r3, #4
  4010a6:	441a      	add	r2, r3
  4010a8:	697b      	ldr	r3, [r7, #20]
  4010aa:	4413      	add	r3, r2
  4010ac:	3308      	adds	r3, #8
  4010ae:	460a      	mov	r2, r1
  4010b0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4010b2:	697b      	ldr	r3, [r7, #20]
  4010b4:	3301      	adds	r3, #1
  4010b6:	617b      	str	r3, [r7, #20]
  4010b8:	697b      	ldr	r3, [r7, #20]
  4010ba:	2b07      	cmp	r3, #7
  4010bc:	d9eb      	bls.n	401096 <mcan_set_tx_buffer_element+0x3a>
		}
		return STATUS_OK;
  4010be:	2300      	movs	r3, #0
  4010c0:	e02e      	b.n	401120 <mcan_set_tx_buffer_element+0xc4>
	} else if (module_inst->hw == MCAN1) {
  4010c2:	68fb      	ldr	r3, [r7, #12]
  4010c4:	681b      	ldr	r3, [r3, #0]
  4010c6:	4a1b      	ldr	r2, [pc, #108]	; (401134 <mcan_set_tx_buffer_element+0xd8>)
  4010c8:	4293      	cmp	r3, r2
  4010ca:	d127      	bne.n	40111c <mcan_set_tx_buffer_element+0xc0>
		mcan1_tx_buffer[index].T0.reg = tx_element->T0.reg;
  4010cc:	68bb      	ldr	r3, [r7, #8]
  4010ce:	681a      	ldr	r2, [r3, #0]
  4010d0:	4919      	ldr	r1, [pc, #100]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010d2:	687b      	ldr	r3, [r7, #4]
  4010d4:	011b      	lsls	r3, r3, #4
  4010d6:	440b      	add	r3, r1
  4010d8:	601a      	str	r2, [r3, #0]
		mcan1_tx_buffer[index].T1.reg = tx_element->T1.reg;
  4010da:	68bb      	ldr	r3, [r7, #8]
  4010dc:	685a      	ldr	r2, [r3, #4]
  4010de:	4916      	ldr	r1, [pc, #88]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	011b      	lsls	r3, r3, #4
  4010e4:	440b      	add	r3, r1
  4010e6:	3304      	adds	r3, #4
  4010e8:	601a      	str	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  4010ea:	2300      	movs	r3, #0
  4010ec:	617b      	str	r3, [r7, #20]
  4010ee:	e010      	b.n	401112 <mcan_set_tx_buffer_element+0xb6>
			mcan1_tx_buffer[index].data[i] = tx_element->data[i];
  4010f0:	68ba      	ldr	r2, [r7, #8]
  4010f2:	697b      	ldr	r3, [r7, #20]
  4010f4:	4413      	add	r3, r2
  4010f6:	3308      	adds	r3, #8
  4010f8:	7819      	ldrb	r1, [r3, #0]
  4010fa:	4a0f      	ldr	r2, [pc, #60]	; (401138 <mcan_set_tx_buffer_element+0xdc>)
  4010fc:	687b      	ldr	r3, [r7, #4]
  4010fe:	011b      	lsls	r3, r3, #4
  401100:	441a      	add	r2, r3
  401102:	697b      	ldr	r3, [r7, #20]
  401104:	4413      	add	r3, r2
  401106:	3308      	adds	r3, #8
  401108:	460a      	mov	r2, r1
  40110a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < CONF_MCAN_ELEMENT_DATA_SIZE; i++) {
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	3301      	adds	r3, #1
  401110:	617b      	str	r3, [r7, #20]
  401112:	697b      	ldr	r3, [r7, #20]
  401114:	2b07      	cmp	r3, #7
  401116:	d9eb      	bls.n	4010f0 <mcan_set_tx_buffer_element+0x94>
		}
		return STATUS_OK;
  401118:	2300      	movs	r3, #0
  40111a:	e001      	b.n	401120 <mcan_set_tx_buffer_element+0xc4>
	}
	return ERR_INVALID_ARG;
  40111c:	f06f 0307 	mvn.w	r3, #7
}
  401120:	4618      	mov	r0, r3
  401122:	371c      	adds	r7, #28
  401124:	46bd      	mov	sp, r7
  401126:	f85d 7b04 	ldr.w	r7, [sp], #4
  40112a:	4770      	bx	lr
  40112c:	40030000 	.word	0x40030000
  401130:	20400bec 	.word	0x20400bec
  401134:	40034000 	.word	0x40034000
  401138:	20400f2c 	.word	0x20400f2c

0040113c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	b086      	sub	sp, #24
  401140:	af00      	add	r7, sp, #0
  401142:	60f8      	str	r0, [r7, #12]
  401144:	60b9      	str	r1, [r7, #8]
  401146:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  401148:	2300      	movs	r3, #0
  40114a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40114c:	68fb      	ldr	r3, [r7, #12]
  40114e:	2b00      	cmp	r3, #0
  401150:	d012      	beq.n	401178 <_read+0x3c>
		return -1;
  401152:	f04f 33ff 	mov.w	r3, #4294967295
  401156:	e013      	b.n	401180 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  401158:	4b0b      	ldr	r3, [pc, #44]	; (401188 <_read+0x4c>)
  40115a:	681b      	ldr	r3, [r3, #0]
  40115c:	4a0b      	ldr	r2, [pc, #44]	; (40118c <_read+0x50>)
  40115e:	6812      	ldr	r2, [r2, #0]
  401160:	68b9      	ldr	r1, [r7, #8]
  401162:	4610      	mov	r0, r2
  401164:	4798      	blx	r3
		ptr++;
  401166:	68bb      	ldr	r3, [r7, #8]
  401168:	3301      	adds	r3, #1
  40116a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40116c:	697b      	ldr	r3, [r7, #20]
  40116e:	3301      	adds	r3, #1
  401170:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	3b01      	subs	r3, #1
  401176:	607b      	str	r3, [r7, #4]
  401178:	687b      	ldr	r3, [r7, #4]
  40117a:	2b00      	cmp	r3, #0
  40117c:	dcec      	bgt.n	401158 <_read+0x1c>
	}
	return nChars;
  40117e:	697b      	ldr	r3, [r7, #20]
}
  401180:	4618      	mov	r0, r3
  401182:	3718      	adds	r7, #24
  401184:	46bd      	mov	sp, r7
  401186:	bd80      	pop	{r7, pc}
  401188:	2040111c 	.word	0x2040111c
  40118c:	20401124 	.word	0x20401124

00401190 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401190:	b580      	push	{r7, lr}
  401192:	b086      	sub	sp, #24
  401194:	af00      	add	r7, sp, #0
  401196:	60f8      	str	r0, [r7, #12]
  401198:	60b9      	str	r1, [r7, #8]
  40119a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40119c:	2300      	movs	r3, #0
  40119e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4011a0:	68fb      	ldr	r3, [r7, #12]
  4011a2:	2b01      	cmp	r3, #1
  4011a4:	d01e      	beq.n	4011e4 <_write+0x54>
  4011a6:	68fb      	ldr	r3, [r7, #12]
  4011a8:	2b02      	cmp	r3, #2
  4011aa:	d01b      	beq.n	4011e4 <_write+0x54>
  4011ac:	68fb      	ldr	r3, [r7, #12]
  4011ae:	2b03      	cmp	r3, #3
  4011b0:	d018      	beq.n	4011e4 <_write+0x54>
		return -1;
  4011b2:	f04f 33ff 	mov.w	r3, #4294967295
  4011b6:	e019      	b.n	4011ec <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4011b8:	4b0e      	ldr	r3, [pc, #56]	; (4011f4 <_write+0x64>)
  4011ba:	681a      	ldr	r2, [r3, #0]
  4011bc:	4b0e      	ldr	r3, [pc, #56]	; (4011f8 <_write+0x68>)
  4011be:	6818      	ldr	r0, [r3, #0]
  4011c0:	68bb      	ldr	r3, [r7, #8]
  4011c2:	1c59      	adds	r1, r3, #1
  4011c4:	60b9      	str	r1, [r7, #8]
  4011c6:	781b      	ldrb	r3, [r3, #0]
  4011c8:	4619      	mov	r1, r3
  4011ca:	4790      	blx	r2
  4011cc:	4603      	mov	r3, r0
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	da02      	bge.n	4011d8 <_write+0x48>
			return -1;
  4011d2:	f04f 33ff 	mov.w	r3, #4294967295
  4011d6:	e009      	b.n	4011ec <_write+0x5c>
		}
		++nChars;
  4011d8:	697b      	ldr	r3, [r7, #20]
  4011da:	3301      	adds	r3, #1
  4011dc:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4011de:	687b      	ldr	r3, [r7, #4]
  4011e0:	3b01      	subs	r3, #1
  4011e2:	607b      	str	r3, [r7, #4]
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d1e6      	bne.n	4011b8 <_write+0x28>
	}
	return nChars;
  4011ea:	697b      	ldr	r3, [r7, #20]
}
  4011ec:	4618      	mov	r0, r3
  4011ee:	3718      	adds	r7, #24
  4011f0:	46bd      	mov	sp, r7
  4011f2:	bd80      	pop	{r7, pc}
  4011f4:	20401120 	.word	0x20401120
  4011f8:	20401124 	.word	0x20401124

004011fc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401204:	687b      	ldr	r3, [r7, #4]
  401206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401208:	4618      	mov	r0, r3
  40120a:	370c      	adds	r7, #12
  40120c:	46bd      	mov	sp, r7
  40120e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401212:	4770      	bx	lr

00401214 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401214:	b480      	push	{r7}
  401216:	b083      	sub	sp, #12
  401218:	af00      	add	r7, sp, #0
  40121a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  40121c:	687b      	ldr	r3, [r7, #4]
  40121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401220:	4618      	mov	r0, r3
  401222:	370c      	adds	r7, #12
  401224:	46bd      	mov	sp, r7
  401226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40122a:	4770      	bx	lr

0040122c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40122c:	b580      	push	{r7, lr}
  40122e:	b084      	sub	sp, #16
  401230:	af00      	add	r7, sp, #0
  401232:	6078      	str	r0, [r7, #4]
  401234:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401236:	6878      	ldr	r0, [r7, #4]
  401238:	4b26      	ldr	r3, [pc, #152]	; (4012d4 <pio_handler_process+0xa8>)
  40123a:	4798      	blx	r3
  40123c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40123e:	6878      	ldr	r0, [r7, #4]
  401240:	4b25      	ldr	r3, [pc, #148]	; (4012d8 <pio_handler_process+0xac>)
  401242:	4798      	blx	r3
  401244:	4602      	mov	r2, r0
  401246:	68fb      	ldr	r3, [r7, #12]
  401248:	4013      	ands	r3, r2
  40124a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40124c:	68fb      	ldr	r3, [r7, #12]
  40124e:	2b00      	cmp	r3, #0
  401250:	d03c      	beq.n	4012cc <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401252:	2300      	movs	r3, #0
  401254:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401256:	e034      	b.n	4012c2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401258:	4a20      	ldr	r2, [pc, #128]	; (4012dc <pio_handler_process+0xb0>)
  40125a:	68bb      	ldr	r3, [r7, #8]
  40125c:	011b      	lsls	r3, r3, #4
  40125e:	4413      	add	r3, r2
  401260:	681a      	ldr	r2, [r3, #0]
  401262:	683b      	ldr	r3, [r7, #0]
  401264:	429a      	cmp	r2, r3
  401266:	d126      	bne.n	4012b6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401268:	4a1c      	ldr	r2, [pc, #112]	; (4012dc <pio_handler_process+0xb0>)
  40126a:	68bb      	ldr	r3, [r7, #8]
  40126c:	011b      	lsls	r3, r3, #4
  40126e:	4413      	add	r3, r2
  401270:	3304      	adds	r3, #4
  401272:	681a      	ldr	r2, [r3, #0]
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	4013      	ands	r3, r2
  401278:	2b00      	cmp	r3, #0
  40127a:	d01c      	beq.n	4012b6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40127c:	4a17      	ldr	r2, [pc, #92]	; (4012dc <pio_handler_process+0xb0>)
  40127e:	68bb      	ldr	r3, [r7, #8]
  401280:	011b      	lsls	r3, r3, #4
  401282:	4413      	add	r3, r2
  401284:	330c      	adds	r3, #12
  401286:	681b      	ldr	r3, [r3, #0]
  401288:	4914      	ldr	r1, [pc, #80]	; (4012dc <pio_handler_process+0xb0>)
  40128a:	68ba      	ldr	r2, [r7, #8]
  40128c:	0112      	lsls	r2, r2, #4
  40128e:	440a      	add	r2, r1
  401290:	6810      	ldr	r0, [r2, #0]
  401292:	4912      	ldr	r1, [pc, #72]	; (4012dc <pio_handler_process+0xb0>)
  401294:	68ba      	ldr	r2, [r7, #8]
  401296:	0112      	lsls	r2, r2, #4
  401298:	440a      	add	r2, r1
  40129a:	3204      	adds	r2, #4
  40129c:	6812      	ldr	r2, [r2, #0]
  40129e:	4611      	mov	r1, r2
  4012a0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4012a2:	4a0e      	ldr	r2, [pc, #56]	; (4012dc <pio_handler_process+0xb0>)
  4012a4:	68bb      	ldr	r3, [r7, #8]
  4012a6:	011b      	lsls	r3, r3, #4
  4012a8:	4413      	add	r3, r2
  4012aa:	3304      	adds	r3, #4
  4012ac:	681b      	ldr	r3, [r3, #0]
  4012ae:	43db      	mvns	r3, r3
  4012b0:	68fa      	ldr	r2, [r7, #12]
  4012b2:	4013      	ands	r3, r2
  4012b4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4012b6:	68bb      	ldr	r3, [r7, #8]
  4012b8:	3301      	adds	r3, #1
  4012ba:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012bc:	68bb      	ldr	r3, [r7, #8]
  4012be:	2b06      	cmp	r3, #6
  4012c0:	d803      	bhi.n	4012ca <pio_handler_process+0x9e>
		while (status != 0) {
  4012c2:	68fb      	ldr	r3, [r7, #12]
  4012c4:	2b00      	cmp	r3, #0
  4012c6:	d1c7      	bne.n	401258 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4012c8:	e000      	b.n	4012cc <pio_handler_process+0xa0>
				break;
  4012ca:	bf00      	nop
}
  4012cc:	bf00      	nop
  4012ce:	3710      	adds	r7, #16
  4012d0:	46bd      	mov	sp, r7
  4012d2:	bd80      	pop	{r7, pc}
  4012d4:	004011fd 	.word	0x004011fd
  4012d8:	00401215 	.word	0x00401215
  4012dc:	2040105c 	.word	0x2040105c

004012e0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4012e0:	b580      	push	{r7, lr}
  4012e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4012e4:	210a      	movs	r1, #10
  4012e6:	4802      	ldr	r0, [pc, #8]	; (4012f0 <PIOA_Handler+0x10>)
  4012e8:	4b02      	ldr	r3, [pc, #8]	; (4012f4 <PIOA_Handler+0x14>)
  4012ea:	4798      	blx	r3
}
  4012ec:	bf00      	nop
  4012ee:	bd80      	pop	{r7, pc}
  4012f0:	400e0e00 	.word	0x400e0e00
  4012f4:	0040122d 	.word	0x0040122d

004012f8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4012f8:	b580      	push	{r7, lr}
  4012fa:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4012fc:	210b      	movs	r1, #11
  4012fe:	4802      	ldr	r0, [pc, #8]	; (401308 <PIOB_Handler+0x10>)
  401300:	4b02      	ldr	r3, [pc, #8]	; (40130c <PIOB_Handler+0x14>)
  401302:	4798      	blx	r3
}
  401304:	bf00      	nop
  401306:	bd80      	pop	{r7, pc}
  401308:	400e1000 	.word	0x400e1000
  40130c:	0040122d 	.word	0x0040122d

00401310 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401310:	b580      	push	{r7, lr}
  401312:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  401314:	210c      	movs	r1, #12
  401316:	4802      	ldr	r0, [pc, #8]	; (401320 <PIOC_Handler+0x10>)
  401318:	4b02      	ldr	r3, [pc, #8]	; (401324 <PIOC_Handler+0x14>)
  40131a:	4798      	blx	r3
}
  40131c:	bf00      	nop
  40131e:	bd80      	pop	{r7, pc}
  401320:	400e1200 	.word	0x400e1200
  401324:	0040122d 	.word	0x0040122d

00401328 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401328:	b580      	push	{r7, lr}
  40132a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40132c:	2110      	movs	r1, #16
  40132e:	4802      	ldr	r0, [pc, #8]	; (401338 <PIOD_Handler+0x10>)
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <PIOD_Handler+0x14>)
  401332:	4798      	blx	r3
}
  401334:	bf00      	nop
  401336:	bd80      	pop	{r7, pc}
  401338:	400e1400 	.word	0x400e1400
  40133c:	0040122d 	.word	0x0040122d

00401340 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401340:	b580      	push	{r7, lr}
  401342:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  401344:	2111      	movs	r1, #17
  401346:	4802      	ldr	r0, [pc, #8]	; (401350 <PIOE_Handler+0x10>)
  401348:	4b02      	ldr	r3, [pc, #8]	; (401354 <PIOE_Handler+0x14>)
  40134a:	4798      	blx	r3
}
  40134c:	bf00      	nop
  40134e:	bd80      	pop	{r7, pc}
  401350:	400e1600 	.word	0x400e1600
  401354:	0040122d 	.word	0x0040122d

00401358 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401358:	b480      	push	{r7}
  40135a:	b083      	sub	sp, #12
  40135c:	af00      	add	r7, sp, #0
  40135e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401360:	687b      	ldr	r3, [r7, #4]
  401362:	3b01      	subs	r3, #1
  401364:	2b03      	cmp	r3, #3
  401366:	d81a      	bhi.n	40139e <pmc_mck_set_division+0x46>
  401368:	a201      	add	r2, pc, #4	; (adr r2, 401370 <pmc_mck_set_division+0x18>)
  40136a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40136e:	bf00      	nop
  401370:	00401381 	.word	0x00401381
  401374:	00401387 	.word	0x00401387
  401378:	0040138f 	.word	0x0040138f
  40137c:	00401397 	.word	0x00401397
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401380:	2300      	movs	r3, #0
  401382:	607b      	str	r3, [r7, #4]
			break;
  401384:	e00e      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  401386:	f44f 7380 	mov.w	r3, #256	; 0x100
  40138a:	607b      	str	r3, [r7, #4]
			break;
  40138c:	e00a      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40138e:	f44f 7340 	mov.w	r3, #768	; 0x300
  401392:	607b      	str	r3, [r7, #4]
			break;
  401394:	e006      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401396:	f44f 7300 	mov.w	r3, #512	; 0x200
  40139a:	607b      	str	r3, [r7, #4]
			break;
  40139c:	e002      	b.n	4013a4 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40139e:	2300      	movs	r3, #0
  4013a0:	607b      	str	r3, [r7, #4]
			break;
  4013a2:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4013a4:	490a      	ldr	r1, [pc, #40]	; (4013d0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013a6:	4b0a      	ldr	r3, [pc, #40]	; (4013d0 <pmc_mck_set_division+0x78>)
  4013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4013b2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013b4:	bf00      	nop
  4013b6:	4b06      	ldr	r3, [pc, #24]	; (4013d0 <pmc_mck_set_division+0x78>)
  4013b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013ba:	f003 0308 	and.w	r3, r3, #8
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d0f9      	beq.n	4013b6 <pmc_mck_set_division+0x5e>
}
  4013c2:	bf00      	nop
  4013c4:	370c      	adds	r7, #12
  4013c6:	46bd      	mov	sp, r7
  4013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e0600 	.word	0x400e0600

004013d4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4013d4:	b480      	push	{r7}
  4013d6:	b085      	sub	sp, #20
  4013d8:	af00      	add	r7, sp, #0
  4013da:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013dc:	491d      	ldr	r1, [pc, #116]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  4013de:	4b1d      	ldr	r3, [pc, #116]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  4013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4013e6:	687b      	ldr	r3, [r7, #4]
  4013e8:	4313      	orrs	r3, r2
  4013ea:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013f0:	60fb      	str	r3, [r7, #12]
  4013f2:	e007      	b.n	401404 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013f4:	68fb      	ldr	r3, [r7, #12]
  4013f6:	2b00      	cmp	r3, #0
  4013f8:	d101      	bne.n	4013fe <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4013fa:	2301      	movs	r3, #1
  4013fc:	e023      	b.n	401446 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4013fe:	68fb      	ldr	r3, [r7, #12]
  401400:	3b01      	subs	r3, #1
  401402:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401404:	4b13      	ldr	r3, [pc, #76]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401408:	f003 0308 	and.w	r3, r3, #8
  40140c:	2b00      	cmp	r3, #0
  40140e:	d0f1      	beq.n	4013f4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401410:	4a10      	ldr	r2, [pc, #64]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401412:	4b10      	ldr	r3, [pc, #64]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  401414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401416:	f023 0303 	bic.w	r3, r3, #3
  40141a:	f043 0302 	orr.w	r3, r3, #2
  40141e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401424:	60fb      	str	r3, [r7, #12]
  401426:	e007      	b.n	401438 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401428:	68fb      	ldr	r3, [r7, #12]
  40142a:	2b00      	cmp	r3, #0
  40142c:	d101      	bne.n	401432 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40142e:	2301      	movs	r3, #1
  401430:	e009      	b.n	401446 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401432:	68fb      	ldr	r3, [r7, #12]
  401434:	3b01      	subs	r3, #1
  401436:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401438:	4b06      	ldr	r3, [pc, #24]	; (401454 <pmc_switch_mck_to_pllack+0x80>)
  40143a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40143c:	f003 0308 	and.w	r3, r3, #8
  401440:	2b00      	cmp	r3, #0
  401442:	d0f1      	beq.n	401428 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  401444:	2300      	movs	r3, #0
}
  401446:	4618      	mov	r0, r3
  401448:	3714      	adds	r7, #20
  40144a:	46bd      	mov	sp, r7
  40144c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600

00401458 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401458:	b480      	push	{r7}
  40145a:	b083      	sub	sp, #12
  40145c:	af00      	add	r7, sp, #0
  40145e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401460:	687b      	ldr	r3, [r7, #4]
  401462:	2b01      	cmp	r3, #1
  401464:	d105      	bne.n	401472 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  401466:	4907      	ldr	r1, [pc, #28]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401468:	4b06      	ldr	r3, [pc, #24]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  40146a:	689a      	ldr	r2, [r3, #8]
  40146c:	4b06      	ldr	r3, [pc, #24]	; (401488 <pmc_switch_sclk_to_32kxtal+0x30>)
  40146e:	4313      	orrs	r3, r2
  401470:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  401472:	4b04      	ldr	r3, [pc, #16]	; (401484 <pmc_switch_sclk_to_32kxtal+0x2c>)
  401474:	4a05      	ldr	r2, [pc, #20]	; (40148c <pmc_switch_sclk_to_32kxtal+0x34>)
  401476:	601a      	str	r2, [r3, #0]
}
  401478:	bf00      	nop
  40147a:	370c      	adds	r7, #12
  40147c:	46bd      	mov	sp, r7
  40147e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401482:	4770      	bx	lr
  401484:	400e1810 	.word	0x400e1810
  401488:	a5100000 	.word	0xa5100000
  40148c:	a5000008 	.word	0xa5000008

00401490 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401490:	b480      	push	{r7}
  401492:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401494:	4b09      	ldr	r3, [pc, #36]	; (4014bc <pmc_osc_is_ready_32kxtal+0x2c>)
  401496:	695b      	ldr	r3, [r3, #20]
  401498:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40149c:	2b00      	cmp	r3, #0
  40149e:	d007      	beq.n	4014b0 <pmc_osc_is_ready_32kxtal+0x20>
  4014a0:	4b07      	ldr	r3, [pc, #28]	; (4014c0 <pmc_osc_is_ready_32kxtal+0x30>)
  4014a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4014a8:	2b00      	cmp	r3, #0
  4014aa:	d001      	beq.n	4014b0 <pmc_osc_is_ready_32kxtal+0x20>
  4014ac:	2301      	movs	r3, #1
  4014ae:	e000      	b.n	4014b2 <pmc_osc_is_ready_32kxtal+0x22>
  4014b0:	2300      	movs	r3, #0
}
  4014b2:	4618      	mov	r0, r3
  4014b4:	46bd      	mov	sp, r7
  4014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014ba:	4770      	bx	lr
  4014bc:	400e1810 	.word	0x400e1810
  4014c0:	400e0600 	.word	0x400e0600

004014c4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4014c4:	b480      	push	{r7}
  4014c6:	b083      	sub	sp, #12
  4014c8:	af00      	add	r7, sp, #0
  4014ca:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4014cc:	4915      	ldr	r1, [pc, #84]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014ce:	4b15      	ldr	r3, [pc, #84]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014d0:	6a1a      	ldr	r2, [r3, #32]
  4014d2:	4b15      	ldr	r3, [pc, #84]	; (401528 <pmc_switch_mainck_to_fastrc+0x64>)
  4014d4:	4313      	orrs	r3, r2
  4014d6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014d8:	bf00      	nop
  4014da:	4b12      	ldr	r3, [pc, #72]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d0f9      	beq.n	4014da <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014e6:	490f      	ldr	r1, [pc, #60]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014e8:	4b0e      	ldr	r3, [pc, #56]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014ea:	6a1a      	ldr	r2, [r3, #32]
  4014ec:	4b0f      	ldr	r3, [pc, #60]	; (40152c <pmc_switch_mainck_to_fastrc+0x68>)
  4014ee:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4014f0:	687a      	ldr	r2, [r7, #4]
  4014f2:	4313      	orrs	r3, r2
  4014f4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4014f8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4014fa:	bf00      	nop
  4014fc:	4b09      	ldr	r3, [pc, #36]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  4014fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401504:	2b00      	cmp	r3, #0
  401506:	d0f9      	beq.n	4014fc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401508:	4906      	ldr	r1, [pc, #24]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  40150a:	4b06      	ldr	r3, [pc, #24]	; (401524 <pmc_switch_mainck_to_fastrc+0x60>)
  40150c:	6a1a      	ldr	r2, [r3, #32]
  40150e:	4b08      	ldr	r3, [pc, #32]	; (401530 <pmc_switch_mainck_to_fastrc+0x6c>)
  401510:	4013      	ands	r3, r2
  401512:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401516:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401518:	bf00      	nop
  40151a:	370c      	adds	r7, #12
  40151c:	46bd      	mov	sp, r7
  40151e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401522:	4770      	bx	lr
  401524:	400e0600 	.word	0x400e0600
  401528:	00370008 	.word	0x00370008
  40152c:	ffc8ff8f 	.word	0xffc8ff8f
  401530:	fec8ffff 	.word	0xfec8ffff

00401534 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  401534:	b480      	push	{r7}
  401536:	b083      	sub	sp, #12
  401538:	af00      	add	r7, sp, #0
  40153a:	6078      	str	r0, [r7, #4]
  40153c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40153e:	687b      	ldr	r3, [r7, #4]
  401540:	2b00      	cmp	r3, #0
  401542:	d008      	beq.n	401556 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401544:	4913      	ldr	r1, [pc, #76]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401546:	4b13      	ldr	r3, [pc, #76]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401548:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40154a:	4a13      	ldr	r2, [pc, #76]	; (401598 <pmc_switch_mainck_to_xtal+0x64>)
  40154c:	401a      	ands	r2, r3
  40154e:	4b13      	ldr	r3, [pc, #76]	; (40159c <pmc_switch_mainck_to_xtal+0x68>)
  401550:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401552:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401554:	e018      	b.n	401588 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401556:	490f      	ldr	r1, [pc, #60]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401558:	4b0e      	ldr	r3, [pc, #56]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  40155a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40155c:	4b10      	ldr	r3, [pc, #64]	; (4015a0 <pmc_switch_mainck_to_xtal+0x6c>)
  40155e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401560:	683a      	ldr	r2, [r7, #0]
  401562:	0212      	lsls	r2, r2, #8
  401564:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401566:	431a      	orrs	r2, r3
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <pmc_switch_mainck_to_xtal+0x70>)
  40156a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40156c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40156e:	bf00      	nop
  401570:	4b08      	ldr	r3, [pc, #32]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401574:	f003 0301 	and.w	r3, r3, #1
  401578:	2b00      	cmp	r3, #0
  40157a:	d0f9      	beq.n	401570 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40157c:	4905      	ldr	r1, [pc, #20]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  40157e:	4b05      	ldr	r3, [pc, #20]	; (401594 <pmc_switch_mainck_to_xtal+0x60>)
  401580:	6a1a      	ldr	r2, [r3, #32]
  401582:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <pmc_switch_mainck_to_xtal+0x74>)
  401584:	4313      	orrs	r3, r2
  401586:	620b      	str	r3, [r1, #32]
}
  401588:	bf00      	nop
  40158a:	370c      	adds	r7, #12
  40158c:	46bd      	mov	sp, r7
  40158e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401592:	4770      	bx	lr
  401594:	400e0600 	.word	0x400e0600
  401598:	fec8fffc 	.word	0xfec8fffc
  40159c:	01370002 	.word	0x01370002
  4015a0:	ffc8fffc 	.word	0xffc8fffc
  4015a4:	00370001 	.word	0x00370001
  4015a8:	01370000 	.word	0x01370000

004015ac <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4015ac:	b480      	push	{r7}
  4015ae:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015b0:	4b04      	ldr	r3, [pc, #16]	; (4015c4 <pmc_osc_is_ready_mainck+0x18>)
  4015b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4015b8:	4618      	mov	r0, r3
  4015ba:	46bd      	mov	sp, r7
  4015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015c0:	4770      	bx	lr
  4015c2:	bf00      	nop
  4015c4:	400e0600 	.word	0x400e0600

004015c8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4015c8:	b480      	push	{r7}
  4015ca:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015cc:	4b04      	ldr	r3, [pc, #16]	; (4015e0 <pmc_disable_pllack+0x18>)
  4015ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4015d4:	bf00      	nop
  4015d6:	46bd      	mov	sp, r7
  4015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop
  4015e0:	400e0600 	.word	0x400e0600

004015e4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4015e4:	b480      	push	{r7}
  4015e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015e8:	4b04      	ldr	r3, [pc, #16]	; (4015fc <pmc_is_locked_pllack+0x18>)
  4015ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4015ec:	f003 0302 	and.w	r3, r3, #2
}
  4015f0:	4618      	mov	r0, r3
  4015f2:	46bd      	mov	sp, r7
  4015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015f8:	4770      	bx	lr
  4015fa:	bf00      	nop
  4015fc:	400e0600 	.word	0x400e0600

00401600 <pmc_enable_upll_clock>:
#if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
  401600:	b480      	push	{r7}
  401602:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
  401604:	4b07      	ldr	r3, [pc, #28]	; (401624 <pmc_enable_upll_clock+0x24>)
  401606:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
  40160a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
  40160c:	bf00      	nop
  40160e:	4b05      	ldr	r3, [pc, #20]	; (401624 <pmc_enable_upll_clock+0x24>)
  401610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401612:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401616:	2b00      	cmp	r3, #0
  401618:	d0f9      	beq.n	40160e <pmc_enable_upll_clock+0xe>
}
  40161a:	bf00      	nop
  40161c:	46bd      	mov	sp, r7
  40161e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401622:	4770      	bx	lr
  401624:	400e0600 	.word	0x400e0600

00401628 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401628:	b480      	push	{r7}
  40162a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <pmc_is_locked_upll+0x18>)
  40162e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401630:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401634:	4618      	mov	r0, r3
  401636:	46bd      	mov	sp, r7
  401638:	f85d 7b04 	ldr.w	r7, [sp], #4
  40163c:	4770      	bx	lr
  40163e:	bf00      	nop
  401640:	400e0600 	.word	0x400e0600

00401644 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401644:	b480      	push	{r7}
  401646:	b085      	sub	sp, #20
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40164c:	4a0b      	ldr	r2, [pc, #44]	; (40167c <pmc_enable_periph_clk+0x38>)
  40164e:	687b      	ldr	r3, [r7, #4]
  401650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401654:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401658:	4b08      	ldr	r3, [pc, #32]	; (40167c <pmc_enable_periph_clk+0x38>)
  40165a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  40165e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  401662:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  401664:	4a05      	ldr	r2, [pc, #20]	; (40167c <pmc_enable_periph_clk+0x38>)
  401666:	68fb      	ldr	r3, [r7, #12]
  401668:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  40166c:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40166e:	4618      	mov	r0, r3
  401670:	3714      	adds	r7, #20
  401672:	46bd      	mov	sp, r7
  401674:	f85d 7b04 	ldr.w	r7, [sp], #4
  401678:	4770      	bx	lr
  40167a:	bf00      	nop
  40167c:	400e0600 	.word	0x400e0600

00401680 <pmc_switch_pck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
{
  401680:	b480      	push	{r7}
  401682:	b085      	sub	sp, #20
  401684:	af00      	add	r7, sp, #0
  401686:	6078      	str	r0, [r7, #4]
  401688:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
  40168a:	4912      	ldr	r1, [pc, #72]	; (4016d4 <pmc_switch_pck_to_pllack+0x54>)
  40168c:	683b      	ldr	r3, [r7, #0]
  40168e:	f043 0202 	orr.w	r2, r3, #2
  401692:	687b      	ldr	r3, [r7, #4]
  401694:	3310      	adds	r3, #16
  401696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  40169a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40169e:	60fb      	str	r3, [r7, #12]
  4016a0:	e007      	b.n	4016b2 <pmc_switch_pck_to_pllack+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  4016a2:	68fb      	ldr	r3, [r7, #12]
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	d101      	bne.n	4016ac <pmc_switch_pck_to_pllack+0x2c>
			return 1;
  4016a8:	2301      	movs	r3, #1
  4016aa:	e00d      	b.n	4016c8 <pmc_switch_pck_to_pllack+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  4016ac:	68fb      	ldr	r3, [r7, #12]
  4016ae:	3b01      	subs	r3, #1
  4016b0:	60fb      	str	r3, [r7, #12]
  4016b2:	4b08      	ldr	r3, [pc, #32]	; (4016d4 <pmc_switch_pck_to_pllack+0x54>)
  4016b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4016ba:	687b      	ldr	r3, [r7, #4]
  4016bc:	fa01 f303 	lsl.w	r3, r1, r3
  4016c0:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4016c2:	2b00      	cmp	r3, #0
  4016c4:	d0ed      	beq.n	4016a2 <pmc_switch_pck_to_pllack+0x22>
		}
	}

	return 0;
  4016c6:	2300      	movs	r3, #0
}
  4016c8:	4618      	mov	r0, r3
  4016ca:	3714      	adds	r7, #20
  4016cc:	46bd      	mov	sp, r7
  4016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d2:	4770      	bx	lr
  4016d4:	400e0600 	.word	0x400e0600

004016d8 <pmc_switch_pck_to_upllck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
{
  4016d8:	b480      	push	{r7}
  4016da:	b085      	sub	sp, #20
  4016dc:	af00      	add	r7, sp, #0
  4016de:	6078      	str	r0, [r7, #4]
  4016e0:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
  4016e2:	4912      	ldr	r1, [pc, #72]	; (40172c <pmc_switch_pck_to_upllck+0x54>)
  4016e4:	683b      	ldr	r3, [r7, #0]
  4016e6:	f043 0203 	orr.w	r2, r3, #3
  4016ea:	687b      	ldr	r3, [r7, #4]
  4016ec:	3310      	adds	r3, #16
  4016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  4016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4016f6:	60fb      	str	r3, [r7, #12]
  4016f8:	e007      	b.n	40170a <pmc_switch_pck_to_upllck+0x32>
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
			--ul_timeout) {
		if (ul_timeout == 0) {
  4016fa:	68fb      	ldr	r3, [r7, #12]
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d101      	bne.n	401704 <pmc_switch_pck_to_upllck+0x2c>
			return 1;
  401700:	2301      	movs	r3, #1
  401702:	e00d      	b.n	401720 <pmc_switch_pck_to_upllck+0x48>
			--ul_timeout) {
  401704:	68fb      	ldr	r3, [r7, #12]
  401706:	3b01      	subs	r3, #1
  401708:	60fb      	str	r3, [r7, #12]
			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
  40170a:	4b08      	ldr	r3, [pc, #32]	; (40172c <pmc_switch_pck_to_upllck+0x54>)
  40170c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40170e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401712:	687b      	ldr	r3, [r7, #4]
  401714:	fa01 f303 	lsl.w	r3, r1, r3
  401718:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  40171a:	2b00      	cmp	r3, #0
  40171c:	d0ed      	beq.n	4016fa <pmc_switch_pck_to_upllck+0x22>
		}
	}

	return 0;
  40171e:	2300      	movs	r3, #0
}
  401720:	4618      	mov	r0, r3
  401722:	3714      	adds	r7, #20
  401724:	46bd      	mov	sp, r7
  401726:	f85d 7b04 	ldr.w	r7, [sp], #4
  40172a:	4770      	bx	lr
  40172c:	400e0600 	.word	0x400e0600

00401730 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  401730:	b480      	push	{r7}
  401732:	b083      	sub	sp, #12
  401734:	af00      	add	r7, sp, #0
  401736:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  401738:	4a06      	ldr	r2, [pc, #24]	; (401754 <pmc_enable_pck+0x24>)
  40173a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40173e:	687b      	ldr	r3, [r7, #4]
  401740:	fa01 f303 	lsl.w	r3, r1, r3
  401744:	6013      	str	r3, [r2, #0]
}
  401746:	bf00      	nop
  401748:	370c      	adds	r7, #12
  40174a:	46bd      	mov	sp, r7
  40174c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401750:	4770      	bx	lr
  401752:	bf00      	nop
  401754:	400e0600 	.word	0x400e0600

00401758 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  401758:	b480      	push	{r7}
  40175a:	b083      	sub	sp, #12
  40175c:	af00      	add	r7, sp, #0
  40175e:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  401760:	4a06      	ldr	r2, [pc, #24]	; (40177c <pmc_disable_pck+0x24>)
  401762:	f44f 7180 	mov.w	r1, #256	; 0x100
  401766:	687b      	ldr	r3, [r7, #4]
  401768:	fa01 f303 	lsl.w	r3, r1, r3
  40176c:	6053      	str	r3, [r2, #4]
}
  40176e:	bf00      	nop
  401770:	370c      	adds	r7, #12
  401772:	46bd      	mov	sp, r7
  401774:	f85d 7b04 	ldr.w	r7, [sp], #4
  401778:	4770      	bx	lr
  40177a:	bf00      	nop
  40177c:	400e0600 	.word	0x400e0600

00401780 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401780:	b480      	push	{r7}
  401782:	b085      	sub	sp, #20
  401784:	af00      	add	r7, sp, #0
  401786:	6078      	str	r0, [r7, #4]
  401788:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  40178a:	2300      	movs	r3, #0
  40178c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	22ac      	movs	r2, #172	; 0xac
  401792:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401794:	683b      	ldr	r3, [r7, #0]
  401796:	681a      	ldr	r2, [r3, #0]
  401798:	683b      	ldr	r3, [r7, #0]
  40179a:	685b      	ldr	r3, [r3, #4]
  40179c:	fbb2 f3f3 	udiv	r3, r2, r3
  4017a0:	091b      	lsrs	r3, r3, #4
  4017a2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4017a4:	68fb      	ldr	r3, [r7, #12]
  4017a6:	2b00      	cmp	r3, #0
  4017a8:	d003      	beq.n	4017b2 <uart_init+0x32>
  4017aa:	68fb      	ldr	r3, [r7, #12]
  4017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4017b0:	d301      	bcc.n	4017b6 <uart_init+0x36>
		return 1;
  4017b2:	2301      	movs	r3, #1
  4017b4:	e00a      	b.n	4017cc <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  4017b6:	687b      	ldr	r3, [r7, #4]
  4017b8:	68fa      	ldr	r2, [r7, #12]
  4017ba:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4017bc:	683b      	ldr	r3, [r7, #0]
  4017be:	689a      	ldr	r2, [r3, #8]
  4017c0:	687b      	ldr	r3, [r7, #4]
  4017c2:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4017c4:	687b      	ldr	r3, [r7, #4]
  4017c6:	2250      	movs	r2, #80	; 0x50
  4017c8:	601a      	str	r2, [r3, #0]

	return 0;
  4017ca:	2300      	movs	r3, #0
}
  4017cc:	4618      	mov	r0, r3
  4017ce:	3714      	adds	r7, #20
  4017d0:	46bd      	mov	sp, r7
  4017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017d6:	4770      	bx	lr

004017d8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  4017d8:	b480      	push	{r7}
  4017da:	b083      	sub	sp, #12
  4017dc:	af00      	add	r7, sp, #0
  4017de:	6078      	str	r0, [r7, #4]
  4017e0:	460b      	mov	r3, r1
  4017e2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4017e4:	687b      	ldr	r3, [r7, #4]
  4017e6:	695b      	ldr	r3, [r3, #20]
  4017e8:	f003 0302 	and.w	r3, r3, #2
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d101      	bne.n	4017f4 <uart_write+0x1c>
		return 1;
  4017f0:	2301      	movs	r3, #1
  4017f2:	e003      	b.n	4017fc <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4017f4:	78fa      	ldrb	r2, [r7, #3]
  4017f6:	687b      	ldr	r3, [r7, #4]
  4017f8:	61da      	str	r2, [r3, #28]
	return 0;
  4017fa:	2300      	movs	r3, #0
}
  4017fc:	4618      	mov	r0, r3
  4017fe:	370c      	adds	r7, #12
  401800:	46bd      	mov	sp, r7
  401802:	f85d 7b04 	ldr.w	r7, [sp], #4
  401806:	4770      	bx	lr

00401808 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  401808:	b480      	push	{r7}
  40180a:	b083      	sub	sp, #12
  40180c:	af00      	add	r7, sp, #0
  40180e:	6078      	str	r0, [r7, #4]
  401810:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401812:	687b      	ldr	r3, [r7, #4]
  401814:	695b      	ldr	r3, [r3, #20]
  401816:	f003 0301 	and.w	r3, r3, #1
  40181a:	2b00      	cmp	r3, #0
  40181c:	d101      	bne.n	401822 <uart_read+0x1a>
		return 1;
  40181e:	2301      	movs	r3, #1
  401820:	e005      	b.n	40182e <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401822:	687b      	ldr	r3, [r7, #4]
  401824:	699b      	ldr	r3, [r3, #24]
  401826:	b2da      	uxtb	r2, r3
  401828:	683b      	ldr	r3, [r7, #0]
  40182a:	701a      	strb	r2, [r3, #0]
	return 0;
  40182c:	2300      	movs	r3, #0
}
  40182e:	4618      	mov	r0, r3
  401830:	370c      	adds	r7, #12
  401832:	46bd      	mov	sp, r7
  401834:	f85d 7b04 	ldr.w	r7, [sp], #4
  401838:	4770      	bx	lr

0040183a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40183a:	b480      	push	{r7}
  40183c:	b089      	sub	sp, #36	; 0x24
  40183e:	af00      	add	r7, sp, #0
  401840:	60f8      	str	r0, [r7, #12]
  401842:	60b9      	str	r1, [r7, #8]
  401844:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401846:	68bb      	ldr	r3, [r7, #8]
  401848:	011a      	lsls	r2, r3, #4
  40184a:	687b      	ldr	r3, [r7, #4]
  40184c:	429a      	cmp	r2, r3
  40184e:	d802      	bhi.n	401856 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  401850:	2310      	movs	r3, #16
  401852:	61fb      	str	r3, [r7, #28]
  401854:	e001      	b.n	40185a <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  401856:	2308      	movs	r3, #8
  401858:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	00da      	lsls	r2, r3, #3
  40185e:	69fb      	ldr	r3, [r7, #28]
  401860:	68b9      	ldr	r1, [r7, #8]
  401862:	fb01 f303 	mul.w	r3, r1, r3
  401866:	085b      	lsrs	r3, r3, #1
  401868:	441a      	add	r2, r3
  40186a:	69fb      	ldr	r3, [r7, #28]
  40186c:	68b9      	ldr	r1, [r7, #8]
  40186e:	fb01 f303 	mul.w	r3, r1, r3
  401872:	fbb2 f3f3 	udiv	r3, r2, r3
  401876:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  401878:	69bb      	ldr	r3, [r7, #24]
  40187a:	08db      	lsrs	r3, r3, #3
  40187c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40187e:	69bb      	ldr	r3, [r7, #24]
  401880:	f003 0307 	and.w	r3, r3, #7
  401884:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401886:	697b      	ldr	r3, [r7, #20]
  401888:	2b00      	cmp	r3, #0
  40188a:	d003      	beq.n	401894 <usart_set_async_baudrate+0x5a>
  40188c:	697b      	ldr	r3, [r7, #20]
  40188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  401892:	d301      	bcc.n	401898 <usart_set_async_baudrate+0x5e>
		return 1;
  401894:	2301      	movs	r3, #1
  401896:	e00f      	b.n	4018b8 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  401898:	69fb      	ldr	r3, [r7, #28]
  40189a:	2b08      	cmp	r3, #8
  40189c:	d105      	bne.n	4018aa <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	685b      	ldr	r3, [r3, #4]
  4018a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4018a6:	68fb      	ldr	r3, [r7, #12]
  4018a8:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4018aa:	693b      	ldr	r3, [r7, #16]
  4018ac:	041a      	lsls	r2, r3, #16
  4018ae:	697b      	ldr	r3, [r7, #20]
  4018b0:	431a      	orrs	r2, r3
  4018b2:	68fb      	ldr	r3, [r7, #12]
  4018b4:	621a      	str	r2, [r3, #32]

	return 0;
  4018b6:	2300      	movs	r3, #0
}
  4018b8:	4618      	mov	r0, r3
  4018ba:	3724      	adds	r7, #36	; 0x24
  4018bc:	46bd      	mov	sp, r7
  4018be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018c2:	4770      	bx	lr

004018c4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4018c4:	b580      	push	{r7, lr}
  4018c6:	b082      	sub	sp, #8
  4018c8:	af00      	add	r7, sp, #0
  4018ca:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4018cc:	6878      	ldr	r0, [r7, #4]
  4018ce:	4b0d      	ldr	r3, [pc, #52]	; (401904 <usart_reset+0x40>)
  4018d0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4018d2:	687b      	ldr	r3, [r7, #4]
  4018d4:	2200      	movs	r2, #0
  4018d6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	2200      	movs	r2, #0
  4018dc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4018de:	687b      	ldr	r3, [r7, #4]
  4018e0:	2200      	movs	r2, #0
  4018e2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4018e4:	6878      	ldr	r0, [r7, #4]
  4018e6:	4b08      	ldr	r3, [pc, #32]	; (401908 <usart_reset+0x44>)
  4018e8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4018ea:	6878      	ldr	r0, [r7, #4]
  4018ec:	4b07      	ldr	r3, [pc, #28]	; (40190c <usart_reset+0x48>)
  4018ee:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4018f0:	6878      	ldr	r0, [r7, #4]
  4018f2:	4b07      	ldr	r3, [pc, #28]	; (401910 <usart_reset+0x4c>)
  4018f4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4018f6:	6878      	ldr	r0, [r7, #4]
  4018f8:	4b06      	ldr	r3, [pc, #24]	; (401914 <usart_reset+0x50>)
  4018fa:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4018fc:	bf00      	nop
  4018fe:	3708      	adds	r7, #8
  401900:	46bd      	mov	sp, r7
  401902:	bd80      	pop	{r7, pc}
  401904:	00401aa5 	.word	0x00401aa5
  401908:	004019b7 	.word	0x004019b7
  40190c:	004019eb 	.word	0x004019eb
  401910:	00401a05 	.word	0x00401a05
  401914:	00401a21 	.word	0x00401a21

00401918 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b084      	sub	sp, #16
  40191c:	af00      	add	r7, sp, #0
  40191e:	60f8      	str	r0, [r7, #12]
  401920:	60b9      	str	r1, [r7, #8]
  401922:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  401924:	68f8      	ldr	r0, [r7, #12]
  401926:	4b1a      	ldr	r3, [pc, #104]	; (401990 <usart_init_rs232+0x78>)
  401928:	4798      	blx	r3

	ul_reg_val = 0;
  40192a:	4b1a      	ldr	r3, [pc, #104]	; (401994 <usart_init_rs232+0x7c>)
  40192c:	2200      	movs	r2, #0
  40192e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401930:	68bb      	ldr	r3, [r7, #8]
  401932:	2b00      	cmp	r3, #0
  401934:	d009      	beq.n	40194a <usart_init_rs232+0x32>
  401936:	68bb      	ldr	r3, [r7, #8]
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	687a      	ldr	r2, [r7, #4]
  40193c:	4619      	mov	r1, r3
  40193e:	68f8      	ldr	r0, [r7, #12]
  401940:	4b15      	ldr	r3, [pc, #84]	; (401998 <usart_init_rs232+0x80>)
  401942:	4798      	blx	r3
  401944:	4603      	mov	r3, r0
  401946:	2b00      	cmp	r3, #0
  401948:	d001      	beq.n	40194e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40194a:	2301      	movs	r3, #1
  40194c:	e01b      	b.n	401986 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40194e:	68bb      	ldr	r3, [r7, #8]
  401950:	685a      	ldr	r2, [r3, #4]
  401952:	68bb      	ldr	r3, [r7, #8]
  401954:	689b      	ldr	r3, [r3, #8]
  401956:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401958:	68bb      	ldr	r3, [r7, #8]
  40195a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40195c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40195e:	68bb      	ldr	r3, [r7, #8]
  401960:	68db      	ldr	r3, [r3, #12]
  401962:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401964:	4b0b      	ldr	r3, [pc, #44]	; (401994 <usart_init_rs232+0x7c>)
  401966:	681b      	ldr	r3, [r3, #0]
  401968:	4313      	orrs	r3, r2
  40196a:	4a0a      	ldr	r2, [pc, #40]	; (401994 <usart_init_rs232+0x7c>)
  40196c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40196e:	4b09      	ldr	r3, [pc, #36]	; (401994 <usart_init_rs232+0x7c>)
  401970:	681b      	ldr	r3, [r3, #0]
  401972:	4a08      	ldr	r2, [pc, #32]	; (401994 <usart_init_rs232+0x7c>)
  401974:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  401976:	68fb      	ldr	r3, [r7, #12]
  401978:	685a      	ldr	r2, [r3, #4]
  40197a:	4b06      	ldr	r3, [pc, #24]	; (401994 <usart_init_rs232+0x7c>)
  40197c:	681b      	ldr	r3, [r3, #0]
  40197e:	431a      	orrs	r2, r3
  401980:	68fb      	ldr	r3, [r7, #12]
  401982:	605a      	str	r2, [r3, #4]

	return 0;
  401984:	2300      	movs	r3, #0
}
  401986:	4618      	mov	r0, r3
  401988:	3710      	adds	r7, #16
  40198a:	46bd      	mov	sp, r7
  40198c:	bd80      	pop	{r7, pc}
  40198e:	bf00      	nop
  401990:	004018c5 	.word	0x004018c5
  401994:	204010cc 	.word	0x204010cc
  401998:	0040183b 	.word	0x0040183b

0040199c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40199c:	b480      	push	{r7}
  40199e:	b083      	sub	sp, #12
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	2240      	movs	r2, #64	; 0x40
  4019a8:	601a      	str	r2, [r3, #0]
}
  4019aa:	bf00      	nop
  4019ac:	370c      	adds	r7, #12
  4019ae:	46bd      	mov	sp, r7
  4019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b4:	4770      	bx	lr

004019b6 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4019b6:	b480      	push	{r7}
  4019b8:	b083      	sub	sp, #12
  4019ba:	af00      	add	r7, sp, #0
  4019bc:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4019be:	687b      	ldr	r3, [r7, #4]
  4019c0:	2288      	movs	r2, #136	; 0x88
  4019c2:	601a      	str	r2, [r3, #0]
}
  4019c4:	bf00      	nop
  4019c6:	370c      	adds	r7, #12
  4019c8:	46bd      	mov	sp, r7
  4019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ce:	4770      	bx	lr

004019d0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4019d0:	b480      	push	{r7}
  4019d2:	b083      	sub	sp, #12
  4019d4:	af00      	add	r7, sp, #0
  4019d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4019d8:	687b      	ldr	r3, [r7, #4]
  4019da:	2210      	movs	r2, #16
  4019dc:	601a      	str	r2, [r3, #0]
}
  4019de:	bf00      	nop
  4019e0:	370c      	adds	r7, #12
  4019e2:	46bd      	mov	sp, r7
  4019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019e8:	4770      	bx	lr

004019ea <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4019ea:	b480      	push	{r7}
  4019ec:	b083      	sub	sp, #12
  4019ee:	af00      	add	r7, sp, #0
  4019f0:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4019f2:	687b      	ldr	r3, [r7, #4]
  4019f4:	2224      	movs	r2, #36	; 0x24
  4019f6:	601a      	str	r2, [r3, #0]
}
  4019f8:	bf00      	nop
  4019fa:	370c      	adds	r7, #12
  4019fc:	46bd      	mov	sp, r7
  4019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a02:	4770      	bx	lr

00401a04 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  401a04:	b480      	push	{r7}
  401a06:	b083      	sub	sp, #12
  401a08:	af00      	add	r7, sp, #0
  401a0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401a12:	601a      	str	r2, [r3, #0]
}
  401a14:	bf00      	nop
  401a16:	370c      	adds	r7, #12
  401a18:	46bd      	mov	sp, r7
  401a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a1e:	4770      	bx	lr

00401a20 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  401a20:	b480      	push	{r7}
  401a22:	b083      	sub	sp, #12
  401a24:	af00      	add	r7, sp, #0
  401a26:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  401a28:	687b      	ldr	r3, [r7, #4]
  401a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401a2e:	601a      	str	r2, [r3, #0]
}
  401a30:	bf00      	nop
  401a32:	370c      	adds	r7, #12
  401a34:	46bd      	mov	sp, r7
  401a36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a3a:	4770      	bx	lr

00401a3c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  401a3c:	b480      	push	{r7}
  401a3e:	b083      	sub	sp, #12
  401a40:	af00      	add	r7, sp, #0
  401a42:	6078      	str	r0, [r7, #4]
  401a44:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	695b      	ldr	r3, [r3, #20]
  401a4a:	f003 0302 	and.w	r3, r3, #2
  401a4e:	2b00      	cmp	r3, #0
  401a50:	d101      	bne.n	401a56 <usart_write+0x1a>
		return 1;
  401a52:	2301      	movs	r3, #1
  401a54:	e005      	b.n	401a62 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401a56:	683b      	ldr	r3, [r7, #0]
  401a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	61da      	str	r2, [r3, #28]
	return 0;
  401a60:	2300      	movs	r3, #0
}
  401a62:	4618      	mov	r0, r3
  401a64:	370c      	adds	r7, #12
  401a66:	46bd      	mov	sp, r7
  401a68:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a6c:	4770      	bx	lr

00401a6e <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  401a6e:	b480      	push	{r7}
  401a70:	b083      	sub	sp, #12
  401a72:	af00      	add	r7, sp, #0
  401a74:	6078      	str	r0, [r7, #4]
  401a76:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401a78:	687b      	ldr	r3, [r7, #4]
  401a7a:	695b      	ldr	r3, [r3, #20]
  401a7c:	f003 0301 	and.w	r3, r3, #1
  401a80:	2b00      	cmp	r3, #0
  401a82:	d101      	bne.n	401a88 <usart_read+0x1a>
		return 1;
  401a84:	2301      	movs	r3, #1
  401a86:	e006      	b.n	401a96 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	699b      	ldr	r3, [r3, #24]
  401a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  401a90:	683b      	ldr	r3, [r7, #0]
  401a92:	601a      	str	r2, [r3, #0]

	return 0;
  401a94:	2300      	movs	r3, #0
}
  401a96:	4618      	mov	r0, r3
  401a98:	370c      	adds	r7, #12
  401a9a:	46bd      	mov	sp, r7
  401a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401aa0:	4770      	bx	lr
	...

00401aa4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  401aa4:	b480      	push	{r7}
  401aa6:	b083      	sub	sp, #12
  401aa8:	af00      	add	r7, sp, #0
  401aaa:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	4a04      	ldr	r2, [pc, #16]	; (401ac0 <usart_disable_writeprotect+0x1c>)
  401ab0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  401ab4:	bf00      	nop
  401ab6:	370c      	adds	r7, #12
  401ab8:	46bd      	mov	sp, r7
  401aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401abe:	4770      	bx	lr
  401ac0:	55534100 	.word	0x55534100

00401ac4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401ac4:	b480      	push	{r7}
  401ac6:	b083      	sub	sp, #12
  401ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401aca:	f3ef 8310 	mrs	r3, PRIMASK
  401ace:	607b      	str	r3, [r7, #4]
  return(result);
  401ad0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ad2:	2b00      	cmp	r3, #0
  401ad4:	bf0c      	ite	eq
  401ad6:	2301      	moveq	r3, #1
  401ad8:	2300      	movne	r3, #0
  401ada:	b2db      	uxtb	r3, r3
  401adc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ade:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401ae0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ae4:	4b04      	ldr	r3, [pc, #16]	; (401af8 <cpu_irq_save+0x34>)
  401ae6:	2200      	movs	r2, #0
  401ae8:	701a      	strb	r2, [r3, #0]
	return flags;
  401aea:	683b      	ldr	r3, [r7, #0]
}
  401aec:	4618      	mov	r0, r3
  401aee:	370c      	adds	r7, #12
  401af0:	46bd      	mov	sp, r7
  401af2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401af6:	4770      	bx	lr
  401af8:	20400000 	.word	0x20400000

00401afc <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401afc:	b480      	push	{r7}
  401afe:	b083      	sub	sp, #12
  401b00:	af00      	add	r7, sp, #0
  401b02:	6078      	str	r0, [r7, #4]
	return (flags);
  401b04:	687b      	ldr	r3, [r7, #4]
  401b06:	2b00      	cmp	r3, #0
  401b08:	bf14      	ite	ne
  401b0a:	2301      	movne	r3, #1
  401b0c:	2300      	moveq	r3, #0
  401b0e:	b2db      	uxtb	r3, r3
}
  401b10:	4618      	mov	r0, r3
  401b12:	370c      	adds	r7, #12
  401b14:	46bd      	mov	sp, r7
  401b16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1a:	4770      	bx	lr

00401b1c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401b1c:	b580      	push	{r7, lr}
  401b1e:	b082      	sub	sp, #8
  401b20:	af00      	add	r7, sp, #0
  401b22:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401b24:	6878      	ldr	r0, [r7, #4]
  401b26:	4b07      	ldr	r3, [pc, #28]	; (401b44 <cpu_irq_restore+0x28>)
  401b28:	4798      	blx	r3
  401b2a:	4603      	mov	r3, r0
  401b2c:	2b00      	cmp	r3, #0
  401b2e:	d005      	beq.n	401b3c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401b30:	4b05      	ldr	r3, [pc, #20]	; (401b48 <cpu_irq_restore+0x2c>)
  401b32:	2201      	movs	r2, #1
  401b34:	701a      	strb	r2, [r3, #0]
  401b36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b3a:	b662      	cpsie	i
}
  401b3c:	bf00      	nop
  401b3e:	3708      	adds	r7, #8
  401b40:	46bd      	mov	sp, r7
  401b42:	bd80      	pop	{r7, pc}
  401b44:	00401afd 	.word	0x00401afd
  401b48:	20400000 	.word	0x20400000

00401b4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401b4c:	b580      	push	{r7, lr}
  401b4e:	b084      	sub	sp, #16
  401b50:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401b52:	4b1e      	ldr	r3, [pc, #120]	; (401bcc <Reset_Handler+0x80>)
  401b54:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401b56:	4b1e      	ldr	r3, [pc, #120]	; (401bd0 <Reset_Handler+0x84>)
  401b58:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401b5a:	68fa      	ldr	r2, [r7, #12]
  401b5c:	68bb      	ldr	r3, [r7, #8]
  401b5e:	429a      	cmp	r2, r3
  401b60:	d00c      	beq.n	401b7c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401b62:	e007      	b.n	401b74 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401b64:	68bb      	ldr	r3, [r7, #8]
  401b66:	1d1a      	adds	r2, r3, #4
  401b68:	60ba      	str	r2, [r7, #8]
  401b6a:	68fa      	ldr	r2, [r7, #12]
  401b6c:	1d11      	adds	r1, r2, #4
  401b6e:	60f9      	str	r1, [r7, #12]
  401b70:	6812      	ldr	r2, [r2, #0]
  401b72:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401b74:	68bb      	ldr	r3, [r7, #8]
  401b76:	4a17      	ldr	r2, [pc, #92]	; (401bd4 <Reset_Handler+0x88>)
  401b78:	4293      	cmp	r3, r2
  401b7a:	d3f3      	bcc.n	401b64 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401b7c:	4b16      	ldr	r3, [pc, #88]	; (401bd8 <Reset_Handler+0x8c>)
  401b7e:	60bb      	str	r3, [r7, #8]
  401b80:	e004      	b.n	401b8c <Reset_Handler+0x40>
                *pDest++ = 0;
  401b82:	68bb      	ldr	r3, [r7, #8]
  401b84:	1d1a      	adds	r2, r3, #4
  401b86:	60ba      	str	r2, [r7, #8]
  401b88:	2200      	movs	r2, #0
  401b8a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401b8c:	68bb      	ldr	r3, [r7, #8]
  401b8e:	4a13      	ldr	r2, [pc, #76]	; (401bdc <Reset_Handler+0x90>)
  401b90:	4293      	cmp	r3, r2
  401b92:	d3f6      	bcc.n	401b82 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401b94:	4b12      	ldr	r3, [pc, #72]	; (401be0 <Reset_Handler+0x94>)
  401b96:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b98:	4a12      	ldr	r2, [pc, #72]	; (401be4 <Reset_Handler+0x98>)
  401b9a:	68fb      	ldr	r3, [r7, #12]
  401b9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ba0:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401ba2:	4b11      	ldr	r3, [pc, #68]	; (401be8 <Reset_Handler+0x9c>)
  401ba4:	4798      	blx	r3
  401ba6:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401ba8:	4a10      	ldr	r2, [pc, #64]	; (401bec <Reset_Handler+0xa0>)
  401baa:	4b10      	ldr	r3, [pc, #64]	; (401bec <Reset_Handler+0xa0>)
  401bac:	681b      	ldr	r3, [r3, #0]
  401bae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401bb2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401bb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401bb8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401bbc:	6878      	ldr	r0, [r7, #4]
  401bbe:	4b0c      	ldr	r3, [pc, #48]	; (401bf0 <Reset_Handler+0xa4>)
  401bc0:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401bc2:	4b0c      	ldr	r3, [pc, #48]	; (401bf4 <Reset_Handler+0xa8>)
  401bc4:	4798      	blx	r3

        /* Branch to main function */
        main();
  401bc6:	4b0c      	ldr	r3, [pc, #48]	; (401bf8 <Reset_Handler+0xac>)
  401bc8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401bca:	e7fe      	b.n	401bca <Reset_Handler+0x7e>
  401bcc:	00406a9c 	.word	0x00406a9c
  401bd0:	20400000 	.word	0x20400000
  401bd4:	204009c0 	.word	0x204009c0
  401bd8:	204009c0 	.word	0x204009c0
  401bdc:	20401230 	.word	0x20401230
  401be0:	00400000 	.word	0x00400000
  401be4:	e000ed00 	.word	0xe000ed00
  401be8:	00401ac5 	.word	0x00401ac5
  401bec:	e000ed88 	.word	0xe000ed88
  401bf0:	00401b1d 	.word	0x00401b1d
  401bf4:	004038bd 	.word	0x004038bd
  401bf8:	004037d1 	.word	0x004037d1

00401bfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bfc:	b480      	push	{r7}
  401bfe:	af00      	add	r7, sp, #0
        while (1) {
  401c00:	e7fe      	b.n	401c00 <Dummy_Handler+0x4>
	...

00401c04 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401c04:	b480      	push	{r7}
  401c06:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401c08:	4b52      	ldr	r3, [pc, #328]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c0c:	f003 0303 	and.w	r3, r3, #3
  401c10:	2b01      	cmp	r3, #1
  401c12:	d014      	beq.n	401c3e <SystemCoreClockUpdate+0x3a>
  401c14:	2b01      	cmp	r3, #1
  401c16:	d302      	bcc.n	401c1e <SystemCoreClockUpdate+0x1a>
  401c18:	2b02      	cmp	r3, #2
  401c1a:	d038      	beq.n	401c8e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401c1c:	e07a      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401c1e:	4b4e      	ldr	r3, [pc, #312]	; (401d58 <SystemCoreClockUpdate+0x154>)
  401c20:	695b      	ldr	r3, [r3, #20]
  401c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c26:	2b00      	cmp	r3, #0
  401c28:	d004      	beq.n	401c34 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401c2a:	4b4c      	ldr	r3, [pc, #304]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c30:	601a      	str	r2, [r3, #0]
    break;
  401c32:	e06f      	b.n	401d14 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401c34:	4b49      	ldr	r3, [pc, #292]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c36:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401c3a:	601a      	str	r2, [r3, #0]
    break;
  401c3c:	e06a      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c3e:	4b45      	ldr	r3, [pc, #276]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c40:	6a1b      	ldr	r3, [r3, #32]
  401c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c46:	2b00      	cmp	r3, #0
  401c48:	d003      	beq.n	401c52 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401c4a:	4b44      	ldr	r3, [pc, #272]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c4c:	4a44      	ldr	r2, [pc, #272]	; (401d60 <SystemCoreClockUpdate+0x15c>)
  401c4e:	601a      	str	r2, [r3, #0]
    break;
  401c50:	e060      	b.n	401d14 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c52:	4b42      	ldr	r3, [pc, #264]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c54:	4a43      	ldr	r2, [pc, #268]	; (401d64 <SystemCoreClockUpdate+0x160>)
  401c56:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c58:	4b3e      	ldr	r3, [pc, #248]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c5a:	6a1b      	ldr	r3, [r3, #32]
  401c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c60:	2b10      	cmp	r3, #16
  401c62:	d004      	beq.n	401c6e <SystemCoreClockUpdate+0x6a>
  401c64:	2b20      	cmp	r3, #32
  401c66:	d008      	beq.n	401c7a <SystemCoreClockUpdate+0x76>
  401c68:	2b00      	cmp	r3, #0
  401c6a:	d00e      	beq.n	401c8a <SystemCoreClockUpdate+0x86>
          break;
  401c6c:	e00e      	b.n	401c8c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401c6e:	4b3b      	ldr	r3, [pc, #236]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c70:	681b      	ldr	r3, [r3, #0]
  401c72:	005b      	lsls	r3, r3, #1
  401c74:	4a39      	ldr	r2, [pc, #228]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c76:	6013      	str	r3, [r2, #0]
          break;
  401c78:	e008      	b.n	401c8c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401c7a:	4b38      	ldr	r3, [pc, #224]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c7c:	681a      	ldr	r2, [r3, #0]
  401c7e:	4613      	mov	r3, r2
  401c80:	005b      	lsls	r3, r3, #1
  401c82:	4413      	add	r3, r2
  401c84:	4a35      	ldr	r2, [pc, #212]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c86:	6013      	str	r3, [r2, #0]
          break;
  401c88:	e000      	b.n	401c8c <SystemCoreClockUpdate+0x88>
          break;
  401c8a:	bf00      	nop
    break;
  401c8c:	e042      	b.n	401d14 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c8e:	4b31      	ldr	r3, [pc, #196]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401c90:	6a1b      	ldr	r3, [r3, #32]
  401c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c96:	2b00      	cmp	r3, #0
  401c98:	d003      	beq.n	401ca2 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c9a:	4b30      	ldr	r3, [pc, #192]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401c9c:	4a30      	ldr	r2, [pc, #192]	; (401d60 <SystemCoreClockUpdate+0x15c>)
  401c9e:	601a      	str	r2, [r3, #0]
  401ca0:	e01c      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ca2:	4b2e      	ldr	r3, [pc, #184]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401ca4:	4a2f      	ldr	r2, [pc, #188]	; (401d64 <SystemCoreClockUpdate+0x160>)
  401ca6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401ca8:	4b2a      	ldr	r3, [pc, #168]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401caa:	6a1b      	ldr	r3, [r3, #32]
  401cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cb0:	2b10      	cmp	r3, #16
  401cb2:	d004      	beq.n	401cbe <SystemCoreClockUpdate+0xba>
  401cb4:	2b20      	cmp	r3, #32
  401cb6:	d008      	beq.n	401cca <SystemCoreClockUpdate+0xc6>
  401cb8:	2b00      	cmp	r3, #0
  401cba:	d00e      	beq.n	401cda <SystemCoreClockUpdate+0xd6>
          break;
  401cbc:	e00e      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401cbe:	4b27      	ldr	r3, [pc, #156]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cc0:	681b      	ldr	r3, [r3, #0]
  401cc2:	005b      	lsls	r3, r3, #1
  401cc4:	4a25      	ldr	r2, [pc, #148]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cc6:	6013      	str	r3, [r2, #0]
          break;
  401cc8:	e008      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401cca:	4b24      	ldr	r3, [pc, #144]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401ccc:	681a      	ldr	r2, [r3, #0]
  401cce:	4613      	mov	r3, r2
  401cd0:	005b      	lsls	r3, r3, #1
  401cd2:	4413      	add	r3, r2
  401cd4:	4a21      	ldr	r2, [pc, #132]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cd6:	6013      	str	r3, [r2, #0]
          break;
  401cd8:	e000      	b.n	401cdc <SystemCoreClockUpdate+0xd8>
          break;
  401cda:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401cdc:	4b1d      	ldr	r3, [pc, #116]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ce0:	f003 0303 	and.w	r3, r3, #3
  401ce4:	2b02      	cmp	r3, #2
  401ce6:	d114      	bne.n	401d12 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401ce8:	4b1a      	ldr	r3, [pc, #104]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401cec:	0c1b      	lsrs	r3, r3, #16
  401cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401cf2:	3301      	adds	r3, #1
  401cf4:	4a19      	ldr	r2, [pc, #100]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cf6:	6812      	ldr	r2, [r2, #0]
  401cf8:	fb02 f303 	mul.w	r3, r2, r3
  401cfc:	4a17      	ldr	r2, [pc, #92]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401cfe:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401d00:	4b14      	ldr	r3, [pc, #80]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401d04:	b2db      	uxtb	r3, r3
  401d06:	4a15      	ldr	r2, [pc, #84]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d08:	6812      	ldr	r2, [r2, #0]
  401d0a:	fbb2 f3f3 	udiv	r3, r2, r3
  401d0e:	4a13      	ldr	r2, [pc, #76]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d10:	6013      	str	r3, [r2, #0]
    break;
  401d12:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401d14:	4b0f      	ldr	r3, [pc, #60]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d1c:	2b70      	cmp	r3, #112	; 0x70
  401d1e:	d108      	bne.n	401d32 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401d20:	4b0e      	ldr	r3, [pc, #56]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d22:	681b      	ldr	r3, [r3, #0]
  401d24:	4a10      	ldr	r2, [pc, #64]	; (401d68 <SystemCoreClockUpdate+0x164>)
  401d26:	fba2 2303 	umull	r2, r3, r2, r3
  401d2a:	085b      	lsrs	r3, r3, #1
  401d2c:	4a0b      	ldr	r2, [pc, #44]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d2e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401d30:	e00a      	b.n	401d48 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d32:	4b08      	ldr	r3, [pc, #32]	; (401d54 <SystemCoreClockUpdate+0x150>)
  401d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d36:	091b      	lsrs	r3, r3, #4
  401d38:	f003 0307 	and.w	r3, r3, #7
  401d3c:	4a07      	ldr	r2, [pc, #28]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d3e:	6812      	ldr	r2, [r2, #0]
  401d40:	fa22 f303 	lsr.w	r3, r2, r3
  401d44:	4a05      	ldr	r2, [pc, #20]	; (401d5c <SystemCoreClockUpdate+0x158>)
  401d46:	6013      	str	r3, [r2, #0]
}
  401d48:	bf00      	nop
  401d4a:	46bd      	mov	sp, r7
  401d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d50:	4770      	bx	lr
  401d52:	bf00      	nop
  401d54:	400e0600 	.word	0x400e0600
  401d58:	400e1810 	.word	0x400e1810
  401d5c:	20400004 	.word	0x20400004
  401d60:	00b71b00 	.word	0x00b71b00
  401d64:	003d0900 	.word	0x003d0900
  401d68:	aaaaaaab 	.word	0xaaaaaaab

00401d6c <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401d6c:	b480      	push	{r7}
  401d6e:	b083      	sub	sp, #12
  401d70:	af00      	add	r7, sp, #0
  401d72:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	4a1d      	ldr	r2, [pc, #116]	; (401dec <system_init_flash+0x80>)
  401d78:	4293      	cmp	r3, r2
  401d7a:	d804      	bhi.n	401d86 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d7c:	4b1c      	ldr	r3, [pc, #112]	; (401df0 <system_init_flash+0x84>)
  401d7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d82:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d84:	e02b      	b.n	401dde <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401d86:	687b      	ldr	r3, [r7, #4]
  401d88:	4a1a      	ldr	r2, [pc, #104]	; (401df4 <system_init_flash+0x88>)
  401d8a:	4293      	cmp	r3, r2
  401d8c:	d803      	bhi.n	401d96 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d8e:	4b18      	ldr	r3, [pc, #96]	; (401df0 <system_init_flash+0x84>)
  401d90:	4a19      	ldr	r2, [pc, #100]	; (401df8 <system_init_flash+0x8c>)
  401d92:	601a      	str	r2, [r3, #0]
}
  401d94:	e023      	b.n	401dde <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	4a18      	ldr	r2, [pc, #96]	; (401dfc <system_init_flash+0x90>)
  401d9a:	4293      	cmp	r3, r2
  401d9c:	d803      	bhi.n	401da6 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d9e:	4b14      	ldr	r3, [pc, #80]	; (401df0 <system_init_flash+0x84>)
  401da0:	4a17      	ldr	r2, [pc, #92]	; (401e00 <system_init_flash+0x94>)
  401da2:	601a      	str	r2, [r3, #0]
}
  401da4:	e01b      	b.n	401dde <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401da6:	687b      	ldr	r3, [r7, #4]
  401da8:	4a16      	ldr	r2, [pc, #88]	; (401e04 <system_init_flash+0x98>)
  401daa:	4293      	cmp	r3, r2
  401dac:	d803      	bhi.n	401db6 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dae:	4b10      	ldr	r3, [pc, #64]	; (401df0 <system_init_flash+0x84>)
  401db0:	4a15      	ldr	r2, [pc, #84]	; (401e08 <system_init_flash+0x9c>)
  401db2:	601a      	str	r2, [r3, #0]
}
  401db4:	e013      	b.n	401dde <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401db6:	687b      	ldr	r3, [r7, #4]
  401db8:	4a14      	ldr	r2, [pc, #80]	; (401e0c <system_init_flash+0xa0>)
  401dba:	4293      	cmp	r3, r2
  401dbc:	d804      	bhi.n	401dc8 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dbe:	4b0c      	ldr	r3, [pc, #48]	; (401df0 <system_init_flash+0x84>)
  401dc0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401dc4:	601a      	str	r2, [r3, #0]
}
  401dc6:	e00a      	b.n	401dde <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401dc8:	687b      	ldr	r3, [r7, #4]
  401dca:	4a11      	ldr	r2, [pc, #68]	; (401e10 <system_init_flash+0xa4>)
  401dcc:	4293      	cmp	r3, r2
  401dce:	d803      	bhi.n	401dd8 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dd0:	4b07      	ldr	r3, [pc, #28]	; (401df0 <system_init_flash+0x84>)
  401dd2:	4a10      	ldr	r2, [pc, #64]	; (401e14 <system_init_flash+0xa8>)
  401dd4:	601a      	str	r2, [r3, #0]
}
  401dd6:	e002      	b.n	401dde <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401dd8:	4b05      	ldr	r3, [pc, #20]	; (401df0 <system_init_flash+0x84>)
  401dda:	4a0f      	ldr	r2, [pc, #60]	; (401e18 <system_init_flash+0xac>)
  401ddc:	601a      	str	r2, [r3, #0]
}
  401dde:	bf00      	nop
  401de0:	370c      	adds	r7, #12
  401de2:	46bd      	mov	sp, r7
  401de4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401de8:	4770      	bx	lr
  401dea:	bf00      	nop
  401dec:	015ef3bf 	.word	0x015ef3bf
  401df0:	400e0c00 	.word	0x400e0c00
  401df4:	02bde77f 	.word	0x02bde77f
  401df8:	04000100 	.word	0x04000100
  401dfc:	041cdb3f 	.word	0x041cdb3f
  401e00:	04000200 	.word	0x04000200
  401e04:	057bceff 	.word	0x057bceff
  401e08:	04000300 	.word	0x04000300
  401e0c:	06dac2bf 	.word	0x06dac2bf
  401e10:	0839b67f 	.word	0x0839b67f
  401e14:	04000500 	.word	0x04000500
  401e18:	04000600 	.word	0x04000600

00401e1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401e1c:	b480      	push	{r7}
  401e1e:	b085      	sub	sp, #20
  401e20:	af00      	add	r7, sp, #0
  401e22:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401e24:	4b10      	ldr	r3, [pc, #64]	; (401e68 <_sbrk+0x4c>)
  401e26:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401e28:	4b10      	ldr	r3, [pc, #64]	; (401e6c <_sbrk+0x50>)
  401e2a:	681b      	ldr	r3, [r3, #0]
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d102      	bne.n	401e36 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401e30:	4b0e      	ldr	r3, [pc, #56]	; (401e6c <_sbrk+0x50>)
  401e32:	4a0f      	ldr	r2, [pc, #60]	; (401e70 <_sbrk+0x54>)
  401e34:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401e36:	4b0d      	ldr	r3, [pc, #52]	; (401e6c <_sbrk+0x50>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401e3c:	68ba      	ldr	r2, [r7, #8]
  401e3e:	687b      	ldr	r3, [r7, #4]
  401e40:	441a      	add	r2, r3
  401e42:	68fb      	ldr	r3, [r7, #12]
  401e44:	429a      	cmp	r2, r3
  401e46:	dd02      	ble.n	401e4e <_sbrk+0x32>
		return (caddr_t) -1;	
  401e48:	f04f 33ff 	mov.w	r3, #4294967295
  401e4c:	e006      	b.n	401e5c <_sbrk+0x40>
	}

	heap += incr;
  401e4e:	4b07      	ldr	r3, [pc, #28]	; (401e6c <_sbrk+0x50>)
  401e50:	681a      	ldr	r2, [r3, #0]
  401e52:	687b      	ldr	r3, [r7, #4]
  401e54:	4413      	add	r3, r2
  401e56:	4a05      	ldr	r2, [pc, #20]	; (401e6c <_sbrk+0x50>)
  401e58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401e5a:	68bb      	ldr	r3, [r7, #8]
}
  401e5c:	4618      	mov	r0, r3
  401e5e:	3714      	adds	r7, #20
  401e60:	46bd      	mov	sp, r7
  401e62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e66:	4770      	bx	lr
  401e68:	2045fffc 	.word	0x2045fffc
  401e6c:	204010d0 	.word	0x204010d0
  401e70:	20403430 	.word	0x20403430

00401e74 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401e74:	b480      	push	{r7}
  401e76:	b083      	sub	sp, #12
  401e78:	af00      	add	r7, sp, #0
  401e7a:	6078      	str	r0, [r7, #4]
	return -1;
  401e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
  401e80:	4618      	mov	r0, r3
  401e82:	370c      	adds	r7, #12
  401e84:	46bd      	mov	sp, r7
  401e86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e8a:	4770      	bx	lr

00401e8c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401e8c:	b480      	push	{r7}
  401e8e:	b083      	sub	sp, #12
  401e90:	af00      	add	r7, sp, #0
  401e92:	6078      	str	r0, [r7, #4]
  401e94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401e96:	683b      	ldr	r3, [r7, #0]
  401e98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e9c:	605a      	str	r2, [r3, #4]

	return 0;
  401e9e:	2300      	movs	r3, #0
}
  401ea0:	4618      	mov	r0, r3
  401ea2:	370c      	adds	r7, #12
  401ea4:	46bd      	mov	sp, r7
  401ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eaa:	4770      	bx	lr

00401eac <_isatty>:

extern int _isatty(int file)
{
  401eac:	b480      	push	{r7}
  401eae:	b083      	sub	sp, #12
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
	return 1;
  401eb4:	2301      	movs	r3, #1
}
  401eb6:	4618      	mov	r0, r3
  401eb8:	370c      	adds	r7, #12
  401eba:	46bd      	mov	sp, r7
  401ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ec0:	4770      	bx	lr

00401ec2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401ec2:	b480      	push	{r7}
  401ec4:	b085      	sub	sp, #20
  401ec6:	af00      	add	r7, sp, #0
  401ec8:	60f8      	str	r0, [r7, #12]
  401eca:	60b9      	str	r1, [r7, #8]
  401ecc:	607a      	str	r2, [r7, #4]
	return 0;
  401ece:	2300      	movs	r3, #0
}
  401ed0:	4618      	mov	r0, r3
  401ed2:	3714      	adds	r7, #20
  401ed4:	46bd      	mov	sp, r7
  401ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eda:	4770      	bx	lr

00401edc <circ_buf_flex_init_buffer>:
#include "circular-buffer-flex.h"

void circ_buf_flex_init_buffer(circ_buf_flex_t *buf, const uint32_t capacity, const uint16_t element_size)
{
  401edc:	b5b0      	push	{r4, r5, r7, lr}
  401ede:	b08a      	sub	sp, #40	; 0x28
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	60f8      	str	r0, [r7, #12]
  401ee4:	60b9      	str	r1, [r7, #8]
  401ee6:	4613      	mov	r3, r2
  401ee8:	80fb      	strh	r3, [r7, #6]
    circ_buf_flex_t temp_buffer;
    temp_buffer.buffer = (void *) malloc(capacity * element_size);
  401eea:	88fb      	ldrh	r3, [r7, #6]
  401eec:	68ba      	ldr	r2, [r7, #8]
  401eee:	fb02 f303 	mul.w	r3, r2, r3
  401ef2:	4618      	mov	r0, r3
  401ef4:	4b0e      	ldr	r3, [pc, #56]	; (401f30 <circ_buf_flex_init_buffer+0x54>)
  401ef6:	4798      	blx	r3
  401ef8:	4603      	mov	r3, r0
  401efa:	613b      	str	r3, [r7, #16]
    temp_buffer.buffer_element_size = element_size;
  401efc:	88fb      	ldrh	r3, [r7, #6]
  401efe:	82bb      	strh	r3, [r7, #20]
    temp_buffer.capacity = capacity;
  401f00:	68bb      	ldr	r3, [r7, #8]
  401f02:	623b      	str	r3, [r7, #32]
    temp_buffer.buffer_status = CBF_BUFFER_EMPTY;
  401f04:	2301      	movs	r3, #1
  401f06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    temp_buffer.head = 0;
  401f0a:	2300      	movs	r3, #0
  401f0c:	61bb      	str	r3, [r7, #24]
    temp_buffer.tail = 0;
  401f0e:	2300      	movs	r3, #0
  401f10:	61fb      	str	r3, [r7, #28]

    *buf = temp_buffer;
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	461d      	mov	r5, r3
  401f16:	f107 0410 	add.w	r4, r7, #16
  401f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401f1e:	e894 0003 	ldmia.w	r4, {r0, r1}
  401f22:	e885 0003 	stmia.w	r5, {r0, r1}
}
  401f26:	bf00      	nop
  401f28:	3728      	adds	r7, #40	; 0x28
  401f2a:	46bd      	mov	sp, r7
  401f2c:	bdb0      	pop	{r4, r5, r7, pc}
  401f2e:	bf00      	nop
  401f30:	00403935 	.word	0x00403935

00401f34 <circ_buf_flex_available_elements_to_read>:
    circ_buf_flex_free(buf);
    circ_buf_flex_init_buffer(buf, buf->capacity, buf->buffer_element_size);
}

uint32_t circ_buf_flex_available_elements_to_read(circ_buf_flex_t *buf)
{
  401f34:	b480      	push	{r7}
  401f36:	b085      	sub	sp, #20
  401f38:	af00      	add	r7, sp, #0
  401f3a:	6078      	str	r0, [r7, #4]
    uint32_t elements_to_read = 0;
  401f3c:	2300      	movs	r3, #0
  401f3e:	60fb      	str	r3, [r7, #12]

    if (buf->tail > buf->head)
  401f40:	687b      	ldr	r3, [r7, #4]
  401f42:	68da      	ldr	r2, [r3, #12]
  401f44:	687b      	ldr	r3, [r7, #4]
  401f46:	689b      	ldr	r3, [r3, #8]
  401f48:	429a      	cmp	r2, r3
  401f4a:	d909      	bls.n	401f60 <circ_buf_flex_available_elements_to_read+0x2c>
    {
        elements_to_read = buf->capacity - buf->tail + buf->head;
  401f4c:	687b      	ldr	r3, [r7, #4]
  401f4e:	691a      	ldr	r2, [r3, #16]
  401f50:	687b      	ldr	r3, [r7, #4]
  401f52:	68db      	ldr	r3, [r3, #12]
  401f54:	1ad2      	subs	r2, r2, r3
  401f56:	687b      	ldr	r3, [r7, #4]
  401f58:	689b      	ldr	r3, [r3, #8]
  401f5a:	4413      	add	r3, r2
  401f5c:	60fb      	str	r3, [r7, #12]
  401f5e:	e013      	b.n	401f88 <circ_buf_flex_available_elements_to_read+0x54>
    }else if (buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FULL)
  401f60:	687b      	ldr	r3, [r7, #4]
  401f62:	689a      	ldr	r2, [r3, #8]
  401f64:	687b      	ldr	r3, [r7, #4]
  401f66:	68db      	ldr	r3, [r3, #12]
  401f68:	429a      	cmp	r2, r3
  401f6a:	d107      	bne.n	401f7c <circ_buf_flex_available_elements_to_read+0x48>
  401f6c:	687b      	ldr	r3, [r7, #4]
  401f6e:	7d1b      	ldrb	r3, [r3, #20]
  401f70:	2b02      	cmp	r3, #2
  401f72:	d103      	bne.n	401f7c <circ_buf_flex_available_elements_to_read+0x48>
    {
        elements_to_read = buf->capacity;
  401f74:	687b      	ldr	r3, [r7, #4]
  401f76:	691b      	ldr	r3, [r3, #16]
  401f78:	60fb      	str	r3, [r7, #12]
  401f7a:	e005      	b.n	401f88 <circ_buf_flex_available_elements_to_read+0x54>
    }else
    {
        elements_to_read = buf->head - buf->tail;
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	689a      	ldr	r2, [r3, #8]
  401f80:	687b      	ldr	r3, [r7, #4]
  401f82:	68db      	ldr	r3, [r3, #12]
  401f84:	1ad3      	subs	r3, r2, r3
  401f86:	60fb      	str	r3, [r7, #12]
    }

    return elements_to_read;
  401f88:	68fb      	ldr	r3, [r7, #12]
}
  401f8a:	4618      	mov	r0, r3
  401f8c:	3714      	adds	r7, #20
  401f8e:	46bd      	mov	sp, r7
  401f90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f94:	4770      	bx	lr

00401f96 <circ_buf_flex_is_empty>:
{
    return buf->capacity - circ_buf_flex_available_elements_to_read(buf);
}

uint8_t circ_buf_flex_is_empty(circ_buf_flex_t *buf)
{
  401f96:	b480      	push	{r7}
  401f98:	b083      	sub	sp, #12
  401f9a:	af00      	add	r7, sp, #0
  401f9c:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CBF_BUFFER_EMPTY;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	7d1b      	ldrb	r3, [r3, #20]
  401fa2:	2b01      	cmp	r3, #1
  401fa4:	bf0c      	ite	eq
  401fa6:	2301      	moveq	r3, #1
  401fa8:	2300      	movne	r3, #0
  401faa:	b2db      	uxtb	r3, r3
}
  401fac:	4618      	mov	r0, r3
  401fae:	370c      	adds	r7, #12
  401fb0:	46bd      	mov	sp, r7
  401fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fb6:	4770      	bx	lr

00401fb8 <circ_buf_flex_is_full>:

uint8_t circ_buf_flex_is_full(circ_buf_flex_t *buf)
{
  401fb8:	b480      	push	{r7}
  401fba:	b083      	sub	sp, #12
  401fbc:	af00      	add	r7, sp, #0
  401fbe:	6078      	str	r0, [r7, #4]
    return buf->buffer_status == CBF_BUFFER_FULL;
  401fc0:	687b      	ldr	r3, [r7, #4]
  401fc2:	7d1b      	ldrb	r3, [r3, #20]
  401fc4:	2b02      	cmp	r3, #2
  401fc6:	bf0c      	ite	eq
  401fc8:	2301      	moveq	r3, #1
  401fca:	2300      	movne	r3, #0
  401fcc:	b2db      	uxtb	r3, r3
}
  401fce:	4618      	mov	r0, r3
  401fd0:	370c      	adds	r7, #12
  401fd2:	46bd      	mov	sp, r7
  401fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fd8:	4770      	bx	lr
	...

00401fdc <circ_buf_flex_push>:

uint8_t circ_buf_flex_push(circ_buf_flex_t* buf, void* data)
{
  401fdc:	b580      	push	{r7, lr}
  401fde:	b084      	sub	sp, #16
  401fe0:	af00      	add	r7, sp, #0
  401fe2:	6078      	str	r0, [r7, #4]
  401fe4:	6039      	str	r1, [r7, #0]
    uint8_t result = CBF_SUCCESS;
  401fe6:	2300      	movs	r3, #0
  401fe8:	73fb      	strb	r3, [r7, #15]

    if(!circ_buf_flex_is_full(buf))
  401fea:	6878      	ldr	r0, [r7, #4]
  401fec:	4b1b      	ldr	r3, [pc, #108]	; (40205c <circ_buf_flex_push+0x80>)
  401fee:	4798      	blx	r3
  401ff0:	4603      	mov	r3, r0
  401ff2:	2b00      	cmp	r3, #0
  401ff4:	d11e      	bne.n	402034 <circ_buf_flex_push+0x58>
    {
        memcpy((buf->buffer) + (buf->head++) * (buf->buffer_element_size), data, buf->buffer_element_size);
  401ff6:	687b      	ldr	r3, [r7, #4]
  401ff8:	681a      	ldr	r2, [r3, #0]
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	689b      	ldr	r3, [r3, #8]
  401ffe:	1c58      	adds	r0, r3, #1
  402000:	6879      	ldr	r1, [r7, #4]
  402002:	6088      	str	r0, [r1, #8]
  402004:	6879      	ldr	r1, [r7, #4]
  402006:	8889      	ldrh	r1, [r1, #4]
  402008:	fb01 f303 	mul.w	r3, r1, r3
  40200c:	18d0      	adds	r0, r2, r3
  40200e:	687b      	ldr	r3, [r7, #4]
  402010:	889b      	ldrh	r3, [r3, #4]
  402012:	461a      	mov	r2, r3
  402014:	6839      	ldr	r1, [r7, #0]
  402016:	4b12      	ldr	r3, [pc, #72]	; (402060 <circ_buf_flex_push+0x84>)
  402018:	4798      	blx	r3
        //buf->buffer[buf->head++] = *data;
        buf->buffer_status = CBF_BUFFER_FILLING;
  40201a:	687b      	ldr	r3, [r7, #4]
  40201c:	2203      	movs	r2, #3
  40201e:	751a      	strb	r2, [r3, #20]
        // Reset the head if reaching the size of the buffer
        if(buf->head >= buf->capacity) buf->head = 0;
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	689a      	ldr	r2, [r3, #8]
  402024:	687b      	ldr	r3, [r7, #4]
  402026:	691b      	ldr	r3, [r3, #16]
  402028:	429a      	cmp	r2, r3
  40202a:	d305      	bcc.n	402038 <circ_buf_flex_push+0x5c>
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	2200      	movs	r2, #0
  402030:	609a      	str	r2, [r3, #8]
  402032:	e001      	b.n	402038 <circ_buf_flex_push+0x5c>
    }
    else
    {
        result = CBF_BUFFER_FULL;
  402034:	2302      	movs	r3, #2
  402036:	73fb      	strb	r3, [r7, #15]
    }

    // If head is joining the tail, all the buffer has been filled.
    if(buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FILLING) buf->buffer_status = CBF_BUFFER_FULL;
  402038:	687b      	ldr	r3, [r7, #4]
  40203a:	689a      	ldr	r2, [r3, #8]
  40203c:	687b      	ldr	r3, [r7, #4]
  40203e:	68db      	ldr	r3, [r3, #12]
  402040:	429a      	cmp	r2, r3
  402042:	d106      	bne.n	402052 <circ_buf_flex_push+0x76>
  402044:	687b      	ldr	r3, [r7, #4]
  402046:	7d1b      	ldrb	r3, [r3, #20]
  402048:	2b03      	cmp	r3, #3
  40204a:	d102      	bne.n	402052 <circ_buf_flex_push+0x76>
  40204c:	687b      	ldr	r3, [r7, #4]
  40204e:	2202      	movs	r2, #2
  402050:	751a      	strb	r2, [r3, #20]

    return result;
  402052:	7bfb      	ldrb	r3, [r7, #15]
}
  402054:	4618      	mov	r0, r3
  402056:	3710      	adds	r7, #16
  402058:	46bd      	mov	sp, r7
  40205a:	bd80      	pop	{r7, pc}
  40205c:	00401fb9 	.word	0x00401fb9
  402060:	00403ea5 	.word	0x00403ea5

00402064 <circ_buf_flex_pop>:

uint8_t circ_buf_flex_pop(circ_buf_flex_t *buf, void* data)
{
  402064:	b580      	push	{r7, lr}
  402066:	b084      	sub	sp, #16
  402068:	af00      	add	r7, sp, #0
  40206a:	6078      	str	r0, [r7, #4]
  40206c:	6039      	str	r1, [r7, #0]
    uint8_t result = CBF_SUCCESS;
  40206e:	2300      	movs	r3, #0
  402070:	73fb      	strb	r3, [r7, #15]

    if (!circ_buf_flex_is_empty(buf))
  402072:	6878      	ldr	r0, [r7, #4]
  402074:	4b1b      	ldr	r3, [pc, #108]	; (4020e4 <circ_buf_flex_pop+0x80>)
  402076:	4798      	blx	r3
  402078:	4603      	mov	r3, r0
  40207a:	2b00      	cmp	r3, #0
  40207c:	d11e      	bne.n	4020bc <circ_buf_flex_pop+0x58>
    {
        memcpy(data, (buf->buffer)+(buf->tail++)*(buf->buffer_element_size), buf->buffer_element_size);
  40207e:	687b      	ldr	r3, [r7, #4]
  402080:	681a      	ldr	r2, [r3, #0]
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	68db      	ldr	r3, [r3, #12]
  402086:	1c58      	adds	r0, r3, #1
  402088:	6879      	ldr	r1, [r7, #4]
  40208a:	60c8      	str	r0, [r1, #12]
  40208c:	6879      	ldr	r1, [r7, #4]
  40208e:	8889      	ldrh	r1, [r1, #4]
  402090:	fb01 f303 	mul.w	r3, r1, r3
  402094:	18d1      	adds	r1, r2, r3
  402096:	687b      	ldr	r3, [r7, #4]
  402098:	889b      	ldrh	r3, [r3, #4]
  40209a:	461a      	mov	r2, r3
  40209c:	6838      	ldr	r0, [r7, #0]
  40209e:	4b12      	ldr	r3, [pc, #72]	; (4020e8 <circ_buf_flex_pop+0x84>)
  4020a0:	4798      	blx	r3
        //memcpy((uint8_t*)data, buf->buffer[buf->tail], buf->buffer_element_size);
        buf->buffer_status = CBF_BUFFER_FILLING;
  4020a2:	687b      	ldr	r3, [r7, #4]
  4020a4:	2203      	movs	r2, #3
  4020a6:	751a      	strb	r2, [r3, #20]
        
        // Reset the tail if reaching the size of the buffer
        if (buf->tail >= buf->capacity) buf->tail = 0;
  4020a8:	687b      	ldr	r3, [r7, #4]
  4020aa:	68da      	ldr	r2, [r3, #12]
  4020ac:	687b      	ldr	r3, [r7, #4]
  4020ae:	691b      	ldr	r3, [r3, #16]
  4020b0:	429a      	cmp	r2, r3
  4020b2:	d305      	bcc.n	4020c0 <circ_buf_flex_pop+0x5c>
  4020b4:	687b      	ldr	r3, [r7, #4]
  4020b6:	2200      	movs	r2, #0
  4020b8:	60da      	str	r2, [r3, #12]
  4020ba:	e001      	b.n	4020c0 <circ_buf_flex_pop+0x5c>
    }
    else
    {
        result = CBF_BUFFER_EMPTY;
  4020bc:	2301      	movs	r3, #1
  4020be:	73fb      	strb	r3, [r7, #15]
    }
    
    // If tail is joining the head, all the buffer has been read.
    if (buf->head == buf->tail && buf->buffer_status == CBF_BUFFER_FILLING) buf->buffer_status = CBF_BUFFER_EMPTY;
  4020c0:	687b      	ldr	r3, [r7, #4]
  4020c2:	689a      	ldr	r2, [r3, #8]
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	68db      	ldr	r3, [r3, #12]
  4020c8:	429a      	cmp	r2, r3
  4020ca:	d106      	bne.n	4020da <circ_buf_flex_pop+0x76>
  4020cc:	687b      	ldr	r3, [r7, #4]
  4020ce:	7d1b      	ldrb	r3, [r3, #20]
  4020d0:	2b03      	cmp	r3, #3
  4020d2:	d102      	bne.n	4020da <circ_buf_flex_pop+0x76>
  4020d4:	687b      	ldr	r3, [r7, #4]
  4020d6:	2201      	movs	r2, #1
  4020d8:	751a      	strb	r2, [r3, #20]

    return result;
  4020da:	7bfb      	ldrb	r3, [r7, #15]
}
  4020dc:	4618      	mov	r0, r3
  4020de:	3710      	adds	r7, #16
  4020e0:	46bd      	mov	sp, r7
  4020e2:	bd80      	pop	{r7, pc}
  4020e4:	00401f97 	.word	0x00401f97
  4020e8:	00403ea5 	.word	0x00403ea5

004020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4020ec:	b480      	push	{r7}
  4020ee:	b083      	sub	sp, #12
  4020f0:	af00      	add	r7, sp, #0
  4020f2:	4603      	mov	r3, r0
  4020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	db0b      	blt.n	402116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4020fe:	4909      	ldr	r1, [pc, #36]	; (402124 <__NVIC_EnableIRQ+0x38>)
  402100:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402104:	095b      	lsrs	r3, r3, #5
  402106:	79fa      	ldrb	r2, [r7, #7]
  402108:	f002 021f 	and.w	r2, r2, #31
  40210c:	2001      	movs	r0, #1
  40210e:	fa00 f202 	lsl.w	r2, r0, r2
  402112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  402116:	bf00      	nop
  402118:	370c      	adds	r7, #12
  40211a:	46bd      	mov	sp, r7
  40211c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402120:	4770      	bx	lr
  402122:	bf00      	nop
  402124:	e000e100 	.word	0xe000e100

00402128 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402128:	b480      	push	{r7}
  40212a:	b083      	sub	sp, #12
  40212c:	af00      	add	r7, sp, #0
  40212e:	4603      	mov	r3, r0
  402130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402132:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402136:	2b00      	cmp	r3, #0
  402138:	db0c      	blt.n	402154 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40213a:	4909      	ldr	r1, [pc, #36]	; (402160 <__NVIC_ClearPendingIRQ+0x38>)
  40213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402140:	095b      	lsrs	r3, r3, #5
  402142:	79fa      	ldrb	r2, [r7, #7]
  402144:	f002 021f 	and.w	r2, r2, #31
  402148:	2001      	movs	r0, #1
  40214a:	fa00 f202 	lsl.w	r2, r0, r2
  40214e:	3360      	adds	r3, #96	; 0x60
  402150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  402154:	bf00      	nop
  402156:	370c      	adds	r7, #12
  402158:	46bd      	mov	sp, r7
  40215a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40215e:	4770      	bx	lr
  402160:	e000e100 	.word	0xe000e100

00402164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  402164:	b480      	push	{r7}
  402166:	b083      	sub	sp, #12
  402168:	af00      	add	r7, sp, #0
  40216a:	4603      	mov	r3, r0
  40216c:	6039      	str	r1, [r7, #0]
  40216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  402170:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402174:	2b00      	cmp	r3, #0
  402176:	db0a      	blt.n	40218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  402178:	490d      	ldr	r1, [pc, #52]	; (4021b0 <__NVIC_SetPriority+0x4c>)
  40217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40217e:	683a      	ldr	r2, [r7, #0]
  402180:	b2d2      	uxtb	r2, r2
  402182:	0152      	lsls	r2, r2, #5
  402184:	b2d2      	uxtb	r2, r2
  402186:	440b      	add	r3, r1
  402188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  40218c:	e00a      	b.n	4021a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40218e:	4909      	ldr	r1, [pc, #36]	; (4021b4 <__NVIC_SetPriority+0x50>)
  402190:	79fb      	ldrb	r3, [r7, #7]
  402192:	f003 030f 	and.w	r3, r3, #15
  402196:	3b04      	subs	r3, #4
  402198:	683a      	ldr	r2, [r7, #0]
  40219a:	b2d2      	uxtb	r2, r2
  40219c:	0152      	lsls	r2, r2, #5
  40219e:	b2d2      	uxtb	r2, r2
  4021a0:	440b      	add	r3, r1
  4021a2:	761a      	strb	r2, [r3, #24]
}
  4021a4:	bf00      	nop
  4021a6:	370c      	adds	r7, #12
  4021a8:	46bd      	mov	sp, r7
  4021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021ae:	4770      	bx	lr
  4021b0:	e000e100 	.word	0xe000e100
  4021b4:	e000ed00 	.word	0xe000ed00

004021b8 <mcan_get_config_defaults>:
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void mcan_get_config_defaults(
		struct mcan_config *const config)
{
  4021b8:	b480      	push	{r7}
  4021ba:	b083      	sub	sp, #12
  4021bc:	af00      	add	r7, sp, #0
  4021be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->run_in_standby = false;
  4021c0:	687b      	ldr	r3, [r7, #4]
  4021c2:	2200      	movs	r2, #0
  4021c4:	701a      	strb	r2, [r3, #0]
	config->watchdog_configuration = 0x00;
  4021c6:	687b      	ldr	r3, [r7, #4]
  4021c8:	2200      	movs	r2, #0
  4021ca:	705a      	strb	r2, [r3, #1]
	config->transmit_pause = true;
  4021cc:	687b      	ldr	r3, [r7, #4]
  4021ce:	2201      	movs	r2, #1
  4021d0:	709a      	strb	r2, [r3, #2]
	config->edge_filtering = true;
  4021d2:	687b      	ldr	r3, [r7, #4]
  4021d4:	2201      	movs	r2, #1
  4021d6:	70da      	strb	r2, [r3, #3]
	config->protocol_exception_handling = true;
  4021d8:	687b      	ldr	r3, [r7, #4]
  4021da:	2201      	movs	r2, #1
  4021dc:	711a      	strb	r2, [r3, #4]
	config->automatic_retransmission = true;
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	2201      	movs	r2, #1
  4021e2:	715a      	strb	r2, [r3, #5]
	config->clock_stop_request = false;
  4021e4:	687b      	ldr	r3, [r7, #4]
  4021e6:	2200      	movs	r2, #0
  4021e8:	719a      	strb	r2, [r3, #6]
	config->clock_stop_acknowledge = false;
  4021ea:	687b      	ldr	r3, [r7, #4]
  4021ec:	2200      	movs	r2, #0
  4021ee:	71da      	strb	r2, [r3, #7]
	config->timestamp_prescaler = 0;
  4021f0:	687b      	ldr	r3, [r7, #4]
  4021f2:	2200      	movs	r2, #0
  4021f4:	721a      	strb	r2, [r3, #8]
	config->timeout_period = 0xFFFF;
  4021f6:	687b      	ldr	r3, [r7, #4]
  4021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4021fc:	815a      	strh	r2, [r3, #10]
	config->timeout_mode = MCAN_TIMEOUT_CONTINUES;
  4021fe:	687b      	ldr	r3, [r7, #4]
  402200:	2200      	movs	r2, #0
  402202:	731a      	strb	r2, [r3, #12]
	config->timeout_enable = false;
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	2200      	movs	r2, #0
  402208:	735a      	strb	r2, [r3, #13]
	config->tdc_enable = false;
  40220a:	687b      	ldr	r3, [r7, #4]
  40220c:	2200      	movs	r2, #0
  40220e:	739a      	strb	r2, [r3, #14]
	config->delay_compensation_offset = 0;
  402210:	687b      	ldr	r3, [r7, #4]
  402212:	2200      	movs	r2, #0
  402214:	73da      	strb	r2, [r3, #15]
#if (SAMV71B || SAME70B || SAMV70B)
	config->delay_compensation_filter_window_length = 0;
#endif
	config->nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_FIFO_0;
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	2200      	movs	r2, #0
  40221a:	741a      	strb	r2, [r3, #16]
	config->nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  40221c:	687b      	ldr	r3, [r7, #4]
  40221e:	2202      	movs	r2, #2
  402220:	745a      	strb	r2, [r3, #17]
	config->remote_frames_standard_reject = false;
  402222:	687b      	ldr	r3, [r7, #4]
  402224:	2200      	movs	r2, #0
  402226:	749a      	strb	r2, [r3, #18]
	config->remote_frames_extended_reject = true;
  402228:	687b      	ldr	r3, [r7, #4]
  40222a:	2201      	movs	r2, #1
  40222c:	74da      	strb	r2, [r3, #19]
	config->extended_id_mask = 0x1FFFFFFF;
  40222e:	687b      	ldr	r3, [r7, #4]
  402230:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
  402234:	615a      	str	r2, [r3, #20]
	config->rx_fifo_0_overwrite = true;
  402236:	687b      	ldr	r3, [r7, #4]
  402238:	2201      	movs	r2, #1
  40223a:	761a      	strb	r2, [r3, #24]
	config->rx_fifo_0_watermark = 0;
  40223c:	687b      	ldr	r3, [r7, #4]
  40223e:	2200      	movs	r2, #0
  402240:	765a      	strb	r2, [r3, #25]
	config->rx_fifo_1_overwrite = true;
  402242:	687b      	ldr	r3, [r7, #4]
  402244:	2201      	movs	r2, #1
  402246:	769a      	strb	r2, [r3, #26]
	config->rx_fifo_1_watermark = 0;
  402248:	687b      	ldr	r3, [r7, #4]
  40224a:	2200      	movs	r2, #0
  40224c:	76da      	strb	r2, [r3, #27]
	config->tx_queue_mode = false;
  40224e:	687b      	ldr	r3, [r7, #4]
  402250:	2200      	movs	r2, #0
  402252:	771a      	strb	r2, [r3, #28]
	config->tx_event_fifo_watermark = 0;
  402254:	687b      	ldr	r3, [r7, #4]
  402256:	2200      	movs	r2, #0
  402258:	775a      	strb	r2, [r3, #29]
}
  40225a:	bf00      	nop
  40225c:	370c      	adds	r7, #12
  40225e:	46bd      	mov	sp, r7
  402260:	f85d 7b04 	ldr.w	r7, [sp], #4
  402264:	4770      	bx	lr

00402266 <mcan_rx_get_buffer_status>:
 *  \retval true Rx Buffer updated from new message.
 *  \retval false Rx Buffer not updated.
 */
static inline bool mcan_rx_get_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  402266:	b480      	push	{r7}
  402268:	b083      	sub	sp, #12
  40226a:	af00      	add	r7, sp, #0
  40226c:	6078      	str	r0, [r7, #4]
  40226e:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  402270:	683b      	ldr	r3, [r7, #0]
  402272:	2b1f      	cmp	r3, #31
  402274:	d80e      	bhi.n	402294 <mcan_rx_get_buffer_status+0x2e>
		if (module_inst->hw->MCAN_NDAT1 & (1 << index)) {
  402276:	687b      	ldr	r3, [r7, #4]
  402278:	681b      	ldr	r3, [r3, #0]
  40227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  40227e:	2101      	movs	r1, #1
  402280:	683a      	ldr	r2, [r7, #0]
  402282:	fa01 f202 	lsl.w	r2, r1, r2
  402286:	4013      	ands	r3, r2
  402288:	2b00      	cmp	r3, #0
  40228a:	d001      	beq.n	402290 <mcan_rx_get_buffer_status+0x2a>
			return true;
  40228c:	2301      	movs	r3, #1
  40228e:	e012      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  402290:	2300      	movs	r3, #0
  402292:	e010      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		}
	} else {
		index -= 32;
  402294:	683b      	ldr	r3, [r7, #0]
  402296:	3b20      	subs	r3, #32
  402298:	603b      	str	r3, [r7, #0]
		if (module_inst->hw->MCAN_NDAT2 & (1 << index)) {
  40229a:	687b      	ldr	r3, [r7, #4]
  40229c:	681b      	ldr	r3, [r3, #0]
  40229e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  4022a2:	2101      	movs	r1, #1
  4022a4:	683a      	ldr	r2, [r7, #0]
  4022a6:	fa01 f202 	lsl.w	r2, r1, r2
  4022aa:	4013      	ands	r3, r2
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	d001      	beq.n	4022b4 <mcan_rx_get_buffer_status+0x4e>
			return true;
  4022b0:	2301      	movs	r3, #1
  4022b2:	e000      	b.n	4022b6 <mcan_rx_get_buffer_status+0x50>
		} else {
			return false;
  4022b4:	2300      	movs	r3, #0
		}
	}
}
  4022b6:	4618      	mov	r0, r3
  4022b8:	370c      	adds	r7, #12
  4022ba:	46bd      	mov	sp, r7
  4022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022c0:	4770      	bx	lr

004022c2 <mcan_rx_clear_buffer_status>:
 * \param[in] index  Index offset in Rx buffer
 *
 */
static inline void mcan_rx_clear_buffer_status(
		struct mcan_module *const module_inst, uint32_t index)
{
  4022c2:	b480      	push	{r7}
  4022c4:	b083      	sub	sp, #12
  4022c6:	af00      	add	r7, sp, #0
  4022c8:	6078      	str	r0, [r7, #4]
  4022ca:	6039      	str	r1, [r7, #0]
	if (index < 32) {
  4022cc:	683b      	ldr	r3, [r7, #0]
  4022ce:	2b1f      	cmp	r3, #31
  4022d0:	d808      	bhi.n	4022e4 <mcan_rx_clear_buffer_status+0x22>
		module_inst->hw->MCAN_NDAT1 = (1 << index);
  4022d2:	687b      	ldr	r3, [r7, #4]
  4022d4:	681b      	ldr	r3, [r3, #0]
  4022d6:	2101      	movs	r1, #1
  4022d8:	683a      	ldr	r2, [r7, #0]
  4022da:	fa01 f202 	lsl.w	r2, r1, r2
  4022de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	} else {
		index -= 32;
		module_inst->hw->MCAN_NDAT2 = (1 << index);
	}
}
  4022e2:	e00a      	b.n	4022fa <mcan_rx_clear_buffer_status+0x38>
		index -= 32;
  4022e4:	683b      	ldr	r3, [r7, #0]
  4022e6:	3b20      	subs	r3, #32
  4022e8:	603b      	str	r3, [r7, #0]
		module_inst->hw->MCAN_NDAT2 = (1 << index);
  4022ea:	687b      	ldr	r3, [r7, #4]
  4022ec:	681b      	ldr	r3, [r3, #0]
  4022ee:	2101      	movs	r1, #1
  4022f0:	683a      	ldr	r2, [r7, #0]
  4022f2:	fa01 f202 	lsl.w	r2, r1, r2
  4022f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
  4022fa:	bf00      	nop
  4022fc:	370c      	adds	r7, #12
  4022fe:	46bd      	mov	sp, r7
  402300:	f85d 7b04 	ldr.w	r7, [sp], #4
  402304:	4770      	bx	lr

00402306 <mcan_rx_fifo_acknowledge>:
 * \param[in] fifo_number  Rx FIFO 0 or 1
 * \param[in] index  Index offset in FIFO
 */
static inline void mcan_rx_fifo_acknowledge(
		struct mcan_module *const module_inst, bool fifo_number, uint32_t index)
{
  402306:	b480      	push	{r7}
  402308:	b085      	sub	sp, #20
  40230a:	af00      	add	r7, sp, #0
  40230c:	60f8      	str	r0, [r7, #12]
  40230e:	460b      	mov	r3, r1
  402310:	607a      	str	r2, [r7, #4]
  402312:	72fb      	strb	r3, [r7, #11]
	if (!fifo_number) {
  402314:	7afb      	ldrb	r3, [r7, #11]
  402316:	f083 0301 	eor.w	r3, r3, #1
  40231a:	b2db      	uxtb	r3, r3
  40231c:	2b00      	cmp	r3, #0
  40231e:	d007      	beq.n	402330 <mcan_rx_fifo_acknowledge+0x2a>
		module_inst->hw->MCAN_RXF0A = MCAN_RXF0A_F0AI(index);
  402320:	68fb      	ldr	r3, [r7, #12]
  402322:	681b      	ldr	r3, [r3, #0]
  402324:	687a      	ldr	r2, [r7, #4]
  402326:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40232a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	} else {
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
	}
}
  40232e:	e006      	b.n	40233e <mcan_rx_fifo_acknowledge+0x38>
		module_inst->hw->MCAN_RXF1A = MCAN_RXF1A_F1AI(index);
  402330:	68fb      	ldr	r3, [r7, #12]
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	687a      	ldr	r2, [r7, #4]
  402336:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40233a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
  40233e:	bf00      	nop
  402340:	3714      	adds	r7, #20
  402342:	46bd      	mov	sp, r7
  402344:	f85d 7b04 	ldr.w	r7, [sp], #4
  402348:	4770      	bx	lr
	...

0040234c <mcan_get_standard_message_filter_element_default>:
 *
 * \param[out] sd_filter  Pointer to standard filter element struct to initialize to default values
 */
static inline void mcan_get_standard_message_filter_element_default(
		struct mcan_standard_message_filter_element *sd_filter)
{
  40234c:	b480      	push	{r7}
  40234e:	b083      	sub	sp, #12
  402350:	af00      	add	r7, sp, #0
  402352:	6078      	str	r0, [r7, #4]
	sd_filter->S0.reg = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
  402354:	687b      	ldr	r3, [r7, #4]
  402356:	4a04      	ldr	r2, [pc, #16]	; (402368 <mcan_get_standard_message_filter_element_default+0x1c>)
  402358:	601a      	str	r2, [r3, #0]
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID1(0) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC(
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val) |
			MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFT_CLASSIC;
}
  40235a:	bf00      	nop
  40235c:	370c      	adds	r7, #12
  40235e:	46bd      	mov	sp, r7
  402360:	f85d 7b04 	ldr.w	r7, [sp], #4
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	880007ff 	.word	0x880007ff

0040236c <mcan_get_extended_message_filter_element_default>:
 *
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void mcan_get_extended_message_filter_element_default(
		struct mcan_extended_message_filter_element *et_filter)
{
  40236c:	b480      	push	{r7}
  40236e:	b083      	sub	sp, #12
  402370:	af00      	add	r7, sp, #0
  402372:	6078      	str	r0, [r7, #4]
	et_filter->F0.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
  402374:	687b      	ldr	r3, [r7, #4]
  402376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40237a:	601a      	str	r2, [r3, #0]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
  40237c:	687b      	ldr	r3, [r7, #4]
  40237e:	f06f 42c0 	mvn.w	r2, #1610612736	; 0x60000000
  402382:	605a      	str	r2, [r3, #4]
			MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFT_CLASSIC;
}
  402384:	bf00      	nop
  402386:	370c      	adds	r7, #12
  402388:	46bd      	mov	sp, r7
  40238a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40238e:	4770      	bx	lr

00402390 <mcan_tx_transfer_request>:
 *  \retval STATUS_OK   Set the transfer request.
 *  \retval STATUS_ERR_BUSY The module is in configuration.
 */
static inline enum status_code mcan_tx_transfer_request(
		struct mcan_module *const module_inst, uint32_t trig_mask)
{
  402390:	b480      	push	{r7}
  402392:	b083      	sub	sp, #12
  402394:	af00      	add	r7, sp, #0
  402396:	6078      	str	r0, [r7, #4]
  402398:	6039      	str	r1, [r7, #0]
	if (module_inst->hw->MCAN_CCCR & MCAN_CCCR_CCE) {
  40239a:	687b      	ldr	r3, [r7, #4]
  40239c:	681b      	ldr	r3, [r3, #0]
  40239e:	699b      	ldr	r3, [r3, #24]
  4023a0:	f003 0302 	and.w	r3, r3, #2
  4023a4:	2b00      	cmp	r3, #0
  4023a6:	d002      	beq.n	4023ae <mcan_tx_transfer_request+0x1e>
		return ERR_BUSY;
  4023a8:	f06f 0309 	mvn.w	r3, #9
  4023ac:	e005      	b.n	4023ba <mcan_tx_transfer_request+0x2a>
	}
	module_inst->hw->MCAN_TXBAR = trig_mask;
  4023ae:	687b      	ldr	r3, [r7, #4]
  4023b0:	681b      	ldr	r3, [r3, #0]
  4023b2:	683a      	ldr	r2, [r7, #0]
  4023b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return STATUS_OK;
  4023b8:	2300      	movs	r3, #0
}
  4023ba:	4618      	mov	r0, r3
  4023bc:	370c      	adds	r7, #12
  4023be:	46bd      	mov	sp, r7
  4023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023c4:	4770      	bx	lr

004023c6 <mcan_tx_get_event_fifo_status>:
 *
 * \return Tx event FIFO status value.
 */
static inline uint32_t mcan_tx_get_event_fifo_status(
		struct mcan_module *const module_inst)
{
  4023c6:	b480      	push	{r7}
  4023c8:	b083      	sub	sp, #12
  4023ca:	af00      	add	r7, sp, #0
  4023cc:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_TXEFS;
  4023ce:	687b      	ldr	r3, [r7, #4]
  4023d0:	681b      	ldr	r3, [r3, #0]
  4023d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
}
  4023d6:	4618      	mov	r0, r3
  4023d8:	370c      	adds	r7, #12
  4023da:	46bd      	mov	sp, r7
  4023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023e0:	4770      	bx	lr

004023e2 <mcan_tx_event_fifo_acknowledge>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] index  Index for the transfer FIFO
 */
static inline void mcan_tx_event_fifo_acknowledge(
		struct mcan_module *const module_inst, uint32_t index)
{
  4023e2:	b480      	push	{r7}
  4023e4:	b083      	sub	sp, #12
  4023e6:	af00      	add	r7, sp, #0
  4023e8:	6078      	str	r0, [r7, #4]
  4023ea:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_TXEFA = MCAN_TXEFA_EFAI(index);
  4023ec:	687b      	ldr	r3, [r7, #4]
  4023ee:	681b      	ldr	r3, [r3, #0]
  4023f0:	683a      	ldr	r2, [r7, #0]
  4023f2:	f002 021f 	and.w	r2, r2, #31
  4023f6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
}
  4023fa:	bf00      	nop
  4023fc:	370c      	adds	r7, #12
  4023fe:	46bd      	mov	sp, r7
  402400:	f85d 7b04 	ldr.w	r7, [sp], #4
  402404:	4770      	bx	lr

00402406 <mcan_get_tx_buffer_element_defaults>:
 *
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void mcan_get_tx_buffer_element_defaults(
		struct mcan_tx_element *tx_element)
{
  402406:	b480      	push	{r7}
  402408:	b083      	sub	sp, #12
  40240a:	af00      	add	r7, sp, #0
  40240c:	6078      	str	r0, [r7, #4]
	tx_element->T0.reg = 0;
  40240e:	687b      	ldr	r3, [r7, #4]
  402410:	2200      	movs	r2, #0
  402412:	601a      	str	r2, [r3, #0]
	tx_element->T1.reg = MCAN_TX_ELEMENT_T1_EFC |
  402414:	687b      	ldr	r3, [r7, #4]
  402416:	f44f 0208 	mov.w	r2, #8912896	; 0x880000
  40241a:	605a      	str	r2, [r3, #4]
			MCAN_TX_ELEMENT_T1_DLC(MCAN_TX_ELEMENT_T1_DLC_DATA8_Val);
}
  40241c:	bf00      	nop
  40241e:	370c      	adds	r7, #12
  402420:	46bd      	mov	sp, r7
  402422:	f85d 7b04 	ldr.w	r7, [sp], #4
  402426:	4770      	bx	lr

00402428 <mcan_enable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_enable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  402428:	b480      	push	{r7}
  40242a:	b083      	sub	sp, #12
  40242c:	af00      	add	r7, sp, #0
  40242e:	6078      	str	r0, [r7, #4]
  402430:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE |= source;
  402432:	687b      	ldr	r3, [r7, #4]
  402434:	681b      	ldr	r3, [r3, #0]
  402436:	687a      	ldr	r2, [r7, #4]
  402438:	6812      	ldr	r2, [r2, #0]
  40243a:	6d51      	ldr	r1, [r2, #84]	; 0x54
  40243c:	683a      	ldr	r2, [r7, #0]
  40243e:	430a      	orrs	r2, r1
  402440:	655a      	str	r2, [r3, #84]	; 0x54
}
  402442:	bf00      	nop
  402444:	370c      	adds	r7, #12
  402446:	46bd      	mov	sp, r7
  402448:	f85d 7b04 	ldr.w	r7, [sp], #4
  40244c:	4770      	bx	lr

0040244e <mcan_disable_interrupt>:
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 * \param[in] source  Interrupt source type
 */
static inline void mcan_disable_interrupt(struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  40244e:	b480      	push	{r7}
  402450:	b083      	sub	sp, #12
  402452:	af00      	add	r7, sp, #0
  402454:	6078      	str	r0, [r7, #4]
  402456:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IE &= ~source;
  402458:	687b      	ldr	r3, [r7, #4]
  40245a:	681b      	ldr	r3, [r3, #0]
  40245c:	687a      	ldr	r2, [r7, #4]
  40245e:	6812      	ldr	r2, [r2, #0]
  402460:	6d51      	ldr	r1, [r2, #84]	; 0x54
  402462:	683a      	ldr	r2, [r7, #0]
  402464:	43d2      	mvns	r2, r2
  402466:	400a      	ands	r2, r1
  402468:	655a      	str	r2, [r3, #84]	; 0x54
}
  40246a:	bf00      	nop
  40246c:	370c      	adds	r7, #12
  40246e:	46bd      	mov	sp, r7
  402470:	f85d 7b04 	ldr.w	r7, [sp], #4
  402474:	4770      	bx	lr

00402476 <mcan_read_interrupt_status>:
 *
 * \param[in] module_inst  Pointer to the MCAN software instance struct
 */
static inline uint32_t mcan_read_interrupt_status(
		struct mcan_module *const module_inst)
{
  402476:	b480      	push	{r7}
  402478:	b083      	sub	sp, #12
  40247a:	af00      	add	r7, sp, #0
  40247c:	6078      	str	r0, [r7, #4]
	return module_inst->hw->MCAN_IR;
  40247e:	687b      	ldr	r3, [r7, #4]
  402480:	681b      	ldr	r3, [r3, #0]
  402482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
  402484:	4618      	mov	r0, r3
  402486:	370c      	adds	r7, #12
  402488:	46bd      	mov	sp, r7
  40248a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248e:	4770      	bx	lr

00402490 <mcan_clear_interrupt_status>:
 * \return Bit mask of interrupt status value.
 */
static inline void mcan_clear_interrupt_status(
		struct mcan_module *const module_inst,
		const enum mcan_interrupt_source source)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	6039      	str	r1, [r7, #0]
	module_inst->hw->MCAN_IR = source;
  40249a:	687b      	ldr	r3, [r7, #4]
  40249c:	681b      	ldr	r3, [r3, #0]
  40249e:	683a      	ldr	r2, [r7, #0]
  4024a0:	651a      	str	r2, [r3, #80]	; 0x50
}
  4024a2:	bf00      	nop
  4024a4:	370c      	adds	r7, #12
  4024a6:	46bd      	mov	sp, r7
  4024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ac:	4770      	bx	lr
	...

004024b0 <_mcan_configure_rx_fifo_to_accept_all>:
#include "same70_can_driver.h"

uint8_t has_UPLL_been_set = 0;

void _mcan_configure_rx_fifo_to_accept_all(struct mcan_module* mcan_mod)
{
  4024b0:	b580      	push	{r7, lr}
  4024b2:	b086      	sub	sp, #24
  4024b4:	af00      	add	r7, sp, #0
  4024b6:	6078      	str	r0, [r7, #4]
	 *  Setup rx filtering to accept messages into FIFO1 with extended format
	 *  this accepts all messages
	 */
	struct mcan_extended_message_filter_element et_filter;

	mcan_get_extended_message_filter_element_default(&et_filter);
  4024b8:	f107 0310 	add.w	r3, r7, #16
  4024bc:	4618      	mov	r0, r3
  4024be:	4b1e      	ldr	r3, [pc, #120]	; (402538 <_mcan_configure_rx_fifo_to_accept_all+0x88>)
  4024c0:	4798      	blx	r3
	et_filter.F0.bit.EFID1 = 0;//id
  4024c2:	693b      	ldr	r3, [r7, #16]
  4024c4:	f36f 031c 	bfc	r3, #0, #29
  4024c8:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFID2 = 0;//mask
  4024ca:	697b      	ldr	r3, [r7, #20]
  4024cc:	f36f 031c 	bfc	r3, #0, #29
  4024d0:	617b      	str	r3, [r7, #20]

	et_filter.F0.bit.EFEC = MCAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val;//Put in fifo1
  4024d2:	693b      	ldr	r3, [r7, #16]
  4024d4:	2202      	movs	r2, #2
  4024d6:	f362 735f 	bfi	r3, r2, #29, #3
  4024da:	613b      	str	r3, [r7, #16]
	et_filter.F1.bit.EFT = 2;//classic filter
  4024dc:	697b      	ldr	r3, [r7, #20]
  4024de:	2202      	movs	r2, #2
  4024e0:	f362 739f 	bfi	r3, r2, #30, #2
  4024e4:	617b      	str	r3, [r7, #20]

	mcan_set_rx_extended_filter(mcan_mod, &et_filter, 0);
  4024e6:	f107 0310 	add.w	r3, r7, #16
  4024ea:	2200      	movs	r2, #0
  4024ec:	4619      	mov	r1, r3
  4024ee:	6878      	ldr	r0, [r7, #4]
  4024f0:	4b12      	ldr	r3, [pc, #72]	; (40253c <_mcan_configure_rx_fifo_to_accept_all+0x8c>)
  4024f2:	4798      	blx	r3
	/*  
	 *  Setup rx filtering to accept messages into FIFO0 with standard format
	 *  this accepts all messages
	 */
	struct mcan_standard_message_filter_element sd_filter;
	mcan_get_standard_message_filter_element_default(&sd_filter);
  4024f4:	f107 030c 	add.w	r3, r7, #12
  4024f8:	4618      	mov	r0, r3
  4024fa:	4b11      	ldr	r3, [pc, #68]	; (402540 <_mcan_configure_rx_fifo_to_accept_all+0x90>)
  4024fc:	4798      	blx	r3
	sd_filter.S0.bit.SFID1 = 0;//ID
  4024fe:	68fb      	ldr	r3, [r7, #12]
  402500:	f36f 431a 	bfc	r3, #16, #11
  402504:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFID2 = 0;//Mask
  402506:	68fb      	ldr	r3, [r7, #12]
  402508:	f36f 030a 	bfc	r3, #0, #11
  40250c:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFEC = MCAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFEC_STF0M_Val;//Put in fifo0
  40250e:	68fb      	ldr	r3, [r7, #12]
  402510:	2201      	movs	r2, #1
  402512:	f362 63dd 	bfi	r3, r2, #27, #3
  402516:	60fb      	str	r3, [r7, #12]
	sd_filter.S0.bit.SFT = 2;//classic filter
  402518:	68fb      	ldr	r3, [r7, #12]
  40251a:	2202      	movs	r2, #2
  40251c:	f362 739f 	bfi	r3, r2, #30, #2
  402520:	60fb      	str	r3, [r7, #12]
	mcan_set_rx_standard_filter(mcan_mod, &sd_filter, 0);
  402522:	f107 030c 	add.w	r3, r7, #12
  402526:	2200      	movs	r2, #0
  402528:	4619      	mov	r1, r3
  40252a:	6878      	ldr	r0, [r7, #4]
  40252c:	4b05      	ldr	r3, [pc, #20]	; (402544 <_mcan_configure_rx_fifo_to_accept_all+0x94>)
  40252e:	4798      	blx	r3
}
  402530:	bf00      	nop
  402532:	3718      	adds	r7, #24
  402534:	46bd      	mov	sp, r7
  402536:	bd80      	pop	{r7, pc}
  402538:	0040236d 	.word	0x0040236d
  40253c:	00400e9d 	.word	0x00400e9d
  402540:	0040234d 	.word	0x0040234d
  402544:	00400e3d 	.word	0x00400e3d

00402548 <mcan0_configure>:

void mcan0_configure(uint32_t rx_buffer_size, uint32_t tx_buffer_size)
{	/**/
  402548:	b580      	push	{r7, lr}
  40254a:	b08a      	sub	sp, #40	; 0x28
  40254c:	af00      	add	r7, sp, #0
  40254e:	6078      	str	r0, [r7, #4]
  402550:	6039      	str	r1, [r7, #0]
	mcan0_standard_receive_index = 0;
  402552:	4b35      	ldr	r3, [pc, #212]	; (402628 <mcan0_configure+0xe0>)
  402554:	2200      	movs	r2, #0
  402556:	601a      	str	r2, [r3, #0]
	mcan0_extended_receive_index = 0;
  402558:	4b34      	ldr	r3, [pc, #208]	; (40262c <mcan0_configure+0xe4>)
  40255a:	2200      	movs	r2, #0
  40255c:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_rx, rx_buffer_size, sizeof(mcan_timestamped_rx_message_t));
  40255e:	2220      	movs	r2, #32
  402560:	6879      	ldr	r1, [r7, #4]
  402562:	4833      	ldr	r0, [pc, #204]	; (402630 <mcan0_configure+0xe8>)
  402564:	4b33      	ldr	r3, [pc, #204]	; (402634 <mcan0_configure+0xec>)
  402566:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan0_buffer.buffer_tx, tx_buffer_size, sizeof(mcan_tx_message_t));
  402568:	2214      	movs	r2, #20
  40256a:	6839      	ldr	r1, [r7, #0]
  40256c:	4832      	ldr	r0, [pc, #200]	; (402638 <mcan0_configure+0xf0>)
  40256e:	4b31      	ldr	r3, [pc, #196]	; (402634 <mcan0_configure+0xec>)
  402570:	4798      	blx	r3
	
	mcan0_buffer.adding_in_tx_buffer = false;
  402572:	4b2f      	ldr	r3, [pc, #188]	; (402630 <mcan0_configure+0xe8>)
  402574:	2200      	movs	r2, #0
  402576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  40257a:	4b2d      	ldr	r3, [pc, #180]	; (402630 <mcan0_configure+0xe8>)
  40257c:	2200      	movs	r2, #0
  40257e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan0_buffer.buffer_being_emptied_by_interruption = false;
  402582:	4b2b      	ldr	r3, [pc, #172]	; (402630 <mcan0_configure+0xe8>)
  402584:	2200      	movs	r2, #0
  402586:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  40258a:	f107 0308 	add.w	r3, r7, #8
  40258e:	4618      	mov	r0, r3
  402590:	4b2a      	ldr	r3, [pc, #168]	; (40263c <mcan0_configure+0xf4>)
  402592:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  402594:	2302      	movs	r3, #2
  402596:	763b      	strb	r3, [r7, #24]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  402598:	2302      	movs	r3, #2
  40259a:	767b      	strb	r3, [r7, #25]

	mcan_init(&mcan0_instance, MCAN0, &config_mcan);
  40259c:	f107 0308 	add.w	r3, r7, #8
  4025a0:	461a      	mov	r2, r3
  4025a2:	4927      	ldr	r1, [pc, #156]	; (402640 <mcan0_configure+0xf8>)
  4025a4:	4827      	ldr	r0, [pc, #156]	; (402644 <mcan0_configure+0xfc>)
  4025a6:	4b28      	ldr	r3, [pc, #160]	; (402648 <mcan0_configure+0x100>)
  4025a8:	4798      	blx	r3
	
	if(!has_UPLL_been_set)
  4025aa:	4b28      	ldr	r3, [pc, #160]	; (40264c <mcan0_configure+0x104>)
  4025ac:	781b      	ldrb	r3, [r3, #0]
  4025ae:	2b00      	cmp	r3, #0
  4025b0:	d10e      	bne.n	4025d0 <mcan0_configure+0x88>
	{
		//Enabling the upll clock 
		//NEED TO HAVE THE RIGHT conf_mcan.h !
		pmc_enable_upll_clock();
  4025b2:	4b27      	ldr	r3, [pc, #156]	; (402650 <mcan0_configure+0x108>)
  4025b4:	4798      	blx	r3
		// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
		//It is recomendedd in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
		pmc_disable_pck(PMC_PCK_5);
  4025b6:	2005      	movs	r0, #5
  4025b8:	4b26      	ldr	r3, [pc, #152]	; (402654 <mcan0_configure+0x10c>)
  4025ba:	4798      	blx	r3
		//deviding uppl by 6 to get a 80 Mhz signal which is again devided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
		pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  4025bc:	2150      	movs	r1, #80	; 0x50
  4025be:	2005      	movs	r0, #5
  4025c0:	4b25      	ldr	r3, [pc, #148]	; (402658 <mcan0_configure+0x110>)
  4025c2:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_5);
  4025c4:	2005      	movs	r0, #5
  4025c6:	4b25      	ldr	r3, [pc, #148]	; (40265c <mcan0_configure+0x114>)
  4025c8:	4798      	blx	r3

		has_UPLL_been_set = 1;
  4025ca:	4b20      	ldr	r3, [pc, #128]	; (40264c <mcan0_configure+0x104>)
  4025cc:	2201      	movs	r2, #1
  4025ce:	701a      	strb	r2, [r3, #0]
	}

	//chosing what interruption to activate
	mcan_enable_interrupt(&mcan0_instance,
  4025d0:	4923      	ldr	r1, [pc, #140]	; (402660 <mcan0_configure+0x118>)
  4025d2:	481c      	ldr	r0, [pc, #112]	; (402644 <mcan0_configure+0xfc>)
  4025d4:	4b23      	ldr	r3, [pc, #140]	; (402664 <mcan0_configure+0x11c>)
  4025d6:	4798      	blx	r3
		MCAN_TX_CANCELLATION_FINISH | MCAN_TX_FIFO_EMPTY |
		MCAN_TX_EVENT_FIFO_NEW_ENTRY |
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	mcan_disable_interrupt(&mcan0_instance, MCAN_TIMESTAMP_WRAPAROUND);
  4025d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4025dc:	4819      	ldr	r0, [pc, #100]	; (402644 <mcan0_configure+0xfc>)
  4025de:	4b22      	ldr	r3, [pc, #136]	; (402668 <mcan0_configure+0x120>)
  4025e0:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan0_instance.hw->MCAN_ILS = 0x0000FF00ul;
  4025e2:	4b18      	ldr	r3, [pc, #96]	; (402644 <mcan0_configure+0xfc>)
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  4025ea:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	
	irq_register_handler(MCAN0_INT0_IRQn, 1);
  4025ec:	2023      	movs	r0, #35	; 0x23
  4025ee:	4b1f      	ldr	r3, [pc, #124]	; (40266c <mcan0_configure+0x124>)
  4025f0:	4798      	blx	r3
  4025f2:	2101      	movs	r1, #1
  4025f4:	2023      	movs	r0, #35	; 0x23
  4025f6:	4b1e      	ldr	r3, [pc, #120]	; (402670 <mcan0_configure+0x128>)
  4025f8:	4798      	blx	r3
  4025fa:	2023      	movs	r0, #35	; 0x23
  4025fc:	4b1d      	ldr	r3, [pc, #116]	; (402674 <mcan0_configure+0x12c>)
  4025fe:	4798      	blx	r3
	irq_register_handler(MCAN0_INT1_IRQn, 2);
  402600:	2024      	movs	r0, #36	; 0x24
  402602:	4b1a      	ldr	r3, [pc, #104]	; (40266c <mcan0_configure+0x124>)
  402604:	4798      	blx	r3
  402606:	2102      	movs	r1, #2
  402608:	2024      	movs	r0, #36	; 0x24
  40260a:	4b19      	ldr	r3, [pc, #100]	; (402670 <mcan0_configure+0x128>)
  40260c:	4798      	blx	r3
  40260e:	2024      	movs	r0, #36	; 0x24
  402610:	4b18      	ldr	r3, [pc, #96]	; (402674 <mcan0_configure+0x12c>)
  402612:	4798      	blx	r3
	
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan0_instance);
  402614:	480b      	ldr	r0, [pc, #44]	; (402644 <mcan0_configure+0xfc>)
  402616:	4b18      	ldr	r3, [pc, #96]	; (402678 <mcan0_configure+0x130>)
  402618:	4798      	blx	r3

    mcan_start(&mcan0_instance);
  40261a:	480a      	ldr	r0, [pc, #40]	; (402644 <mcan0_configure+0xfc>)
  40261c:	4b17      	ldr	r3, [pc, #92]	; (40267c <mcan0_configure+0x134>)
  40261e:	4798      	blx	r3
}
  402620:	bf00      	nop
  402622:	3728      	adds	r7, #40	; 0x28
  402624:	46bd      	mov	sp, r7
  402626:	bd80      	pop	{r7, pc}
  402628:	204011ac 	.word	0x204011ac
  40262c:	20401194 	.word	0x20401194
  402630:	20401160 	.word	0x20401160
  402634:	00401edd 	.word	0x00401edd
  402638:	20401178 	.word	0x20401178
  40263c:	004021b9 	.word	0x004021b9
  402640:	40030000 	.word	0x40030000
  402644:	2040114c 	.word	0x2040114c
  402648:	00400d55 	.word	0x00400d55
  40264c:	204010d4 	.word	0x204010d4
  402650:	00401601 	.word	0x00401601
  402654:	00401759 	.word	0x00401759
  402658:	004016d9 	.word	0x004016d9
  40265c:	00401731 	.word	0x00401731
  402660:	6208fe11 	.word	0x6208fe11
  402664:	00402429 	.word	0x00402429
  402668:	0040244f 	.word	0x0040244f
  40266c:	00402129 	.word	0x00402129
  402670:	00402165 	.word	0x00402165
  402674:	004020ed 	.word	0x004020ed
  402678:	004024b1 	.word	0x004024b1
  40267c:	00400dd5 	.word	0x00400dd5

00402680 <mcan1_configure>:

void mcan1_configure(uint32_t rx_buffer_size, uint32_t tx_buffer_size)
{	/**/
  402680:	b580      	push	{r7, lr}
  402682:	b08a      	sub	sp, #40	; 0x28
  402684:	af00      	add	r7, sp, #0
  402686:	6078      	str	r0, [r7, #4]
  402688:	6039      	str	r1, [r7, #0]
	mcan1_standard_receive_index = 0;
  40268a:	4b37      	ldr	r3, [pc, #220]	; (402768 <mcan1_configure+0xe8>)
  40268c:	2200      	movs	r2, #0
  40268e:	601a      	str	r2, [r3, #0]
	mcan1_extended_receive_index = 0;
  402690:	4b36      	ldr	r3, [pc, #216]	; (40276c <mcan1_configure+0xec>)
  402692:	2200      	movs	r2, #0
  402694:	601a      	str	r2, [r3, #0]

	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_rx, rx_buffer_size, sizeof(mcan_timestamped_rx_message_t));
  402696:	2220      	movs	r2, #32
  402698:	6879      	ldr	r1, [r7, #4]
  40269a:	4835      	ldr	r0, [pc, #212]	; (402770 <mcan1_configure+0xf0>)
  40269c:	4b35      	ldr	r3, [pc, #212]	; (402774 <mcan1_configure+0xf4>)
  40269e:	4798      	blx	r3
	circ_buf_flex_init_buffer(&mcan1_buffer.buffer_tx, tx_buffer_size, sizeof(mcan_tx_message_t));
  4026a0:	2214      	movs	r2, #20
  4026a2:	6839      	ldr	r1, [r7, #0]
  4026a4:	4834      	ldr	r0, [pc, #208]	; (402778 <mcan1_configure+0xf8>)
  4026a6:	4b33      	ldr	r3, [pc, #204]	; (402774 <mcan1_configure+0xf4>)
  4026a8:	4798      	blx	r3

	mcan1_buffer.adding_in_tx_buffer = false;
  4026aa:	4b31      	ldr	r3, [pc, #196]	; (402770 <mcan1_configure+0xf0>)
  4026ac:	2200      	movs	r2, #0
  4026ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	mcan1_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  4026b2:	4b2f      	ldr	r3, [pc, #188]	; (402770 <mcan1_configure+0xf0>)
  4026b4:	2200      	movs	r2, #0
  4026b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	mcan1_buffer.buffer_being_emptied_by_interruption = false;
  4026ba:	4b2d      	ldr	r3, [pc, #180]	; (402770 <mcan1_configure+0xf0>)
  4026bc:	2200      	movs	r2, #0
  4026be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	struct mcan_config config_mcan;
	mcan_get_config_defaults(&config_mcan);
  4026c2:	f107 0308 	add.w	r3, r7, #8
  4026c6:	4618      	mov	r0, r3
  4026c8:	4b2c      	ldr	r3, [pc, #176]	; (40277c <mcan1_configure+0xfc>)
  4026ca:	4798      	blx	r3
	config_mcan.nonmatching_frames_action_standard = MCAN_NONMATCHING_FRAMES_REJECT;
  4026cc:	2302      	movs	r3, #2
  4026ce:	763b      	strb	r3, [r7, #24]
	config_mcan.nonmatching_frames_action_extended = MCAN_NONMATCHING_FRAMES_REJECT;
  4026d0:	2302      	movs	r3, #2
  4026d2:	767b      	strb	r3, [r7, #25]
	config_mcan.tx_queue_mode = false;
  4026d4:	2300      	movs	r3, #0
  4026d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	mcan_init(&mcan1_instance, MCAN1, &config_mcan);
  4026da:	f107 0308 	add.w	r3, r7, #8
  4026de:	461a      	mov	r2, r3
  4026e0:	4927      	ldr	r1, [pc, #156]	; (402780 <mcan1_configure+0x100>)
  4026e2:	4828      	ldr	r0, [pc, #160]	; (402784 <mcan1_configure+0x104>)
  4026e4:	4b28      	ldr	r3, [pc, #160]	; (402788 <mcan1_configure+0x108>)
  4026e6:	4798      	blx	r3
	
	if(!has_UPLL_been_set)
  4026e8:	4b28      	ldr	r3, [pc, #160]	; (40278c <mcan1_configure+0x10c>)
  4026ea:	781b      	ldrb	r3, [r3, #0]
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d10e      	bne.n	40270e <mcan1_configure+0x8e>
	{
		//Enabling the upll clock 
		//NEED TO HAVE THE RIGHT conf_mcan.h !
		pmc_enable_upll_clock();
  4026f0:	4b27      	ldr	r3, [pc, #156]	; (402790 <mcan1_configure+0x110>)
  4026f2:	4798      	blx	r3
		// This was firstly changed to "pmc_switch_pck_to_pllack(PMC_PCK_5, PMC_PCK_PRES(9));" in the mcan_init function above.
		//It is recomendedd in the datasheet to use upllck as it is less subject to change. It is running at 480 MHz.
		pmc_disable_pck(PMC_PCK_5);
  4026f4:	2005      	movs	r0, #5
  4026f6:	4b27      	ldr	r3, [pc, #156]	; (402794 <mcan1_configure+0x114>)
  4026f8:	4798      	blx	r3
		//deviding uppl by 6 to get a 80 Mhz signal which is again devided by 8 in the CONF_MCAN_NBTP_NBRP_VALUE in the conf_mcan.h to get a 10 MHz.
		pmc_switch_pck_to_upllck(PMC_PCK_5, PMC_PCK_PRES(5));
  4026fa:	2150      	movs	r1, #80	; 0x50
  4026fc:	2005      	movs	r0, #5
  4026fe:	4b26      	ldr	r3, [pc, #152]	; (402798 <mcan1_configure+0x118>)
  402700:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_5);
  402702:	2005      	movs	r0, #5
  402704:	4b25      	ldr	r3, [pc, #148]	; (40279c <mcan1_configure+0x11c>)
  402706:	4798      	blx	r3

		has_UPLL_been_set = 1;
  402708:	4b20      	ldr	r3, [pc, #128]	; (40278c <mcan1_configure+0x10c>)
  40270a:	2201      	movs	r2, #1
  40270c:	701a      	strb	r2, [r3, #0]
	}	

	//chosing what interruption to activate
	mcan_enable_interrupt(&mcan1_instance,
  40270e:	4924      	ldr	r1, [pc, #144]	; (4027a0 <mcan1_configure+0x120>)
  402710:	481c      	ldr	r0, [pc, #112]	; (402784 <mcan1_configure+0x104>)
  402712:	4b24      	ldr	r3, [pc, #144]	; (4027a4 <mcan1_configure+0x124>)
  402714:	4798      	blx	r3
		MCAN_TX_EVENT_FIFO_WATERMARK |
		MCAN_TX_EVENT_FIFO_FULL |
		MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
	
	//TODO understand why I have put this line.
	mcan_disable_interrupt(&mcan1_instance, MCAN_TIMESTAMP_WRAPAROUND);
  402716:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40271a:	481a      	ldr	r0, [pc, #104]	; (402784 <mcan1_configure+0x104>)
  40271c:	4b22      	ldr	r3, [pc, #136]	; (4027a8 <mcan1_configure+0x128>)
  40271e:	4798      	blx	r3
	
	//Interrupt Line Selection making all tx to the second line.
	//using int0 for reception and basic errors
	//using int1 for emission.
	mcan1_instance.hw->MCAN_ILS = 0x0000FF00ul;
  402720:	4b18      	ldr	r3, [pc, #96]	; (402784 <mcan1_configure+0x104>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  402728:	659a      	str	r2, [r3, #88]	; 0x58
	
	//activating interruptions for int0 and int1
	irq_register_handler(MCAN1_INT0_IRQn, 1);
  40272a:	2025      	movs	r0, #37	; 0x25
  40272c:	4b1f      	ldr	r3, [pc, #124]	; (4027ac <mcan1_configure+0x12c>)
  40272e:	4798      	blx	r3
  402730:	2101      	movs	r1, #1
  402732:	2025      	movs	r0, #37	; 0x25
  402734:	4b1e      	ldr	r3, [pc, #120]	; (4027b0 <mcan1_configure+0x130>)
  402736:	4798      	blx	r3
  402738:	2025      	movs	r0, #37	; 0x25
  40273a:	4b1e      	ldr	r3, [pc, #120]	; (4027b4 <mcan1_configure+0x134>)
  40273c:	4798      	blx	r3
	irq_register_handler(MCAN1_INT1_IRQn, 2);
  40273e:	2026      	movs	r0, #38	; 0x26
  402740:	4b1a      	ldr	r3, [pc, #104]	; (4027ac <mcan1_configure+0x12c>)
  402742:	4798      	blx	r3
  402744:	2102      	movs	r1, #2
  402746:	2026      	movs	r0, #38	; 0x26
  402748:	4b19      	ldr	r3, [pc, #100]	; (4027b0 <mcan1_configure+0x130>)
  40274a:	4798      	blx	r3
  40274c:	2026      	movs	r0, #38	; 0x26
  40274e:	4b19      	ldr	r3, [pc, #100]	; (4027b4 <mcan1_configure+0x134>)
  402750:	4798      	blx	r3
	
	_mcan_configure_rx_fifo_to_accept_all(&mcan1_instance);
  402752:	480c      	ldr	r0, [pc, #48]	; (402784 <mcan1_configure+0x104>)
  402754:	4b18      	ldr	r3, [pc, #96]	; (4027b8 <mcan1_configure+0x138>)
  402756:	4798      	blx	r3

    mcan_start(&mcan1_instance);
  402758:	480a      	ldr	r0, [pc, #40]	; (402784 <mcan1_configure+0x104>)
  40275a:	4b18      	ldr	r3, [pc, #96]	; (4027bc <mcan1_configure+0x13c>)
  40275c:	4798      	blx	r3
}
  40275e:	bf00      	nop
  402760:	3728      	adds	r7, #40	; 0x28
  402762:	46bd      	mov	sp, r7
  402764:	bd80      	pop	{r7, pc}
  402766:	bf00      	nop
  402768:	204011a8 	.word	0x204011a8
  40276c:	20401128 	.word	0x20401128
  402770:	204011d4 	.word	0x204011d4
  402774:	00401edd 	.word	0x00401edd
  402778:	204011ec 	.word	0x204011ec
  40277c:	004021b9 	.word	0x004021b9
  402780:	40034000 	.word	0x40034000
  402784:	204011c0 	.word	0x204011c0
  402788:	00400d55 	.word	0x00400d55
  40278c:	204010d4 	.word	0x204010d4
  402790:	00401601 	.word	0x00401601
  402794:	00401759 	.word	0x00401759
  402798:	004016d9 	.word	0x004016d9
  40279c:	00401731 	.word	0x00401731
  4027a0:	6208fe11 	.word	0x6208fe11
  4027a4:	00402429 	.word	0x00402429
  4027a8:	0040244f 	.word	0x0040244f
  4027ac:	00402129 	.word	0x00402129
  4027b0:	00402165 	.word	0x00402165
  4027b4:	004020ed 	.word	0x004020ed
  4027b8:	004024b1 	.word	0x004024b1
  4027bc:	00400dd5 	.word	0x00400dd5

004027c0 <_mcan0_push_message>:

void _mcan0_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  4027c0:	b5b0      	push	{r4, r5, r7, lr}
  4027c2:	b094      	sub	sp, #80	; 0x50
  4027c4:	af00      	add	r7, sp, #0
  4027c6:	60f8      	str	r0, [r7, #12]
  4027c8:	60b9      	str	r1, [r7, #8]
  4027ca:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  4027cc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  4027d0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  4027d4:	2300      	movs	r3, #0
  4027d6:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  4027d8:	7bfb      	ldrb	r3, [r7, #15]
  4027da:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4027de:	b2da      	uxtb	r2, r3
  4027e0:	7d3b      	ldrb	r3, [r7, #20]
  4027e2:	f362 13c7 	bfi	r3, r2, #7, #1
  4027e6:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  4027e8:	7bfb      	ldrb	r3, [r7, #15]
  4027ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4027ee:	b2da      	uxtb	r2, r3
  4027f0:	7d3b      	ldrb	r3, [r7, #20]
  4027f2:	f362 1386 	bfi	r3, r2, #6, #1
  4027f6:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  4027f8:	7bfb      	ldrb	r3, [r7, #15]
  4027fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4027fe:	b2da      	uxtb	r2, r3
  402800:	7d3b      	ldrb	r3, [r7, #20]
  402802:	f362 1345 	bfi	r3, r2, #5, #1
  402806:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  402808:	7abb      	ldrb	r3, [r7, #10]
  40280a:	f3c3 1340 	ubfx	r3, r3, #5, #1
  40280e:	b2da      	uxtb	r2, r3
  402810:	7d3b      	ldrb	r3, [r7, #20]
  402812:	f362 1304 	bfi	r3, r2, #4, #1
  402816:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  402818:	7abb      	ldrb	r3, [r7, #10]
  40281a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  40281e:	b2da      	uxtb	r2, r3
  402820:	7d3b      	ldrb	r3, [r7, #20]
  402822:	f362 03c3 	bfi	r3, r2, #3, #1
  402826:	753b      	strb	r3, [r7, #20]

	if(message.message_info.bit.is_extended)
  402828:	7d3b      	ldrb	r3, [r7, #20]
  40282a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40282e:	b2db      	uxtb	r3, r3
  402830:	2b00      	cmp	r3, #0
  402832:	d004      	beq.n	40283e <_mcan0_push_message+0x7e>
	{
		message.id = r0.bit.ID;
  402834:	68fb      	ldr	r3, [r7, #12]
  402836:	f3c3 031c 	ubfx	r3, r3, #0, #29
  40283a:	61bb      	str	r3, [r7, #24]
  40283c:	e006      	b.n	40284c <_mcan0_push_message+0x8c>
	}
	else
	{
		message.id = GET_BITS(r0.bit.ID, 18, 29);
  40283e:	68fb      	ldr	r3, [r7, #12]
  402840:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402844:	149b      	asrs	r3, r3, #18
  402846:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40284a:	61bb      	str	r3, [r7, #24]
	}
	message.dlc = r1.bit.DLC;
  40284c:	7abb      	ldrb	r3, [r7, #10]
  40284e:	f3c3 0303 	ubfx	r3, r3, #0, #4
  402852:	b2db      	uxtb	r3, r3
  402854:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  402856:	2300      	movs	r3, #0
  402858:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  40285c:	e010      	b.n	402880 <_mcan0_push_message+0xc0>
	{
		message.data[i] = data[i];
  40285e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402862:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402866:	6879      	ldr	r1, [r7, #4]
  402868:	440a      	add	r2, r1
  40286a:	7812      	ldrb	r2, [r2, #0]
  40286c:	f107 0150 	add.w	r1, r7, #80	; 0x50
  402870:	440b      	add	r3, r1
  402872:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  402876:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40287a:	3301      	adds	r3, #1
  40287c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402880:	7f3b      	ldrb	r3, [r7, #28]
  402882:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402886:	429a      	cmp	r2, r3
  402888:	d3e9      	bcc.n	40285e <_mcan0_push_message+0x9e>
	}
	

	time_message.rx_message = message;
  40288a:	f107 0430 	add.w	r4, r7, #48	; 0x30
  40288e:	f107 0514 	add.w	r5, r7, #20
  402892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402896:	682b      	ldr	r3, [r5, #0]
  402898:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan0_buffer.buffer_rx, &time_message) != CBF_SUCCESS)
  40289a:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40289e:	4619      	mov	r1, r3
  4028a0:	4803      	ldr	r0, [pc, #12]	; (4028b0 <_mcan0_push_message+0xf0>)
  4028a2:	4b04      	ldr	r3, [pc, #16]	; (4028b4 <_mcan0_push_message+0xf4>)
  4028a4:	4798      	blx	r3
	{
		//TODO HANDLE ERROR 
	}
}
  4028a6:	bf00      	nop
  4028a8:	3750      	adds	r7, #80	; 0x50
  4028aa:	46bd      	mov	sp, r7
  4028ac:	bdb0      	pop	{r4, r5, r7, pc}
  4028ae:	bf00      	nop
  4028b0:	20401160 	.word	0x20401160
  4028b4:	00401fdd 	.word	0x00401fdd

004028b8 <_mcan1_push_message>:

void _mcan1_push_message(MCAN_RX_ELEMENT_R0_Type r0, MCAN_RX_ELEMENT_R1_Type r1, uint8_t* data, uint64_t rec_timestamp)
{
  4028b8:	b5b0      	push	{r4, r5, r7, lr}
  4028ba:	b094      	sub	sp, #80	; 0x50
  4028bc:	af00      	add	r7, sp, #0
  4028be:	60f8      	str	r0, [r7, #12]
  4028c0:	60b9      	str	r1, [r7, #8]
  4028c2:	607a      	str	r2, [r7, #4]
	mcan_timestamped_rx_message_t time_message;
	time_message.timestamp = rec_timestamp;
  4028c4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
  4028c8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	mcan_rx_message_t message;
	message.message_info.all_8_bits = 0x00;
  4028cc:	2300      	movs	r3, #0
  4028ce:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_extended = r0.bit.XTD;
  4028d0:	7bfb      	ldrb	r3, [r7, #15]
  4028d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4028d6:	b2da      	uxtb	r2, r3
  4028d8:	7d3b      	ldrb	r3, [r7, #20]
  4028da:	f362 13c7 	bfi	r3, r2, #7, #1
  4028de:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_remote_request = r0.bit.RTR;
  4028e0:	7bfb      	ldrb	r3, [r7, #15]
  4028e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4028e6:	b2da      	uxtb	r2, r3
  4028e8:	7d3b      	ldrb	r3, [r7, #20]
  4028ea:	f362 1386 	bfi	r3, r2, #6, #1
  4028ee:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_error = r0.bit.ESI;
  4028f0:	7bfb      	ldrb	r3, [r7, #15]
  4028f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4028f6:	b2da      	uxtb	r2, r3
  4028f8:	7d3b      	ldrb	r3, [r7, #20]
  4028fa:	f362 1345 	bfi	r3, r2, #5, #1
  4028fe:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_fd = r1.bit.EDL;
  402900:	7abb      	ldrb	r3, [r7, #10]
  402902:	f3c3 1340 	ubfx	r3, r3, #5, #1
  402906:	b2da      	uxtb	r2, r3
  402908:	7d3b      	ldrb	r3, [r7, #20]
  40290a:	f362 1304 	bfi	r3, r2, #4, #1
  40290e:	753b      	strb	r3, [r7, #20]
	message.message_info.bit.is_received_with_bitrate_switch = r1.bit.BRS;
  402910:	7abb      	ldrb	r3, [r7, #10]
  402912:	f3c3 1300 	ubfx	r3, r3, #4, #1
  402916:	b2da      	uxtb	r2, r3
  402918:	7d3b      	ldrb	r3, [r7, #20]
  40291a:	f362 03c3 	bfi	r3, r2, #3, #1
  40291e:	753b      	strb	r3, [r7, #20]

	
	message.id = r0.bit.ID;
  402920:	68fb      	ldr	r3, [r7, #12]
  402922:	f3c3 031c 	ubfx	r3, r3, #0, #29
  402926:	61bb      	str	r3, [r7, #24]
	message.dlc = r1.bit.DLC;
  402928:	7abb      	ldrb	r3, [r7, #10]
  40292a:	f3c3 0303 	ubfx	r3, r3, #0, #4
  40292e:	b2db      	uxtb	r3, r3
  402930:	773b      	strb	r3, [r7, #28]
	for (uint8_t i = 0; i < message.dlc; i++)
  402932:	2300      	movs	r3, #0
  402934:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  402938:	e010      	b.n	40295c <_mcan1_push_message+0xa4>
	{
		message.data[i] = data[i];
  40293a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  40293e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402942:	6879      	ldr	r1, [r7, #4]
  402944:	440a      	add	r2, r1
  402946:	7812      	ldrb	r2, [r2, #0]
  402948:	f107 0150 	add.w	r1, r7, #80	; 0x50
  40294c:	440b      	add	r3, r1
  40294e:	f803 2c33 	strb.w	r2, [r3, #-51]
	for (uint8_t i = 0; i < message.dlc; i++)
  402952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
  402956:	3301      	adds	r3, #1
  402958:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  40295c:	7f3b      	ldrb	r3, [r7, #28]
  40295e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
  402962:	429a      	cmp	r2, r3
  402964:	d3e9      	bcc.n	40293a <_mcan1_push_message+0x82>
	}
	

	time_message.rx_message = message;
  402966:	f107 0430 	add.w	r4, r7, #48	; 0x30
  40296a:	f107 0514 	add.w	r5, r7, #20
  40296e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402972:	682b      	ldr	r3, [r5, #0]
  402974:	6023      	str	r3, [r4, #0]

	if(circ_buf_flex_push(&mcan1_buffer.buffer_rx, &time_message) != CBF_SUCCESS)
  402976:	f107 0328 	add.w	r3, r7, #40	; 0x28
  40297a:	4619      	mov	r1, r3
  40297c:	4803      	ldr	r0, [pc, #12]	; (40298c <_mcan1_push_message+0xd4>)
  40297e:	4b04      	ldr	r3, [pc, #16]	; (402990 <_mcan1_push_message+0xd8>)
  402980:	4798      	blx	r3
	{
		//HANDLE ERROR TODO
	}
}
  402982:	bf00      	nop
  402984:	3750      	adds	r7, #80	; 0x50
  402986:	46bd      	mov	sp, r7
  402988:	bdb0      	pop	{r4, r5, r7, pc}
  40298a:	bf00      	nop
  40298c:	204011d4 	.word	0x204011d4
  402990:	00401fdd 	.word	0x00401fdd

00402994 <MCAN0_INT0_Handler>:

void MCAN0_INT0_Handler(void)
{
  402994:	b590      	push	{r4, r7, lr}
  402996:	b087      	sub	sp, #28
  402998:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan0_instance);
  40299a:	485e      	ldr	r0, [pc, #376]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  40299c:	4b5e      	ldr	r3, [pc, #376]	; (402b18 <MCAN0_INT0_Handler+0x184>)
  40299e:	4798      	blx	r3
  4029a0:	4603      	mov	r3, r0
  4029a2:	60fb      	str	r3, [r7, #12]
	
	if (status & MCAN_RX_BUFFER_NEW_MESSAGE)
  4029a4:	68fb      	ldr	r3, [r7, #12]
  4029a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  4029aa:	2b00      	cmp	r3, #0
  4029ac:	d02e      	beq.n	402a0c <MCAN0_INT0_Handler+0x78>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  4029ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4029b2:	4858      	ldr	r0, [pc, #352]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  4029b4:	4b59      	ldr	r3, [pc, #356]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  4029b6:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Message stored to Dedicated Rx Buffer Interrupt\r\n");
		#endif

		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  4029b8:	2300      	movs	r3, #0
  4029ba:	60bb      	str	r3, [r7, #8]
  4029bc:	e023      	b.n	402a06 <MCAN0_INT0_Handler+0x72>
		{
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  4029be:	68bb      	ldr	r3, [r7, #8]
  4029c0:	4619      	mov	r1, r3
  4029c2:	4854      	ldr	r0, [pc, #336]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  4029c4:	4b56      	ldr	r3, [pc, #344]	; (402b20 <MCAN0_INT0_Handler+0x18c>)
  4029c6:	4798      	blx	r3
  4029c8:	4603      	mov	r3, r0
  4029ca:	2b00      	cmp	r3, #0
  4029cc:	d018      	beq.n	402a00 <MCAN0_INT0_Handler+0x6c>
			{
				rx_buffer_index = i;
  4029ce:	68bb      	ldr	r3, [r7, #8]
  4029d0:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan0_instance, i);
  4029d2:	68bb      	ldr	r3, [r7, #8]
  4029d4:	4619      	mov	r1, r3
  4029d6:	484f      	ldr	r0, [pc, #316]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  4029d8:	4b52      	ldr	r3, [pc, #328]	; (402b24 <MCAN0_INT0_Handler+0x190>)
  4029da:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan0_instance, &mcan0_rx_element_buffer, rx_buffer_index);
  4029dc:	687b      	ldr	r3, [r7, #4]
  4029de:	461a      	mov	r2, r3
  4029e0:	4951      	ldr	r1, [pc, #324]	; (402b28 <MCAN0_INT0_Handler+0x194>)
  4029e2:	484c      	ldr	r0, [pc, #304]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  4029e4:	4b51      	ldr	r3, [pc, #324]	; (402b2c <MCAN0_INT0_Handler+0x198>)
  4029e6:	4798      	blx	r3
				
				_mcan0_push_message(mcan0_rx_element_buffer.R0, mcan0_rx_element_buffer.R1, mcan0_rx_element_buffer.data, unix_timestamp_ms);
  4029e8:	4b51      	ldr	r3, [pc, #324]	; (402b30 <MCAN0_INT0_Handler+0x19c>)
  4029ea:	e9d3 3400 	ldrd	r3, r4, [r3]
  4029ee:	494e      	ldr	r1, [pc, #312]	; (402b28 <MCAN0_INT0_Handler+0x194>)
  4029f0:	484d      	ldr	r0, [pc, #308]	; (402b28 <MCAN0_INT0_Handler+0x194>)
  4029f2:	e9cd 3400 	strd	r3, r4, [sp]
  4029f6:	4a4f      	ldr	r2, [pc, #316]	; (402b34 <MCAN0_INT0_Handler+0x1a0>)
  4029f8:	6849      	ldr	r1, [r1, #4]
  4029fa:	6800      	ldr	r0, [r0, #0]
  4029fc:	4b4e      	ldr	r3, [pc, #312]	; (402b38 <MCAN0_INT0_Handler+0x1a4>)
  4029fe:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN0_RX_BUFFER_NUM; i++) 
  402a00:	68bb      	ldr	r3, [r7, #8]
  402a02:	3301      	adds	r3, #1
  402a04:	60bb      	str	r3, [r7, #8]
  402a06:	68bb      	ldr	r3, [r7, #8]
  402a08:	2b00      	cmp	r3, #0
  402a0a:	d0d8      	beq.n	4029be <MCAN0_INT0_Handler+0x2a>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE)
  402a0c:	68fb      	ldr	r3, [r7, #12]
  402a0e:	f003 0301 	and.w	r3, r3, #1
  402a12:	2b00      	cmp	r3, #0
  402a14:	d029      	beq.n	402a6a <MCAN0_INT0_Handler+0xd6>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402a16:	2101      	movs	r1, #1
  402a18:	483e      	ldr	r0, [pc, #248]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a1a:	4b40      	ldr	r3, [pc, #256]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  402a1c:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 0 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_0_element(&mcan0_instance, &mcan0_rx_element_fifo_0, mcan0_standard_receive_index);
  402a1e:	4b47      	ldr	r3, [pc, #284]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a20:	681b      	ldr	r3, [r3, #0]
  402a22:	461a      	mov	r2, r3
  402a24:	4946      	ldr	r1, [pc, #280]	; (402b40 <MCAN0_INT0_Handler+0x1ac>)
  402a26:	483b      	ldr	r0, [pc, #236]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a28:	4b46      	ldr	r3, [pc, #280]	; (402b44 <MCAN0_INT0_Handler+0x1b0>)
  402a2a:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 0, mcan0_standard_receive_index);
  402a2c:	4b43      	ldr	r3, [pc, #268]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a2e:	681b      	ldr	r3, [r3, #0]
  402a30:	461a      	mov	r2, r3
  402a32:	2100      	movs	r1, #0
  402a34:	4837      	ldr	r0, [pc, #220]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a36:	4b44      	ldr	r3, [pc, #272]	; (402b48 <MCAN0_INT0_Handler+0x1b4>)
  402a38:	4798      	blx	r3

		mcan0_standard_receive_index++;
  402a3a:	4b40      	ldr	r3, [pc, #256]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a3c:	681b      	ldr	r3, [r3, #0]
  402a3e:	3301      	adds	r3, #1
  402a40:	4a3e      	ldr	r2, [pc, #248]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a42:	6013      	str	r3, [r2, #0]

		if (mcan0_standard_receive_index == CONF_MCAN0_RX_FIFO_0_NUM)
  402a44:	4b3d      	ldr	r3, [pc, #244]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a46:	681b      	ldr	r3, [r3, #0]
  402a48:	2b10      	cmp	r3, #16
  402a4a:	d102      	bne.n	402a52 <MCAN0_INT0_Handler+0xbe>
		{
			mcan0_standard_receive_index = 0;
  402a4c:	4b3b      	ldr	r3, [pc, #236]	; (402b3c <MCAN0_INT0_Handler+0x1a8>)
  402a4e:	2200      	movs	r2, #0
  402a50:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_0.R0, mcan0_rx_element_fifo_0.R1, mcan0_rx_element_fifo_0.data, unix_timestamp_ms);
  402a52:	4b37      	ldr	r3, [pc, #220]	; (402b30 <MCAN0_INT0_Handler+0x19c>)
  402a54:	e9d3 3400 	ldrd	r3, r4, [r3]
  402a58:	4939      	ldr	r1, [pc, #228]	; (402b40 <MCAN0_INT0_Handler+0x1ac>)
  402a5a:	4839      	ldr	r0, [pc, #228]	; (402b40 <MCAN0_INT0_Handler+0x1ac>)
  402a5c:	e9cd 3400 	strd	r3, r4, [sp]
  402a60:	4a3a      	ldr	r2, [pc, #232]	; (402b4c <MCAN0_INT0_Handler+0x1b8>)
  402a62:	6849      	ldr	r1, [r1, #4]
  402a64:	6800      	ldr	r0, [r0, #0]
  402a66:	4b34      	ldr	r3, [pc, #208]	; (402b38 <MCAN0_INT0_Handler+0x1a4>)
  402a68:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  402a6a:	68fb      	ldr	r3, [r7, #12]
  402a6c:	f003 0310 	and.w	r3, r3, #16
  402a70:	2b00      	cmp	r3, #0
  402a72:	d029      	beq.n	402ac8 <MCAN0_INT0_Handler+0x134>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  402a74:	2110      	movs	r1, #16
  402a76:	4827      	ldr	r0, [pc, #156]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a78:	4b28      	ldr	r3, [pc, #160]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  402a7a:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("CAN0 Rx FIFO 1 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_1_element(&mcan0_instance, &mcan0_rx_element_fifo_1, mcan0_extended_receive_index);
  402a7c:	4b34      	ldr	r3, [pc, #208]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402a7e:	681b      	ldr	r3, [r3, #0]
  402a80:	461a      	mov	r2, r3
  402a82:	4934      	ldr	r1, [pc, #208]	; (402b54 <MCAN0_INT0_Handler+0x1c0>)
  402a84:	4823      	ldr	r0, [pc, #140]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a86:	4b34      	ldr	r3, [pc, #208]	; (402b58 <MCAN0_INT0_Handler+0x1c4>)
  402a88:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan0_instance, 1, mcan0_extended_receive_index);
  402a8a:	4b31      	ldr	r3, [pc, #196]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402a8c:	681b      	ldr	r3, [r3, #0]
  402a8e:	461a      	mov	r2, r3
  402a90:	2101      	movs	r1, #1
  402a92:	4820      	ldr	r0, [pc, #128]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402a94:	4b2c      	ldr	r3, [pc, #176]	; (402b48 <MCAN0_INT0_Handler+0x1b4>)
  402a96:	4798      	blx	r3

		mcan0_extended_receive_index++;
  402a98:	4b2d      	ldr	r3, [pc, #180]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402a9a:	681b      	ldr	r3, [r3, #0]
  402a9c:	3301      	adds	r3, #1
  402a9e:	4a2c      	ldr	r2, [pc, #176]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402aa0:	6013      	str	r3, [r2, #0]

		if (mcan0_extended_receive_index == CONF_MCAN0_RX_FIFO_1_NUM) 
  402aa2:	4b2b      	ldr	r3, [pc, #172]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402aa4:	681b      	ldr	r3, [r3, #0]
  402aa6:	2b10      	cmp	r3, #16
  402aa8:	d102      	bne.n	402ab0 <MCAN0_INT0_Handler+0x11c>
		{
			mcan0_extended_receive_index = 0;
  402aaa:	4b29      	ldr	r3, [pc, #164]	; (402b50 <MCAN0_INT0_Handler+0x1bc>)
  402aac:	2200      	movs	r2, #0
  402aae:	601a      	str	r2, [r3, #0]
		}

		_mcan0_push_message(mcan0_rx_element_fifo_1.R0, mcan0_rx_element_fifo_1.R1, mcan0_rx_element_fifo_1.data, unix_timestamp_ms);
  402ab0:	4b1f      	ldr	r3, [pc, #124]	; (402b30 <MCAN0_INT0_Handler+0x19c>)
  402ab2:	e9d3 3400 	ldrd	r3, r4, [r3]
  402ab6:	4927      	ldr	r1, [pc, #156]	; (402b54 <MCAN0_INT0_Handler+0x1c0>)
  402ab8:	4826      	ldr	r0, [pc, #152]	; (402b54 <MCAN0_INT0_Handler+0x1c0>)
  402aba:	e9cd 3400 	strd	r3, r4, [sp]
  402abe:	4a27      	ldr	r2, [pc, #156]	; (402b5c <MCAN0_INT0_Handler+0x1c8>)
  402ac0:	6849      	ldr	r1, [r1, #4]
  402ac2:	6800      	ldr	r0, [r0, #0]
  402ac4:	4b1c      	ldr	r3, [pc, #112]	; (402b38 <MCAN0_INT0_Handler+0x1a4>)
  402ac6:	4798      	blx	r3
	}
	
	//Usually occures if can tx pin is not connected to transciever or to a tranciever not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  402ac8:	68fb      	ldr	r3, [r7, #12]
  402aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  402ace:	2b00      	cmp	r3, #0
  402ad0:	d007      	beq.n	402ae2 <MCAN0_INT0_Handler+0x14e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_BUS_OFF);
  402ad2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402ad6:	480f      	ldr	r0, [pc, #60]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402ad8:	4b10      	ldr	r3, [pc, #64]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  402ada:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\r CAN0 Bus Off Status \r\n");
		#endif
		
		mcan_stop(&mcan0_instance);
  402adc:	480d      	ldr	r0, [pc, #52]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402ade:	4b20      	ldr	r3, [pc, #128]	; (402b60 <MCAN0_INT0_Handler+0x1cc>)
  402ae0:	4798      	blx	r3
		
	}

	//Usually occures when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  402ae2:	68fb      	ldr	r3, [r7, #12]
  402ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  402ae8:	2b00      	cmp	r3, #0
  402aea:	d004      	beq.n	402af6 <MCAN0_INT0_Handler+0x162>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_ACKNOWLEDGE_ERROR);
  402aec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402af0:	4808      	ldr	r0, [pc, #32]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402af2:	4b0a      	ldr	r3, [pc, #40]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  402af4:	4798      	blx	r3
		printf("\n\rCAN0 Acknowledge Error \r\n");
		#endif
	}

	//Usually occures if can rx pin is not connected to transciever or recieving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  402af6:	68fb      	ldr	r3, [r7, #12]
  402af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402afc:	2b00      	cmp	r3, #0
  402afe:	d004      	beq.n	402b0a <MCAN0_INT0_Handler+0x176>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_FORMAT_ERROR);
  402b00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402b04:	4803      	ldr	r0, [pc, #12]	; (402b14 <MCAN0_INT0_Handler+0x180>)
  402b06:	4b05      	ldr	r3, [pc, #20]	; (402b1c <MCAN0_INT0_Handler+0x188>)
  402b08:	4798      	blx	r3

		#ifdef MCAN0_INT0_DEBUG
		printf("\n\rCAN0 Format Error \r\n");
		#endif
	}
}
  402b0a:	bf00      	nop
  402b0c:	3714      	adds	r7, #20
  402b0e:	46bd      	mov	sp, r7
  402b10:	bd90      	pop	{r4, r7, pc}
  402b12:	bf00      	nop
  402b14:	2040114c 	.word	0x2040114c
  402b18:	00402477 	.word	0x00402477
  402b1c:	00402491 	.word	0x00402491
  402b20:	00402267 	.word	0x00402267
  402b24:	004022c3 	.word	0x004022c3
  402b28:	204011b0 	.word	0x204011b0
  402b2c:	00400f19 	.word	0x00400f19
  402b30:	204010d8 	.word	0x204010d8
  402b34:	204011b8 	.word	0x204011b8
  402b38:	004027c1 	.word	0x004027c1
  402b3c:	204011ac 	.word	0x204011ac
  402b40:	20401198 	.word	0x20401198
  402b44:	00400f85 	.word	0x00400f85
  402b48:	00402307 	.word	0x00402307
  402b4c:	204011a0 	.word	0x204011a0
  402b50:	20401194 	.word	0x20401194
  402b54:	20401150 	.word	0x20401150
  402b58:	00400ff1 	.word	0x00400ff1
  402b5c:	20401158 	.word	0x20401158
  402b60:	00400e09 	.word	0x00400e09

00402b64 <MCAN0_INT1_Handler>:

void MCAN0_INT1_Handler(void)
{
  402b64:	b580      	push	{r7, lr}
  402b66:	b088      	sub	sp, #32
  402b68:	af00      	add	r7, sp, #0
	volatile uint32_t status, i;
	status = mcan_read_interrupt_status(&mcan0_instance);
  402b6a:	4840      	ldr	r0, [pc, #256]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402b6c:	4b40      	ldr	r3, [pc, #256]	; (402c70 <MCAN0_INT1_Handler+0x10c>)
  402b6e:	4798      	blx	r3
  402b70:	4603      	mov	r3, r0
  402b72:	617b      	str	r3, [r7, #20]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  402b74:	697b      	ldr	r3, [r7, #20]
  402b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402b7a:	2b00      	cmp	r3, #0
  402b7c:	d029      	beq.n	402bd2 <MCAN0_INT1_Handler+0x6e>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TIMESTAMP_COMPLETE);
  402b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
  402b82:	483a      	ldr	r0, [pc, #232]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402b84:	4b3b      	ldr	r3, [pc, #236]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402b86:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Completed Interrupt\r\n");
		#endif
		if(!mcan0_buffer.adding_in_tx_buffer)
  402b88:	4b3b      	ldr	r3, [pc, #236]	; (402c78 <MCAN0_INT1_Handler+0x114>)
  402b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402b8e:	b2db      	uxtb	r3, r3
  402b90:	2b00      	cmp	r3, #0
  402b92:	d11a      	bne.n	402bca <MCAN0_INT1_Handler+0x66>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx)>0)
  402b94:	4839      	ldr	r0, [pc, #228]	; (402c7c <MCAN0_INT1_Handler+0x118>)
  402b96:	4b3a      	ldr	r3, [pc, #232]	; (402c80 <MCAN0_INT1_Handler+0x11c>)
  402b98:	4798      	blx	r3
  402b9a:	4603      	mov	r3, r0
  402b9c:	2b00      	cmp	r3, #0
  402b9e:	d00f      	beq.n	402bc0 <MCAN0_INT1_Handler+0x5c>
			{
				struct mcan_tx_element tx_elem;

				circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  402ba0:	463b      	mov	r3, r7
  402ba2:	4619      	mov	r1, r3
  402ba4:	4835      	ldr	r0, [pc, #212]	; (402c7c <MCAN0_INT1_Handler+0x118>)
  402ba6:	4b37      	ldr	r3, [pc, #220]	; (402c84 <MCAN0_INT1_Handler+0x120>)
  402ba8:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN0_TX_BUFFER_NUM);
  402baa:	463b      	mov	r3, r7
  402bac:	2201      	movs	r2, #1
  402bae:	4619      	mov	r1, r3
  402bb0:	482e      	ldr	r0, [pc, #184]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402bb2:	4b35      	ldr	r3, [pc, #212]	; (402c88 <MCAN0_INT1_Handler+0x124>)
  402bb4:	4798      	blx	r3
				mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN0_TX_BUFFER_NUM);
  402bb6:	2102      	movs	r1, #2
  402bb8:	482c      	ldr	r0, [pc, #176]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402bba:	4b34      	ldr	r3, [pc, #208]	; (402c8c <MCAN0_INT1_Handler+0x128>)
  402bbc:	4798      	blx	r3
  402bbe:	e008      	b.n	402bd2 <MCAN0_INT1_Handler+0x6e>
			}
			else
			{
				mcan0_buffer.buffer_being_emptied_by_interruption = false;
  402bc0:	4b2d      	ldr	r3, [pc, #180]	; (402c78 <MCAN0_INT1_Handler+0x114>)
  402bc2:	2200      	movs	r2, #0
  402bc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402bc8:	e003      	b.n	402bd2 <MCAN0_INT1_Handler+0x6e>
			}
		}
		else mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = true;
  402bca:	4b2b      	ldr	r3, [pc, #172]	; (402c78 <MCAN0_INT1_Handler+0x114>)
  402bcc:	2201      	movs	r2, #1
  402bce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  402bd2:	697b      	ldr	r3, [r7, #20]
  402bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402bd8:	2b00      	cmp	r3, #0
  402bda:	d004      	beq.n	402be6 <MCAN0_INT1_Handler+0x82>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_CANCELLATION_FINISH);
  402bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402be0:	4822      	ldr	r0, [pc, #136]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402be2:	4b24      	ldr	r3, [pc, #144]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402be4:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Transmission Cancellation Finished Interrupt \r\n");
		#endif
	}

	if (status & MCAN_TX_FIFO_EMPTY)
  402be6:	697b      	ldr	r3, [r7, #20]
  402be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  402bec:	2b00      	cmp	r3, #0
  402bee:	d004      	beq.n	402bfa <MCAN0_INT1_Handler+0x96>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_FIFO_EMPTY);
  402bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402bf4:	481d      	ldr	r0, [pc, #116]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402bf6:	4b1f      	ldr	r3, [pc, #124]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402bf8:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx FIFO Empty Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  402bfa:	697b      	ldr	r3, [r7, #20]
  402bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402c00:	2b00      	cmp	r3, #0
  402c02:	d011      	beq.n	402c28 <MCAN0_INT1_Handler+0xc4>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  402c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402c08:	4818      	ldr	r0, [pc, #96]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c0a:	4b1a      	ldr	r3, [pc, #104]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402c0c:	4798      	blx	r3
		printf("CAN0 Tx Event FIFO New Entry Interrupt \r\n");
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan0_instance);
  402c0e:	4817      	ldr	r0, [pc, #92]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c10:	4b1f      	ldr	r3, [pc, #124]	; (402c90 <MCAN0_INT1_Handler+0x12c>)
  402c12:	4798      	blx	r3
  402c14:	61f8      	str	r0, [r7, #28]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  402c16:	69fb      	ldr	r3, [r7, #28]
  402c18:	0a1b      	lsrs	r3, r3, #8
  402c1a:	f003 031f 	and.w	r3, r3, #31
  402c1e:	61bb      	str	r3, [r7, #24]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan0_instance, fifo_get_index);
  402c20:	69b9      	ldr	r1, [r7, #24]
  402c22:	4812      	ldr	r0, [pc, #72]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c24:	4b1b      	ldr	r3, [pc, #108]	; (402c94 <MCAN0_INT1_Handler+0x130>)
  402c26:	4798      	blx	r3
	}

	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  402c28:	697b      	ldr	r3, [r7, #20]
  402c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402c2e:	2b00      	cmp	r3, #0
  402c30:	d004      	beq.n	402c3c <MCAN0_INT1_Handler+0xd8>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  402c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402c36:	480d      	ldr	r0, [pc, #52]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c38:	4b0e      	ldr	r3, [pc, #56]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402c3a:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Watermark Reached Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_FULL)
  402c3c:	697b      	ldr	r3, [r7, #20]
  402c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402c42:	2b00      	cmp	r3, #0
  402c44:	d004      	beq.n	402c50 <MCAN0_INT1_Handler+0xec>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_FULL);
  402c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402c4a:	4808      	ldr	r0, [pc, #32]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c4c:	4b09      	ldr	r3, [pc, #36]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402c4e:	4798      	blx	r3
		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Full Interrupt\r\n");
		#endif
	}

	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  402c50:	697b      	ldr	r3, [r7, #20]
  402c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402c56:	2b00      	cmp	r3, #0
  402c58:	d004      	beq.n	402c64 <MCAN0_INT1_Handler+0x100>
	{
		mcan_clear_interrupt_status(&mcan0_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  402c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  402c5e:	4803      	ldr	r0, [pc, #12]	; (402c6c <MCAN0_INT1_Handler+0x108>)
  402c60:	4b04      	ldr	r3, [pc, #16]	; (402c74 <MCAN0_INT1_Handler+0x110>)
  402c62:	4798      	blx	r3

		#ifdef MCAN0_INT1_DEBUG
		printf("CAN0 Tx Event FIFO Element Lost Interrupt\r\n");
		#endif
	}
}
  402c64:	bf00      	nop
  402c66:	3720      	adds	r7, #32
  402c68:	46bd      	mov	sp, r7
  402c6a:	bd80      	pop	{r7, pc}
  402c6c:	2040114c 	.word	0x2040114c
  402c70:	00402477 	.word	0x00402477
  402c74:	00402491 	.word	0x00402491
  402c78:	20401160 	.word	0x20401160
  402c7c:	20401178 	.word	0x20401178
  402c80:	00401f35 	.word	0x00401f35
  402c84:	00402065 	.word	0x00402065
  402c88:	0040105d 	.word	0x0040105d
  402c8c:	00402391 	.word	0x00402391
  402c90:	004023c7 	.word	0x004023c7
  402c94:	004023e3 	.word	0x004023e3

00402c98 <MCAN1_INT0_Handler>:

void MCAN1_INT0_Handler(void)
{
  402c98:	b590      	push	{r4, r7, lr}
  402c9a:	b087      	sub	sp, #28
  402c9c:	af02      	add	r7, sp, #8
	volatile uint32_t status, i, rx_buffer_index;
	status = mcan_read_interrupt_status(&mcan1_instance);
  402c9e:	485e      	ldr	r0, [pc, #376]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402ca0:	4b5e      	ldr	r3, [pc, #376]	; (402e1c <MCAN1_INT0_Handler+0x184>)
  402ca2:	4798      	blx	r3
  402ca4:	4603      	mov	r3, r0
  402ca6:	60fb      	str	r3, [r7, #12]

	if (status & MCAN_RX_BUFFER_NEW_MESSAGE) 
  402ca8:	68fb      	ldr	r3, [r7, #12]
  402caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402cae:	2b00      	cmp	r3, #0
  402cb0:	d02e      	beq.n	402d10 <MCAN1_INT0_Handler+0x78>
	{	
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_BUFFER_NEW_MESSAGE);
  402cb2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402cb6:	4858      	ldr	r0, [pc, #352]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402cb8:	4b59      	ldr	r3, [pc, #356]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402cba:	4798      	blx	r3
		
		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Message stored to Dedicated Rx Buffer Interrupt\r\n");
		#endif

		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402cbc:	2300      	movs	r3, #0
  402cbe:	60bb      	str	r3, [r7, #8]
  402cc0:	e023      	b.n	402d0a <MCAN1_INT0_Handler+0x72>
			if (mcan_rx_get_buffer_status(&mcan0_instance, i)) 
  402cc2:	68bb      	ldr	r3, [r7, #8]
  402cc4:	4619      	mov	r1, r3
  402cc6:	4857      	ldr	r0, [pc, #348]	; (402e24 <MCAN1_INT0_Handler+0x18c>)
  402cc8:	4b57      	ldr	r3, [pc, #348]	; (402e28 <MCAN1_INT0_Handler+0x190>)
  402cca:	4798      	blx	r3
  402ccc:	4603      	mov	r3, r0
  402cce:	2b00      	cmp	r3, #0
  402cd0:	d018      	beq.n	402d04 <MCAN1_INT0_Handler+0x6c>
			{
				rx_buffer_index = i;
  402cd2:	68bb      	ldr	r3, [r7, #8]
  402cd4:	607b      	str	r3, [r7, #4]
				mcan_rx_clear_buffer_status(&mcan1_instance, i);
  402cd6:	68bb      	ldr	r3, [r7, #8]
  402cd8:	4619      	mov	r1, r3
  402cda:	484f      	ldr	r0, [pc, #316]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402cdc:	4b53      	ldr	r3, [pc, #332]	; (402e2c <MCAN1_INT0_Handler+0x194>)
  402cde:	4798      	blx	r3
				mcan_get_rx_buffer_element(&mcan1_instance, &mcan1_rx_element_buffer, rx_buffer_index);
  402ce0:	687b      	ldr	r3, [r7, #4]
  402ce2:	461a      	mov	r2, r3
  402ce4:	4952      	ldr	r1, [pc, #328]	; (402e30 <MCAN1_INT0_Handler+0x198>)
  402ce6:	484c      	ldr	r0, [pc, #304]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402ce8:	4b52      	ldr	r3, [pc, #328]	; (402e34 <MCAN1_INT0_Handler+0x19c>)
  402cea:	4798      	blx	r3
				
				_mcan1_push_message(mcan1_rx_element_buffer.R0, mcan1_rx_element_buffer.R1, mcan1_rx_element_buffer.data, unix_timestamp_ms);
  402cec:	4b52      	ldr	r3, [pc, #328]	; (402e38 <MCAN1_INT0_Handler+0x1a0>)
  402cee:	e9d3 3400 	ldrd	r3, r4, [r3]
  402cf2:	494f      	ldr	r1, [pc, #316]	; (402e30 <MCAN1_INT0_Handler+0x198>)
  402cf4:	484e      	ldr	r0, [pc, #312]	; (402e30 <MCAN1_INT0_Handler+0x198>)
  402cf6:	e9cd 3400 	strd	r3, r4, [sp]
  402cfa:	4a50      	ldr	r2, [pc, #320]	; (402e3c <MCAN1_INT0_Handler+0x1a4>)
  402cfc:	6849      	ldr	r1, [r1, #4]
  402cfe:	6800      	ldr	r0, [r0, #0]
  402d00:	4b4f      	ldr	r3, [pc, #316]	; (402e40 <MCAN1_INT0_Handler+0x1a8>)
  402d02:	4798      	blx	r3
		for (i = 0; i < CONF_MCAN1_RX_BUFFER_NUM; i++) {
  402d04:	68bb      	ldr	r3, [r7, #8]
  402d06:	3301      	adds	r3, #1
  402d08:	60bb      	str	r3, [r7, #8]
  402d0a:	68bb      	ldr	r3, [r7, #8]
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	d0d8      	beq.n	402cc2 <MCAN1_INT0_Handler+0x2a>

			}
		}
	}

	if (status & MCAN_RX_FIFO_0_NEW_MESSAGE) 
  402d10:	68fb      	ldr	r3, [r7, #12]
  402d12:	f003 0301 	and.w	r3, r3, #1
  402d16:	2b00      	cmp	r3, #0
  402d18:	d029      	beq.n	402d6e <MCAN1_INT0_Handler+0xd6>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_0_NEW_MESSAGE);
  402d1a:	2101      	movs	r1, #1
  402d1c:	483e      	ldr	r0, [pc, #248]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d1e:	4b40      	ldr	r3, [pc, #256]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402d20:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 0 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_0_element(&mcan1_instance, &mcan1_rx_element_fifo_0, mcan1_standard_receive_index);
  402d22:	4b48      	ldr	r3, [pc, #288]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d24:	681b      	ldr	r3, [r3, #0]
  402d26:	461a      	mov	r2, r3
  402d28:	4947      	ldr	r1, [pc, #284]	; (402e48 <MCAN1_INT0_Handler+0x1b0>)
  402d2a:	483b      	ldr	r0, [pc, #236]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d2c:	4b47      	ldr	r3, [pc, #284]	; (402e4c <MCAN1_INT0_Handler+0x1b4>)
  402d2e:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 0, mcan1_standard_receive_index);
  402d30:	4b44      	ldr	r3, [pc, #272]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d32:	681b      	ldr	r3, [r3, #0]
  402d34:	461a      	mov	r2, r3
  402d36:	2100      	movs	r1, #0
  402d38:	4837      	ldr	r0, [pc, #220]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d3a:	4b45      	ldr	r3, [pc, #276]	; (402e50 <MCAN1_INT0_Handler+0x1b8>)
  402d3c:	4798      	blx	r3
		
		mcan1_standard_receive_index++;
  402d3e:	4b41      	ldr	r3, [pc, #260]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d40:	681b      	ldr	r3, [r3, #0]
  402d42:	3301      	adds	r3, #1
  402d44:	4a3f      	ldr	r2, [pc, #252]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d46:	6013      	str	r3, [r2, #0]
		
		if (mcan1_standard_receive_index == CONF_MCAN1_RX_FIFO_0_NUM)
  402d48:	4b3e      	ldr	r3, [pc, #248]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d4a:	681b      	ldr	r3, [r3, #0]
  402d4c:	2b10      	cmp	r3, #16
  402d4e:	d102      	bne.n	402d56 <MCAN1_INT0_Handler+0xbe>
		{
			mcan1_standard_receive_index = 0;
  402d50:	4b3c      	ldr	r3, [pc, #240]	; (402e44 <MCAN1_INT0_Handler+0x1ac>)
  402d52:	2200      	movs	r2, #0
  402d54:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_0.R0, mcan1_rx_element_fifo_0.R1, mcan1_rx_element_fifo_0.data, unix_timestamp_ms);
  402d56:	4b38      	ldr	r3, [pc, #224]	; (402e38 <MCAN1_INT0_Handler+0x1a0>)
  402d58:	e9d3 3400 	ldrd	r3, r4, [r3]
  402d5c:	493a      	ldr	r1, [pc, #232]	; (402e48 <MCAN1_INT0_Handler+0x1b0>)
  402d5e:	483a      	ldr	r0, [pc, #232]	; (402e48 <MCAN1_INT0_Handler+0x1b0>)
  402d60:	e9cd 3400 	strd	r3, r4, [sp]
  402d64:	4a3b      	ldr	r2, [pc, #236]	; (402e54 <MCAN1_INT0_Handler+0x1bc>)
  402d66:	6849      	ldr	r1, [r1, #4]
  402d68:	6800      	ldr	r0, [r0, #0]
  402d6a:	4b35      	ldr	r3, [pc, #212]	; (402e40 <MCAN1_INT0_Handler+0x1a8>)
  402d6c:	4798      	blx	r3
	}

	if (status & MCAN_RX_FIFO_1_NEW_MESSAGE) 
  402d6e:	68fb      	ldr	r3, [r7, #12]
  402d70:	f003 0310 	and.w	r3, r3, #16
  402d74:	2b00      	cmp	r3, #0
  402d76:	d029      	beq.n	402dcc <MCAN1_INT0_Handler+0x134>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_RX_FIFO_1_NEW_MESSAGE);
  402d78:	2110      	movs	r1, #16
  402d7a:	4827      	ldr	r0, [pc, #156]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d7c:	4b28      	ldr	r3, [pc, #160]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402d7e:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("CAN1 Rx FIFO 1 New Message Interrupt\r\n");
		#endif

		mcan_get_rx_fifo_1_element(&mcan1_instance, &mcan1_rx_element_fifo_1, mcan1_extended_receive_index);
  402d80:	4b35      	ldr	r3, [pc, #212]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402d82:	681b      	ldr	r3, [r3, #0]
  402d84:	461a      	mov	r2, r3
  402d86:	4935      	ldr	r1, [pc, #212]	; (402e5c <MCAN1_INT0_Handler+0x1c4>)
  402d88:	4823      	ldr	r0, [pc, #140]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d8a:	4b35      	ldr	r3, [pc, #212]	; (402e60 <MCAN1_INT0_Handler+0x1c8>)
  402d8c:	4798      	blx	r3
		mcan_rx_fifo_acknowledge(&mcan1_instance, 1, mcan1_extended_receive_index);
  402d8e:	4b32      	ldr	r3, [pc, #200]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402d90:	681b      	ldr	r3, [r3, #0]
  402d92:	461a      	mov	r2, r3
  402d94:	2101      	movs	r1, #1
  402d96:	4820      	ldr	r0, [pc, #128]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402d98:	4b2d      	ldr	r3, [pc, #180]	; (402e50 <MCAN1_INT0_Handler+0x1b8>)
  402d9a:	4798      	blx	r3
		
		mcan1_extended_receive_index++;
  402d9c:	4b2e      	ldr	r3, [pc, #184]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402d9e:	681b      	ldr	r3, [r3, #0]
  402da0:	3301      	adds	r3, #1
  402da2:	4a2d      	ldr	r2, [pc, #180]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402da4:	6013      	str	r3, [r2, #0]

		if (mcan1_extended_receive_index == CONF_MCAN1_RX_FIFO_1_NUM) 
  402da6:	4b2c      	ldr	r3, [pc, #176]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402da8:	681b      	ldr	r3, [r3, #0]
  402daa:	2b10      	cmp	r3, #16
  402dac:	d102      	bne.n	402db4 <MCAN1_INT0_Handler+0x11c>
		{
			mcan1_extended_receive_index = 0;
  402dae:	4b2a      	ldr	r3, [pc, #168]	; (402e58 <MCAN1_INT0_Handler+0x1c0>)
  402db0:	2200      	movs	r2, #0
  402db2:	601a      	str	r2, [r3, #0]
		}

		_mcan1_push_message(mcan1_rx_element_fifo_1.R0, mcan1_rx_element_fifo_1.R1, mcan1_rx_element_fifo_1.data, unix_timestamp_ms);
  402db4:	4b20      	ldr	r3, [pc, #128]	; (402e38 <MCAN1_INT0_Handler+0x1a0>)
  402db6:	e9d3 3400 	ldrd	r3, r4, [r3]
  402dba:	4928      	ldr	r1, [pc, #160]	; (402e5c <MCAN1_INT0_Handler+0x1c4>)
  402dbc:	4827      	ldr	r0, [pc, #156]	; (402e5c <MCAN1_INT0_Handler+0x1c4>)
  402dbe:	e9cd 3400 	strd	r3, r4, [sp]
  402dc2:	4a28      	ldr	r2, [pc, #160]	; (402e64 <MCAN1_INT0_Handler+0x1cc>)
  402dc4:	6849      	ldr	r1, [r1, #4]
  402dc6:	6800      	ldr	r0, [r0, #0]
  402dc8:	4b1d      	ldr	r3, [pc, #116]	; (402e40 <MCAN1_INT0_Handler+0x1a8>)
  402dca:	4798      	blx	r3
	}
	
	//Usually occures if can tx pin is not connected to transciever or to a tranciever not enabled or the ioport has not been set
	if (status & MCAN_BUS_OFF) 
  402dcc:	68fb      	ldr	r3, [r7, #12]
  402dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  402dd2:	2b00      	cmp	r3, #0
  402dd4:	d007      	beq.n	402de6 <MCAN1_INT0_Handler+0x14e>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_BUS_OFF);
  402dd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402dda:	480f      	ldr	r0, [pc, #60]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402ddc:	4b10      	ldr	r3, [pc, #64]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402dde:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Bus Off Status \r\n");
		#endif
		
		mcan_stop(&mcan1_instance);
  402de0:	480d      	ldr	r0, [pc, #52]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402de2:	4b21      	ldr	r3, [pc, #132]	; (402e68 <MCAN1_INT0_Handler+0x1d0>)
  402de4:	4798      	blx	r3
		
	}

	//Usually occures when sending message with different clock (either bad clock from sending device or SAM E70)
	//This means that no receiver has understood your message and thus they did not ack it
	if (status & MCAN_ACKNOWLEDGE_ERROR) 
  402de6:	68fb      	ldr	r3, [r7, #12]
  402de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
  402dec:	2b00      	cmp	r3, #0
  402dee:	d004      	beq.n	402dfa <MCAN1_INT0_Handler+0x162>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_ACKNOWLEDGE_ERROR);
  402df0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402df4:	4808      	ldr	r0, [pc, #32]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402df6:	4b0a      	ldr	r3, [pc, #40]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402df8:	4798      	blx	r3
		printf("\n\rCAN1 Acknowledge Error \r\n");
		#endif
	}
	
	//Usually occures if can rx pin is not connected to transciever or recieving message with different clock (either bad clock from sending device or SAM E70)
	if (status & MCAN_FORMAT_ERROR) 
  402dfa:	68fb      	ldr	r3, [r7, #12]
  402dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402e00:	2b00      	cmp	r3, #0
  402e02:	d004      	beq.n	402e0e <MCAN1_INT0_Handler+0x176>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_FORMAT_ERROR);
  402e04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402e08:	4803      	ldr	r0, [pc, #12]	; (402e18 <MCAN1_INT0_Handler+0x180>)
  402e0a:	4b05      	ldr	r3, [pc, #20]	; (402e20 <MCAN1_INT0_Handler+0x188>)
  402e0c:	4798      	blx	r3

		#ifdef MCAN1_INT0_DEBUG
		printf("\n\rCAN1 Format Error \r\n");
		#endif	
	}
}
  402e0e:	bf00      	nop
  402e10:	3714      	adds	r7, #20
  402e12:	46bd      	mov	sp, r7
  402e14:	bd90      	pop	{r4, r7, pc}
  402e16:	bf00      	nop
  402e18:	204011c0 	.word	0x204011c0
  402e1c:	00402477 	.word	0x00402477
  402e20:	00402491 	.word	0x00402491
  402e24:	2040114c 	.word	0x2040114c
  402e28:	00402267 	.word	0x00402267
  402e2c:	004022c3 	.word	0x004022c3
  402e30:	2040113c 	.word	0x2040113c
  402e34:	00400f19 	.word	0x00400f19
  402e38:	204010d8 	.word	0x204010d8
  402e3c:	20401144 	.word	0x20401144
  402e40:	004028b9 	.word	0x004028b9
  402e44:	204011a8 	.word	0x204011a8
  402e48:	204011c4 	.word	0x204011c4
  402e4c:	00400f85 	.word	0x00400f85
  402e50:	00402307 	.word	0x00402307
  402e54:	204011cc 	.word	0x204011cc
  402e58:	20401128 	.word	0x20401128
  402e5c:	2040112c 	.word	0x2040112c
  402e60:	00400ff1 	.word	0x00400ff1
  402e64:	20401134 	.word	0x20401134
  402e68:	00400e09 	.word	0x00400e09

00402e6c <MCAN1_INT1_Handler>:

void MCAN1_INT1_Handler(void)
{
  402e6c:	b580      	push	{r7, lr}
  402e6e:	b088      	sub	sp, #32
  402e70:	af00      	add	r7, sp, #0
	volatile uint32_t status, i;
	status = mcan_read_interrupt_status(&mcan1_instance);
  402e72:	4840      	ldr	r0, [pc, #256]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402e74:	4b40      	ldr	r3, [pc, #256]	; (402f78 <MCAN1_INT1_Handler+0x10c>)
  402e76:	4798      	blx	r3
  402e78:	4603      	mov	r3, r0
  402e7a:	617b      	str	r3, [r7, #20]
	
	if (status & MCAN_TIMESTAMP_COMPLETE)//This should be called MCAN_TRANSMISSION_COMPLETE, error from ASF. Might be fixed in the future!
  402e7c:	697b      	ldr	r3, [r7, #20]
  402e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  402e82:	2b00      	cmp	r3, #0
  402e84:	d029      	beq.n	402eda <MCAN1_INT1_Handler+0x6e>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TIMESTAMP_COMPLETE);
  402e86:	f44f 7100 	mov.w	r1, #512	; 0x200
  402e8a:	483a      	ldr	r0, [pc, #232]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402e8c:	4b3b      	ldr	r3, [pc, #236]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402e8e:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Completed Interrupt\r\n");
		#endif

		if(!mcan1_buffer.adding_in_tx_buffer)
  402e90:	4b3b      	ldr	r3, [pc, #236]	; (402f80 <MCAN1_INT1_Handler+0x114>)
  402e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402e96:	b2db      	uxtb	r3, r3
  402e98:	2b00      	cmp	r3, #0
  402e9a:	d11a      	bne.n	402ed2 <MCAN1_INT1_Handler+0x66>
		{
			if(circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_tx)>0)
  402e9c:	4839      	ldr	r0, [pc, #228]	; (402f84 <MCAN1_INT1_Handler+0x118>)
  402e9e:	4b3a      	ldr	r3, [pc, #232]	; (402f88 <MCAN1_INT1_Handler+0x11c>)
  402ea0:	4798      	blx	r3
  402ea2:	4603      	mov	r3, r0
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	d00f      	beq.n	402ec8 <MCAN1_INT1_Handler+0x5c>
			{
				struct mcan_tx_element tx_elem;
				circ_buf_flex_pop(&mcan1_buffer.buffer_tx, &tx_elem);
  402ea8:	463b      	mov	r3, r7
  402eaa:	4619      	mov	r1, r3
  402eac:	4835      	ldr	r0, [pc, #212]	; (402f84 <MCAN1_INT1_Handler+0x118>)
  402eae:	4b37      	ldr	r3, [pc, #220]	; (402f8c <MCAN1_INT1_Handler+0x120>)
  402eb0:	4798      	blx	r3

				//we have to offset the buffer number in order to write in the fifo memory.
				mcan_set_tx_buffer_element(&mcan1_instance, &tx_elem, CONF_MCAN1_TX_BUFFER_NUM);
  402eb2:	463b      	mov	r3, r7
  402eb4:	2201      	movs	r2, #1
  402eb6:	4619      	mov	r1, r3
  402eb8:	482e      	ldr	r0, [pc, #184]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402eba:	4b35      	ldr	r3, [pc, #212]	; (402f90 <MCAN1_INT1_Handler+0x124>)
  402ebc:	4798      	blx	r3
				mcan_tx_transfer_request(&mcan1_instance, 1 << CONF_MCAN1_TX_BUFFER_NUM);
  402ebe:	2102      	movs	r1, #2
  402ec0:	482c      	ldr	r0, [pc, #176]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402ec2:	4b34      	ldr	r3, [pc, #208]	; (402f94 <MCAN1_INT1_Handler+0x128>)
  402ec4:	4798      	blx	r3
  402ec6:	e008      	b.n	402eda <MCAN1_INT1_Handler+0x6e>
			}
			else
			{
				mcan1_buffer.buffer_being_emptied_by_interruption = false;
  402ec8:	4b2d      	ldr	r3, [pc, #180]	; (402f80 <MCAN1_INT1_Handler+0x114>)
  402eca:	2200      	movs	r2, #0
  402ecc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  402ed0:	e003      	b.n	402eda <MCAN1_INT1_Handler+0x6e>
			}
		}
		else mcan1_buffer.interruption_occured_while_adding_in_tx_buffer = true;
  402ed2:	4b2b      	ldr	r3, [pc, #172]	; (402f80 <MCAN1_INT1_Handler+0x114>)
  402ed4:	2201      	movs	r2, #1
  402ed6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	if (status & MCAN_TX_CANCELLATION_FINISH)
  402eda:	697b      	ldr	r3, [r7, #20]
  402edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402ee0:	2b00      	cmp	r3, #0
  402ee2:	d004      	beq.n	402eee <MCAN1_INT1_Handler+0x82>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_CANCELLATION_FINISH);
  402ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ee8:	4822      	ldr	r0, [pc, #136]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402eea:	4b24      	ldr	r3, [pc, #144]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402eec:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Transmission Cancellation Finished Interrupt \r\n");
		#endif
	}
	if (status & MCAN_TX_FIFO_EMPTY)
  402eee:	697b      	ldr	r3, [r7, #20]
  402ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  402ef4:	2b00      	cmp	r3, #0
  402ef6:	d004      	beq.n	402f02 <MCAN1_INT1_Handler+0x96>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_FIFO_EMPTY);
  402ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402efc:	481d      	ldr	r0, [pc, #116]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402efe:	4b1f      	ldr	r3, [pc, #124]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402f00:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx FIFO Empty Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_NEW_ENTRY)
  402f02:	697b      	ldr	r3, [r7, #20]
  402f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  402f08:	2b00      	cmp	r3, #0
  402f0a:	d011      	beq.n	402f30 <MCAN1_INT1_Handler+0xc4>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_NEW_ENTRY);
  402f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402f10:	4818      	ldr	r0, [pc, #96]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f12:	4b1a      	ldr	r3, [pc, #104]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402f14:	4798      	blx	r3
		printf("CAN1 Tx Event FIFO New Entry Interrupt \r\n");
		#endif

		//TODO We could get the CAN message from fifo and get information on the message sent such as error and bit rate switch if fd
		//ack event fifo
		uint32_t fifo_status = mcan_tx_get_event_fifo_status(&mcan1_instance);
  402f16:	4817      	ldr	r0, [pc, #92]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f18:	4b1f      	ldr	r3, [pc, #124]	; (402f98 <MCAN1_INT1_Handler+0x12c>)
  402f1a:	4798      	blx	r3
  402f1c:	61f8      	str	r0, [r7, #28]
		//bool is_full = (fifo_status & (0x1u<<25))>>25;
		//uint32_t fifo_put_index = (fifo_status & MCAN_TXEFS_EFPI_Msk)>>MCAN_TXEFS_EFPI_Pos;
		uint32_t fifo_get_index = (fifo_status & MCAN_TXEFS_EFGI_Msk)>>MCAN_TXEFS_EFGI_Pos;
  402f1e:	69fb      	ldr	r3, [r7, #28]
  402f20:	0a1b      	lsrs	r3, r3, #8
  402f22:	f003 031f 	and.w	r3, r3, #31
  402f26:	61bb      	str	r3, [r7, #24]
		//uint32_t fifo_fill_level = (fifo_status & MCAN_TXEFS_EFFL_Msk)>>MCAN_TXEFS_EFFL_Pos;
		
		mcan_tx_event_fifo_acknowledge(&mcan1_instance, fifo_get_index);
  402f28:	69b9      	ldr	r1, [r7, #24]
  402f2a:	4812      	ldr	r0, [pc, #72]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f2c:	4b1b      	ldr	r3, [pc, #108]	; (402f9c <MCAN1_INT1_Handler+0x130>)
  402f2e:	4798      	blx	r3
	}
	if (status & MCAN_TX_EVENT_FIFO_WATERMARK)
  402f30:	697b      	ldr	r3, [r7, #20]
  402f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  402f36:	2b00      	cmp	r3, #0
  402f38:	d004      	beq.n	402f44 <MCAN1_INT1_Handler+0xd8>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_WATERMARK);
  402f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402f3e:	480d      	ldr	r0, [pc, #52]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f40:	4b0e      	ldr	r3, [pc, #56]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402f42:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Watermark Reached Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_FULL)
  402f44:	697b      	ldr	r3, [r7, #20]
  402f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	d004      	beq.n	402f58 <MCAN1_INT1_Handler+0xec>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_FULL);
  402f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402f52:	4808      	ldr	r0, [pc, #32]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f54:	4b09      	ldr	r3, [pc, #36]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402f56:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Full Interrupt\r\n");
		#endif
	}
	if (status & MCAN_TX_EVENT_FIFO_ELEMENT_LOST)
  402f58:	697b      	ldr	r3, [r7, #20]
  402f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  402f5e:	2b00      	cmp	r3, #0
  402f60:	d004      	beq.n	402f6c <MCAN1_INT1_Handler+0x100>
	{
		mcan_clear_interrupt_status(&mcan1_instance, MCAN_TX_EVENT_FIFO_ELEMENT_LOST);
  402f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  402f66:	4803      	ldr	r0, [pc, #12]	; (402f74 <MCAN1_INT1_Handler+0x108>)
  402f68:	4b04      	ldr	r3, [pc, #16]	; (402f7c <MCAN1_INT1_Handler+0x110>)
  402f6a:	4798      	blx	r3

		#ifdef MCAN1_INT1_DEBUG
		printf("CAN1 Tx Event FIFO Element Lost Interrupt\r\n");
		#endif
	}
}
  402f6c:	bf00      	nop
  402f6e:	3720      	adds	r7, #32
  402f70:	46bd      	mov	sp, r7
  402f72:	bd80      	pop	{r7, pc}
  402f74:	204011c0 	.word	0x204011c0
  402f78:	00402477 	.word	0x00402477
  402f7c:	00402491 	.word	0x00402491
  402f80:	204011d4 	.word	0x204011d4
  402f84:	204011ec 	.word	0x204011ec
  402f88:	00401f35 	.word	0x00401f35
  402f8c:	00402065 	.word	0x00402065
  402f90:	0040105d 	.word	0x0040105d
  402f94:	00402391 	.word	0x00402391
  402f98:	004023c7 	.word	0x004023c7
  402f9c:	004023e3 	.word	0x004023e3

00402fa0 <mcan0_send_message>:
	mcan_set_tx_buffer_element(module_inst, &tx_element, offsetTX);
	mcan_tx_transfer_request(module_inst, 1 << offsetTX);
}

uint8_t mcan0_send_message(uint32_t id_value, uint8_t *data, uint32_t data_length, bool is_extended, bool is_remote_transmition)
{
  402fa0:	b580      	push	{r7, lr}
  402fa2:	b08e      	sub	sp, #56	; 0x38
  402fa4:	af00      	add	r7, sp, #0
  402fa6:	60f8      	str	r0, [r7, #12]
  402fa8:	60b9      	str	r1, [r7, #8]
  402faa:	607a      	str	r2, [r7, #4]
  402fac:	70fb      	strb	r3, [r7, #3]
	uint8_t result;

	uint32_t i;
	struct mcan_tx_element tx_element;

	mcan_get_tx_buffer_element_defaults(&tx_element);
  402fae:	f107 0320 	add.w	r3, r7, #32
  402fb2:	4618      	mov	r0, r3
  402fb4:	4b44      	ldr	r3, [pc, #272]	; (4030c8 <mcan0_send_message+0x128>)
  402fb6:	4798      	blx	r3
	if (is_extended)
  402fb8:	78fb      	ldrb	r3, [r7, #3]
  402fba:	2b00      	cmp	r3, #0
  402fbc:	d008      	beq.n	402fd0 <mcan0_send_message+0x30>
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
  402fbe:	6a3a      	ldr	r2, [r7, #32]
  402fc0:	68fb      	ldr	r3, [r7, #12]
  402fc2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  402fc6:	4313      	orrs	r3, r2
  402fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402fcc:	623b      	str	r3, [r7, #32]
  402fce:	e006      	b.n	402fde <mcan0_send_message+0x3e>
			MCAN_TX_ELEMENT_T0_XTD;
	}
	else
	{
		tx_element.T0.reg |= MCAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
  402fd0:	6a3a      	ldr	r2, [r7, #32]
  402fd2:	68fb      	ldr	r3, [r7, #12]
  402fd4:	0499      	lsls	r1, r3, #18
  402fd6:	4b3d      	ldr	r3, [pc, #244]	; (4030cc <mcan0_send_message+0x12c>)
  402fd8:	400b      	ands	r3, r1
  402fda:	4313      	orrs	r3, r2
  402fdc:	623b      	str	r3, [r7, #32]
	}

	if(is_remote_transmition)
  402fde:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  402fe2:	2b00      	cmp	r3, #0
  402fe4:	d003      	beq.n	402fee <mcan0_send_message+0x4e>
	{
		tx_element.T0.bit.RTR = 1;
  402fe6:	6a3b      	ldr	r3, [r7, #32]
  402fe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402fec:	623b      	str	r3, [r7, #32]
	}

	tx_element.T1.bit.DLC = data_length;
  402fee:	687b      	ldr	r3, [r7, #4]
  402ff0:	b2db      	uxtb	r3, r3
  402ff2:	f003 030f 	and.w	r3, r3, #15
  402ff6:	b2da      	uxtb	r2, r3
  402ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402ffa:	f362 4313 	bfi	r3, r2, #16, #4
  402ffe:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < data_length; i++) {
  403000:	2300      	movs	r3, #0
  403002:	637b      	str	r3, [r7, #52]	; 0x34
  403004:	e00d      	b.n	403022 <mcan0_send_message+0x82>
		tx_element.data[i] = *data; 
  403006:	68bb      	ldr	r3, [r7, #8]
  403008:	7819      	ldrb	r1, [r3, #0]
  40300a:	f107 0228 	add.w	r2, r7, #40	; 0x28
  40300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403010:	4413      	add	r3, r2
  403012:	460a      	mov	r2, r1
  403014:	701a      	strb	r2, [r3, #0]
		data++;
  403016:	68bb      	ldr	r3, [r7, #8]
  403018:	3301      	adds	r3, #1
  40301a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < data_length; i++) {
  40301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40301e:	3301      	adds	r3, #1
  403020:	637b      	str	r3, [r7, #52]	; 0x34
  403022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  403024:	687b      	ldr	r3, [r7, #4]
  403026:	429a      	cmp	r2, r3
  403028:	d3ed      	bcc.n	403006 <mcan0_send_message+0x66>
	}

	//Set flag to prevent problem with interruption
	mcan0_buffer.adding_in_tx_buffer = true;
  40302a:	4b29      	ldr	r3, [pc, #164]	; (4030d0 <mcan0_send_message+0x130>)
  40302c:	2201      	movs	r2, #1
  40302e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	result = circ_buf_flex_push(&mcan0_buffer.buffer_tx, &tx_element);
  403032:	f107 0320 	add.w	r3, r7, #32
  403036:	4619      	mov	r1, r3
  403038:	4826      	ldr	r0, [pc, #152]	; (4030d4 <mcan0_send_message+0x134>)
  40303a:	4b27      	ldr	r3, [pc, #156]	; (4030d8 <mcan0_send_message+0x138>)
  40303c:	4798      	blx	r3
  40303e:	4603      	mov	r3, r0
  403040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	mcan0_buffer.adding_in_tx_buffer = false;
  403044:	4b22      	ldr	r3, [pc, #136]	; (4030d0 <mcan0_send_message+0x130>)
  403046:	2200      	movs	r2, #0
  403048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if((mcan0_buffer.interruption_occured_while_adding_in_tx_buffer | !mcan0_buffer.buffer_being_emptied_by_interruption) & result == CBF_SUCCESS)
  40304c:	4b20      	ldr	r3, [pc, #128]	; (4030d0 <mcan0_send_message+0x130>)
  40304e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
  403052:	b2db      	uxtb	r3, r3
  403054:	461a      	mov	r2, r3
  403056:	4b1e      	ldr	r3, [pc, #120]	; (4030d0 <mcan0_send_message+0x130>)
  403058:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  40305c:	b2db      	uxtb	r3, r3
  40305e:	2b00      	cmp	r3, #0
  403060:	bf0c      	ite	eq
  403062:	2301      	moveq	r3, #1
  403064:	2300      	movne	r3, #0
  403066:	b2db      	uxtb	r3, r3
  403068:	4313      	orrs	r3, r2
  40306a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
  40306e:	2a00      	cmp	r2, #0
  403070:	bf0c      	ite	eq
  403072:	2201      	moveq	r2, #1
  403074:	2200      	movne	r2, #0
  403076:	b2d2      	uxtb	r2, r2
  403078:	4013      	ands	r3, r2
  40307a:	2b00      	cmp	r3, #0
  40307c:	d01e      	beq.n	4030bc <mcan0_send_message+0x11c>
	{
		//No need of this if we've just added a message to the buffer and prevent interruption to deal with messages !
		//We know for sure that there is at least the message in our buffer.
		if(circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_tx) > 0)
  40307e:	4815      	ldr	r0, [pc, #84]	; (4030d4 <mcan0_send_message+0x134>)
  403080:	4b16      	ldr	r3, [pc, #88]	; (4030dc <mcan0_send_message+0x13c>)
  403082:	4798      	blx	r3
  403084:	4603      	mov	r3, r0
  403086:	2b00      	cmp	r3, #0
  403088:	d018      	beq.n	4030bc <mcan0_send_message+0x11c>
		{
			struct mcan_tx_element tx_elem;
			circ_buf_flex_pop(&mcan0_buffer.buffer_tx, &tx_elem);
  40308a:	f107 0310 	add.w	r3, r7, #16
  40308e:	4619      	mov	r1, r3
  403090:	4810      	ldr	r0, [pc, #64]	; (4030d4 <mcan0_send_message+0x134>)
  403092:	4b13      	ldr	r3, [pc, #76]	; (4030e0 <mcan0_send_message+0x140>)
  403094:	4798      	blx	r3
			//we have to offset the buffer number in order to write in the fifo memory.
			mcan_set_tx_buffer_element(&mcan0_instance, &tx_elem, CONF_MCAN0_TX_BUFFER_NUM);
  403096:	f107 0310 	add.w	r3, r7, #16
  40309a:	2201      	movs	r2, #1
  40309c:	4619      	mov	r1, r3
  40309e:	4811      	ldr	r0, [pc, #68]	; (4030e4 <mcan0_send_message+0x144>)
  4030a0:	4b11      	ldr	r3, [pc, #68]	; (4030e8 <mcan0_send_message+0x148>)
  4030a2:	4798      	blx	r3
			mcan_tx_transfer_request(&mcan0_instance, 1 << CONF_MCAN0_TX_BUFFER_NUM);
  4030a4:	2102      	movs	r1, #2
  4030a6:	480f      	ldr	r0, [pc, #60]	; (4030e4 <mcan0_send_message+0x144>)
  4030a8:	4b10      	ldr	r3, [pc, #64]	; (4030ec <mcan0_send_message+0x14c>)
  4030aa:	4798      	blx	r3
			
			//reset flags
			mcan0_buffer.interruption_occured_while_adding_in_tx_buffer = false;
  4030ac:	4b08      	ldr	r3, [pc, #32]	; (4030d0 <mcan0_send_message+0x130>)
  4030ae:	2200      	movs	r2, #0
  4030b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			mcan0_buffer.buffer_being_emptied_by_interruption = true;
  4030b4:	4b06      	ldr	r3, [pc, #24]	; (4030d0 <mcan0_send_message+0x130>)
  4030b6:	2201      	movs	r2, #1
  4030b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		}
	}

	return result;
  4030bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
	
}
  4030c0:	4618      	mov	r0, r3
  4030c2:	3738      	adds	r7, #56	; 0x38
  4030c4:	46bd      	mov	sp, r7
  4030c6:	bd80      	pop	{r7, pc}
  4030c8:	00402407 	.word	0x00402407
  4030cc:	1ffc0000 	.word	0x1ffc0000
  4030d0:	20401160 	.word	0x20401160
  4030d4:	20401178 	.word	0x20401178
  4030d8:	00401fdd 	.word	0x00401fdd
  4030dc:	00401f35 	.word	0x00401f35
  4030e0:	00402065 	.word	0x00402065
  4030e4:	2040114c 	.word	0x2040114c
  4030e8:	0040105d 	.word	0x0040105d
  4030ec:	00402391 	.word	0x00402391

004030f0 <mcan1_available_message>:
uint32_t mcan0_available_message(void)
{
	return circ_buf_flex_available_elements_to_read(&mcan0_buffer.buffer_rx);
}
uint32_t mcan1_available_message(void)
{
  4030f0:	b580      	push	{r7, lr}
  4030f2:	af00      	add	r7, sp, #0
	return circ_buf_flex_available_elements_to_read(&mcan1_buffer.buffer_rx);
  4030f4:	4802      	ldr	r0, [pc, #8]	; (403100 <mcan1_available_message+0x10>)
  4030f6:	4b03      	ldr	r3, [pc, #12]	; (403104 <mcan1_available_message+0x14>)
  4030f8:	4798      	blx	r3
  4030fa:	4603      	mov	r3, r0
}
  4030fc:	4618      	mov	r0, r3
  4030fe:	bd80      	pop	{r7, pc}
  403100:	204011d4 	.word	0x204011d4
  403104:	00401f35 	.word	0x00401f35

00403108 <mcan1_get_message>:
uint8_t mcan0_get_message(mcan_timestamped_rx_message_t* ts_rx_message)
{
	return circ_buf_flex_pop(&mcan0_buffer.buffer_rx, ts_rx_message);
}
uint8_t mcan1_get_message(mcan_timestamped_rx_message_t* ts_rx_message)
{
  403108:	b580      	push	{r7, lr}
  40310a:	b082      	sub	sp, #8
  40310c:	af00      	add	r7, sp, #0
  40310e:	6078      	str	r0, [r7, #4]
	return circ_buf_flex_pop(&mcan1_buffer.buffer_rx, ts_rx_message);
  403110:	6879      	ldr	r1, [r7, #4]
  403112:	4804      	ldr	r0, [pc, #16]	; (403124 <mcan1_get_message+0x1c>)
  403114:	4b04      	ldr	r3, [pc, #16]	; (403128 <mcan1_get_message+0x20>)
  403116:	4798      	blx	r3
  403118:	4603      	mov	r3, r0
  40311a:	4618      	mov	r0, r3
  40311c:	3708      	adds	r7, #8
  40311e:	46bd      	mov	sp, r7
  403120:	bd80      	pop	{r7, pc}
  403122:	bf00      	nop
  403124:	204011d4 	.word	0x204011d4
  403128:	00402065 	.word	0x00402065

0040312c <__NVIC_SetPriority>:
{
  40312c:	b480      	push	{r7}
  40312e:	b083      	sub	sp, #12
  403130:	af00      	add	r7, sp, #0
  403132:	4603      	mov	r3, r0
  403134:	6039      	str	r1, [r7, #0]
  403136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403138:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40313c:	2b00      	cmp	r3, #0
  40313e:	db0a      	blt.n	403156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403140:	490d      	ldr	r1, [pc, #52]	; (403178 <__NVIC_SetPriority+0x4c>)
  403142:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403146:	683a      	ldr	r2, [r7, #0]
  403148:	b2d2      	uxtb	r2, r2
  40314a:	0152      	lsls	r2, r2, #5
  40314c:	b2d2      	uxtb	r2, r2
  40314e:	440b      	add	r3, r1
  403150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403154:	e00a      	b.n	40316c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403156:	4909      	ldr	r1, [pc, #36]	; (40317c <__NVIC_SetPriority+0x50>)
  403158:	79fb      	ldrb	r3, [r7, #7]
  40315a:	f003 030f 	and.w	r3, r3, #15
  40315e:	3b04      	subs	r3, #4
  403160:	683a      	ldr	r2, [r7, #0]
  403162:	b2d2      	uxtb	r2, r2
  403164:	0152      	lsls	r2, r2, #5
  403166:	b2d2      	uxtb	r2, r2
  403168:	440b      	add	r3, r1
  40316a:	761a      	strb	r2, [r3, #24]
}
  40316c:	bf00      	nop
  40316e:	370c      	adds	r7, #12
  403170:	46bd      	mov	sp, r7
  403172:	f85d 7b04 	ldr.w	r7, [sp], #4
  403176:	4770      	bx	lr
  403178:	e000e100 	.word	0xe000e100
  40317c:	e000ed00 	.word	0xe000ed00

00403180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  403180:	b580      	push	{r7, lr}
  403182:	b082      	sub	sp, #8
  403184:	af00      	add	r7, sp, #0
  403186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  403188:	687b      	ldr	r3, [r7, #4]
  40318a:	3b01      	subs	r3, #1
  40318c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  403190:	d301      	bcc.n	403196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
  403192:	2301      	movs	r3, #1
  403194:	e00f      	b.n	4031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  403196:	4a0a      	ldr	r2, [pc, #40]	; (4031c0 <SysTick_Config+0x40>)
  403198:	687b      	ldr	r3, [r7, #4]
  40319a:	3b01      	subs	r3, #1
  40319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  40319e:	2107      	movs	r1, #7
  4031a0:	f04f 30ff 	mov.w	r0, #4294967295
  4031a4:	4b07      	ldr	r3, [pc, #28]	; (4031c4 <SysTick_Config+0x44>)
  4031a6:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  4031a8:	4b05      	ldr	r3, [pc, #20]	; (4031c0 <SysTick_Config+0x40>)
  4031aa:	2200      	movs	r2, #0
  4031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4031ae:	4b04      	ldr	r3, [pc, #16]	; (4031c0 <SysTick_Config+0x40>)
  4031b0:	2207      	movs	r2, #7
  4031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
  4031b4:	2300      	movs	r3, #0
}
  4031b6:	4618      	mov	r0, r3
  4031b8:	3708      	adds	r7, #8
  4031ba:	46bd      	mov	sp, r7
  4031bc:	bd80      	pop	{r7, pc}
  4031be:	bf00      	nop
  4031c0:	e000e010 	.word	0xe000e010
  4031c4:	0040312d 	.word	0x0040312d

004031c8 <osc_get_rate>:
{
  4031c8:	b480      	push	{r7}
  4031ca:	b083      	sub	sp, #12
  4031cc:	af00      	add	r7, sp, #0
  4031ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4031d0:	687b      	ldr	r3, [r7, #4]
  4031d2:	2b07      	cmp	r3, #7
  4031d4:	d825      	bhi.n	403222 <osc_get_rate+0x5a>
  4031d6:	a201      	add	r2, pc, #4	; (adr r2, 4031dc <osc_get_rate+0x14>)
  4031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4031dc:	004031fd 	.word	0x004031fd
  4031e0:	00403203 	.word	0x00403203
  4031e4:	00403209 	.word	0x00403209
  4031e8:	0040320f 	.word	0x0040320f
  4031ec:	00403213 	.word	0x00403213
  4031f0:	00403217 	.word	0x00403217
  4031f4:	0040321b 	.word	0x0040321b
  4031f8:	0040321f 	.word	0x0040321f
		return OSC_SLCK_32K_RC_HZ;
  4031fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403200:	e010      	b.n	403224 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  403202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403206:	e00d      	b.n	403224 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40320c:	e00a      	b.n	403224 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40320e:	4b08      	ldr	r3, [pc, #32]	; (403230 <osc_get_rate+0x68>)
  403210:	e008      	b.n	403224 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  403212:	4b08      	ldr	r3, [pc, #32]	; (403234 <osc_get_rate+0x6c>)
  403214:	e006      	b.n	403224 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  403216:	4b08      	ldr	r3, [pc, #32]	; (403238 <osc_get_rate+0x70>)
  403218:	e004      	b.n	403224 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40321a:	4b07      	ldr	r3, [pc, #28]	; (403238 <osc_get_rate+0x70>)
  40321c:	e002      	b.n	403224 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40321e:	4b06      	ldr	r3, [pc, #24]	; (403238 <osc_get_rate+0x70>)
  403220:	e000      	b.n	403224 <osc_get_rate+0x5c>
	return 0;
  403222:	2300      	movs	r3, #0
}
  403224:	4618      	mov	r0, r3
  403226:	370c      	adds	r7, #12
  403228:	46bd      	mov	sp, r7
  40322a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40322e:	4770      	bx	lr
  403230:	003d0900 	.word	0x003d0900
  403234:	007a1200 	.word	0x007a1200
  403238:	00b71b00 	.word	0x00b71b00

0040323c <sysclk_get_main_hz>:
{
  40323c:	b580      	push	{r7, lr}
  40323e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403240:	2006      	movs	r0, #6
  403242:	4b05      	ldr	r3, [pc, #20]	; (403258 <sysclk_get_main_hz+0x1c>)
  403244:	4798      	blx	r3
  403246:	4602      	mov	r2, r0
  403248:	4613      	mov	r3, r2
  40324a:	009b      	lsls	r3, r3, #2
  40324c:	4413      	add	r3, r2
  40324e:	009a      	lsls	r2, r3, #2
  403250:	4413      	add	r3, r2
}
  403252:	4618      	mov	r0, r3
  403254:	bd80      	pop	{r7, pc}
  403256:	bf00      	nop
  403258:	004031c9 	.word	0x004031c9

0040325c <sysclk_get_cpu_hz>:
{
  40325c:	b580      	push	{r7, lr}
  40325e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403260:	4b02      	ldr	r3, [pc, #8]	; (40326c <sysclk_get_cpu_hz+0x10>)
  403262:	4798      	blx	r3
  403264:	4603      	mov	r3, r0
}
  403266:	4618      	mov	r0, r3
  403268:	bd80      	pop	{r7, pc}
  40326a:	bf00      	nop
  40326c:	0040323d 	.word	0x0040323d

00403270 <sysclk_get_peripheral_hz>:
{
  403270:	b580      	push	{r7, lr}
  403272:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403274:	4b02      	ldr	r3, [pc, #8]	; (403280 <sysclk_get_peripheral_hz+0x10>)
  403276:	4798      	blx	r3
  403278:	4603      	mov	r3, r0
  40327a:	085b      	lsrs	r3, r3, #1
}
  40327c:	4618      	mov	r0, r3
  40327e:	bd80      	pop	{r7, pc}
  403280:	0040323d 	.word	0x0040323d

00403284 <sysclk_enable_peripheral_clock>:
{
  403284:	b580      	push	{r7, lr}
  403286:	b082      	sub	sp, #8
  403288:	af00      	add	r7, sp, #0
  40328a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40328c:	6878      	ldr	r0, [r7, #4]
  40328e:	4b03      	ldr	r3, [pc, #12]	; (40329c <sysclk_enable_peripheral_clock+0x18>)
  403290:	4798      	blx	r3
}
  403292:	bf00      	nop
  403294:	3708      	adds	r7, #8
  403296:	46bd      	mov	sp, r7
  403298:	bd80      	pop	{r7, pc}
  40329a:	bf00      	nop
  40329c:	00401645 	.word	0x00401645

004032a0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4032a0:	b580      	push	{r7, lr}
  4032a2:	b08c      	sub	sp, #48	; 0x30
  4032a4:	af00      	add	r7, sp, #0
  4032a6:	6078      	str	r0, [r7, #4]
  4032a8:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4032aa:	4b4f      	ldr	r3, [pc, #316]	; (4033e8 <usart_serial_init+0x148>)
  4032ac:	4798      	blx	r3
  4032ae:	4603      	mov	r3, r0
  4032b0:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4032b2:	683b      	ldr	r3, [r7, #0]
  4032b4:	681b      	ldr	r3, [r3, #0]
  4032b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4032b8:	683b      	ldr	r3, [r7, #0]
  4032ba:	689b      	ldr	r3, [r3, #8]
  4032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4032be:	683b      	ldr	r3, [r7, #0]
  4032c0:	681b      	ldr	r3, [r3, #0]
  4032c2:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4032c4:	683b      	ldr	r3, [r7, #0]
  4032c6:	685b      	ldr	r3, [r3, #4]
  4032c8:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4032ca:	683b      	ldr	r3, [r7, #0]
  4032cc:	689b      	ldr	r3, [r3, #8]
  4032ce:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4032d0:	683b      	ldr	r3, [r7, #0]
  4032d2:	68db      	ldr	r3, [r3, #12]
  4032d4:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4032d6:	2300      	movs	r3, #0
  4032d8:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4032da:	687b      	ldr	r3, [r7, #4]
  4032dc:	4a43      	ldr	r2, [pc, #268]	; (4033ec <usart_serial_init+0x14c>)
  4032de:	4293      	cmp	r3, r2
  4032e0:	d108      	bne.n	4032f4 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4032e2:	2007      	movs	r0, #7
  4032e4:	4b42      	ldr	r3, [pc, #264]	; (4033f0 <usart_serial_init+0x150>)
  4032e6:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4032e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4032ec:	4619      	mov	r1, r3
  4032ee:	6878      	ldr	r0, [r7, #4]
  4032f0:	4b40      	ldr	r3, [pc, #256]	; (4033f4 <usart_serial_init+0x154>)
  4032f2:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4032f4:	687b      	ldr	r3, [r7, #4]
  4032f6:	4a40      	ldr	r2, [pc, #256]	; (4033f8 <usart_serial_init+0x158>)
  4032f8:	4293      	cmp	r3, r2
  4032fa:	d108      	bne.n	40330e <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4032fc:	2008      	movs	r0, #8
  4032fe:	4b3c      	ldr	r3, [pc, #240]	; (4033f0 <usart_serial_init+0x150>)
  403300:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403302:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403306:	4619      	mov	r1, r3
  403308:	6878      	ldr	r0, [r7, #4]
  40330a:	4b3a      	ldr	r3, [pc, #232]	; (4033f4 <usart_serial_init+0x154>)
  40330c:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40330e:	687b      	ldr	r3, [r7, #4]
  403310:	4a3a      	ldr	r2, [pc, #232]	; (4033fc <usart_serial_init+0x15c>)
  403312:	4293      	cmp	r3, r2
  403314:	d108      	bne.n	403328 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  403316:	202c      	movs	r0, #44	; 0x2c
  403318:	4b35      	ldr	r3, [pc, #212]	; (4033f0 <usart_serial_init+0x150>)
  40331a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403320:	4619      	mov	r1, r3
  403322:	6878      	ldr	r0, [r7, #4]
  403324:	4b33      	ldr	r3, [pc, #204]	; (4033f4 <usart_serial_init+0x154>)
  403326:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403328:	687b      	ldr	r3, [r7, #4]
  40332a:	4a35      	ldr	r2, [pc, #212]	; (403400 <usart_serial_init+0x160>)
  40332c:	4293      	cmp	r3, r2
  40332e:	d108      	bne.n	403342 <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  403330:	202d      	movs	r0, #45	; 0x2d
  403332:	4b2f      	ldr	r3, [pc, #188]	; (4033f0 <usart_serial_init+0x150>)
  403334:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403336:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40333a:	4619      	mov	r1, r3
  40333c:	6878      	ldr	r0, [r7, #4]
  40333e:	4b2d      	ldr	r3, [pc, #180]	; (4033f4 <usart_serial_init+0x154>)
  403340:	4798      	blx	r3
	}
# endif
# ifdef UART4
	if (UART4 == (Uart*)p_usart) {
  403342:	687b      	ldr	r3, [r7, #4]
  403344:	4a2f      	ldr	r2, [pc, #188]	; (403404 <usart_serial_init+0x164>)
  403346:	4293      	cmp	r3, r2
  403348:	d108      	bne.n	40335c <usart_serial_init+0xbc>
		sysclk_enable_peripheral_clock(ID_UART4);
  40334a:	202e      	movs	r0, #46	; 0x2e
  40334c:	4b28      	ldr	r3, [pc, #160]	; (4033f0 <usart_serial_init+0x150>)
  40334e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  403350:	f107 0324 	add.w	r3, r7, #36	; 0x24
  403354:	4619      	mov	r1, r3
  403356:	6878      	ldr	r0, [r7, #4]
  403358:	4b26      	ldr	r3, [pc, #152]	; (4033f4 <usart_serial_init+0x154>)
  40335a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40335c:	687b      	ldr	r3, [r7, #4]
  40335e:	4a2a      	ldr	r2, [pc, #168]	; (403408 <usart_serial_init+0x168>)
  403360:	4293      	cmp	r3, r2
  403362:	d111      	bne.n	403388 <usart_serial_init+0xe8>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  403364:	200d      	movs	r0, #13
  403366:	4b22      	ldr	r3, [pc, #136]	; (4033f0 <usart_serial_init+0x150>)
  403368:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40336a:	4b1f      	ldr	r3, [pc, #124]	; (4033e8 <usart_serial_init+0x148>)
  40336c:	4798      	blx	r3
  40336e:	4602      	mov	r2, r0
  403370:	f107 030c 	add.w	r3, r7, #12
  403374:	4619      	mov	r1, r3
  403376:	6878      	ldr	r0, [r7, #4]
  403378:	4b24      	ldr	r3, [pc, #144]	; (40340c <usart_serial_init+0x16c>)
  40337a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40337c:	6878      	ldr	r0, [r7, #4]
  40337e:	4b24      	ldr	r3, [pc, #144]	; (403410 <usart_serial_init+0x170>)
  403380:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403382:	6878      	ldr	r0, [r7, #4]
  403384:	4b23      	ldr	r3, [pc, #140]	; (403414 <usart_serial_init+0x174>)
  403386:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403388:	687b      	ldr	r3, [r7, #4]
  40338a:	4a23      	ldr	r2, [pc, #140]	; (403418 <usart_serial_init+0x178>)
  40338c:	4293      	cmp	r3, r2
  40338e:	d111      	bne.n	4033b4 <usart_serial_init+0x114>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  403390:	200e      	movs	r0, #14
  403392:	4b17      	ldr	r3, [pc, #92]	; (4033f0 <usart_serial_init+0x150>)
  403394:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  403396:	4b14      	ldr	r3, [pc, #80]	; (4033e8 <usart_serial_init+0x148>)
  403398:	4798      	blx	r3
  40339a:	4602      	mov	r2, r0
  40339c:	f107 030c 	add.w	r3, r7, #12
  4033a0:	4619      	mov	r1, r3
  4033a2:	6878      	ldr	r0, [r7, #4]
  4033a4:	4b19      	ldr	r3, [pc, #100]	; (40340c <usart_serial_init+0x16c>)
  4033a6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4033a8:	6878      	ldr	r0, [r7, #4]
  4033aa:	4b19      	ldr	r3, [pc, #100]	; (403410 <usart_serial_init+0x170>)
  4033ac:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4033ae:	6878      	ldr	r0, [r7, #4]
  4033b0:	4b18      	ldr	r3, [pc, #96]	; (403414 <usart_serial_init+0x174>)
  4033b2:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4033b4:	687b      	ldr	r3, [r7, #4]
  4033b6:	4a19      	ldr	r2, [pc, #100]	; (40341c <usart_serial_init+0x17c>)
  4033b8:	4293      	cmp	r3, r2
  4033ba:	d111      	bne.n	4033e0 <usart_serial_init+0x140>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4033bc:	200f      	movs	r0, #15
  4033be:	4b0c      	ldr	r3, [pc, #48]	; (4033f0 <usart_serial_init+0x150>)
  4033c0:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4033c2:	4b09      	ldr	r3, [pc, #36]	; (4033e8 <usart_serial_init+0x148>)
  4033c4:	4798      	blx	r3
  4033c6:	4602      	mov	r2, r0
  4033c8:	f107 030c 	add.w	r3, r7, #12
  4033cc:	4619      	mov	r1, r3
  4033ce:	6878      	ldr	r0, [r7, #4]
  4033d0:	4b0e      	ldr	r3, [pc, #56]	; (40340c <usart_serial_init+0x16c>)
  4033d2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4033d4:	6878      	ldr	r0, [r7, #4]
  4033d6:	4b0e      	ldr	r3, [pc, #56]	; (403410 <usart_serial_init+0x170>)
  4033d8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4033da:	6878      	ldr	r0, [r7, #4]
  4033dc:	4b0d      	ldr	r3, [pc, #52]	; (403414 <usart_serial_init+0x174>)
  4033de:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4033e0:	bf00      	nop
  4033e2:	3730      	adds	r7, #48	; 0x30
  4033e4:	46bd      	mov	sp, r7
  4033e6:	bd80      	pop	{r7, pc}
  4033e8:	00403271 	.word	0x00403271
  4033ec:	400e0800 	.word	0x400e0800
  4033f0:	00403285 	.word	0x00403285
  4033f4:	00401781 	.word	0x00401781
  4033f8:	400e0a00 	.word	0x400e0a00
  4033fc:	400e1a00 	.word	0x400e1a00
  403400:	400e1c00 	.word	0x400e1c00
  403404:	400e1e00 	.word	0x400e1e00
  403408:	40024000 	.word	0x40024000
  40340c:	00401919 	.word	0x00401919
  403410:	0040199d 	.word	0x0040199d
  403414:	004019d1 	.word	0x004019d1
  403418:	40028000 	.word	0x40028000
  40341c:	4002c000 	.word	0x4002c000

00403420 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  403420:	b580      	push	{r7, lr}
  403422:	b082      	sub	sp, #8
  403424:	af00      	add	r7, sp, #0
  403426:	6078      	str	r0, [r7, #4]
  403428:	460b      	mov	r3, r1
  40342a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40342c:	687b      	ldr	r3, [r7, #4]
  40342e:	4a36      	ldr	r2, [pc, #216]	; (403508 <usart_serial_putchar+0xe8>)
  403430:	4293      	cmp	r3, r2
  403432:	d10a      	bne.n	40344a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  403434:	bf00      	nop
  403436:	78fb      	ldrb	r3, [r7, #3]
  403438:	4619      	mov	r1, r3
  40343a:	6878      	ldr	r0, [r7, #4]
  40343c:	4b33      	ldr	r3, [pc, #204]	; (40350c <usart_serial_putchar+0xec>)
  40343e:	4798      	blx	r3
  403440:	4603      	mov	r3, r0
  403442:	2b00      	cmp	r3, #0
  403444:	d1f7      	bne.n	403436 <usart_serial_putchar+0x16>
		return 1;
  403446:	2301      	movs	r3, #1
  403448:	e05a      	b.n	403500 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40344a:	687b      	ldr	r3, [r7, #4]
  40344c:	4a30      	ldr	r2, [pc, #192]	; (403510 <usart_serial_putchar+0xf0>)
  40344e:	4293      	cmp	r3, r2
  403450:	d10a      	bne.n	403468 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  403452:	bf00      	nop
  403454:	78fb      	ldrb	r3, [r7, #3]
  403456:	4619      	mov	r1, r3
  403458:	6878      	ldr	r0, [r7, #4]
  40345a:	4b2c      	ldr	r3, [pc, #176]	; (40350c <usart_serial_putchar+0xec>)
  40345c:	4798      	blx	r3
  40345e:	4603      	mov	r3, r0
  403460:	2b00      	cmp	r3, #0
  403462:	d1f7      	bne.n	403454 <usart_serial_putchar+0x34>
		return 1;
  403464:	2301      	movs	r3, #1
  403466:	e04b      	b.n	403500 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403468:	687b      	ldr	r3, [r7, #4]
  40346a:	4a2a      	ldr	r2, [pc, #168]	; (403514 <usart_serial_putchar+0xf4>)
  40346c:	4293      	cmp	r3, r2
  40346e:	d10a      	bne.n	403486 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  403470:	bf00      	nop
  403472:	78fb      	ldrb	r3, [r7, #3]
  403474:	4619      	mov	r1, r3
  403476:	6878      	ldr	r0, [r7, #4]
  403478:	4b24      	ldr	r3, [pc, #144]	; (40350c <usart_serial_putchar+0xec>)
  40347a:	4798      	blx	r3
  40347c:	4603      	mov	r3, r0
  40347e:	2b00      	cmp	r3, #0
  403480:	d1f7      	bne.n	403472 <usart_serial_putchar+0x52>
		return 1;
  403482:	2301      	movs	r3, #1
  403484:	e03c      	b.n	403500 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403486:	687b      	ldr	r3, [r7, #4]
  403488:	4a23      	ldr	r2, [pc, #140]	; (403518 <usart_serial_putchar+0xf8>)
  40348a:	4293      	cmp	r3, r2
  40348c:	d10a      	bne.n	4034a4 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40348e:	bf00      	nop
  403490:	78fb      	ldrb	r3, [r7, #3]
  403492:	4619      	mov	r1, r3
  403494:	6878      	ldr	r0, [r7, #4]
  403496:	4b1d      	ldr	r3, [pc, #116]	; (40350c <usart_serial_putchar+0xec>)
  403498:	4798      	blx	r3
  40349a:	4603      	mov	r3, r0
  40349c:	2b00      	cmp	r3, #0
  40349e:	d1f7      	bne.n	403490 <usart_serial_putchar+0x70>
		return 1;
  4034a0:	2301      	movs	r3, #1
  4034a2:	e02d      	b.n	403500 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4034a4:	687b      	ldr	r3, [r7, #4]
  4034a6:	4a1d      	ldr	r2, [pc, #116]	; (40351c <usart_serial_putchar+0xfc>)
  4034a8:	4293      	cmp	r3, r2
  4034aa:	d10a      	bne.n	4034c2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4034ac:	bf00      	nop
  4034ae:	78fb      	ldrb	r3, [r7, #3]
  4034b0:	4619      	mov	r1, r3
  4034b2:	6878      	ldr	r0, [r7, #4]
  4034b4:	4b1a      	ldr	r3, [pc, #104]	; (403520 <usart_serial_putchar+0x100>)
  4034b6:	4798      	blx	r3
  4034b8:	4603      	mov	r3, r0
  4034ba:	2b00      	cmp	r3, #0
  4034bc:	d1f7      	bne.n	4034ae <usart_serial_putchar+0x8e>
		return 1;
  4034be:	2301      	movs	r3, #1
  4034c0:	e01e      	b.n	403500 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4034c2:	687b      	ldr	r3, [r7, #4]
  4034c4:	4a17      	ldr	r2, [pc, #92]	; (403524 <usart_serial_putchar+0x104>)
  4034c6:	4293      	cmp	r3, r2
  4034c8:	d10a      	bne.n	4034e0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4034ca:	bf00      	nop
  4034cc:	78fb      	ldrb	r3, [r7, #3]
  4034ce:	4619      	mov	r1, r3
  4034d0:	6878      	ldr	r0, [r7, #4]
  4034d2:	4b13      	ldr	r3, [pc, #76]	; (403520 <usart_serial_putchar+0x100>)
  4034d4:	4798      	blx	r3
  4034d6:	4603      	mov	r3, r0
  4034d8:	2b00      	cmp	r3, #0
  4034da:	d1f7      	bne.n	4034cc <usart_serial_putchar+0xac>
		return 1;
  4034dc:	2301      	movs	r3, #1
  4034de:	e00f      	b.n	403500 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4034e0:	687b      	ldr	r3, [r7, #4]
  4034e2:	4a11      	ldr	r2, [pc, #68]	; (403528 <usart_serial_putchar+0x108>)
  4034e4:	4293      	cmp	r3, r2
  4034e6:	d10a      	bne.n	4034fe <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4034e8:	bf00      	nop
  4034ea:	78fb      	ldrb	r3, [r7, #3]
  4034ec:	4619      	mov	r1, r3
  4034ee:	6878      	ldr	r0, [r7, #4]
  4034f0:	4b0b      	ldr	r3, [pc, #44]	; (403520 <usart_serial_putchar+0x100>)
  4034f2:	4798      	blx	r3
  4034f4:	4603      	mov	r3, r0
  4034f6:	2b00      	cmp	r3, #0
  4034f8:	d1f7      	bne.n	4034ea <usart_serial_putchar+0xca>
		return 1;
  4034fa:	2301      	movs	r3, #1
  4034fc:	e000      	b.n	403500 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4034fe:	2300      	movs	r3, #0
}
  403500:	4618      	mov	r0, r3
  403502:	3708      	adds	r7, #8
  403504:	46bd      	mov	sp, r7
  403506:	bd80      	pop	{r7, pc}
  403508:	400e0800 	.word	0x400e0800
  40350c:	004017d9 	.word	0x004017d9
  403510:	400e0a00 	.word	0x400e0a00
  403514:	400e1a00 	.word	0x400e1a00
  403518:	400e1c00 	.word	0x400e1c00
  40351c:	40024000 	.word	0x40024000
  403520:	00401a3d 	.word	0x00401a3d
  403524:	40028000 	.word	0x40028000
  403528:	4002c000 	.word	0x4002c000

0040352c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40352c:	b580      	push	{r7, lr}
  40352e:	b084      	sub	sp, #16
  403530:	af00      	add	r7, sp, #0
  403532:	6078      	str	r0, [r7, #4]
  403534:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  403536:	2300      	movs	r3, #0
  403538:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40353a:	687b      	ldr	r3, [r7, #4]
  40353c:	4a34      	ldr	r2, [pc, #208]	; (403610 <usart_serial_getchar+0xe4>)
  40353e:	4293      	cmp	r3, r2
  403540:	d107      	bne.n	403552 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  403542:	bf00      	nop
  403544:	6839      	ldr	r1, [r7, #0]
  403546:	6878      	ldr	r0, [r7, #4]
  403548:	4b32      	ldr	r3, [pc, #200]	; (403614 <usart_serial_getchar+0xe8>)
  40354a:	4798      	blx	r3
  40354c:	4603      	mov	r3, r0
  40354e:	2b00      	cmp	r3, #0
  403550:	d1f8      	bne.n	403544 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403552:	687b      	ldr	r3, [r7, #4]
  403554:	4a30      	ldr	r2, [pc, #192]	; (403618 <usart_serial_getchar+0xec>)
  403556:	4293      	cmp	r3, r2
  403558:	d107      	bne.n	40356a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40355a:	bf00      	nop
  40355c:	6839      	ldr	r1, [r7, #0]
  40355e:	6878      	ldr	r0, [r7, #4]
  403560:	4b2c      	ldr	r3, [pc, #176]	; (403614 <usart_serial_getchar+0xe8>)
  403562:	4798      	blx	r3
  403564:	4603      	mov	r3, r0
  403566:	2b00      	cmp	r3, #0
  403568:	d1f8      	bne.n	40355c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40356a:	687b      	ldr	r3, [r7, #4]
  40356c:	4a2b      	ldr	r2, [pc, #172]	; (40361c <usart_serial_getchar+0xf0>)
  40356e:	4293      	cmp	r3, r2
  403570:	d107      	bne.n	403582 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  403572:	bf00      	nop
  403574:	6839      	ldr	r1, [r7, #0]
  403576:	6878      	ldr	r0, [r7, #4]
  403578:	4b26      	ldr	r3, [pc, #152]	; (403614 <usart_serial_getchar+0xe8>)
  40357a:	4798      	blx	r3
  40357c:	4603      	mov	r3, r0
  40357e:	2b00      	cmp	r3, #0
  403580:	d1f8      	bne.n	403574 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403582:	687b      	ldr	r3, [r7, #4]
  403584:	4a26      	ldr	r2, [pc, #152]	; (403620 <usart_serial_getchar+0xf4>)
  403586:	4293      	cmp	r3, r2
  403588:	d107      	bne.n	40359a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40358a:	bf00      	nop
  40358c:	6839      	ldr	r1, [r7, #0]
  40358e:	6878      	ldr	r0, [r7, #4]
  403590:	4b20      	ldr	r3, [pc, #128]	; (403614 <usart_serial_getchar+0xe8>)
  403592:	4798      	blx	r3
  403594:	4603      	mov	r3, r0
  403596:	2b00      	cmp	r3, #0
  403598:	d1f8      	bne.n	40358c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40359a:	687b      	ldr	r3, [r7, #4]
  40359c:	4a21      	ldr	r2, [pc, #132]	; (403624 <usart_serial_getchar+0xf8>)
  40359e:	4293      	cmp	r3, r2
  4035a0:	d10d      	bne.n	4035be <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4035a2:	bf00      	nop
  4035a4:	f107 030c 	add.w	r3, r7, #12
  4035a8:	4619      	mov	r1, r3
  4035aa:	6878      	ldr	r0, [r7, #4]
  4035ac:	4b1e      	ldr	r3, [pc, #120]	; (403628 <usart_serial_getchar+0xfc>)
  4035ae:	4798      	blx	r3
  4035b0:	4603      	mov	r3, r0
  4035b2:	2b00      	cmp	r3, #0
  4035b4:	d1f6      	bne.n	4035a4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4035b6:	68fb      	ldr	r3, [r7, #12]
  4035b8:	b2da      	uxtb	r2, r3
  4035ba:	683b      	ldr	r3, [r7, #0]
  4035bc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4035be:	687b      	ldr	r3, [r7, #4]
  4035c0:	4a1a      	ldr	r2, [pc, #104]	; (40362c <usart_serial_getchar+0x100>)
  4035c2:	4293      	cmp	r3, r2
  4035c4:	d10d      	bne.n	4035e2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4035c6:	bf00      	nop
  4035c8:	f107 030c 	add.w	r3, r7, #12
  4035cc:	4619      	mov	r1, r3
  4035ce:	6878      	ldr	r0, [r7, #4]
  4035d0:	4b15      	ldr	r3, [pc, #84]	; (403628 <usart_serial_getchar+0xfc>)
  4035d2:	4798      	blx	r3
  4035d4:	4603      	mov	r3, r0
  4035d6:	2b00      	cmp	r3, #0
  4035d8:	d1f6      	bne.n	4035c8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4035da:	68fb      	ldr	r3, [r7, #12]
  4035dc:	b2da      	uxtb	r2, r3
  4035de:	683b      	ldr	r3, [r7, #0]
  4035e0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4035e2:	687b      	ldr	r3, [r7, #4]
  4035e4:	4a12      	ldr	r2, [pc, #72]	; (403630 <usart_serial_getchar+0x104>)
  4035e6:	4293      	cmp	r3, r2
  4035e8:	d10d      	bne.n	403606 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4035ea:	bf00      	nop
  4035ec:	f107 030c 	add.w	r3, r7, #12
  4035f0:	4619      	mov	r1, r3
  4035f2:	6878      	ldr	r0, [r7, #4]
  4035f4:	4b0c      	ldr	r3, [pc, #48]	; (403628 <usart_serial_getchar+0xfc>)
  4035f6:	4798      	blx	r3
  4035f8:	4603      	mov	r3, r0
  4035fa:	2b00      	cmp	r3, #0
  4035fc:	d1f6      	bne.n	4035ec <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4035fe:	68fb      	ldr	r3, [r7, #12]
  403600:	b2da      	uxtb	r2, r3
  403602:	683b      	ldr	r3, [r7, #0]
  403604:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403606:	bf00      	nop
  403608:	3710      	adds	r7, #16
  40360a:	46bd      	mov	sp, r7
  40360c:	bd80      	pop	{r7, pc}
  40360e:	bf00      	nop
  403610:	400e0800 	.word	0x400e0800
  403614:	00401809 	.word	0x00401809
  403618:	400e0a00 	.word	0x400e0a00
  40361c:	400e1a00 	.word	0x400e1a00
  403620:	400e1c00 	.word	0x400e1c00
  403624:	40024000 	.word	0x40024000
  403628:	00401a6f 	.word	0x00401a6f
  40362c:	40028000 	.word	0x40028000
  403630:	4002c000 	.word	0x4002c000

00403634 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  403634:	b580      	push	{r7, lr}
  403636:	b082      	sub	sp, #8
  403638:	af00      	add	r7, sp, #0
  40363a:	6078      	str	r0, [r7, #4]
  40363c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  40363e:	4a0f      	ldr	r2, [pc, #60]	; (40367c <stdio_serial_init+0x48>)
  403640:	687b      	ldr	r3, [r7, #4]
  403642:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403644:	4b0e      	ldr	r3, [pc, #56]	; (403680 <stdio_serial_init+0x4c>)
  403646:	4a0f      	ldr	r2, [pc, #60]	; (403684 <stdio_serial_init+0x50>)
  403648:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40364a:	4b0f      	ldr	r3, [pc, #60]	; (403688 <stdio_serial_init+0x54>)
  40364c:	4a0f      	ldr	r2, [pc, #60]	; (40368c <stdio_serial_init+0x58>)
  40364e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  403650:	6839      	ldr	r1, [r7, #0]
  403652:	6878      	ldr	r0, [r7, #4]
  403654:	4b0e      	ldr	r3, [pc, #56]	; (403690 <stdio_serial_init+0x5c>)
  403656:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403658:	4b0e      	ldr	r3, [pc, #56]	; (403694 <stdio_serial_init+0x60>)
  40365a:	681b      	ldr	r3, [r3, #0]
  40365c:	689b      	ldr	r3, [r3, #8]
  40365e:	2100      	movs	r1, #0
  403660:	4618      	mov	r0, r3
  403662:	4b0d      	ldr	r3, [pc, #52]	; (403698 <stdio_serial_init+0x64>)
  403664:	4798      	blx	r3
	setbuf(stdin, NULL);
  403666:	4b0b      	ldr	r3, [pc, #44]	; (403694 <stdio_serial_init+0x60>)
  403668:	681b      	ldr	r3, [r3, #0]
  40366a:	685b      	ldr	r3, [r3, #4]
  40366c:	2100      	movs	r1, #0
  40366e:	4618      	mov	r0, r3
  403670:	4b09      	ldr	r3, [pc, #36]	; (403698 <stdio_serial_init+0x64>)
  403672:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  403674:	bf00      	nop
  403676:	3708      	adds	r7, #8
  403678:	46bd      	mov	sp, r7
  40367a:	bd80      	pop	{r7, pc}
  40367c:	20401124 	.word	0x20401124
  403680:	20401120 	.word	0x20401120
  403684:	00403421 	.word	0x00403421
  403688:	2040111c 	.word	0x2040111c
  40368c:	0040352d 	.word	0x0040352d
  403690:	004032a1 	.word	0x004032a1
  403694:	20400010 	.word	0x20400010
  403698:	004040b1 	.word	0x004040b1

0040369c <SysTick_Handler>:

volatile uint64_t unix_timestamp_ms = 0;
volatile uint32_t counter = 0;

void SysTick_Handler(void)
{
  40369c:	b490      	push	{r4, r7}
  40369e:	af00      	add	r7, sp, #0
	counter++;
  4036a0:	4b08      	ldr	r3, [pc, #32]	; (4036c4 <SysTick_Handler+0x28>)
  4036a2:	681b      	ldr	r3, [r3, #0]
  4036a4:	3301      	adds	r3, #1
  4036a6:	4a07      	ldr	r2, [pc, #28]	; (4036c4 <SysTick_Handler+0x28>)
  4036a8:	6013      	str	r3, [r2, #0]
	unix_timestamp_ms++;
  4036aa:	4b07      	ldr	r3, [pc, #28]	; (4036c8 <SysTick_Handler+0x2c>)
  4036ac:	e9d3 3400 	ldrd	r3, r4, [r3]
  4036b0:	3301      	adds	r3, #1
  4036b2:	f144 0400 	adc.w	r4, r4, #0
  4036b6:	4a04      	ldr	r2, [pc, #16]	; (4036c8 <SysTick_Handler+0x2c>)
  4036b8:	e9c2 3400 	strd	r3, r4, [r2]
}
  4036bc:	bf00      	nop
  4036be:	46bd      	mov	sp, r7
  4036c0:	bc90      	pop	{r4, r7}
  4036c2:	4770      	bx	lr
  4036c4:	204010e0 	.word	0x204010e0
  4036c8:	204010d8 	.word	0x204010d8

004036cc <mdelay>:

static void mdelay(uint32_t delay)
{
  4036cc:	b480      	push	{r7}
  4036ce:	b085      	sub	sp, #20
  4036d0:	af00      	add	r7, sp, #0
  4036d2:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	
	ticks = counter;
  4036d4:	4b08      	ldr	r3, [pc, #32]	; (4036f8 <mdelay+0x2c>)
  4036d6:	681b      	ldr	r3, [r3, #0]
  4036d8:	60fb      	str	r3, [r7, #12]
	while ((counter - ticks) < delay);
  4036da:	bf00      	nop
  4036dc:	4b06      	ldr	r3, [pc, #24]	; (4036f8 <mdelay+0x2c>)
  4036de:	681a      	ldr	r2, [r3, #0]
  4036e0:	68fb      	ldr	r3, [r7, #12]
  4036e2:	1ad2      	subs	r2, r2, r3
  4036e4:	687b      	ldr	r3, [r7, #4]
  4036e6:	429a      	cmp	r2, r3
  4036e8:	d3f8      	bcc.n	4036dc <mdelay+0x10>
}
  4036ea:	bf00      	nop
  4036ec:	3714      	adds	r7, #20
  4036ee:	46bd      	mov	sp, r7
  4036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036f4:	4770      	bx	lr
  4036f6:	bf00      	nop
  4036f8:	204010e0 	.word	0x204010e0

004036fc <configure_console>:
/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
  4036fc:	b590      	push	{r4, r7, lr}
  4036fe:	b085      	sub	sp, #20
  403700:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
  403702:	4b08      	ldr	r3, [pc, #32]	; (403724 <configure_console+0x28>)
  403704:	463c      	mov	r4, r7
  403706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.stopbits = CONF_UART_STOP_BITS,
#endif
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  40370c:	200e      	movs	r0, #14
  40370e:	4b06      	ldr	r3, [pc, #24]	; (403728 <configure_console+0x2c>)
  403710:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  403712:	463b      	mov	r3, r7
  403714:	4619      	mov	r1, r3
  403716:	4805      	ldr	r0, [pc, #20]	; (40372c <configure_console+0x30>)
  403718:	4b05      	ldr	r3, [pc, #20]	; (403730 <configure_console+0x34>)
  40371a:	4798      	blx	r3
}
  40371c:	bf00      	nop
  40371e:	3714      	adds	r7, #20
  403720:	46bd      	mov	sp, r7
  403722:	bd90      	pop	{r4, r7, pc}
  403724:	00406848 	.word	0x00406848
  403728:	00403285 	.word	0x00403285
  40372c:	40028000 	.word	0x40028000
  403730:	00403635 	.word	0x00403635

00403734 <mcan1_get_message_available>:
		
	}
}

void mcan1_get_message_available()
{
  403734:	b590      	push	{r4, r7, lr}
  403736:	b08b      	sub	sp, #44	; 0x2c
  403738:	af00      	add	r7, sp, #0
	uint8_t i = 0;
  40373a:	2300      	movs	r3, #0
  40373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(mcan1_available_message() > 0)
  403740:	e02e      	b.n	4037a0 <mcan1_get_message_available+0x6c>
	{
		mcan_timestamped_rx_message_t time_message;

		mcan1_get_message(&time_message);
  403742:	463b      	mov	r3, r7
  403744:	4618      	mov	r0, r3
  403746:	4b1b      	ldr	r3, [pc, #108]	; (4037b4 <mcan1_get_message_available+0x80>)
  403748:	4798      	blx	r3

		printf("[%i][%llu]", i, time_message.timestamp);
  40374a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
  40374e:	e9d7 3400 	ldrd	r3, r4, [r7]
  403752:	461a      	mov	r2, r3
  403754:	4623      	mov	r3, r4
  403756:	4818      	ldr	r0, [pc, #96]	; (4037b8 <mcan1_get_message_available+0x84>)
  403758:	4c18      	ldr	r4, [pc, #96]	; (4037bc <mcan1_get_message_available+0x88>)
  40375a:	47a0      	blx	r4
		i++;
  40375c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403760:	3301      	adds	r3, #1
  403762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		printf("(%X)", time_message.rx_message.id);
  403766:	68fb      	ldr	r3, [r7, #12]
  403768:	4619      	mov	r1, r3
  40376a:	4815      	ldr	r0, [pc, #84]	; (4037c0 <mcan1_get_message_available+0x8c>)
  40376c:	4b13      	ldr	r3, [pc, #76]	; (4037bc <mcan1_get_message_available+0x88>)
  40376e:	4798      	blx	r3

		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  403770:	2300      	movs	r3, #0
  403772:	84bb      	strh	r3, [r7, #36]	; 0x24
  403774:	e00c      	b.n	403790 <mcan1_get_message_available+0x5c>
		{
			printf("|0x%2X", time_message.rx_message.data[j]);
  403776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  403778:	f107 0228 	add.w	r2, r7, #40	; 0x28
  40377c:	4413      	add	r3, r2
  40377e:	f813 3c17 	ldrb.w	r3, [r3, #-23]
  403782:	4619      	mov	r1, r3
  403784:	480f      	ldr	r0, [pc, #60]	; (4037c4 <mcan1_get_message_available+0x90>)
  403786:	4b0d      	ldr	r3, [pc, #52]	; (4037bc <mcan1_get_message_available+0x88>)
  403788:	4798      	blx	r3
		for (uint16_t j = 0; j < time_message.rx_message.dlc; j++)
  40378a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40378c:	3301      	adds	r3, #1
  40378e:	84bb      	strh	r3, [r7, #36]	; 0x24
  403790:	7c3b      	ldrb	r3, [r7, #16]
  403792:	b29b      	uxth	r3, r3
  403794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  403796:	429a      	cmp	r2, r3
  403798:	d3ed      	bcc.n	403776 <mcan1_get_message_available+0x42>
		}
		printf("|\r\n");
  40379a:	480b      	ldr	r0, [pc, #44]	; (4037c8 <mcan1_get_message_available+0x94>)
  40379c:	4b07      	ldr	r3, [pc, #28]	; (4037bc <mcan1_get_message_available+0x88>)
  40379e:	4798      	blx	r3
	while(mcan1_available_message() > 0)
  4037a0:	4b0a      	ldr	r3, [pc, #40]	; (4037cc <mcan1_get_message_available+0x98>)
  4037a2:	4798      	blx	r3
  4037a4:	4603      	mov	r3, r0
  4037a6:	2b00      	cmp	r3, #0
  4037a8:	d1cb      	bne.n	403742 <mcan1_get_message_available+0xe>
		
	}
}
  4037aa:	bf00      	nop
  4037ac:	372c      	adds	r7, #44	; 0x2c
  4037ae:	46bd      	mov	sp, r7
  4037b0:	bd90      	pop	{r4, r7, pc}
  4037b2:	bf00      	nop
  4037b4:	00403109 	.word	0x00403109
  4037b8:	00406858 	.word	0x00406858
  4037bc:	0040390d 	.word	0x0040390d
  4037c0:	00406864 	.word	0x00406864
  4037c4:	0040686c 	.word	0x0040686c
  4037c8:	00406874 	.word	0x00406874
  4037cc:	004030f1 	.word	0x004030f1

004037d0 <main>:
uint8_t a = 0;

int main(void)
{
  4037d0:	b590      	push	{r4, r7, lr}
  4037d2:	b085      	sub	sp, #20
  4037d4:	af02      	add	r7, sp, #8
	sysclk_init();
  4037d6:	4b29      	ldr	r3, [pc, #164]	; (40387c <main+0xac>)
  4037d8:	4798      	blx	r3
	board_init();
  4037da:	4b29      	ldr	r3, [pc, #164]	; (403880 <main+0xb0>)
  4037dc:	4798      	blx	r3

	configure_console();
  4037de:	4b29      	ldr	r3, [pc, #164]	; (403884 <main+0xb4>)
  4037e0:	4798      	blx	r3
    mcan0_configure(64, 64);
  4037e2:	2140      	movs	r1, #64	; 0x40
  4037e4:	2040      	movs	r0, #64	; 0x40
  4037e6:	4b28      	ldr	r3, [pc, #160]	; (403888 <main+0xb8>)
  4037e8:	4798      	blx	r3
    mcan1_configure(64, 64);
  4037ea:	2140      	movs	r1, #64	; 0x40
  4037ec:	2040      	movs	r0, #64	; 0x40
  4037ee:	4b27      	ldr	r3, [pc, #156]	; (40388c <main+0xbc>)
  4037f0:	4798      	blx	r3
	
	SysTick_Config(sysclk_get_cpu_hz() / 1000);
  4037f2:	4b27      	ldr	r3, [pc, #156]	; (403890 <main+0xc0>)
  4037f4:	4798      	blx	r3
  4037f6:	4602      	mov	r2, r0
  4037f8:	4b26      	ldr	r3, [pc, #152]	; (403894 <main+0xc4>)
  4037fa:	fba3 2302 	umull	r2, r3, r3, r2
  4037fe:	099b      	lsrs	r3, r3, #6
  403800:	4618      	mov	r0, r3
  403802:	4b25      	ldr	r3, [pc, #148]	; (403898 <main+0xc8>)
  403804:	4798      	blx	r3
	printf("________________________START_____________________________________\r\n");
  403806:	4825      	ldr	r0, [pc, #148]	; (40389c <main+0xcc>)
  403808:	4b25      	ldr	r3, [pc, #148]	; (4038a0 <main+0xd0>)
  40380a:	4798      	blx	r3
	while (1)
	{
		printf("---------------------------------%i--------------------------------\r\n", a);
  40380c:	4b25      	ldr	r3, [pc, #148]	; (4038a4 <main+0xd4>)
  40380e:	781b      	ldrb	r3, [r3, #0]
  403810:	4619      	mov	r1, r3
  403812:	4825      	ldr	r0, [pc, #148]	; (4038a8 <main+0xd8>)
  403814:	4b22      	ldr	r3, [pc, #136]	; (4038a0 <main+0xd0>)
  403816:	4798      	blx	r3
		a++;
  403818:	4b22      	ldr	r3, [pc, #136]	; (4038a4 <main+0xd4>)
  40381a:	781b      	ldrb	r3, [r3, #0]
  40381c:	3301      	adds	r3, #1
  40381e:	b2da      	uxtb	r2, r3
  403820:	4b20      	ldr	r3, [pc, #128]	; (4038a4 <main+0xd4>)
  403822:	701a      	strb	r2, [r3, #0]
		
		mdelay(50);
  403824:	2032      	movs	r0, #50	; 0x32
  403826:	4b21      	ldr	r3, [pc, #132]	; (4038ac <main+0xdc>)
  403828:	4798      	blx	r3
		
		mcan1_get_message_available();
  40382a:	4b21      	ldr	r3, [pc, #132]	; (4038b0 <main+0xe0>)
  40382c:	4798      	blx	r3
		
		#define data_len 4
		for (uint8_t i = 0; i < 64; i++)
  40382e:	2300      	movs	r3, #0
  403830:	71fb      	strb	r3, [r7, #7]
  403832:	e00a      	b.n	40384a <main+0x7a>
		{
			mcan0_send_message(i, tx_message, data_len, true, false);
  403834:	79f8      	ldrb	r0, [r7, #7]
  403836:	2300      	movs	r3, #0
  403838:	9300      	str	r3, [sp, #0]
  40383a:	2301      	movs	r3, #1
  40383c:	2204      	movs	r2, #4
  40383e:	491d      	ldr	r1, [pc, #116]	; (4038b4 <main+0xe4>)
  403840:	4c1d      	ldr	r4, [pc, #116]	; (4038b8 <main+0xe8>)
  403842:	47a0      	blx	r4
		for (uint8_t i = 0; i < 64; i++)
  403844:	79fb      	ldrb	r3, [r7, #7]
  403846:	3301      	adds	r3, #1
  403848:	71fb      	strb	r3, [r7, #7]
  40384a:	79fb      	ldrb	r3, [r7, #7]
  40384c:	2b3f      	cmp	r3, #63	; 0x3f
  40384e:	d9f1      	bls.n	403834 <main+0x64>
		}
	
		for (uint32_t i = 0; i < data_len; i++)
  403850:	2300      	movs	r3, #0
  403852:	603b      	str	r3, [r7, #0]
  403854:	e00d      	b.n	403872 <main+0xa2>
		{
			tx_message[i]++;
  403856:	4a17      	ldr	r2, [pc, #92]	; (4038b4 <main+0xe4>)
  403858:	683b      	ldr	r3, [r7, #0]
  40385a:	4413      	add	r3, r2
  40385c:	781b      	ldrb	r3, [r3, #0]
  40385e:	3301      	adds	r3, #1
  403860:	b2d9      	uxtb	r1, r3
  403862:	4a14      	ldr	r2, [pc, #80]	; (4038b4 <main+0xe4>)
  403864:	683b      	ldr	r3, [r7, #0]
  403866:	4413      	add	r3, r2
  403868:	460a      	mov	r2, r1
  40386a:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < data_len; i++)
  40386c:	683b      	ldr	r3, [r7, #0]
  40386e:	3301      	adds	r3, #1
  403870:	603b      	str	r3, [r7, #0]
  403872:	683b      	ldr	r3, [r7, #0]
  403874:	2b03      	cmp	r3, #3
  403876:	d9ee      	bls.n	403856 <main+0x86>
		printf("---------------------------------%i--------------------------------\r\n", a);
  403878:	e7c8      	b.n	40380c <main+0x3c>
  40387a:	bf00      	nop
  40387c:	004004d5 	.word	0x004004d5
  403880:	00400909 	.word	0x00400909
  403884:	004036fd 	.word	0x004036fd
  403888:	00402549 	.word	0x00402549
  40388c:	00402681 	.word	0x00402681
  403890:	0040325d 	.word	0x0040325d
  403894:	10624dd3 	.word	0x10624dd3
  403898:	00403181 	.word	0x00403181
  40389c:	00406878 	.word	0x00406878
  4038a0:	0040390d 	.word	0x0040390d
  4038a4:	204010e4 	.word	0x204010e4
  4038a8:	004068c0 	.word	0x004068c0
  4038ac:	004036cd 	.word	0x004036cd
  4038b0:	00403735 	.word	0x00403735
  4038b4:	20400008 	.word	0x20400008
  4038b8:	00402fa1 	.word	0x00402fa1

004038bc <__libc_init_array>:
  4038bc:	b570      	push	{r4, r5, r6, lr}
  4038be:	4e0f      	ldr	r6, [pc, #60]	; (4038fc <__libc_init_array+0x40>)
  4038c0:	4d0f      	ldr	r5, [pc, #60]	; (403900 <__libc_init_array+0x44>)
  4038c2:	1b76      	subs	r6, r6, r5
  4038c4:	10b6      	asrs	r6, r6, #2
  4038c6:	bf18      	it	ne
  4038c8:	2400      	movne	r4, #0
  4038ca:	d005      	beq.n	4038d8 <__libc_init_array+0x1c>
  4038cc:	3401      	adds	r4, #1
  4038ce:	f855 3b04 	ldr.w	r3, [r5], #4
  4038d2:	4798      	blx	r3
  4038d4:	42a6      	cmp	r6, r4
  4038d6:	d1f9      	bne.n	4038cc <__libc_init_array+0x10>
  4038d8:	4e0a      	ldr	r6, [pc, #40]	; (403904 <__libc_init_array+0x48>)
  4038da:	4d0b      	ldr	r5, [pc, #44]	; (403908 <__libc_init_array+0x4c>)
  4038dc:	1b76      	subs	r6, r6, r5
  4038de:	f003 f8c7 	bl	406a70 <_init>
  4038e2:	10b6      	asrs	r6, r6, #2
  4038e4:	bf18      	it	ne
  4038e6:	2400      	movne	r4, #0
  4038e8:	d006      	beq.n	4038f8 <__libc_init_array+0x3c>
  4038ea:	3401      	adds	r4, #1
  4038ec:	f855 3b04 	ldr.w	r3, [r5], #4
  4038f0:	4798      	blx	r3
  4038f2:	42a6      	cmp	r6, r4
  4038f4:	d1f9      	bne.n	4038ea <__libc_init_array+0x2e>
  4038f6:	bd70      	pop	{r4, r5, r6, pc}
  4038f8:	bd70      	pop	{r4, r5, r6, pc}
  4038fa:	bf00      	nop
  4038fc:	00406a7c 	.word	0x00406a7c
  403900:	00406a7c 	.word	0x00406a7c
  403904:	00406a84 	.word	0x00406a84
  403908:	00406a7c 	.word	0x00406a7c

0040390c <iprintf>:
  40390c:	b40f      	push	{r0, r1, r2, r3}
  40390e:	b500      	push	{lr}
  403910:	4907      	ldr	r1, [pc, #28]	; (403930 <iprintf+0x24>)
  403912:	b083      	sub	sp, #12
  403914:	ab04      	add	r3, sp, #16
  403916:	6808      	ldr	r0, [r1, #0]
  403918:	f853 2b04 	ldr.w	r2, [r3], #4
  40391c:	6881      	ldr	r1, [r0, #8]
  40391e:	9301      	str	r3, [sp, #4]
  403920:	f000 fcd6 	bl	4042d0 <_vfiprintf_r>
  403924:	b003      	add	sp, #12
  403926:	f85d eb04 	ldr.w	lr, [sp], #4
  40392a:	b004      	add	sp, #16
  40392c:	4770      	bx	lr
  40392e:	bf00      	nop
  403930:	20400010 	.word	0x20400010

00403934 <malloc>:
  403934:	4b02      	ldr	r3, [pc, #8]	; (403940 <malloc+0xc>)
  403936:	4601      	mov	r1, r0
  403938:	6818      	ldr	r0, [r3, #0]
  40393a:	f000 b803 	b.w	403944 <_malloc_r>
  40393e:	bf00      	nop
  403940:	20400010 	.word	0x20400010

00403944 <_malloc_r>:
  403944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403948:	f101 060b 	add.w	r6, r1, #11
  40394c:	2e16      	cmp	r6, #22
  40394e:	b083      	sub	sp, #12
  403950:	4605      	mov	r5, r0
  403952:	f240 809e 	bls.w	403a92 <_malloc_r+0x14e>
  403956:	f036 0607 	bics.w	r6, r6, #7
  40395a:	f100 80bd 	bmi.w	403ad8 <_malloc_r+0x194>
  40395e:	42b1      	cmp	r1, r6
  403960:	f200 80ba 	bhi.w	403ad8 <_malloc_r+0x194>
  403964:	f000 fb86 	bl	404074 <__malloc_lock>
  403968:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40396c:	f0c0 8293 	bcc.w	403e96 <_malloc_r+0x552>
  403970:	0a73      	lsrs	r3, r6, #9
  403972:	f000 80b8 	beq.w	403ae6 <_malloc_r+0x1a2>
  403976:	2b04      	cmp	r3, #4
  403978:	f200 8179 	bhi.w	403c6e <_malloc_r+0x32a>
  40397c:	09b3      	lsrs	r3, r6, #6
  40397e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403982:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403986:	00c3      	lsls	r3, r0, #3
  403988:	4fbf      	ldr	r7, [pc, #764]	; (403c88 <_malloc_r+0x344>)
  40398a:	443b      	add	r3, r7
  40398c:	f1a3 0108 	sub.w	r1, r3, #8
  403990:	685c      	ldr	r4, [r3, #4]
  403992:	42a1      	cmp	r1, r4
  403994:	d106      	bne.n	4039a4 <_malloc_r+0x60>
  403996:	e00c      	b.n	4039b2 <_malloc_r+0x6e>
  403998:	2a00      	cmp	r2, #0
  40399a:	f280 80aa 	bge.w	403af2 <_malloc_r+0x1ae>
  40399e:	68e4      	ldr	r4, [r4, #12]
  4039a0:	42a1      	cmp	r1, r4
  4039a2:	d006      	beq.n	4039b2 <_malloc_r+0x6e>
  4039a4:	6863      	ldr	r3, [r4, #4]
  4039a6:	f023 0303 	bic.w	r3, r3, #3
  4039aa:	1b9a      	subs	r2, r3, r6
  4039ac:	2a0f      	cmp	r2, #15
  4039ae:	ddf3      	ble.n	403998 <_malloc_r+0x54>
  4039b0:	4670      	mov	r0, lr
  4039b2:	693c      	ldr	r4, [r7, #16]
  4039b4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403c9c <_malloc_r+0x358>
  4039b8:	4574      	cmp	r4, lr
  4039ba:	f000 81ab 	beq.w	403d14 <_malloc_r+0x3d0>
  4039be:	6863      	ldr	r3, [r4, #4]
  4039c0:	f023 0303 	bic.w	r3, r3, #3
  4039c4:	1b9a      	subs	r2, r3, r6
  4039c6:	2a0f      	cmp	r2, #15
  4039c8:	f300 8190 	bgt.w	403cec <_malloc_r+0x3a8>
  4039cc:	2a00      	cmp	r2, #0
  4039ce:	f8c7 e014 	str.w	lr, [r7, #20]
  4039d2:	f8c7 e010 	str.w	lr, [r7, #16]
  4039d6:	f280 809d 	bge.w	403b14 <_malloc_r+0x1d0>
  4039da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4039de:	f080 8161 	bcs.w	403ca4 <_malloc_r+0x360>
  4039e2:	08db      	lsrs	r3, r3, #3
  4039e4:	f103 0c01 	add.w	ip, r3, #1
  4039e8:	1099      	asrs	r1, r3, #2
  4039ea:	687a      	ldr	r2, [r7, #4]
  4039ec:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4039f0:	f8c4 8008 	str.w	r8, [r4, #8]
  4039f4:	2301      	movs	r3, #1
  4039f6:	408b      	lsls	r3, r1
  4039f8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4039fc:	4313      	orrs	r3, r2
  4039fe:	3908      	subs	r1, #8
  403a00:	60e1      	str	r1, [r4, #12]
  403a02:	607b      	str	r3, [r7, #4]
  403a04:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403a08:	f8c8 400c 	str.w	r4, [r8, #12]
  403a0c:	1082      	asrs	r2, r0, #2
  403a0e:	2401      	movs	r4, #1
  403a10:	4094      	lsls	r4, r2
  403a12:	429c      	cmp	r4, r3
  403a14:	f200 808b 	bhi.w	403b2e <_malloc_r+0x1ea>
  403a18:	421c      	tst	r4, r3
  403a1a:	d106      	bne.n	403a2a <_malloc_r+0xe6>
  403a1c:	f020 0003 	bic.w	r0, r0, #3
  403a20:	0064      	lsls	r4, r4, #1
  403a22:	421c      	tst	r4, r3
  403a24:	f100 0004 	add.w	r0, r0, #4
  403a28:	d0fa      	beq.n	403a20 <_malloc_r+0xdc>
  403a2a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403a2e:	46cc      	mov	ip, r9
  403a30:	4680      	mov	r8, r0
  403a32:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403a36:	459c      	cmp	ip, r3
  403a38:	d107      	bne.n	403a4a <_malloc_r+0x106>
  403a3a:	e16d      	b.n	403d18 <_malloc_r+0x3d4>
  403a3c:	2a00      	cmp	r2, #0
  403a3e:	f280 817b 	bge.w	403d38 <_malloc_r+0x3f4>
  403a42:	68db      	ldr	r3, [r3, #12]
  403a44:	459c      	cmp	ip, r3
  403a46:	f000 8167 	beq.w	403d18 <_malloc_r+0x3d4>
  403a4a:	6859      	ldr	r1, [r3, #4]
  403a4c:	f021 0103 	bic.w	r1, r1, #3
  403a50:	1b8a      	subs	r2, r1, r6
  403a52:	2a0f      	cmp	r2, #15
  403a54:	ddf2      	ble.n	403a3c <_malloc_r+0xf8>
  403a56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403a5a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403a5e:	9300      	str	r3, [sp, #0]
  403a60:	199c      	adds	r4, r3, r6
  403a62:	4628      	mov	r0, r5
  403a64:	f046 0601 	orr.w	r6, r6, #1
  403a68:	f042 0501 	orr.w	r5, r2, #1
  403a6c:	605e      	str	r6, [r3, #4]
  403a6e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403a72:	f8cc 8008 	str.w	r8, [ip, #8]
  403a76:	617c      	str	r4, [r7, #20]
  403a78:	613c      	str	r4, [r7, #16]
  403a7a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403a7e:	f8c4 e008 	str.w	lr, [r4, #8]
  403a82:	6065      	str	r5, [r4, #4]
  403a84:	505a      	str	r2, [r3, r1]
  403a86:	f000 fafb 	bl	404080 <__malloc_unlock>
  403a8a:	9b00      	ldr	r3, [sp, #0]
  403a8c:	f103 0408 	add.w	r4, r3, #8
  403a90:	e01e      	b.n	403ad0 <_malloc_r+0x18c>
  403a92:	2910      	cmp	r1, #16
  403a94:	d820      	bhi.n	403ad8 <_malloc_r+0x194>
  403a96:	f000 faed 	bl	404074 <__malloc_lock>
  403a9a:	2610      	movs	r6, #16
  403a9c:	2318      	movs	r3, #24
  403a9e:	2002      	movs	r0, #2
  403aa0:	4f79      	ldr	r7, [pc, #484]	; (403c88 <_malloc_r+0x344>)
  403aa2:	443b      	add	r3, r7
  403aa4:	f1a3 0208 	sub.w	r2, r3, #8
  403aa8:	685c      	ldr	r4, [r3, #4]
  403aaa:	4294      	cmp	r4, r2
  403aac:	f000 813d 	beq.w	403d2a <_malloc_r+0x3e6>
  403ab0:	6863      	ldr	r3, [r4, #4]
  403ab2:	68e1      	ldr	r1, [r4, #12]
  403ab4:	68a6      	ldr	r6, [r4, #8]
  403ab6:	f023 0303 	bic.w	r3, r3, #3
  403aba:	4423      	add	r3, r4
  403abc:	4628      	mov	r0, r5
  403abe:	685a      	ldr	r2, [r3, #4]
  403ac0:	60f1      	str	r1, [r6, #12]
  403ac2:	f042 0201 	orr.w	r2, r2, #1
  403ac6:	608e      	str	r6, [r1, #8]
  403ac8:	605a      	str	r2, [r3, #4]
  403aca:	f000 fad9 	bl	404080 <__malloc_unlock>
  403ace:	3408      	adds	r4, #8
  403ad0:	4620      	mov	r0, r4
  403ad2:	b003      	add	sp, #12
  403ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ad8:	2400      	movs	r4, #0
  403ada:	230c      	movs	r3, #12
  403adc:	4620      	mov	r0, r4
  403ade:	602b      	str	r3, [r5, #0]
  403ae0:	b003      	add	sp, #12
  403ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ae6:	2040      	movs	r0, #64	; 0x40
  403ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403aec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403af0:	e74a      	b.n	403988 <_malloc_r+0x44>
  403af2:	4423      	add	r3, r4
  403af4:	68e1      	ldr	r1, [r4, #12]
  403af6:	685a      	ldr	r2, [r3, #4]
  403af8:	68a6      	ldr	r6, [r4, #8]
  403afa:	f042 0201 	orr.w	r2, r2, #1
  403afe:	60f1      	str	r1, [r6, #12]
  403b00:	4628      	mov	r0, r5
  403b02:	608e      	str	r6, [r1, #8]
  403b04:	605a      	str	r2, [r3, #4]
  403b06:	f000 fabb 	bl	404080 <__malloc_unlock>
  403b0a:	3408      	adds	r4, #8
  403b0c:	4620      	mov	r0, r4
  403b0e:	b003      	add	sp, #12
  403b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b14:	4423      	add	r3, r4
  403b16:	4628      	mov	r0, r5
  403b18:	685a      	ldr	r2, [r3, #4]
  403b1a:	f042 0201 	orr.w	r2, r2, #1
  403b1e:	605a      	str	r2, [r3, #4]
  403b20:	f000 faae 	bl	404080 <__malloc_unlock>
  403b24:	3408      	adds	r4, #8
  403b26:	4620      	mov	r0, r4
  403b28:	b003      	add	sp, #12
  403b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b2e:	68bc      	ldr	r4, [r7, #8]
  403b30:	6863      	ldr	r3, [r4, #4]
  403b32:	f023 0803 	bic.w	r8, r3, #3
  403b36:	45b0      	cmp	r8, r6
  403b38:	d304      	bcc.n	403b44 <_malloc_r+0x200>
  403b3a:	eba8 0306 	sub.w	r3, r8, r6
  403b3e:	2b0f      	cmp	r3, #15
  403b40:	f300 8085 	bgt.w	403c4e <_malloc_r+0x30a>
  403b44:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403ca0 <_malloc_r+0x35c>
  403b48:	4b50      	ldr	r3, [pc, #320]	; (403c8c <_malloc_r+0x348>)
  403b4a:	f8d9 2000 	ldr.w	r2, [r9]
  403b4e:	681b      	ldr	r3, [r3, #0]
  403b50:	3201      	adds	r2, #1
  403b52:	4433      	add	r3, r6
  403b54:	eb04 0a08 	add.w	sl, r4, r8
  403b58:	f000 8155 	beq.w	403e06 <_malloc_r+0x4c2>
  403b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403b60:	330f      	adds	r3, #15
  403b62:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403b66:	f02b 0b0f 	bic.w	fp, fp, #15
  403b6a:	4659      	mov	r1, fp
  403b6c:	4628      	mov	r0, r5
  403b6e:	f000 fa8d 	bl	40408c <_sbrk_r>
  403b72:	1c41      	adds	r1, r0, #1
  403b74:	4602      	mov	r2, r0
  403b76:	f000 80fc 	beq.w	403d72 <_malloc_r+0x42e>
  403b7a:	4582      	cmp	sl, r0
  403b7c:	f200 80f7 	bhi.w	403d6e <_malloc_r+0x42a>
  403b80:	4b43      	ldr	r3, [pc, #268]	; (403c90 <_malloc_r+0x34c>)
  403b82:	6819      	ldr	r1, [r3, #0]
  403b84:	4459      	add	r1, fp
  403b86:	6019      	str	r1, [r3, #0]
  403b88:	f000 814d 	beq.w	403e26 <_malloc_r+0x4e2>
  403b8c:	f8d9 0000 	ldr.w	r0, [r9]
  403b90:	3001      	adds	r0, #1
  403b92:	bf1b      	ittet	ne
  403b94:	eba2 0a0a 	subne.w	sl, r2, sl
  403b98:	4451      	addne	r1, sl
  403b9a:	f8c9 2000 	streq.w	r2, [r9]
  403b9e:	6019      	strne	r1, [r3, #0]
  403ba0:	f012 0107 	ands.w	r1, r2, #7
  403ba4:	f000 8115 	beq.w	403dd2 <_malloc_r+0x48e>
  403ba8:	f1c1 0008 	rsb	r0, r1, #8
  403bac:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403bb0:	4402      	add	r2, r0
  403bb2:	3108      	adds	r1, #8
  403bb4:	eb02 090b 	add.w	r9, r2, fp
  403bb8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403bbc:	eba1 0909 	sub.w	r9, r1, r9
  403bc0:	4649      	mov	r1, r9
  403bc2:	4628      	mov	r0, r5
  403bc4:	9301      	str	r3, [sp, #4]
  403bc6:	9200      	str	r2, [sp, #0]
  403bc8:	f000 fa60 	bl	40408c <_sbrk_r>
  403bcc:	1c43      	adds	r3, r0, #1
  403bce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403bd2:	f000 8143 	beq.w	403e5c <_malloc_r+0x518>
  403bd6:	1a80      	subs	r0, r0, r2
  403bd8:	4448      	add	r0, r9
  403bda:	f040 0001 	orr.w	r0, r0, #1
  403bde:	6819      	ldr	r1, [r3, #0]
  403be0:	60ba      	str	r2, [r7, #8]
  403be2:	4449      	add	r1, r9
  403be4:	42bc      	cmp	r4, r7
  403be6:	6050      	str	r0, [r2, #4]
  403be8:	6019      	str	r1, [r3, #0]
  403bea:	d017      	beq.n	403c1c <_malloc_r+0x2d8>
  403bec:	f1b8 0f0f 	cmp.w	r8, #15
  403bf0:	f240 80fb 	bls.w	403dea <_malloc_r+0x4a6>
  403bf4:	6860      	ldr	r0, [r4, #4]
  403bf6:	f1a8 020c 	sub.w	r2, r8, #12
  403bfa:	f022 0207 	bic.w	r2, r2, #7
  403bfe:	eb04 0e02 	add.w	lr, r4, r2
  403c02:	f000 0001 	and.w	r0, r0, #1
  403c06:	f04f 0c05 	mov.w	ip, #5
  403c0a:	4310      	orrs	r0, r2
  403c0c:	2a0f      	cmp	r2, #15
  403c0e:	6060      	str	r0, [r4, #4]
  403c10:	f8ce c004 	str.w	ip, [lr, #4]
  403c14:	f8ce c008 	str.w	ip, [lr, #8]
  403c18:	f200 8117 	bhi.w	403e4a <_malloc_r+0x506>
  403c1c:	4b1d      	ldr	r3, [pc, #116]	; (403c94 <_malloc_r+0x350>)
  403c1e:	68bc      	ldr	r4, [r7, #8]
  403c20:	681a      	ldr	r2, [r3, #0]
  403c22:	4291      	cmp	r1, r2
  403c24:	bf88      	it	hi
  403c26:	6019      	strhi	r1, [r3, #0]
  403c28:	4b1b      	ldr	r3, [pc, #108]	; (403c98 <_malloc_r+0x354>)
  403c2a:	681a      	ldr	r2, [r3, #0]
  403c2c:	4291      	cmp	r1, r2
  403c2e:	6862      	ldr	r2, [r4, #4]
  403c30:	bf88      	it	hi
  403c32:	6019      	strhi	r1, [r3, #0]
  403c34:	f022 0203 	bic.w	r2, r2, #3
  403c38:	4296      	cmp	r6, r2
  403c3a:	eba2 0306 	sub.w	r3, r2, r6
  403c3e:	d801      	bhi.n	403c44 <_malloc_r+0x300>
  403c40:	2b0f      	cmp	r3, #15
  403c42:	dc04      	bgt.n	403c4e <_malloc_r+0x30a>
  403c44:	4628      	mov	r0, r5
  403c46:	f000 fa1b 	bl	404080 <__malloc_unlock>
  403c4a:	2400      	movs	r4, #0
  403c4c:	e740      	b.n	403ad0 <_malloc_r+0x18c>
  403c4e:	19a2      	adds	r2, r4, r6
  403c50:	f043 0301 	orr.w	r3, r3, #1
  403c54:	f046 0601 	orr.w	r6, r6, #1
  403c58:	6066      	str	r6, [r4, #4]
  403c5a:	4628      	mov	r0, r5
  403c5c:	60ba      	str	r2, [r7, #8]
  403c5e:	6053      	str	r3, [r2, #4]
  403c60:	f000 fa0e 	bl	404080 <__malloc_unlock>
  403c64:	3408      	adds	r4, #8
  403c66:	4620      	mov	r0, r4
  403c68:	b003      	add	sp, #12
  403c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c6e:	2b14      	cmp	r3, #20
  403c70:	d971      	bls.n	403d56 <_malloc_r+0x412>
  403c72:	2b54      	cmp	r3, #84	; 0x54
  403c74:	f200 80a3 	bhi.w	403dbe <_malloc_r+0x47a>
  403c78:	0b33      	lsrs	r3, r6, #12
  403c7a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403c7e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403c82:	00c3      	lsls	r3, r0, #3
  403c84:	e680      	b.n	403988 <_malloc_r+0x44>
  403c86:	bf00      	nop
  403c88:	20400440 	.word	0x20400440
  403c8c:	20401118 	.word	0x20401118
  403c90:	204010e8 	.word	0x204010e8
  403c94:	20401110 	.word	0x20401110
  403c98:	20401114 	.word	0x20401114
  403c9c:	20400448 	.word	0x20400448
  403ca0:	20400848 	.word	0x20400848
  403ca4:	0a5a      	lsrs	r2, r3, #9
  403ca6:	2a04      	cmp	r2, #4
  403ca8:	d95b      	bls.n	403d62 <_malloc_r+0x41e>
  403caa:	2a14      	cmp	r2, #20
  403cac:	f200 80ae 	bhi.w	403e0c <_malloc_r+0x4c8>
  403cb0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403cb4:	00c9      	lsls	r1, r1, #3
  403cb6:	325b      	adds	r2, #91	; 0x5b
  403cb8:	eb07 0c01 	add.w	ip, r7, r1
  403cbc:	5879      	ldr	r1, [r7, r1]
  403cbe:	f1ac 0c08 	sub.w	ip, ip, #8
  403cc2:	458c      	cmp	ip, r1
  403cc4:	f000 8088 	beq.w	403dd8 <_malloc_r+0x494>
  403cc8:	684a      	ldr	r2, [r1, #4]
  403cca:	f022 0203 	bic.w	r2, r2, #3
  403cce:	4293      	cmp	r3, r2
  403cd0:	d273      	bcs.n	403dba <_malloc_r+0x476>
  403cd2:	6889      	ldr	r1, [r1, #8]
  403cd4:	458c      	cmp	ip, r1
  403cd6:	d1f7      	bne.n	403cc8 <_malloc_r+0x384>
  403cd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403cdc:	687b      	ldr	r3, [r7, #4]
  403cde:	60e2      	str	r2, [r4, #12]
  403ce0:	f8c4 c008 	str.w	ip, [r4, #8]
  403ce4:	6094      	str	r4, [r2, #8]
  403ce6:	f8cc 400c 	str.w	r4, [ip, #12]
  403cea:	e68f      	b.n	403a0c <_malloc_r+0xc8>
  403cec:	19a1      	adds	r1, r4, r6
  403cee:	f046 0c01 	orr.w	ip, r6, #1
  403cf2:	f042 0601 	orr.w	r6, r2, #1
  403cf6:	f8c4 c004 	str.w	ip, [r4, #4]
  403cfa:	4628      	mov	r0, r5
  403cfc:	6179      	str	r1, [r7, #20]
  403cfe:	6139      	str	r1, [r7, #16]
  403d00:	f8c1 e00c 	str.w	lr, [r1, #12]
  403d04:	f8c1 e008 	str.w	lr, [r1, #8]
  403d08:	604e      	str	r6, [r1, #4]
  403d0a:	50e2      	str	r2, [r4, r3]
  403d0c:	f000 f9b8 	bl	404080 <__malloc_unlock>
  403d10:	3408      	adds	r4, #8
  403d12:	e6dd      	b.n	403ad0 <_malloc_r+0x18c>
  403d14:	687b      	ldr	r3, [r7, #4]
  403d16:	e679      	b.n	403a0c <_malloc_r+0xc8>
  403d18:	f108 0801 	add.w	r8, r8, #1
  403d1c:	f018 0f03 	tst.w	r8, #3
  403d20:	f10c 0c08 	add.w	ip, ip, #8
  403d24:	f47f ae85 	bne.w	403a32 <_malloc_r+0xee>
  403d28:	e02d      	b.n	403d86 <_malloc_r+0x442>
  403d2a:	68dc      	ldr	r4, [r3, #12]
  403d2c:	42a3      	cmp	r3, r4
  403d2e:	bf08      	it	eq
  403d30:	3002      	addeq	r0, #2
  403d32:	f43f ae3e 	beq.w	4039b2 <_malloc_r+0x6e>
  403d36:	e6bb      	b.n	403ab0 <_malloc_r+0x16c>
  403d38:	4419      	add	r1, r3
  403d3a:	461c      	mov	r4, r3
  403d3c:	684a      	ldr	r2, [r1, #4]
  403d3e:	68db      	ldr	r3, [r3, #12]
  403d40:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403d44:	f042 0201 	orr.w	r2, r2, #1
  403d48:	604a      	str	r2, [r1, #4]
  403d4a:	4628      	mov	r0, r5
  403d4c:	60f3      	str	r3, [r6, #12]
  403d4e:	609e      	str	r6, [r3, #8]
  403d50:	f000 f996 	bl	404080 <__malloc_unlock>
  403d54:	e6bc      	b.n	403ad0 <_malloc_r+0x18c>
  403d56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403d5a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403d5e:	00c3      	lsls	r3, r0, #3
  403d60:	e612      	b.n	403988 <_malloc_r+0x44>
  403d62:	099a      	lsrs	r2, r3, #6
  403d64:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403d68:	00c9      	lsls	r1, r1, #3
  403d6a:	3238      	adds	r2, #56	; 0x38
  403d6c:	e7a4      	b.n	403cb8 <_malloc_r+0x374>
  403d6e:	42bc      	cmp	r4, r7
  403d70:	d054      	beq.n	403e1c <_malloc_r+0x4d8>
  403d72:	68bc      	ldr	r4, [r7, #8]
  403d74:	6862      	ldr	r2, [r4, #4]
  403d76:	f022 0203 	bic.w	r2, r2, #3
  403d7a:	e75d      	b.n	403c38 <_malloc_r+0x2f4>
  403d7c:	f859 3908 	ldr.w	r3, [r9], #-8
  403d80:	4599      	cmp	r9, r3
  403d82:	f040 8086 	bne.w	403e92 <_malloc_r+0x54e>
  403d86:	f010 0f03 	tst.w	r0, #3
  403d8a:	f100 30ff 	add.w	r0, r0, #4294967295
  403d8e:	d1f5      	bne.n	403d7c <_malloc_r+0x438>
  403d90:	687b      	ldr	r3, [r7, #4]
  403d92:	ea23 0304 	bic.w	r3, r3, r4
  403d96:	607b      	str	r3, [r7, #4]
  403d98:	0064      	lsls	r4, r4, #1
  403d9a:	429c      	cmp	r4, r3
  403d9c:	f63f aec7 	bhi.w	403b2e <_malloc_r+0x1ea>
  403da0:	2c00      	cmp	r4, #0
  403da2:	f43f aec4 	beq.w	403b2e <_malloc_r+0x1ea>
  403da6:	421c      	tst	r4, r3
  403da8:	4640      	mov	r0, r8
  403daa:	f47f ae3e 	bne.w	403a2a <_malloc_r+0xe6>
  403dae:	0064      	lsls	r4, r4, #1
  403db0:	421c      	tst	r4, r3
  403db2:	f100 0004 	add.w	r0, r0, #4
  403db6:	d0fa      	beq.n	403dae <_malloc_r+0x46a>
  403db8:	e637      	b.n	403a2a <_malloc_r+0xe6>
  403dba:	468c      	mov	ip, r1
  403dbc:	e78c      	b.n	403cd8 <_malloc_r+0x394>
  403dbe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403dc2:	d815      	bhi.n	403df0 <_malloc_r+0x4ac>
  403dc4:	0bf3      	lsrs	r3, r6, #15
  403dc6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403dca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403dce:	00c3      	lsls	r3, r0, #3
  403dd0:	e5da      	b.n	403988 <_malloc_r+0x44>
  403dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403dd6:	e6ed      	b.n	403bb4 <_malloc_r+0x270>
  403dd8:	687b      	ldr	r3, [r7, #4]
  403dda:	1092      	asrs	r2, r2, #2
  403ddc:	2101      	movs	r1, #1
  403dde:	fa01 f202 	lsl.w	r2, r1, r2
  403de2:	4313      	orrs	r3, r2
  403de4:	607b      	str	r3, [r7, #4]
  403de6:	4662      	mov	r2, ip
  403de8:	e779      	b.n	403cde <_malloc_r+0x39a>
  403dea:	2301      	movs	r3, #1
  403dec:	6053      	str	r3, [r2, #4]
  403dee:	e729      	b.n	403c44 <_malloc_r+0x300>
  403df0:	f240 5254 	movw	r2, #1364	; 0x554
  403df4:	4293      	cmp	r3, r2
  403df6:	d822      	bhi.n	403e3e <_malloc_r+0x4fa>
  403df8:	0cb3      	lsrs	r3, r6, #18
  403dfa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403dfe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403e02:	00c3      	lsls	r3, r0, #3
  403e04:	e5c0      	b.n	403988 <_malloc_r+0x44>
  403e06:	f103 0b10 	add.w	fp, r3, #16
  403e0a:	e6ae      	b.n	403b6a <_malloc_r+0x226>
  403e0c:	2a54      	cmp	r2, #84	; 0x54
  403e0e:	d829      	bhi.n	403e64 <_malloc_r+0x520>
  403e10:	0b1a      	lsrs	r2, r3, #12
  403e12:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403e16:	00c9      	lsls	r1, r1, #3
  403e18:	326e      	adds	r2, #110	; 0x6e
  403e1a:	e74d      	b.n	403cb8 <_malloc_r+0x374>
  403e1c:	4b20      	ldr	r3, [pc, #128]	; (403ea0 <_malloc_r+0x55c>)
  403e1e:	6819      	ldr	r1, [r3, #0]
  403e20:	4459      	add	r1, fp
  403e22:	6019      	str	r1, [r3, #0]
  403e24:	e6b2      	b.n	403b8c <_malloc_r+0x248>
  403e26:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403e2a:	2800      	cmp	r0, #0
  403e2c:	f47f aeae 	bne.w	403b8c <_malloc_r+0x248>
  403e30:	eb08 030b 	add.w	r3, r8, fp
  403e34:	68ba      	ldr	r2, [r7, #8]
  403e36:	f043 0301 	orr.w	r3, r3, #1
  403e3a:	6053      	str	r3, [r2, #4]
  403e3c:	e6ee      	b.n	403c1c <_malloc_r+0x2d8>
  403e3e:	207f      	movs	r0, #127	; 0x7f
  403e40:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403e44:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403e48:	e59e      	b.n	403988 <_malloc_r+0x44>
  403e4a:	f104 0108 	add.w	r1, r4, #8
  403e4e:	4628      	mov	r0, r5
  403e50:	9300      	str	r3, [sp, #0]
  403e52:	f001 fb59 	bl	405508 <_free_r>
  403e56:	9b00      	ldr	r3, [sp, #0]
  403e58:	6819      	ldr	r1, [r3, #0]
  403e5a:	e6df      	b.n	403c1c <_malloc_r+0x2d8>
  403e5c:	2001      	movs	r0, #1
  403e5e:	f04f 0900 	mov.w	r9, #0
  403e62:	e6bc      	b.n	403bde <_malloc_r+0x29a>
  403e64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e68:	d805      	bhi.n	403e76 <_malloc_r+0x532>
  403e6a:	0bda      	lsrs	r2, r3, #15
  403e6c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403e70:	00c9      	lsls	r1, r1, #3
  403e72:	3277      	adds	r2, #119	; 0x77
  403e74:	e720      	b.n	403cb8 <_malloc_r+0x374>
  403e76:	f240 5154 	movw	r1, #1364	; 0x554
  403e7a:	428a      	cmp	r2, r1
  403e7c:	d805      	bhi.n	403e8a <_malloc_r+0x546>
  403e7e:	0c9a      	lsrs	r2, r3, #18
  403e80:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403e84:	00c9      	lsls	r1, r1, #3
  403e86:	327c      	adds	r2, #124	; 0x7c
  403e88:	e716      	b.n	403cb8 <_malloc_r+0x374>
  403e8a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403e8e:	227e      	movs	r2, #126	; 0x7e
  403e90:	e712      	b.n	403cb8 <_malloc_r+0x374>
  403e92:	687b      	ldr	r3, [r7, #4]
  403e94:	e780      	b.n	403d98 <_malloc_r+0x454>
  403e96:	08f0      	lsrs	r0, r6, #3
  403e98:	f106 0308 	add.w	r3, r6, #8
  403e9c:	e600      	b.n	403aa0 <_malloc_r+0x15c>
  403e9e:	bf00      	nop
  403ea0:	204010e8 	.word	0x204010e8

00403ea4 <memcpy>:
  403ea4:	4684      	mov	ip, r0
  403ea6:	ea41 0300 	orr.w	r3, r1, r0
  403eaa:	f013 0303 	ands.w	r3, r3, #3
  403eae:	d16d      	bne.n	403f8c <memcpy+0xe8>
  403eb0:	3a40      	subs	r2, #64	; 0x40
  403eb2:	d341      	bcc.n	403f38 <memcpy+0x94>
  403eb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403eb8:	f840 3b04 	str.w	r3, [r0], #4
  403ebc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ec0:	f840 3b04 	str.w	r3, [r0], #4
  403ec4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ec8:	f840 3b04 	str.w	r3, [r0], #4
  403ecc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed0:	f840 3b04 	str.w	r3, [r0], #4
  403ed4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed8:	f840 3b04 	str.w	r3, [r0], #4
  403edc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee0:	f840 3b04 	str.w	r3, [r0], #4
  403ee4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee8:	f840 3b04 	str.w	r3, [r0], #4
  403eec:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef0:	f840 3b04 	str.w	r3, [r0], #4
  403ef4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef8:	f840 3b04 	str.w	r3, [r0], #4
  403efc:	f851 3b04 	ldr.w	r3, [r1], #4
  403f00:	f840 3b04 	str.w	r3, [r0], #4
  403f04:	f851 3b04 	ldr.w	r3, [r1], #4
  403f08:	f840 3b04 	str.w	r3, [r0], #4
  403f0c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f10:	f840 3b04 	str.w	r3, [r0], #4
  403f14:	f851 3b04 	ldr.w	r3, [r1], #4
  403f18:	f840 3b04 	str.w	r3, [r0], #4
  403f1c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f20:	f840 3b04 	str.w	r3, [r0], #4
  403f24:	f851 3b04 	ldr.w	r3, [r1], #4
  403f28:	f840 3b04 	str.w	r3, [r0], #4
  403f2c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f30:	f840 3b04 	str.w	r3, [r0], #4
  403f34:	3a40      	subs	r2, #64	; 0x40
  403f36:	d2bd      	bcs.n	403eb4 <memcpy+0x10>
  403f38:	3230      	adds	r2, #48	; 0x30
  403f3a:	d311      	bcc.n	403f60 <memcpy+0xbc>
  403f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f40:	f840 3b04 	str.w	r3, [r0], #4
  403f44:	f851 3b04 	ldr.w	r3, [r1], #4
  403f48:	f840 3b04 	str.w	r3, [r0], #4
  403f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f50:	f840 3b04 	str.w	r3, [r0], #4
  403f54:	f851 3b04 	ldr.w	r3, [r1], #4
  403f58:	f840 3b04 	str.w	r3, [r0], #4
  403f5c:	3a10      	subs	r2, #16
  403f5e:	d2ed      	bcs.n	403f3c <memcpy+0x98>
  403f60:	320c      	adds	r2, #12
  403f62:	d305      	bcc.n	403f70 <memcpy+0xcc>
  403f64:	f851 3b04 	ldr.w	r3, [r1], #4
  403f68:	f840 3b04 	str.w	r3, [r0], #4
  403f6c:	3a04      	subs	r2, #4
  403f6e:	d2f9      	bcs.n	403f64 <memcpy+0xc0>
  403f70:	3204      	adds	r2, #4
  403f72:	d008      	beq.n	403f86 <memcpy+0xe2>
  403f74:	07d2      	lsls	r2, r2, #31
  403f76:	bf1c      	itt	ne
  403f78:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f7c:	f800 3b01 	strbne.w	r3, [r0], #1
  403f80:	d301      	bcc.n	403f86 <memcpy+0xe2>
  403f82:	880b      	ldrh	r3, [r1, #0]
  403f84:	8003      	strh	r3, [r0, #0]
  403f86:	4660      	mov	r0, ip
  403f88:	4770      	bx	lr
  403f8a:	bf00      	nop
  403f8c:	2a08      	cmp	r2, #8
  403f8e:	d313      	bcc.n	403fb8 <memcpy+0x114>
  403f90:	078b      	lsls	r3, r1, #30
  403f92:	d08d      	beq.n	403eb0 <memcpy+0xc>
  403f94:	f010 0303 	ands.w	r3, r0, #3
  403f98:	d08a      	beq.n	403eb0 <memcpy+0xc>
  403f9a:	f1c3 0304 	rsb	r3, r3, #4
  403f9e:	1ad2      	subs	r2, r2, r3
  403fa0:	07db      	lsls	r3, r3, #31
  403fa2:	bf1c      	itt	ne
  403fa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403fa8:	f800 3b01 	strbne.w	r3, [r0], #1
  403fac:	d380      	bcc.n	403eb0 <memcpy+0xc>
  403fae:	f831 3b02 	ldrh.w	r3, [r1], #2
  403fb2:	f820 3b02 	strh.w	r3, [r0], #2
  403fb6:	e77b      	b.n	403eb0 <memcpy+0xc>
  403fb8:	3a04      	subs	r2, #4
  403fba:	d3d9      	bcc.n	403f70 <memcpy+0xcc>
  403fbc:	3a01      	subs	r2, #1
  403fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
  403fc2:	f800 3b01 	strb.w	r3, [r0], #1
  403fc6:	d2f9      	bcs.n	403fbc <memcpy+0x118>
  403fc8:	780b      	ldrb	r3, [r1, #0]
  403fca:	7003      	strb	r3, [r0, #0]
  403fcc:	784b      	ldrb	r3, [r1, #1]
  403fce:	7043      	strb	r3, [r0, #1]
  403fd0:	788b      	ldrb	r3, [r1, #2]
  403fd2:	7083      	strb	r3, [r0, #2]
  403fd4:	4660      	mov	r0, ip
  403fd6:	4770      	bx	lr

00403fd8 <memset>:
  403fd8:	b470      	push	{r4, r5, r6}
  403fda:	0786      	lsls	r6, r0, #30
  403fdc:	d046      	beq.n	40406c <memset+0x94>
  403fde:	1e54      	subs	r4, r2, #1
  403fe0:	2a00      	cmp	r2, #0
  403fe2:	d041      	beq.n	404068 <memset+0x90>
  403fe4:	b2ca      	uxtb	r2, r1
  403fe6:	4603      	mov	r3, r0
  403fe8:	e002      	b.n	403ff0 <memset+0x18>
  403fea:	f114 34ff 	adds.w	r4, r4, #4294967295
  403fee:	d33b      	bcc.n	404068 <memset+0x90>
  403ff0:	f803 2b01 	strb.w	r2, [r3], #1
  403ff4:	079d      	lsls	r5, r3, #30
  403ff6:	d1f8      	bne.n	403fea <memset+0x12>
  403ff8:	2c03      	cmp	r4, #3
  403ffa:	d92e      	bls.n	40405a <memset+0x82>
  403ffc:	b2cd      	uxtb	r5, r1
  403ffe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404002:	2c0f      	cmp	r4, #15
  404004:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404008:	d919      	bls.n	40403e <memset+0x66>
  40400a:	f103 0210 	add.w	r2, r3, #16
  40400e:	4626      	mov	r6, r4
  404010:	3e10      	subs	r6, #16
  404012:	2e0f      	cmp	r6, #15
  404014:	f842 5c10 	str.w	r5, [r2, #-16]
  404018:	f842 5c0c 	str.w	r5, [r2, #-12]
  40401c:	f842 5c08 	str.w	r5, [r2, #-8]
  404020:	f842 5c04 	str.w	r5, [r2, #-4]
  404024:	f102 0210 	add.w	r2, r2, #16
  404028:	d8f2      	bhi.n	404010 <memset+0x38>
  40402a:	f1a4 0210 	sub.w	r2, r4, #16
  40402e:	f022 020f 	bic.w	r2, r2, #15
  404032:	f004 040f 	and.w	r4, r4, #15
  404036:	3210      	adds	r2, #16
  404038:	2c03      	cmp	r4, #3
  40403a:	4413      	add	r3, r2
  40403c:	d90d      	bls.n	40405a <memset+0x82>
  40403e:	461e      	mov	r6, r3
  404040:	4622      	mov	r2, r4
  404042:	3a04      	subs	r2, #4
  404044:	2a03      	cmp	r2, #3
  404046:	f846 5b04 	str.w	r5, [r6], #4
  40404a:	d8fa      	bhi.n	404042 <memset+0x6a>
  40404c:	1f22      	subs	r2, r4, #4
  40404e:	f022 0203 	bic.w	r2, r2, #3
  404052:	3204      	adds	r2, #4
  404054:	4413      	add	r3, r2
  404056:	f004 0403 	and.w	r4, r4, #3
  40405a:	b12c      	cbz	r4, 404068 <memset+0x90>
  40405c:	b2c9      	uxtb	r1, r1
  40405e:	441c      	add	r4, r3
  404060:	f803 1b01 	strb.w	r1, [r3], #1
  404064:	429c      	cmp	r4, r3
  404066:	d1fb      	bne.n	404060 <memset+0x88>
  404068:	bc70      	pop	{r4, r5, r6}
  40406a:	4770      	bx	lr
  40406c:	4614      	mov	r4, r2
  40406e:	4603      	mov	r3, r0
  404070:	e7c2      	b.n	403ff8 <memset+0x20>
  404072:	bf00      	nop

00404074 <__malloc_lock>:
  404074:	4801      	ldr	r0, [pc, #4]	; (40407c <__malloc_lock+0x8>)
  404076:	f001 bce1 	b.w	405a3c <__retarget_lock_acquire_recursive>
  40407a:	bf00      	nop
  40407c:	20401218 	.word	0x20401218

00404080 <__malloc_unlock>:
  404080:	4801      	ldr	r0, [pc, #4]	; (404088 <__malloc_unlock+0x8>)
  404082:	f001 bcdd 	b.w	405a40 <__retarget_lock_release_recursive>
  404086:	bf00      	nop
  404088:	20401218 	.word	0x20401218

0040408c <_sbrk_r>:
  40408c:	b538      	push	{r3, r4, r5, lr}
  40408e:	4c07      	ldr	r4, [pc, #28]	; (4040ac <_sbrk_r+0x20>)
  404090:	2300      	movs	r3, #0
  404092:	4605      	mov	r5, r0
  404094:	4608      	mov	r0, r1
  404096:	6023      	str	r3, [r4, #0]
  404098:	f7fd fec0 	bl	401e1c <_sbrk>
  40409c:	1c43      	adds	r3, r0, #1
  40409e:	d000      	beq.n	4040a2 <_sbrk_r+0x16>
  4040a0:	bd38      	pop	{r3, r4, r5, pc}
  4040a2:	6823      	ldr	r3, [r4, #0]
  4040a4:	2b00      	cmp	r3, #0
  4040a6:	d0fb      	beq.n	4040a0 <_sbrk_r+0x14>
  4040a8:	602b      	str	r3, [r5, #0]
  4040aa:	bd38      	pop	{r3, r4, r5, pc}
  4040ac:	2040122c 	.word	0x2040122c

004040b0 <setbuf>:
  4040b0:	2900      	cmp	r1, #0
  4040b2:	bf0c      	ite	eq
  4040b4:	2202      	moveq	r2, #2
  4040b6:	2200      	movne	r2, #0
  4040b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4040bc:	f000 b800 	b.w	4040c0 <setvbuf>

004040c0 <setvbuf>:
  4040c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4040c4:	4c61      	ldr	r4, [pc, #388]	; (40424c <setvbuf+0x18c>)
  4040c6:	6825      	ldr	r5, [r4, #0]
  4040c8:	b083      	sub	sp, #12
  4040ca:	4604      	mov	r4, r0
  4040cc:	460f      	mov	r7, r1
  4040ce:	4690      	mov	r8, r2
  4040d0:	461e      	mov	r6, r3
  4040d2:	b115      	cbz	r5, 4040da <setvbuf+0x1a>
  4040d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	d064      	beq.n	4041a4 <setvbuf+0xe4>
  4040da:	f1b8 0f02 	cmp.w	r8, #2
  4040de:	d006      	beq.n	4040ee <setvbuf+0x2e>
  4040e0:	f1b8 0f01 	cmp.w	r8, #1
  4040e4:	f200 809f 	bhi.w	404226 <setvbuf+0x166>
  4040e8:	2e00      	cmp	r6, #0
  4040ea:	f2c0 809c 	blt.w	404226 <setvbuf+0x166>
  4040ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4040f0:	07d8      	lsls	r0, r3, #31
  4040f2:	d534      	bpl.n	40415e <setvbuf+0x9e>
  4040f4:	4621      	mov	r1, r4
  4040f6:	4628      	mov	r0, r5
  4040f8:	f001 f888 	bl	40520c <_fflush_r>
  4040fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4040fe:	b141      	cbz	r1, 404112 <setvbuf+0x52>
  404100:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404104:	4299      	cmp	r1, r3
  404106:	d002      	beq.n	40410e <setvbuf+0x4e>
  404108:	4628      	mov	r0, r5
  40410a:	f001 f9fd 	bl	405508 <_free_r>
  40410e:	2300      	movs	r3, #0
  404110:	6323      	str	r3, [r4, #48]	; 0x30
  404112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404116:	2200      	movs	r2, #0
  404118:	61a2      	str	r2, [r4, #24]
  40411a:	6062      	str	r2, [r4, #4]
  40411c:	061a      	lsls	r2, r3, #24
  40411e:	d43a      	bmi.n	404196 <setvbuf+0xd6>
  404120:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404124:	f023 0303 	bic.w	r3, r3, #3
  404128:	f1b8 0f02 	cmp.w	r8, #2
  40412c:	81a3      	strh	r3, [r4, #12]
  40412e:	d01d      	beq.n	40416c <setvbuf+0xac>
  404130:	ab01      	add	r3, sp, #4
  404132:	466a      	mov	r2, sp
  404134:	4621      	mov	r1, r4
  404136:	4628      	mov	r0, r5
  404138:	f001 fc84 	bl	405a44 <__swhatbuf_r>
  40413c:	89a3      	ldrh	r3, [r4, #12]
  40413e:	4318      	orrs	r0, r3
  404140:	81a0      	strh	r0, [r4, #12]
  404142:	2e00      	cmp	r6, #0
  404144:	d132      	bne.n	4041ac <setvbuf+0xec>
  404146:	9e00      	ldr	r6, [sp, #0]
  404148:	4630      	mov	r0, r6
  40414a:	f7ff fbf3 	bl	403934 <malloc>
  40414e:	4607      	mov	r7, r0
  404150:	2800      	cmp	r0, #0
  404152:	d06b      	beq.n	40422c <setvbuf+0x16c>
  404154:	89a3      	ldrh	r3, [r4, #12]
  404156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40415a:	81a3      	strh	r3, [r4, #12]
  40415c:	e028      	b.n	4041b0 <setvbuf+0xf0>
  40415e:	89a3      	ldrh	r3, [r4, #12]
  404160:	0599      	lsls	r1, r3, #22
  404162:	d4c7      	bmi.n	4040f4 <setvbuf+0x34>
  404164:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404166:	f001 fc69 	bl	405a3c <__retarget_lock_acquire_recursive>
  40416a:	e7c3      	b.n	4040f4 <setvbuf+0x34>
  40416c:	2500      	movs	r5, #0
  40416e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404170:	2600      	movs	r6, #0
  404172:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404176:	f043 0302 	orr.w	r3, r3, #2
  40417a:	2001      	movs	r0, #1
  40417c:	60a6      	str	r6, [r4, #8]
  40417e:	07ce      	lsls	r6, r1, #31
  404180:	81a3      	strh	r3, [r4, #12]
  404182:	6022      	str	r2, [r4, #0]
  404184:	6122      	str	r2, [r4, #16]
  404186:	6160      	str	r0, [r4, #20]
  404188:	d401      	bmi.n	40418e <setvbuf+0xce>
  40418a:	0598      	lsls	r0, r3, #22
  40418c:	d53e      	bpl.n	40420c <setvbuf+0x14c>
  40418e:	4628      	mov	r0, r5
  404190:	b003      	add	sp, #12
  404192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404196:	6921      	ldr	r1, [r4, #16]
  404198:	4628      	mov	r0, r5
  40419a:	f001 f9b5 	bl	405508 <_free_r>
  40419e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041a2:	e7bd      	b.n	404120 <setvbuf+0x60>
  4041a4:	4628      	mov	r0, r5
  4041a6:	f001 f889 	bl	4052bc <__sinit>
  4041aa:	e796      	b.n	4040da <setvbuf+0x1a>
  4041ac:	2f00      	cmp	r7, #0
  4041ae:	d0cb      	beq.n	404148 <setvbuf+0x88>
  4041b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041b2:	2b00      	cmp	r3, #0
  4041b4:	d033      	beq.n	40421e <setvbuf+0x15e>
  4041b6:	9b00      	ldr	r3, [sp, #0]
  4041b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4041bc:	6027      	str	r7, [r4, #0]
  4041be:	429e      	cmp	r6, r3
  4041c0:	bf1c      	itt	ne
  4041c2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4041c6:	81a2      	strhne	r2, [r4, #12]
  4041c8:	f1b8 0f01 	cmp.w	r8, #1
  4041cc:	bf04      	itt	eq
  4041ce:	f042 0201 	orreq.w	r2, r2, #1
  4041d2:	81a2      	strheq	r2, [r4, #12]
  4041d4:	b292      	uxth	r2, r2
  4041d6:	f012 0308 	ands.w	r3, r2, #8
  4041da:	6127      	str	r7, [r4, #16]
  4041dc:	6166      	str	r6, [r4, #20]
  4041de:	d00e      	beq.n	4041fe <setvbuf+0x13e>
  4041e0:	07d1      	lsls	r1, r2, #31
  4041e2:	d51a      	bpl.n	40421a <setvbuf+0x15a>
  4041e4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4041e6:	4276      	negs	r6, r6
  4041e8:	2300      	movs	r3, #0
  4041ea:	f015 0501 	ands.w	r5, r5, #1
  4041ee:	61a6      	str	r6, [r4, #24]
  4041f0:	60a3      	str	r3, [r4, #8]
  4041f2:	d009      	beq.n	404208 <setvbuf+0x148>
  4041f4:	2500      	movs	r5, #0
  4041f6:	4628      	mov	r0, r5
  4041f8:	b003      	add	sp, #12
  4041fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4041fe:	60a3      	str	r3, [r4, #8]
  404200:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404202:	f015 0501 	ands.w	r5, r5, #1
  404206:	d1f5      	bne.n	4041f4 <setvbuf+0x134>
  404208:	0593      	lsls	r3, r2, #22
  40420a:	d4c0      	bmi.n	40418e <setvbuf+0xce>
  40420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40420e:	f001 fc17 	bl	405a40 <__retarget_lock_release_recursive>
  404212:	4628      	mov	r0, r5
  404214:	b003      	add	sp, #12
  404216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40421a:	60a6      	str	r6, [r4, #8]
  40421c:	e7f0      	b.n	404200 <setvbuf+0x140>
  40421e:	4628      	mov	r0, r5
  404220:	f001 f84c 	bl	4052bc <__sinit>
  404224:	e7c7      	b.n	4041b6 <setvbuf+0xf6>
  404226:	f04f 35ff 	mov.w	r5, #4294967295
  40422a:	e7b0      	b.n	40418e <setvbuf+0xce>
  40422c:	f8dd 9000 	ldr.w	r9, [sp]
  404230:	45b1      	cmp	r9, r6
  404232:	d004      	beq.n	40423e <setvbuf+0x17e>
  404234:	4648      	mov	r0, r9
  404236:	f7ff fb7d 	bl	403934 <malloc>
  40423a:	4607      	mov	r7, r0
  40423c:	b920      	cbnz	r0, 404248 <setvbuf+0x188>
  40423e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404242:	f04f 35ff 	mov.w	r5, #4294967295
  404246:	e792      	b.n	40416e <setvbuf+0xae>
  404248:	464e      	mov	r6, r9
  40424a:	e783      	b.n	404154 <setvbuf+0x94>
  40424c:	20400010 	.word	0x20400010

00404250 <__sprint_r.part.0>:
  404250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404254:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404256:	049c      	lsls	r4, r3, #18
  404258:	4693      	mov	fp, r2
  40425a:	d52f      	bpl.n	4042bc <__sprint_r.part.0+0x6c>
  40425c:	6893      	ldr	r3, [r2, #8]
  40425e:	6812      	ldr	r2, [r2, #0]
  404260:	b353      	cbz	r3, 4042b8 <__sprint_r.part.0+0x68>
  404262:	460e      	mov	r6, r1
  404264:	4607      	mov	r7, r0
  404266:	f102 0908 	add.w	r9, r2, #8
  40426a:	e919 0420 	ldmdb	r9, {r5, sl}
  40426e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404272:	d017      	beq.n	4042a4 <__sprint_r.part.0+0x54>
  404274:	3d04      	subs	r5, #4
  404276:	2400      	movs	r4, #0
  404278:	e001      	b.n	40427e <__sprint_r.part.0+0x2e>
  40427a:	45a0      	cmp	r8, r4
  40427c:	d010      	beq.n	4042a0 <__sprint_r.part.0+0x50>
  40427e:	4632      	mov	r2, r6
  404280:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404284:	4638      	mov	r0, r7
  404286:	f001 f8bb 	bl	405400 <_fputwc_r>
  40428a:	1c43      	adds	r3, r0, #1
  40428c:	f104 0401 	add.w	r4, r4, #1
  404290:	d1f3      	bne.n	40427a <__sprint_r.part.0+0x2a>
  404292:	2300      	movs	r3, #0
  404294:	f8cb 3008 	str.w	r3, [fp, #8]
  404298:	f8cb 3004 	str.w	r3, [fp, #4]
  40429c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042a0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4042a4:	f02a 0a03 	bic.w	sl, sl, #3
  4042a8:	eba3 030a 	sub.w	r3, r3, sl
  4042ac:	f8cb 3008 	str.w	r3, [fp, #8]
  4042b0:	f109 0908 	add.w	r9, r9, #8
  4042b4:	2b00      	cmp	r3, #0
  4042b6:	d1d8      	bne.n	40426a <__sprint_r.part.0+0x1a>
  4042b8:	2000      	movs	r0, #0
  4042ba:	e7ea      	b.n	404292 <__sprint_r.part.0+0x42>
  4042bc:	f001 fa0a 	bl	4056d4 <__sfvwrite_r>
  4042c0:	2300      	movs	r3, #0
  4042c2:	f8cb 3008 	str.w	r3, [fp, #8]
  4042c6:	f8cb 3004 	str.w	r3, [fp, #4]
  4042ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042ce:	bf00      	nop

004042d0 <_vfiprintf_r>:
  4042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042d4:	b0ad      	sub	sp, #180	; 0xb4
  4042d6:	461d      	mov	r5, r3
  4042d8:	468b      	mov	fp, r1
  4042da:	4690      	mov	r8, r2
  4042dc:	9307      	str	r3, [sp, #28]
  4042de:	9006      	str	r0, [sp, #24]
  4042e0:	b118      	cbz	r0, 4042ea <_vfiprintf_r+0x1a>
  4042e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4042e4:	2b00      	cmp	r3, #0
  4042e6:	f000 80f3 	beq.w	4044d0 <_vfiprintf_r+0x200>
  4042ea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4042ee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4042f2:	07df      	lsls	r7, r3, #31
  4042f4:	b281      	uxth	r1, r0
  4042f6:	d402      	bmi.n	4042fe <_vfiprintf_r+0x2e>
  4042f8:	058e      	lsls	r6, r1, #22
  4042fa:	f140 80fc 	bpl.w	4044f6 <_vfiprintf_r+0x226>
  4042fe:	048c      	lsls	r4, r1, #18
  404300:	d40a      	bmi.n	404318 <_vfiprintf_r+0x48>
  404302:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404306:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40430a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40430e:	f8ab 100c 	strh.w	r1, [fp, #12]
  404312:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404316:	b289      	uxth	r1, r1
  404318:	0708      	lsls	r0, r1, #28
  40431a:	f140 80b3 	bpl.w	404484 <_vfiprintf_r+0x1b4>
  40431e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404322:	2b00      	cmp	r3, #0
  404324:	f000 80ae 	beq.w	404484 <_vfiprintf_r+0x1b4>
  404328:	f001 031a 	and.w	r3, r1, #26
  40432c:	2b0a      	cmp	r3, #10
  40432e:	f000 80b5 	beq.w	40449c <_vfiprintf_r+0x1cc>
  404332:	2300      	movs	r3, #0
  404334:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404338:	930b      	str	r3, [sp, #44]	; 0x2c
  40433a:	9311      	str	r3, [sp, #68]	; 0x44
  40433c:	9310      	str	r3, [sp, #64]	; 0x40
  40433e:	9303      	str	r3, [sp, #12]
  404340:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404344:	46ca      	mov	sl, r9
  404346:	f8cd b010 	str.w	fp, [sp, #16]
  40434a:	f898 3000 	ldrb.w	r3, [r8]
  40434e:	4644      	mov	r4, r8
  404350:	b1fb      	cbz	r3, 404392 <_vfiprintf_r+0xc2>
  404352:	2b25      	cmp	r3, #37	; 0x25
  404354:	d102      	bne.n	40435c <_vfiprintf_r+0x8c>
  404356:	e01c      	b.n	404392 <_vfiprintf_r+0xc2>
  404358:	2b25      	cmp	r3, #37	; 0x25
  40435a:	d003      	beq.n	404364 <_vfiprintf_r+0x94>
  40435c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404360:	2b00      	cmp	r3, #0
  404362:	d1f9      	bne.n	404358 <_vfiprintf_r+0x88>
  404364:	eba4 0508 	sub.w	r5, r4, r8
  404368:	b19d      	cbz	r5, 404392 <_vfiprintf_r+0xc2>
  40436a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40436c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40436e:	f8ca 8000 	str.w	r8, [sl]
  404372:	3301      	adds	r3, #1
  404374:	442a      	add	r2, r5
  404376:	2b07      	cmp	r3, #7
  404378:	f8ca 5004 	str.w	r5, [sl, #4]
  40437c:	9211      	str	r2, [sp, #68]	; 0x44
  40437e:	9310      	str	r3, [sp, #64]	; 0x40
  404380:	dd7a      	ble.n	404478 <_vfiprintf_r+0x1a8>
  404382:	2a00      	cmp	r2, #0
  404384:	f040 84b0 	bne.w	404ce8 <_vfiprintf_r+0xa18>
  404388:	9b03      	ldr	r3, [sp, #12]
  40438a:	9210      	str	r2, [sp, #64]	; 0x40
  40438c:	442b      	add	r3, r5
  40438e:	46ca      	mov	sl, r9
  404390:	9303      	str	r3, [sp, #12]
  404392:	7823      	ldrb	r3, [r4, #0]
  404394:	2b00      	cmp	r3, #0
  404396:	f000 83e0 	beq.w	404b5a <_vfiprintf_r+0x88a>
  40439a:	2000      	movs	r0, #0
  40439c:	f04f 0300 	mov.w	r3, #0
  4043a0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4043a4:	f104 0801 	add.w	r8, r4, #1
  4043a8:	7862      	ldrb	r2, [r4, #1]
  4043aa:	4605      	mov	r5, r0
  4043ac:	4606      	mov	r6, r0
  4043ae:	4603      	mov	r3, r0
  4043b0:	f04f 34ff 	mov.w	r4, #4294967295
  4043b4:	f108 0801 	add.w	r8, r8, #1
  4043b8:	f1a2 0120 	sub.w	r1, r2, #32
  4043bc:	2958      	cmp	r1, #88	; 0x58
  4043be:	f200 82de 	bhi.w	40497e <_vfiprintf_r+0x6ae>
  4043c2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4043c6:	0221      	.short	0x0221
  4043c8:	02dc02dc 	.word	0x02dc02dc
  4043cc:	02dc0229 	.word	0x02dc0229
  4043d0:	02dc02dc 	.word	0x02dc02dc
  4043d4:	02dc02dc 	.word	0x02dc02dc
  4043d8:	028902dc 	.word	0x028902dc
  4043dc:	02dc0295 	.word	0x02dc0295
  4043e0:	02bd00a2 	.word	0x02bd00a2
  4043e4:	019f02dc 	.word	0x019f02dc
  4043e8:	01a401a4 	.word	0x01a401a4
  4043ec:	01a401a4 	.word	0x01a401a4
  4043f0:	01a401a4 	.word	0x01a401a4
  4043f4:	01a401a4 	.word	0x01a401a4
  4043f8:	02dc01a4 	.word	0x02dc01a4
  4043fc:	02dc02dc 	.word	0x02dc02dc
  404400:	02dc02dc 	.word	0x02dc02dc
  404404:	02dc02dc 	.word	0x02dc02dc
  404408:	02dc02dc 	.word	0x02dc02dc
  40440c:	01b202dc 	.word	0x01b202dc
  404410:	02dc02dc 	.word	0x02dc02dc
  404414:	02dc02dc 	.word	0x02dc02dc
  404418:	02dc02dc 	.word	0x02dc02dc
  40441c:	02dc02dc 	.word	0x02dc02dc
  404420:	02dc02dc 	.word	0x02dc02dc
  404424:	02dc0197 	.word	0x02dc0197
  404428:	02dc02dc 	.word	0x02dc02dc
  40442c:	02dc02dc 	.word	0x02dc02dc
  404430:	02dc019b 	.word	0x02dc019b
  404434:	025302dc 	.word	0x025302dc
  404438:	02dc02dc 	.word	0x02dc02dc
  40443c:	02dc02dc 	.word	0x02dc02dc
  404440:	02dc02dc 	.word	0x02dc02dc
  404444:	02dc02dc 	.word	0x02dc02dc
  404448:	02dc02dc 	.word	0x02dc02dc
  40444c:	021b025a 	.word	0x021b025a
  404450:	02dc02dc 	.word	0x02dc02dc
  404454:	026e02dc 	.word	0x026e02dc
  404458:	02dc021b 	.word	0x02dc021b
  40445c:	027302dc 	.word	0x027302dc
  404460:	01f502dc 	.word	0x01f502dc
  404464:	02090182 	.word	0x02090182
  404468:	02dc02d7 	.word	0x02dc02d7
  40446c:	02dc029a 	.word	0x02dc029a
  404470:	02dc00a7 	.word	0x02dc00a7
  404474:	022e02dc 	.word	0x022e02dc
  404478:	f10a 0a08 	add.w	sl, sl, #8
  40447c:	9b03      	ldr	r3, [sp, #12]
  40447e:	442b      	add	r3, r5
  404480:	9303      	str	r3, [sp, #12]
  404482:	e786      	b.n	404392 <_vfiprintf_r+0xc2>
  404484:	4659      	mov	r1, fp
  404486:	9806      	ldr	r0, [sp, #24]
  404488:	f000 fdac 	bl	404fe4 <__swsetup_r>
  40448c:	bb18      	cbnz	r0, 4044d6 <_vfiprintf_r+0x206>
  40448e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404492:	f001 031a 	and.w	r3, r1, #26
  404496:	2b0a      	cmp	r3, #10
  404498:	f47f af4b 	bne.w	404332 <_vfiprintf_r+0x62>
  40449c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4044a0:	2b00      	cmp	r3, #0
  4044a2:	f6ff af46 	blt.w	404332 <_vfiprintf_r+0x62>
  4044a6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044aa:	07db      	lsls	r3, r3, #31
  4044ac:	d405      	bmi.n	4044ba <_vfiprintf_r+0x1ea>
  4044ae:	058f      	lsls	r7, r1, #22
  4044b0:	d403      	bmi.n	4044ba <_vfiprintf_r+0x1ea>
  4044b2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4044b6:	f001 fac3 	bl	405a40 <__retarget_lock_release_recursive>
  4044ba:	462b      	mov	r3, r5
  4044bc:	4642      	mov	r2, r8
  4044be:	4659      	mov	r1, fp
  4044c0:	9806      	ldr	r0, [sp, #24]
  4044c2:	f000 fd4d 	bl	404f60 <__sbprintf>
  4044c6:	9003      	str	r0, [sp, #12]
  4044c8:	9803      	ldr	r0, [sp, #12]
  4044ca:	b02d      	add	sp, #180	; 0xb4
  4044cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044d0:	f000 fef4 	bl	4052bc <__sinit>
  4044d4:	e709      	b.n	4042ea <_vfiprintf_r+0x1a>
  4044d6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044da:	07d9      	lsls	r1, r3, #31
  4044dc:	d404      	bmi.n	4044e8 <_vfiprintf_r+0x218>
  4044de:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4044e2:	059a      	lsls	r2, r3, #22
  4044e4:	f140 84aa 	bpl.w	404e3c <_vfiprintf_r+0xb6c>
  4044e8:	f04f 33ff 	mov.w	r3, #4294967295
  4044ec:	9303      	str	r3, [sp, #12]
  4044ee:	9803      	ldr	r0, [sp, #12]
  4044f0:	b02d      	add	sp, #180	; 0xb4
  4044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4044fa:	f001 fa9f 	bl	405a3c <__retarget_lock_acquire_recursive>
  4044fe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404502:	b281      	uxth	r1, r0
  404504:	e6fb      	b.n	4042fe <_vfiprintf_r+0x2e>
  404506:	4276      	negs	r6, r6
  404508:	9207      	str	r2, [sp, #28]
  40450a:	f043 0304 	orr.w	r3, r3, #4
  40450e:	f898 2000 	ldrb.w	r2, [r8]
  404512:	e74f      	b.n	4043b4 <_vfiprintf_r+0xe4>
  404514:	9608      	str	r6, [sp, #32]
  404516:	069e      	lsls	r6, r3, #26
  404518:	f100 8450 	bmi.w	404dbc <_vfiprintf_r+0xaec>
  40451c:	9907      	ldr	r1, [sp, #28]
  40451e:	06dd      	lsls	r5, r3, #27
  404520:	460a      	mov	r2, r1
  404522:	f100 83ef 	bmi.w	404d04 <_vfiprintf_r+0xa34>
  404526:	0658      	lsls	r0, r3, #25
  404528:	f140 83ec 	bpl.w	404d04 <_vfiprintf_r+0xa34>
  40452c:	880e      	ldrh	r6, [r1, #0]
  40452e:	3104      	adds	r1, #4
  404530:	2700      	movs	r7, #0
  404532:	2201      	movs	r2, #1
  404534:	9107      	str	r1, [sp, #28]
  404536:	f04f 0100 	mov.w	r1, #0
  40453a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40453e:	2500      	movs	r5, #0
  404540:	1c61      	adds	r1, r4, #1
  404542:	f000 8116 	beq.w	404772 <_vfiprintf_r+0x4a2>
  404546:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40454a:	9102      	str	r1, [sp, #8]
  40454c:	ea56 0107 	orrs.w	r1, r6, r7
  404550:	f040 8114 	bne.w	40477c <_vfiprintf_r+0x4ac>
  404554:	2c00      	cmp	r4, #0
  404556:	f040 835c 	bne.w	404c12 <_vfiprintf_r+0x942>
  40455a:	2a00      	cmp	r2, #0
  40455c:	f040 83b7 	bne.w	404cce <_vfiprintf_r+0x9fe>
  404560:	f013 0301 	ands.w	r3, r3, #1
  404564:	9305      	str	r3, [sp, #20]
  404566:	f000 8457 	beq.w	404e18 <_vfiprintf_r+0xb48>
  40456a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40456e:	2330      	movs	r3, #48	; 0x30
  404570:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404574:	9b05      	ldr	r3, [sp, #20]
  404576:	42a3      	cmp	r3, r4
  404578:	bfb8      	it	lt
  40457a:	4623      	movlt	r3, r4
  40457c:	9301      	str	r3, [sp, #4]
  40457e:	b10d      	cbz	r5, 404584 <_vfiprintf_r+0x2b4>
  404580:	3301      	adds	r3, #1
  404582:	9301      	str	r3, [sp, #4]
  404584:	9b02      	ldr	r3, [sp, #8]
  404586:	f013 0302 	ands.w	r3, r3, #2
  40458a:	9309      	str	r3, [sp, #36]	; 0x24
  40458c:	d002      	beq.n	404594 <_vfiprintf_r+0x2c4>
  40458e:	9b01      	ldr	r3, [sp, #4]
  404590:	3302      	adds	r3, #2
  404592:	9301      	str	r3, [sp, #4]
  404594:	9b02      	ldr	r3, [sp, #8]
  404596:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40459a:	930a      	str	r3, [sp, #40]	; 0x28
  40459c:	f040 8217 	bne.w	4049ce <_vfiprintf_r+0x6fe>
  4045a0:	9b08      	ldr	r3, [sp, #32]
  4045a2:	9a01      	ldr	r2, [sp, #4]
  4045a4:	1a9d      	subs	r5, r3, r2
  4045a6:	2d00      	cmp	r5, #0
  4045a8:	f340 8211 	ble.w	4049ce <_vfiprintf_r+0x6fe>
  4045ac:	2d10      	cmp	r5, #16
  4045ae:	f340 8490 	ble.w	404ed2 <_vfiprintf_r+0xc02>
  4045b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4045b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4045b6:	4ec4      	ldr	r6, [pc, #784]	; (4048c8 <_vfiprintf_r+0x5f8>)
  4045b8:	46d6      	mov	lr, sl
  4045ba:	2710      	movs	r7, #16
  4045bc:	46a2      	mov	sl, r4
  4045be:	4619      	mov	r1, r3
  4045c0:	9c06      	ldr	r4, [sp, #24]
  4045c2:	e007      	b.n	4045d4 <_vfiprintf_r+0x304>
  4045c4:	f101 0c02 	add.w	ip, r1, #2
  4045c8:	f10e 0e08 	add.w	lr, lr, #8
  4045cc:	4601      	mov	r1, r0
  4045ce:	3d10      	subs	r5, #16
  4045d0:	2d10      	cmp	r5, #16
  4045d2:	dd11      	ble.n	4045f8 <_vfiprintf_r+0x328>
  4045d4:	1c48      	adds	r0, r1, #1
  4045d6:	3210      	adds	r2, #16
  4045d8:	2807      	cmp	r0, #7
  4045da:	9211      	str	r2, [sp, #68]	; 0x44
  4045dc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4045e0:	9010      	str	r0, [sp, #64]	; 0x40
  4045e2:	ddef      	ble.n	4045c4 <_vfiprintf_r+0x2f4>
  4045e4:	2a00      	cmp	r2, #0
  4045e6:	f040 81e4 	bne.w	4049b2 <_vfiprintf_r+0x6e2>
  4045ea:	3d10      	subs	r5, #16
  4045ec:	2d10      	cmp	r5, #16
  4045ee:	4611      	mov	r1, r2
  4045f0:	f04f 0c01 	mov.w	ip, #1
  4045f4:	46ce      	mov	lr, r9
  4045f6:	dced      	bgt.n	4045d4 <_vfiprintf_r+0x304>
  4045f8:	4654      	mov	r4, sl
  4045fa:	4661      	mov	r1, ip
  4045fc:	46f2      	mov	sl, lr
  4045fe:	442a      	add	r2, r5
  404600:	2907      	cmp	r1, #7
  404602:	9211      	str	r2, [sp, #68]	; 0x44
  404604:	f8ca 6000 	str.w	r6, [sl]
  404608:	f8ca 5004 	str.w	r5, [sl, #4]
  40460c:	9110      	str	r1, [sp, #64]	; 0x40
  40460e:	f300 82ec 	bgt.w	404bea <_vfiprintf_r+0x91a>
  404612:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404616:	f10a 0a08 	add.w	sl, sl, #8
  40461a:	1c48      	adds	r0, r1, #1
  40461c:	2d00      	cmp	r5, #0
  40461e:	f040 81de 	bne.w	4049de <_vfiprintf_r+0x70e>
  404622:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404624:	2b00      	cmp	r3, #0
  404626:	f000 81f8 	beq.w	404a1a <_vfiprintf_r+0x74a>
  40462a:	3202      	adds	r2, #2
  40462c:	a90e      	add	r1, sp, #56	; 0x38
  40462e:	2302      	movs	r3, #2
  404630:	2807      	cmp	r0, #7
  404632:	9211      	str	r2, [sp, #68]	; 0x44
  404634:	9010      	str	r0, [sp, #64]	; 0x40
  404636:	e88a 000a 	stmia.w	sl, {r1, r3}
  40463a:	f340 81ea 	ble.w	404a12 <_vfiprintf_r+0x742>
  40463e:	2a00      	cmp	r2, #0
  404640:	f040 838c 	bne.w	404d5c <_vfiprintf_r+0xa8c>
  404644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404646:	2b80      	cmp	r3, #128	; 0x80
  404648:	f04f 0001 	mov.w	r0, #1
  40464c:	4611      	mov	r1, r2
  40464e:	46ca      	mov	sl, r9
  404650:	f040 81e7 	bne.w	404a22 <_vfiprintf_r+0x752>
  404654:	9b08      	ldr	r3, [sp, #32]
  404656:	9d01      	ldr	r5, [sp, #4]
  404658:	1b5e      	subs	r6, r3, r5
  40465a:	2e00      	cmp	r6, #0
  40465c:	f340 81e1 	ble.w	404a22 <_vfiprintf_r+0x752>
  404660:	2e10      	cmp	r6, #16
  404662:	4d9a      	ldr	r5, [pc, #616]	; (4048cc <_vfiprintf_r+0x5fc>)
  404664:	f340 8450 	ble.w	404f08 <_vfiprintf_r+0xc38>
  404668:	46d4      	mov	ip, sl
  40466a:	2710      	movs	r7, #16
  40466c:	46a2      	mov	sl, r4
  40466e:	9c06      	ldr	r4, [sp, #24]
  404670:	e007      	b.n	404682 <_vfiprintf_r+0x3b2>
  404672:	f101 0e02 	add.w	lr, r1, #2
  404676:	f10c 0c08 	add.w	ip, ip, #8
  40467a:	4601      	mov	r1, r0
  40467c:	3e10      	subs	r6, #16
  40467e:	2e10      	cmp	r6, #16
  404680:	dd11      	ble.n	4046a6 <_vfiprintf_r+0x3d6>
  404682:	1c48      	adds	r0, r1, #1
  404684:	3210      	adds	r2, #16
  404686:	2807      	cmp	r0, #7
  404688:	9211      	str	r2, [sp, #68]	; 0x44
  40468a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40468e:	9010      	str	r0, [sp, #64]	; 0x40
  404690:	ddef      	ble.n	404672 <_vfiprintf_r+0x3a2>
  404692:	2a00      	cmp	r2, #0
  404694:	f040 829d 	bne.w	404bd2 <_vfiprintf_r+0x902>
  404698:	3e10      	subs	r6, #16
  40469a:	2e10      	cmp	r6, #16
  40469c:	f04f 0e01 	mov.w	lr, #1
  4046a0:	4611      	mov	r1, r2
  4046a2:	46cc      	mov	ip, r9
  4046a4:	dced      	bgt.n	404682 <_vfiprintf_r+0x3b2>
  4046a6:	4654      	mov	r4, sl
  4046a8:	46e2      	mov	sl, ip
  4046aa:	4432      	add	r2, r6
  4046ac:	f1be 0f07 	cmp.w	lr, #7
  4046b0:	9211      	str	r2, [sp, #68]	; 0x44
  4046b2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4046b6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4046ba:	f300 8369 	bgt.w	404d90 <_vfiprintf_r+0xac0>
  4046be:	f10a 0a08 	add.w	sl, sl, #8
  4046c2:	f10e 0001 	add.w	r0, lr, #1
  4046c6:	4671      	mov	r1, lr
  4046c8:	e1ab      	b.n	404a22 <_vfiprintf_r+0x752>
  4046ca:	9608      	str	r6, [sp, #32]
  4046cc:	f013 0220 	ands.w	r2, r3, #32
  4046d0:	f040 838c 	bne.w	404dec <_vfiprintf_r+0xb1c>
  4046d4:	f013 0110 	ands.w	r1, r3, #16
  4046d8:	f040 831a 	bne.w	404d10 <_vfiprintf_r+0xa40>
  4046dc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4046e0:	f000 8316 	beq.w	404d10 <_vfiprintf_r+0xa40>
  4046e4:	9807      	ldr	r0, [sp, #28]
  4046e6:	460a      	mov	r2, r1
  4046e8:	4601      	mov	r1, r0
  4046ea:	3104      	adds	r1, #4
  4046ec:	8806      	ldrh	r6, [r0, #0]
  4046ee:	9107      	str	r1, [sp, #28]
  4046f0:	2700      	movs	r7, #0
  4046f2:	e720      	b.n	404536 <_vfiprintf_r+0x266>
  4046f4:	9608      	str	r6, [sp, #32]
  4046f6:	f043 0310 	orr.w	r3, r3, #16
  4046fa:	e7e7      	b.n	4046cc <_vfiprintf_r+0x3fc>
  4046fc:	9608      	str	r6, [sp, #32]
  4046fe:	f043 0310 	orr.w	r3, r3, #16
  404702:	e708      	b.n	404516 <_vfiprintf_r+0x246>
  404704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404708:	f898 2000 	ldrb.w	r2, [r8]
  40470c:	e652      	b.n	4043b4 <_vfiprintf_r+0xe4>
  40470e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404712:	2600      	movs	r6, #0
  404714:	f818 2b01 	ldrb.w	r2, [r8], #1
  404718:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40471c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404720:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404724:	2909      	cmp	r1, #9
  404726:	d9f5      	bls.n	404714 <_vfiprintf_r+0x444>
  404728:	e646      	b.n	4043b8 <_vfiprintf_r+0xe8>
  40472a:	9608      	str	r6, [sp, #32]
  40472c:	2800      	cmp	r0, #0
  40472e:	f040 8408 	bne.w	404f42 <_vfiprintf_r+0xc72>
  404732:	f043 0310 	orr.w	r3, r3, #16
  404736:	069e      	lsls	r6, r3, #26
  404738:	f100 834c 	bmi.w	404dd4 <_vfiprintf_r+0xb04>
  40473c:	06dd      	lsls	r5, r3, #27
  40473e:	f100 82f3 	bmi.w	404d28 <_vfiprintf_r+0xa58>
  404742:	0658      	lsls	r0, r3, #25
  404744:	f140 82f0 	bpl.w	404d28 <_vfiprintf_r+0xa58>
  404748:	9d07      	ldr	r5, [sp, #28]
  40474a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40474e:	462a      	mov	r2, r5
  404750:	17f7      	asrs	r7, r6, #31
  404752:	3204      	adds	r2, #4
  404754:	4630      	mov	r0, r6
  404756:	4639      	mov	r1, r7
  404758:	9207      	str	r2, [sp, #28]
  40475a:	2800      	cmp	r0, #0
  40475c:	f171 0200 	sbcs.w	r2, r1, #0
  404760:	f2c0 835d 	blt.w	404e1e <_vfiprintf_r+0xb4e>
  404764:	1c61      	adds	r1, r4, #1
  404766:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40476a:	f04f 0201 	mov.w	r2, #1
  40476e:	f47f aeea 	bne.w	404546 <_vfiprintf_r+0x276>
  404772:	ea56 0107 	orrs.w	r1, r6, r7
  404776:	f000 824d 	beq.w	404c14 <_vfiprintf_r+0x944>
  40477a:	9302      	str	r3, [sp, #8]
  40477c:	2a01      	cmp	r2, #1
  40477e:	f000 828c 	beq.w	404c9a <_vfiprintf_r+0x9ca>
  404782:	2a02      	cmp	r2, #2
  404784:	f040 825c 	bne.w	404c40 <_vfiprintf_r+0x970>
  404788:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40478a:	46cb      	mov	fp, r9
  40478c:	0933      	lsrs	r3, r6, #4
  40478e:	f006 010f 	and.w	r1, r6, #15
  404792:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404796:	093a      	lsrs	r2, r7, #4
  404798:	461e      	mov	r6, r3
  40479a:	4617      	mov	r7, r2
  40479c:	5c43      	ldrb	r3, [r0, r1]
  40479e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4047a2:	ea56 0307 	orrs.w	r3, r6, r7
  4047a6:	d1f1      	bne.n	40478c <_vfiprintf_r+0x4bc>
  4047a8:	eba9 030b 	sub.w	r3, r9, fp
  4047ac:	9305      	str	r3, [sp, #20]
  4047ae:	e6e1      	b.n	404574 <_vfiprintf_r+0x2a4>
  4047b0:	2800      	cmp	r0, #0
  4047b2:	f040 83c0 	bne.w	404f36 <_vfiprintf_r+0xc66>
  4047b6:	0699      	lsls	r1, r3, #26
  4047b8:	f100 8367 	bmi.w	404e8a <_vfiprintf_r+0xbba>
  4047bc:	06da      	lsls	r2, r3, #27
  4047be:	f100 80f1 	bmi.w	4049a4 <_vfiprintf_r+0x6d4>
  4047c2:	065b      	lsls	r3, r3, #25
  4047c4:	f140 80ee 	bpl.w	4049a4 <_vfiprintf_r+0x6d4>
  4047c8:	9a07      	ldr	r2, [sp, #28]
  4047ca:	6813      	ldr	r3, [r2, #0]
  4047cc:	3204      	adds	r2, #4
  4047ce:	9207      	str	r2, [sp, #28]
  4047d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4047d4:	801a      	strh	r2, [r3, #0]
  4047d6:	e5b8      	b.n	40434a <_vfiprintf_r+0x7a>
  4047d8:	9807      	ldr	r0, [sp, #28]
  4047da:	4a3d      	ldr	r2, [pc, #244]	; (4048d0 <_vfiprintf_r+0x600>)
  4047dc:	9608      	str	r6, [sp, #32]
  4047de:	920b      	str	r2, [sp, #44]	; 0x2c
  4047e0:	6806      	ldr	r6, [r0, #0]
  4047e2:	2278      	movs	r2, #120	; 0x78
  4047e4:	2130      	movs	r1, #48	; 0x30
  4047e6:	3004      	adds	r0, #4
  4047e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4047ec:	f043 0302 	orr.w	r3, r3, #2
  4047f0:	9007      	str	r0, [sp, #28]
  4047f2:	2700      	movs	r7, #0
  4047f4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4047f8:	2202      	movs	r2, #2
  4047fa:	e69c      	b.n	404536 <_vfiprintf_r+0x266>
  4047fc:	9608      	str	r6, [sp, #32]
  4047fe:	2800      	cmp	r0, #0
  404800:	d099      	beq.n	404736 <_vfiprintf_r+0x466>
  404802:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404806:	e796      	b.n	404736 <_vfiprintf_r+0x466>
  404808:	f898 2000 	ldrb.w	r2, [r8]
  40480c:	2d00      	cmp	r5, #0
  40480e:	f47f add1 	bne.w	4043b4 <_vfiprintf_r+0xe4>
  404812:	2001      	movs	r0, #1
  404814:	2520      	movs	r5, #32
  404816:	e5cd      	b.n	4043b4 <_vfiprintf_r+0xe4>
  404818:	f043 0301 	orr.w	r3, r3, #1
  40481c:	f898 2000 	ldrb.w	r2, [r8]
  404820:	e5c8      	b.n	4043b4 <_vfiprintf_r+0xe4>
  404822:	9608      	str	r6, [sp, #32]
  404824:	2800      	cmp	r0, #0
  404826:	f040 8393 	bne.w	404f50 <_vfiprintf_r+0xc80>
  40482a:	4929      	ldr	r1, [pc, #164]	; (4048d0 <_vfiprintf_r+0x600>)
  40482c:	910b      	str	r1, [sp, #44]	; 0x2c
  40482e:	069f      	lsls	r7, r3, #26
  404830:	f100 82e8 	bmi.w	404e04 <_vfiprintf_r+0xb34>
  404834:	9807      	ldr	r0, [sp, #28]
  404836:	06de      	lsls	r6, r3, #27
  404838:	4601      	mov	r1, r0
  40483a:	f100 8270 	bmi.w	404d1e <_vfiprintf_r+0xa4e>
  40483e:	065d      	lsls	r5, r3, #25
  404840:	f140 826d 	bpl.w	404d1e <_vfiprintf_r+0xa4e>
  404844:	3104      	adds	r1, #4
  404846:	8806      	ldrh	r6, [r0, #0]
  404848:	9107      	str	r1, [sp, #28]
  40484a:	2700      	movs	r7, #0
  40484c:	07d8      	lsls	r0, r3, #31
  40484e:	f140 8222 	bpl.w	404c96 <_vfiprintf_r+0x9c6>
  404852:	ea56 0107 	orrs.w	r1, r6, r7
  404856:	f000 821e 	beq.w	404c96 <_vfiprintf_r+0x9c6>
  40485a:	2130      	movs	r1, #48	; 0x30
  40485c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404860:	f043 0302 	orr.w	r3, r3, #2
  404864:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404868:	2202      	movs	r2, #2
  40486a:	e664      	b.n	404536 <_vfiprintf_r+0x266>
  40486c:	9608      	str	r6, [sp, #32]
  40486e:	2800      	cmp	r0, #0
  404870:	f040 836b 	bne.w	404f4a <_vfiprintf_r+0xc7a>
  404874:	4917      	ldr	r1, [pc, #92]	; (4048d4 <_vfiprintf_r+0x604>)
  404876:	910b      	str	r1, [sp, #44]	; 0x2c
  404878:	e7d9      	b.n	40482e <_vfiprintf_r+0x55e>
  40487a:	9907      	ldr	r1, [sp, #28]
  40487c:	9608      	str	r6, [sp, #32]
  40487e:	680a      	ldr	r2, [r1, #0]
  404880:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404884:	f04f 0000 	mov.w	r0, #0
  404888:	460a      	mov	r2, r1
  40488a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40488e:	3204      	adds	r2, #4
  404890:	2001      	movs	r0, #1
  404892:	9001      	str	r0, [sp, #4]
  404894:	9207      	str	r2, [sp, #28]
  404896:	9005      	str	r0, [sp, #20]
  404898:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40489c:	9302      	str	r3, [sp, #8]
  40489e:	2400      	movs	r4, #0
  4048a0:	e670      	b.n	404584 <_vfiprintf_r+0x2b4>
  4048a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048a6:	f898 2000 	ldrb.w	r2, [r8]
  4048aa:	e583      	b.n	4043b4 <_vfiprintf_r+0xe4>
  4048ac:	f898 2000 	ldrb.w	r2, [r8]
  4048b0:	2a6c      	cmp	r2, #108	; 0x6c
  4048b2:	bf03      	ittte	eq
  4048b4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4048b8:	f043 0320 	orreq.w	r3, r3, #32
  4048bc:	f108 0801 	addeq.w	r8, r8, #1
  4048c0:	f043 0310 	orrne.w	r3, r3, #16
  4048c4:	e576      	b.n	4043b4 <_vfiprintf_r+0xe4>
  4048c6:	bf00      	nop
  4048c8:	0040693c 	.word	0x0040693c
  4048cc:	0040694c 	.word	0x0040694c
  4048d0:	00406920 	.word	0x00406920
  4048d4:	0040690c 	.word	0x0040690c
  4048d8:	9907      	ldr	r1, [sp, #28]
  4048da:	680e      	ldr	r6, [r1, #0]
  4048dc:	460a      	mov	r2, r1
  4048de:	2e00      	cmp	r6, #0
  4048e0:	f102 0204 	add.w	r2, r2, #4
  4048e4:	f6ff ae0f 	blt.w	404506 <_vfiprintf_r+0x236>
  4048e8:	9207      	str	r2, [sp, #28]
  4048ea:	f898 2000 	ldrb.w	r2, [r8]
  4048ee:	e561      	b.n	4043b4 <_vfiprintf_r+0xe4>
  4048f0:	f898 2000 	ldrb.w	r2, [r8]
  4048f4:	2001      	movs	r0, #1
  4048f6:	252b      	movs	r5, #43	; 0x2b
  4048f8:	e55c      	b.n	4043b4 <_vfiprintf_r+0xe4>
  4048fa:	9907      	ldr	r1, [sp, #28]
  4048fc:	9608      	str	r6, [sp, #32]
  4048fe:	f8d1 b000 	ldr.w	fp, [r1]
  404902:	f04f 0200 	mov.w	r2, #0
  404906:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40490a:	1d0e      	adds	r6, r1, #4
  40490c:	f1bb 0f00 	cmp.w	fp, #0
  404910:	f000 82e5 	beq.w	404ede <_vfiprintf_r+0xc0e>
  404914:	1c67      	adds	r7, r4, #1
  404916:	f000 82c4 	beq.w	404ea2 <_vfiprintf_r+0xbd2>
  40491a:	4622      	mov	r2, r4
  40491c:	2100      	movs	r1, #0
  40491e:	4658      	mov	r0, fp
  404920:	9301      	str	r3, [sp, #4]
  404922:	f001 f91d 	bl	405b60 <memchr>
  404926:	9b01      	ldr	r3, [sp, #4]
  404928:	2800      	cmp	r0, #0
  40492a:	f000 82e5 	beq.w	404ef8 <_vfiprintf_r+0xc28>
  40492e:	eba0 020b 	sub.w	r2, r0, fp
  404932:	9205      	str	r2, [sp, #20]
  404934:	9607      	str	r6, [sp, #28]
  404936:	9302      	str	r3, [sp, #8]
  404938:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40493c:	2400      	movs	r4, #0
  40493e:	e619      	b.n	404574 <_vfiprintf_r+0x2a4>
  404940:	f898 2000 	ldrb.w	r2, [r8]
  404944:	2a2a      	cmp	r2, #42	; 0x2a
  404946:	f108 0701 	add.w	r7, r8, #1
  40494a:	f000 82e9 	beq.w	404f20 <_vfiprintf_r+0xc50>
  40494e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404952:	2909      	cmp	r1, #9
  404954:	46b8      	mov	r8, r7
  404956:	f04f 0400 	mov.w	r4, #0
  40495a:	f63f ad2d 	bhi.w	4043b8 <_vfiprintf_r+0xe8>
  40495e:	f818 2b01 	ldrb.w	r2, [r8], #1
  404962:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404966:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40496a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40496e:	2909      	cmp	r1, #9
  404970:	d9f5      	bls.n	40495e <_vfiprintf_r+0x68e>
  404972:	e521      	b.n	4043b8 <_vfiprintf_r+0xe8>
  404974:	f043 0320 	orr.w	r3, r3, #32
  404978:	f898 2000 	ldrb.w	r2, [r8]
  40497c:	e51a      	b.n	4043b4 <_vfiprintf_r+0xe4>
  40497e:	9608      	str	r6, [sp, #32]
  404980:	2800      	cmp	r0, #0
  404982:	f040 82db 	bne.w	404f3c <_vfiprintf_r+0xc6c>
  404986:	2a00      	cmp	r2, #0
  404988:	f000 80e7 	beq.w	404b5a <_vfiprintf_r+0x88a>
  40498c:	2101      	movs	r1, #1
  40498e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404992:	f04f 0200 	mov.w	r2, #0
  404996:	9101      	str	r1, [sp, #4]
  404998:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40499c:	9105      	str	r1, [sp, #20]
  40499e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4049a2:	e77b      	b.n	40489c <_vfiprintf_r+0x5cc>
  4049a4:	9a07      	ldr	r2, [sp, #28]
  4049a6:	6813      	ldr	r3, [r2, #0]
  4049a8:	3204      	adds	r2, #4
  4049aa:	9207      	str	r2, [sp, #28]
  4049ac:	9a03      	ldr	r2, [sp, #12]
  4049ae:	601a      	str	r2, [r3, #0]
  4049b0:	e4cb      	b.n	40434a <_vfiprintf_r+0x7a>
  4049b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4049b4:	9904      	ldr	r1, [sp, #16]
  4049b6:	4620      	mov	r0, r4
  4049b8:	f7ff fc4a 	bl	404250 <__sprint_r.part.0>
  4049bc:	2800      	cmp	r0, #0
  4049be:	f040 8139 	bne.w	404c34 <_vfiprintf_r+0x964>
  4049c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4049c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049c6:	f101 0c01 	add.w	ip, r1, #1
  4049ca:	46ce      	mov	lr, r9
  4049cc:	e5ff      	b.n	4045ce <_vfiprintf_r+0x2fe>
  4049ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4049d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049d2:	1c48      	adds	r0, r1, #1
  4049d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4049d8:	2d00      	cmp	r5, #0
  4049da:	f43f ae22 	beq.w	404622 <_vfiprintf_r+0x352>
  4049de:	3201      	adds	r2, #1
  4049e0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4049e4:	2101      	movs	r1, #1
  4049e6:	2807      	cmp	r0, #7
  4049e8:	9211      	str	r2, [sp, #68]	; 0x44
  4049ea:	9010      	str	r0, [sp, #64]	; 0x40
  4049ec:	f8ca 5000 	str.w	r5, [sl]
  4049f0:	f8ca 1004 	str.w	r1, [sl, #4]
  4049f4:	f340 8108 	ble.w	404c08 <_vfiprintf_r+0x938>
  4049f8:	2a00      	cmp	r2, #0
  4049fa:	f040 81bc 	bne.w	404d76 <_vfiprintf_r+0xaa6>
  4049fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a00:	2b00      	cmp	r3, #0
  404a02:	f43f ae1f 	beq.w	404644 <_vfiprintf_r+0x374>
  404a06:	ab0e      	add	r3, sp, #56	; 0x38
  404a08:	2202      	movs	r2, #2
  404a0a:	4608      	mov	r0, r1
  404a0c:	931c      	str	r3, [sp, #112]	; 0x70
  404a0e:	921d      	str	r2, [sp, #116]	; 0x74
  404a10:	46ca      	mov	sl, r9
  404a12:	4601      	mov	r1, r0
  404a14:	f10a 0a08 	add.w	sl, sl, #8
  404a18:	3001      	adds	r0, #1
  404a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a1c:	2b80      	cmp	r3, #128	; 0x80
  404a1e:	f43f ae19 	beq.w	404654 <_vfiprintf_r+0x384>
  404a22:	9b05      	ldr	r3, [sp, #20]
  404a24:	1ae4      	subs	r4, r4, r3
  404a26:	2c00      	cmp	r4, #0
  404a28:	dd2e      	ble.n	404a88 <_vfiprintf_r+0x7b8>
  404a2a:	2c10      	cmp	r4, #16
  404a2c:	4db3      	ldr	r5, [pc, #716]	; (404cfc <_vfiprintf_r+0xa2c>)
  404a2e:	dd1e      	ble.n	404a6e <_vfiprintf_r+0x79e>
  404a30:	46d6      	mov	lr, sl
  404a32:	2610      	movs	r6, #16
  404a34:	9f06      	ldr	r7, [sp, #24]
  404a36:	f8dd a010 	ldr.w	sl, [sp, #16]
  404a3a:	e006      	b.n	404a4a <_vfiprintf_r+0x77a>
  404a3c:	1c88      	adds	r0, r1, #2
  404a3e:	f10e 0e08 	add.w	lr, lr, #8
  404a42:	4619      	mov	r1, r3
  404a44:	3c10      	subs	r4, #16
  404a46:	2c10      	cmp	r4, #16
  404a48:	dd10      	ble.n	404a6c <_vfiprintf_r+0x79c>
  404a4a:	1c4b      	adds	r3, r1, #1
  404a4c:	3210      	adds	r2, #16
  404a4e:	2b07      	cmp	r3, #7
  404a50:	9211      	str	r2, [sp, #68]	; 0x44
  404a52:	e88e 0060 	stmia.w	lr, {r5, r6}
  404a56:	9310      	str	r3, [sp, #64]	; 0x40
  404a58:	ddf0      	ble.n	404a3c <_vfiprintf_r+0x76c>
  404a5a:	2a00      	cmp	r2, #0
  404a5c:	d165      	bne.n	404b2a <_vfiprintf_r+0x85a>
  404a5e:	3c10      	subs	r4, #16
  404a60:	2c10      	cmp	r4, #16
  404a62:	f04f 0001 	mov.w	r0, #1
  404a66:	4611      	mov	r1, r2
  404a68:	46ce      	mov	lr, r9
  404a6a:	dcee      	bgt.n	404a4a <_vfiprintf_r+0x77a>
  404a6c:	46f2      	mov	sl, lr
  404a6e:	4422      	add	r2, r4
  404a70:	2807      	cmp	r0, #7
  404a72:	9211      	str	r2, [sp, #68]	; 0x44
  404a74:	f8ca 5000 	str.w	r5, [sl]
  404a78:	f8ca 4004 	str.w	r4, [sl, #4]
  404a7c:	9010      	str	r0, [sp, #64]	; 0x40
  404a7e:	f300 8085 	bgt.w	404b8c <_vfiprintf_r+0x8bc>
  404a82:	f10a 0a08 	add.w	sl, sl, #8
  404a86:	3001      	adds	r0, #1
  404a88:	9905      	ldr	r1, [sp, #20]
  404a8a:	f8ca b000 	str.w	fp, [sl]
  404a8e:	440a      	add	r2, r1
  404a90:	2807      	cmp	r0, #7
  404a92:	9211      	str	r2, [sp, #68]	; 0x44
  404a94:	f8ca 1004 	str.w	r1, [sl, #4]
  404a98:	9010      	str	r0, [sp, #64]	; 0x40
  404a9a:	f340 8082 	ble.w	404ba2 <_vfiprintf_r+0x8d2>
  404a9e:	2a00      	cmp	r2, #0
  404aa0:	f040 8118 	bne.w	404cd4 <_vfiprintf_r+0xa04>
  404aa4:	9b02      	ldr	r3, [sp, #8]
  404aa6:	9210      	str	r2, [sp, #64]	; 0x40
  404aa8:	0758      	lsls	r0, r3, #29
  404aaa:	d535      	bpl.n	404b18 <_vfiprintf_r+0x848>
  404aac:	9b08      	ldr	r3, [sp, #32]
  404aae:	9901      	ldr	r1, [sp, #4]
  404ab0:	1a5c      	subs	r4, r3, r1
  404ab2:	2c00      	cmp	r4, #0
  404ab4:	f340 80e7 	ble.w	404c86 <_vfiprintf_r+0x9b6>
  404ab8:	46ca      	mov	sl, r9
  404aba:	2c10      	cmp	r4, #16
  404abc:	f340 8218 	ble.w	404ef0 <_vfiprintf_r+0xc20>
  404ac0:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ac2:	4e8f      	ldr	r6, [pc, #572]	; (404d00 <_vfiprintf_r+0xa30>)
  404ac4:	9f06      	ldr	r7, [sp, #24]
  404ac6:	f8dd b010 	ldr.w	fp, [sp, #16]
  404aca:	2510      	movs	r5, #16
  404acc:	e006      	b.n	404adc <_vfiprintf_r+0x80c>
  404ace:	1c88      	adds	r0, r1, #2
  404ad0:	f10a 0a08 	add.w	sl, sl, #8
  404ad4:	4619      	mov	r1, r3
  404ad6:	3c10      	subs	r4, #16
  404ad8:	2c10      	cmp	r4, #16
  404ada:	dd11      	ble.n	404b00 <_vfiprintf_r+0x830>
  404adc:	1c4b      	adds	r3, r1, #1
  404ade:	3210      	adds	r2, #16
  404ae0:	2b07      	cmp	r3, #7
  404ae2:	9211      	str	r2, [sp, #68]	; 0x44
  404ae4:	f8ca 6000 	str.w	r6, [sl]
  404ae8:	f8ca 5004 	str.w	r5, [sl, #4]
  404aec:	9310      	str	r3, [sp, #64]	; 0x40
  404aee:	ddee      	ble.n	404ace <_vfiprintf_r+0x7fe>
  404af0:	bb42      	cbnz	r2, 404b44 <_vfiprintf_r+0x874>
  404af2:	3c10      	subs	r4, #16
  404af4:	2c10      	cmp	r4, #16
  404af6:	f04f 0001 	mov.w	r0, #1
  404afa:	4611      	mov	r1, r2
  404afc:	46ca      	mov	sl, r9
  404afe:	dced      	bgt.n	404adc <_vfiprintf_r+0x80c>
  404b00:	4422      	add	r2, r4
  404b02:	2807      	cmp	r0, #7
  404b04:	9211      	str	r2, [sp, #68]	; 0x44
  404b06:	f8ca 6000 	str.w	r6, [sl]
  404b0a:	f8ca 4004 	str.w	r4, [sl, #4]
  404b0e:	9010      	str	r0, [sp, #64]	; 0x40
  404b10:	dd51      	ble.n	404bb6 <_vfiprintf_r+0x8e6>
  404b12:	2a00      	cmp	r2, #0
  404b14:	f040 819b 	bne.w	404e4e <_vfiprintf_r+0xb7e>
  404b18:	9b03      	ldr	r3, [sp, #12]
  404b1a:	9a08      	ldr	r2, [sp, #32]
  404b1c:	9901      	ldr	r1, [sp, #4]
  404b1e:	428a      	cmp	r2, r1
  404b20:	bfac      	ite	ge
  404b22:	189b      	addge	r3, r3, r2
  404b24:	185b      	addlt	r3, r3, r1
  404b26:	9303      	str	r3, [sp, #12]
  404b28:	e04e      	b.n	404bc8 <_vfiprintf_r+0x8f8>
  404b2a:	aa0f      	add	r2, sp, #60	; 0x3c
  404b2c:	4651      	mov	r1, sl
  404b2e:	4638      	mov	r0, r7
  404b30:	f7ff fb8e 	bl	404250 <__sprint_r.part.0>
  404b34:	2800      	cmp	r0, #0
  404b36:	f040 813f 	bne.w	404db8 <_vfiprintf_r+0xae8>
  404b3a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b3e:	1c48      	adds	r0, r1, #1
  404b40:	46ce      	mov	lr, r9
  404b42:	e77f      	b.n	404a44 <_vfiprintf_r+0x774>
  404b44:	aa0f      	add	r2, sp, #60	; 0x3c
  404b46:	4659      	mov	r1, fp
  404b48:	4638      	mov	r0, r7
  404b4a:	f7ff fb81 	bl	404250 <__sprint_r.part.0>
  404b4e:	b960      	cbnz	r0, 404b6a <_vfiprintf_r+0x89a>
  404b50:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b54:	1c48      	adds	r0, r1, #1
  404b56:	46ca      	mov	sl, r9
  404b58:	e7bd      	b.n	404ad6 <_vfiprintf_r+0x806>
  404b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b5c:	f8dd b010 	ldr.w	fp, [sp, #16]
  404b60:	2b00      	cmp	r3, #0
  404b62:	f040 81d4 	bne.w	404f0e <_vfiprintf_r+0xc3e>
  404b66:	2300      	movs	r3, #0
  404b68:	9310      	str	r3, [sp, #64]	; 0x40
  404b6a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b6e:	f013 0f01 	tst.w	r3, #1
  404b72:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b76:	d102      	bne.n	404b7e <_vfiprintf_r+0x8ae>
  404b78:	059a      	lsls	r2, r3, #22
  404b7a:	f140 80de 	bpl.w	404d3a <_vfiprintf_r+0xa6a>
  404b7e:	065b      	lsls	r3, r3, #25
  404b80:	f53f acb2 	bmi.w	4044e8 <_vfiprintf_r+0x218>
  404b84:	9803      	ldr	r0, [sp, #12]
  404b86:	b02d      	add	sp, #180	; 0xb4
  404b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b8c:	2a00      	cmp	r2, #0
  404b8e:	f040 8106 	bne.w	404d9e <_vfiprintf_r+0xace>
  404b92:	9a05      	ldr	r2, [sp, #20]
  404b94:	921d      	str	r2, [sp, #116]	; 0x74
  404b96:	2301      	movs	r3, #1
  404b98:	9211      	str	r2, [sp, #68]	; 0x44
  404b9a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404b9e:	9310      	str	r3, [sp, #64]	; 0x40
  404ba0:	46ca      	mov	sl, r9
  404ba2:	f10a 0a08 	add.w	sl, sl, #8
  404ba6:	9b02      	ldr	r3, [sp, #8]
  404ba8:	0759      	lsls	r1, r3, #29
  404baa:	d504      	bpl.n	404bb6 <_vfiprintf_r+0x8e6>
  404bac:	9b08      	ldr	r3, [sp, #32]
  404bae:	9901      	ldr	r1, [sp, #4]
  404bb0:	1a5c      	subs	r4, r3, r1
  404bb2:	2c00      	cmp	r4, #0
  404bb4:	dc81      	bgt.n	404aba <_vfiprintf_r+0x7ea>
  404bb6:	9b03      	ldr	r3, [sp, #12]
  404bb8:	9908      	ldr	r1, [sp, #32]
  404bba:	9801      	ldr	r0, [sp, #4]
  404bbc:	4281      	cmp	r1, r0
  404bbe:	bfac      	ite	ge
  404bc0:	185b      	addge	r3, r3, r1
  404bc2:	181b      	addlt	r3, r3, r0
  404bc4:	9303      	str	r3, [sp, #12]
  404bc6:	bb72      	cbnz	r2, 404c26 <_vfiprintf_r+0x956>
  404bc8:	2300      	movs	r3, #0
  404bca:	9310      	str	r3, [sp, #64]	; 0x40
  404bcc:	46ca      	mov	sl, r9
  404bce:	f7ff bbbc 	b.w	40434a <_vfiprintf_r+0x7a>
  404bd2:	aa0f      	add	r2, sp, #60	; 0x3c
  404bd4:	9904      	ldr	r1, [sp, #16]
  404bd6:	4620      	mov	r0, r4
  404bd8:	f7ff fb3a 	bl	404250 <__sprint_r.part.0>
  404bdc:	bb50      	cbnz	r0, 404c34 <_vfiprintf_r+0x964>
  404bde:	9910      	ldr	r1, [sp, #64]	; 0x40
  404be0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404be2:	f101 0e01 	add.w	lr, r1, #1
  404be6:	46cc      	mov	ip, r9
  404be8:	e548      	b.n	40467c <_vfiprintf_r+0x3ac>
  404bea:	2a00      	cmp	r2, #0
  404bec:	f040 8140 	bne.w	404e70 <_vfiprintf_r+0xba0>
  404bf0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404bf4:	2900      	cmp	r1, #0
  404bf6:	f000 811b 	beq.w	404e30 <_vfiprintf_r+0xb60>
  404bfa:	2201      	movs	r2, #1
  404bfc:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404c00:	4610      	mov	r0, r2
  404c02:	921d      	str	r2, [sp, #116]	; 0x74
  404c04:	911c      	str	r1, [sp, #112]	; 0x70
  404c06:	46ca      	mov	sl, r9
  404c08:	4601      	mov	r1, r0
  404c0a:	f10a 0a08 	add.w	sl, sl, #8
  404c0e:	3001      	adds	r0, #1
  404c10:	e507      	b.n	404622 <_vfiprintf_r+0x352>
  404c12:	9b02      	ldr	r3, [sp, #8]
  404c14:	2a01      	cmp	r2, #1
  404c16:	f000 8098 	beq.w	404d4a <_vfiprintf_r+0xa7a>
  404c1a:	2a02      	cmp	r2, #2
  404c1c:	d10d      	bne.n	404c3a <_vfiprintf_r+0x96a>
  404c1e:	9302      	str	r3, [sp, #8]
  404c20:	2600      	movs	r6, #0
  404c22:	2700      	movs	r7, #0
  404c24:	e5b0      	b.n	404788 <_vfiprintf_r+0x4b8>
  404c26:	aa0f      	add	r2, sp, #60	; 0x3c
  404c28:	9904      	ldr	r1, [sp, #16]
  404c2a:	9806      	ldr	r0, [sp, #24]
  404c2c:	f7ff fb10 	bl	404250 <__sprint_r.part.0>
  404c30:	2800      	cmp	r0, #0
  404c32:	d0c9      	beq.n	404bc8 <_vfiprintf_r+0x8f8>
  404c34:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c38:	e797      	b.n	404b6a <_vfiprintf_r+0x89a>
  404c3a:	9302      	str	r3, [sp, #8]
  404c3c:	2600      	movs	r6, #0
  404c3e:	2700      	movs	r7, #0
  404c40:	4649      	mov	r1, r9
  404c42:	e000      	b.n	404c46 <_vfiprintf_r+0x976>
  404c44:	4659      	mov	r1, fp
  404c46:	08f2      	lsrs	r2, r6, #3
  404c48:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404c4c:	08f8      	lsrs	r0, r7, #3
  404c4e:	f006 0307 	and.w	r3, r6, #7
  404c52:	4607      	mov	r7, r0
  404c54:	4616      	mov	r6, r2
  404c56:	3330      	adds	r3, #48	; 0x30
  404c58:	ea56 0207 	orrs.w	r2, r6, r7
  404c5c:	f801 3c01 	strb.w	r3, [r1, #-1]
  404c60:	f101 3bff 	add.w	fp, r1, #4294967295
  404c64:	d1ee      	bne.n	404c44 <_vfiprintf_r+0x974>
  404c66:	9a02      	ldr	r2, [sp, #8]
  404c68:	07d6      	lsls	r6, r2, #31
  404c6a:	f57f ad9d 	bpl.w	4047a8 <_vfiprintf_r+0x4d8>
  404c6e:	2b30      	cmp	r3, #48	; 0x30
  404c70:	f43f ad9a 	beq.w	4047a8 <_vfiprintf_r+0x4d8>
  404c74:	3902      	subs	r1, #2
  404c76:	2330      	movs	r3, #48	; 0x30
  404c78:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404c7c:	eba9 0301 	sub.w	r3, r9, r1
  404c80:	9305      	str	r3, [sp, #20]
  404c82:	468b      	mov	fp, r1
  404c84:	e476      	b.n	404574 <_vfiprintf_r+0x2a4>
  404c86:	9b03      	ldr	r3, [sp, #12]
  404c88:	9a08      	ldr	r2, [sp, #32]
  404c8a:	428a      	cmp	r2, r1
  404c8c:	bfac      	ite	ge
  404c8e:	189b      	addge	r3, r3, r2
  404c90:	185b      	addlt	r3, r3, r1
  404c92:	9303      	str	r3, [sp, #12]
  404c94:	e798      	b.n	404bc8 <_vfiprintf_r+0x8f8>
  404c96:	2202      	movs	r2, #2
  404c98:	e44d      	b.n	404536 <_vfiprintf_r+0x266>
  404c9a:	2f00      	cmp	r7, #0
  404c9c:	bf08      	it	eq
  404c9e:	2e0a      	cmpeq	r6, #10
  404ca0:	d352      	bcc.n	404d48 <_vfiprintf_r+0xa78>
  404ca2:	46cb      	mov	fp, r9
  404ca4:	4630      	mov	r0, r6
  404ca6:	4639      	mov	r1, r7
  404ca8:	220a      	movs	r2, #10
  404caa:	2300      	movs	r3, #0
  404cac:	f001 fc44 	bl	406538 <__aeabi_uldivmod>
  404cb0:	3230      	adds	r2, #48	; 0x30
  404cb2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404cb6:	4630      	mov	r0, r6
  404cb8:	4639      	mov	r1, r7
  404cba:	2300      	movs	r3, #0
  404cbc:	220a      	movs	r2, #10
  404cbe:	f001 fc3b 	bl	406538 <__aeabi_uldivmod>
  404cc2:	4606      	mov	r6, r0
  404cc4:	460f      	mov	r7, r1
  404cc6:	ea56 0307 	orrs.w	r3, r6, r7
  404cca:	d1eb      	bne.n	404ca4 <_vfiprintf_r+0x9d4>
  404ccc:	e56c      	b.n	4047a8 <_vfiprintf_r+0x4d8>
  404cce:	9405      	str	r4, [sp, #20]
  404cd0:	46cb      	mov	fp, r9
  404cd2:	e44f      	b.n	404574 <_vfiprintf_r+0x2a4>
  404cd4:	aa0f      	add	r2, sp, #60	; 0x3c
  404cd6:	9904      	ldr	r1, [sp, #16]
  404cd8:	9806      	ldr	r0, [sp, #24]
  404cda:	f7ff fab9 	bl	404250 <__sprint_r.part.0>
  404cde:	2800      	cmp	r0, #0
  404ce0:	d1a8      	bne.n	404c34 <_vfiprintf_r+0x964>
  404ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ce4:	46ca      	mov	sl, r9
  404ce6:	e75e      	b.n	404ba6 <_vfiprintf_r+0x8d6>
  404ce8:	aa0f      	add	r2, sp, #60	; 0x3c
  404cea:	9904      	ldr	r1, [sp, #16]
  404cec:	9806      	ldr	r0, [sp, #24]
  404cee:	f7ff faaf 	bl	404250 <__sprint_r.part.0>
  404cf2:	2800      	cmp	r0, #0
  404cf4:	d19e      	bne.n	404c34 <_vfiprintf_r+0x964>
  404cf6:	46ca      	mov	sl, r9
  404cf8:	f7ff bbc0 	b.w	40447c <_vfiprintf_r+0x1ac>
  404cfc:	0040694c 	.word	0x0040694c
  404d00:	0040693c 	.word	0x0040693c
  404d04:	3104      	adds	r1, #4
  404d06:	6816      	ldr	r6, [r2, #0]
  404d08:	9107      	str	r1, [sp, #28]
  404d0a:	2201      	movs	r2, #1
  404d0c:	2700      	movs	r7, #0
  404d0e:	e412      	b.n	404536 <_vfiprintf_r+0x266>
  404d10:	9807      	ldr	r0, [sp, #28]
  404d12:	4601      	mov	r1, r0
  404d14:	3104      	adds	r1, #4
  404d16:	6806      	ldr	r6, [r0, #0]
  404d18:	9107      	str	r1, [sp, #28]
  404d1a:	2700      	movs	r7, #0
  404d1c:	e40b      	b.n	404536 <_vfiprintf_r+0x266>
  404d1e:	680e      	ldr	r6, [r1, #0]
  404d20:	3104      	adds	r1, #4
  404d22:	9107      	str	r1, [sp, #28]
  404d24:	2700      	movs	r7, #0
  404d26:	e591      	b.n	40484c <_vfiprintf_r+0x57c>
  404d28:	9907      	ldr	r1, [sp, #28]
  404d2a:	680e      	ldr	r6, [r1, #0]
  404d2c:	460a      	mov	r2, r1
  404d2e:	17f7      	asrs	r7, r6, #31
  404d30:	3204      	adds	r2, #4
  404d32:	9207      	str	r2, [sp, #28]
  404d34:	4630      	mov	r0, r6
  404d36:	4639      	mov	r1, r7
  404d38:	e50f      	b.n	40475a <_vfiprintf_r+0x48a>
  404d3a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d3e:	f000 fe7f 	bl	405a40 <__retarget_lock_release_recursive>
  404d42:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d46:	e71a      	b.n	404b7e <_vfiprintf_r+0x8ae>
  404d48:	9b02      	ldr	r3, [sp, #8]
  404d4a:	9302      	str	r3, [sp, #8]
  404d4c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404d50:	3630      	adds	r6, #48	; 0x30
  404d52:	2301      	movs	r3, #1
  404d54:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404d58:	9305      	str	r3, [sp, #20]
  404d5a:	e40b      	b.n	404574 <_vfiprintf_r+0x2a4>
  404d5c:	aa0f      	add	r2, sp, #60	; 0x3c
  404d5e:	9904      	ldr	r1, [sp, #16]
  404d60:	9806      	ldr	r0, [sp, #24]
  404d62:	f7ff fa75 	bl	404250 <__sprint_r.part.0>
  404d66:	2800      	cmp	r0, #0
  404d68:	f47f af64 	bne.w	404c34 <_vfiprintf_r+0x964>
  404d6c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d70:	1c48      	adds	r0, r1, #1
  404d72:	46ca      	mov	sl, r9
  404d74:	e651      	b.n	404a1a <_vfiprintf_r+0x74a>
  404d76:	aa0f      	add	r2, sp, #60	; 0x3c
  404d78:	9904      	ldr	r1, [sp, #16]
  404d7a:	9806      	ldr	r0, [sp, #24]
  404d7c:	f7ff fa68 	bl	404250 <__sprint_r.part.0>
  404d80:	2800      	cmp	r0, #0
  404d82:	f47f af57 	bne.w	404c34 <_vfiprintf_r+0x964>
  404d86:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d8a:	1c48      	adds	r0, r1, #1
  404d8c:	46ca      	mov	sl, r9
  404d8e:	e448      	b.n	404622 <_vfiprintf_r+0x352>
  404d90:	2a00      	cmp	r2, #0
  404d92:	f040 8091 	bne.w	404eb8 <_vfiprintf_r+0xbe8>
  404d96:	2001      	movs	r0, #1
  404d98:	4611      	mov	r1, r2
  404d9a:	46ca      	mov	sl, r9
  404d9c:	e641      	b.n	404a22 <_vfiprintf_r+0x752>
  404d9e:	aa0f      	add	r2, sp, #60	; 0x3c
  404da0:	9904      	ldr	r1, [sp, #16]
  404da2:	9806      	ldr	r0, [sp, #24]
  404da4:	f7ff fa54 	bl	404250 <__sprint_r.part.0>
  404da8:	2800      	cmp	r0, #0
  404daa:	f47f af43 	bne.w	404c34 <_vfiprintf_r+0x964>
  404dae:	9810      	ldr	r0, [sp, #64]	; 0x40
  404db0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404db2:	3001      	adds	r0, #1
  404db4:	46ca      	mov	sl, r9
  404db6:	e667      	b.n	404a88 <_vfiprintf_r+0x7b8>
  404db8:	46d3      	mov	fp, sl
  404dba:	e6d6      	b.n	404b6a <_vfiprintf_r+0x89a>
  404dbc:	9e07      	ldr	r6, [sp, #28]
  404dbe:	3607      	adds	r6, #7
  404dc0:	f026 0207 	bic.w	r2, r6, #7
  404dc4:	f102 0108 	add.w	r1, r2, #8
  404dc8:	e9d2 6700 	ldrd	r6, r7, [r2]
  404dcc:	9107      	str	r1, [sp, #28]
  404dce:	2201      	movs	r2, #1
  404dd0:	f7ff bbb1 	b.w	404536 <_vfiprintf_r+0x266>
  404dd4:	9e07      	ldr	r6, [sp, #28]
  404dd6:	3607      	adds	r6, #7
  404dd8:	f026 0607 	bic.w	r6, r6, #7
  404ddc:	e9d6 0100 	ldrd	r0, r1, [r6]
  404de0:	f106 0208 	add.w	r2, r6, #8
  404de4:	9207      	str	r2, [sp, #28]
  404de6:	4606      	mov	r6, r0
  404de8:	460f      	mov	r7, r1
  404dea:	e4b6      	b.n	40475a <_vfiprintf_r+0x48a>
  404dec:	9e07      	ldr	r6, [sp, #28]
  404dee:	3607      	adds	r6, #7
  404df0:	f026 0207 	bic.w	r2, r6, #7
  404df4:	f102 0108 	add.w	r1, r2, #8
  404df8:	e9d2 6700 	ldrd	r6, r7, [r2]
  404dfc:	9107      	str	r1, [sp, #28]
  404dfe:	2200      	movs	r2, #0
  404e00:	f7ff bb99 	b.w	404536 <_vfiprintf_r+0x266>
  404e04:	9e07      	ldr	r6, [sp, #28]
  404e06:	3607      	adds	r6, #7
  404e08:	f026 0107 	bic.w	r1, r6, #7
  404e0c:	f101 0008 	add.w	r0, r1, #8
  404e10:	9007      	str	r0, [sp, #28]
  404e12:	e9d1 6700 	ldrd	r6, r7, [r1]
  404e16:	e519      	b.n	40484c <_vfiprintf_r+0x57c>
  404e18:	46cb      	mov	fp, r9
  404e1a:	f7ff bbab 	b.w	404574 <_vfiprintf_r+0x2a4>
  404e1e:	252d      	movs	r5, #45	; 0x2d
  404e20:	4276      	negs	r6, r6
  404e22:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404e26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e2a:	2201      	movs	r2, #1
  404e2c:	f7ff bb88 	b.w	404540 <_vfiprintf_r+0x270>
  404e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e32:	b9b3      	cbnz	r3, 404e62 <_vfiprintf_r+0xb92>
  404e34:	4611      	mov	r1, r2
  404e36:	2001      	movs	r0, #1
  404e38:	46ca      	mov	sl, r9
  404e3a:	e5f2      	b.n	404a22 <_vfiprintf_r+0x752>
  404e3c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e40:	f000 fdfe 	bl	405a40 <__retarget_lock_release_recursive>
  404e44:	f04f 33ff 	mov.w	r3, #4294967295
  404e48:	9303      	str	r3, [sp, #12]
  404e4a:	f7ff bb50 	b.w	4044ee <_vfiprintf_r+0x21e>
  404e4e:	aa0f      	add	r2, sp, #60	; 0x3c
  404e50:	9904      	ldr	r1, [sp, #16]
  404e52:	9806      	ldr	r0, [sp, #24]
  404e54:	f7ff f9fc 	bl	404250 <__sprint_r.part.0>
  404e58:	2800      	cmp	r0, #0
  404e5a:	f47f aeeb 	bne.w	404c34 <_vfiprintf_r+0x964>
  404e5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e60:	e6a9      	b.n	404bb6 <_vfiprintf_r+0x8e6>
  404e62:	ab0e      	add	r3, sp, #56	; 0x38
  404e64:	2202      	movs	r2, #2
  404e66:	931c      	str	r3, [sp, #112]	; 0x70
  404e68:	921d      	str	r2, [sp, #116]	; 0x74
  404e6a:	2001      	movs	r0, #1
  404e6c:	46ca      	mov	sl, r9
  404e6e:	e5d0      	b.n	404a12 <_vfiprintf_r+0x742>
  404e70:	aa0f      	add	r2, sp, #60	; 0x3c
  404e72:	9904      	ldr	r1, [sp, #16]
  404e74:	9806      	ldr	r0, [sp, #24]
  404e76:	f7ff f9eb 	bl	404250 <__sprint_r.part.0>
  404e7a:	2800      	cmp	r0, #0
  404e7c:	f47f aeda 	bne.w	404c34 <_vfiprintf_r+0x964>
  404e80:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e84:	1c48      	adds	r0, r1, #1
  404e86:	46ca      	mov	sl, r9
  404e88:	e5a4      	b.n	4049d4 <_vfiprintf_r+0x704>
  404e8a:	9a07      	ldr	r2, [sp, #28]
  404e8c:	9903      	ldr	r1, [sp, #12]
  404e8e:	6813      	ldr	r3, [r2, #0]
  404e90:	17cd      	asrs	r5, r1, #31
  404e92:	4608      	mov	r0, r1
  404e94:	3204      	adds	r2, #4
  404e96:	4629      	mov	r1, r5
  404e98:	9207      	str	r2, [sp, #28]
  404e9a:	e9c3 0100 	strd	r0, r1, [r3]
  404e9e:	f7ff ba54 	b.w	40434a <_vfiprintf_r+0x7a>
  404ea2:	4658      	mov	r0, fp
  404ea4:	9607      	str	r6, [sp, #28]
  404ea6:	9302      	str	r3, [sp, #8]
  404ea8:	f001 f90a 	bl	4060c0 <strlen>
  404eac:	2400      	movs	r4, #0
  404eae:	9005      	str	r0, [sp, #20]
  404eb0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404eb4:	f7ff bb5e 	b.w	404574 <_vfiprintf_r+0x2a4>
  404eb8:	aa0f      	add	r2, sp, #60	; 0x3c
  404eba:	9904      	ldr	r1, [sp, #16]
  404ebc:	9806      	ldr	r0, [sp, #24]
  404ebe:	f7ff f9c7 	bl	404250 <__sprint_r.part.0>
  404ec2:	2800      	cmp	r0, #0
  404ec4:	f47f aeb6 	bne.w	404c34 <_vfiprintf_r+0x964>
  404ec8:	9910      	ldr	r1, [sp, #64]	; 0x40
  404eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ecc:	1c48      	adds	r0, r1, #1
  404ece:	46ca      	mov	sl, r9
  404ed0:	e5a7      	b.n	404a22 <_vfiprintf_r+0x752>
  404ed2:	9910      	ldr	r1, [sp, #64]	; 0x40
  404ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ed6:	4e20      	ldr	r6, [pc, #128]	; (404f58 <_vfiprintf_r+0xc88>)
  404ed8:	3101      	adds	r1, #1
  404eda:	f7ff bb90 	b.w	4045fe <_vfiprintf_r+0x32e>
  404ede:	2c06      	cmp	r4, #6
  404ee0:	bf28      	it	cs
  404ee2:	2406      	movcs	r4, #6
  404ee4:	9405      	str	r4, [sp, #20]
  404ee6:	9607      	str	r6, [sp, #28]
  404ee8:	9401      	str	r4, [sp, #4]
  404eea:	f8df b070 	ldr.w	fp, [pc, #112]	; 404f5c <_vfiprintf_r+0xc8c>
  404eee:	e4d5      	b.n	40489c <_vfiprintf_r+0x5cc>
  404ef0:	9810      	ldr	r0, [sp, #64]	; 0x40
  404ef2:	4e19      	ldr	r6, [pc, #100]	; (404f58 <_vfiprintf_r+0xc88>)
  404ef4:	3001      	adds	r0, #1
  404ef6:	e603      	b.n	404b00 <_vfiprintf_r+0x830>
  404ef8:	9405      	str	r4, [sp, #20]
  404efa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404efe:	9607      	str	r6, [sp, #28]
  404f00:	9302      	str	r3, [sp, #8]
  404f02:	4604      	mov	r4, r0
  404f04:	f7ff bb36 	b.w	404574 <_vfiprintf_r+0x2a4>
  404f08:	4686      	mov	lr, r0
  404f0a:	f7ff bbce 	b.w	4046aa <_vfiprintf_r+0x3da>
  404f0e:	9806      	ldr	r0, [sp, #24]
  404f10:	aa0f      	add	r2, sp, #60	; 0x3c
  404f12:	4659      	mov	r1, fp
  404f14:	f7ff f99c 	bl	404250 <__sprint_r.part.0>
  404f18:	2800      	cmp	r0, #0
  404f1a:	f43f ae24 	beq.w	404b66 <_vfiprintf_r+0x896>
  404f1e:	e624      	b.n	404b6a <_vfiprintf_r+0x89a>
  404f20:	9907      	ldr	r1, [sp, #28]
  404f22:	f898 2001 	ldrb.w	r2, [r8, #1]
  404f26:	680c      	ldr	r4, [r1, #0]
  404f28:	3104      	adds	r1, #4
  404f2a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  404f2e:	46b8      	mov	r8, r7
  404f30:	9107      	str	r1, [sp, #28]
  404f32:	f7ff ba3f 	b.w	4043b4 <_vfiprintf_r+0xe4>
  404f36:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f3a:	e43c      	b.n	4047b6 <_vfiprintf_r+0x4e6>
  404f3c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f40:	e521      	b.n	404986 <_vfiprintf_r+0x6b6>
  404f42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f46:	f7ff bbf4 	b.w	404732 <_vfiprintf_r+0x462>
  404f4a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f4e:	e491      	b.n	404874 <_vfiprintf_r+0x5a4>
  404f50:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404f54:	e469      	b.n	40482a <_vfiprintf_r+0x55a>
  404f56:	bf00      	nop
  404f58:	0040693c 	.word	0x0040693c
  404f5c:	00406934 	.word	0x00406934

00404f60 <__sbprintf>:
  404f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f64:	460c      	mov	r4, r1
  404f66:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  404f6a:	8989      	ldrh	r1, [r1, #12]
  404f6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404f6e:	89e5      	ldrh	r5, [r4, #14]
  404f70:	9619      	str	r6, [sp, #100]	; 0x64
  404f72:	f021 0102 	bic.w	r1, r1, #2
  404f76:	4606      	mov	r6, r0
  404f78:	69e0      	ldr	r0, [r4, #28]
  404f7a:	f8ad 100c 	strh.w	r1, [sp, #12]
  404f7e:	4617      	mov	r7, r2
  404f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404f84:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404f86:	f8ad 500e 	strh.w	r5, [sp, #14]
  404f8a:	4698      	mov	r8, r3
  404f8c:	ad1a      	add	r5, sp, #104	; 0x68
  404f8e:	2300      	movs	r3, #0
  404f90:	9007      	str	r0, [sp, #28]
  404f92:	a816      	add	r0, sp, #88	; 0x58
  404f94:	9209      	str	r2, [sp, #36]	; 0x24
  404f96:	9306      	str	r3, [sp, #24]
  404f98:	9500      	str	r5, [sp, #0]
  404f9a:	9504      	str	r5, [sp, #16]
  404f9c:	9102      	str	r1, [sp, #8]
  404f9e:	9105      	str	r1, [sp, #20]
  404fa0:	f000 fd48 	bl	405a34 <__retarget_lock_init_recursive>
  404fa4:	4643      	mov	r3, r8
  404fa6:	463a      	mov	r2, r7
  404fa8:	4669      	mov	r1, sp
  404faa:	4630      	mov	r0, r6
  404fac:	f7ff f990 	bl	4042d0 <_vfiprintf_r>
  404fb0:	1e05      	subs	r5, r0, #0
  404fb2:	db07      	blt.n	404fc4 <__sbprintf+0x64>
  404fb4:	4630      	mov	r0, r6
  404fb6:	4669      	mov	r1, sp
  404fb8:	f000 f928 	bl	40520c <_fflush_r>
  404fbc:	2800      	cmp	r0, #0
  404fbe:	bf18      	it	ne
  404fc0:	f04f 35ff 	movne.w	r5, #4294967295
  404fc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404fc8:	065b      	lsls	r3, r3, #25
  404fca:	d503      	bpl.n	404fd4 <__sbprintf+0x74>
  404fcc:	89a3      	ldrh	r3, [r4, #12]
  404fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404fd2:	81a3      	strh	r3, [r4, #12]
  404fd4:	9816      	ldr	r0, [sp, #88]	; 0x58
  404fd6:	f000 fd2f 	bl	405a38 <__retarget_lock_close_recursive>
  404fda:	4628      	mov	r0, r5
  404fdc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  404fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404fe4 <__swsetup_r>:
  404fe4:	b538      	push	{r3, r4, r5, lr}
  404fe6:	4b30      	ldr	r3, [pc, #192]	; (4050a8 <__swsetup_r+0xc4>)
  404fe8:	681b      	ldr	r3, [r3, #0]
  404fea:	4605      	mov	r5, r0
  404fec:	460c      	mov	r4, r1
  404fee:	b113      	cbz	r3, 404ff6 <__swsetup_r+0x12>
  404ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  404ff2:	2a00      	cmp	r2, #0
  404ff4:	d038      	beq.n	405068 <__swsetup_r+0x84>
  404ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404ffa:	b293      	uxth	r3, r2
  404ffc:	0718      	lsls	r0, r3, #28
  404ffe:	d50c      	bpl.n	40501a <__swsetup_r+0x36>
  405000:	6920      	ldr	r0, [r4, #16]
  405002:	b1a8      	cbz	r0, 405030 <__swsetup_r+0x4c>
  405004:	f013 0201 	ands.w	r2, r3, #1
  405008:	d01e      	beq.n	405048 <__swsetup_r+0x64>
  40500a:	6963      	ldr	r3, [r4, #20]
  40500c:	2200      	movs	r2, #0
  40500e:	425b      	negs	r3, r3
  405010:	61a3      	str	r3, [r4, #24]
  405012:	60a2      	str	r2, [r4, #8]
  405014:	b1f0      	cbz	r0, 405054 <__swsetup_r+0x70>
  405016:	2000      	movs	r0, #0
  405018:	bd38      	pop	{r3, r4, r5, pc}
  40501a:	06d9      	lsls	r1, r3, #27
  40501c:	d53c      	bpl.n	405098 <__swsetup_r+0xb4>
  40501e:	0758      	lsls	r0, r3, #29
  405020:	d426      	bmi.n	405070 <__swsetup_r+0x8c>
  405022:	6920      	ldr	r0, [r4, #16]
  405024:	f042 0308 	orr.w	r3, r2, #8
  405028:	81a3      	strh	r3, [r4, #12]
  40502a:	b29b      	uxth	r3, r3
  40502c:	2800      	cmp	r0, #0
  40502e:	d1e9      	bne.n	405004 <__swsetup_r+0x20>
  405030:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405034:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405038:	d0e4      	beq.n	405004 <__swsetup_r+0x20>
  40503a:	4628      	mov	r0, r5
  40503c:	4621      	mov	r1, r4
  40503e:	f000 fd2f 	bl	405aa0 <__smakebuf_r>
  405042:	89a3      	ldrh	r3, [r4, #12]
  405044:	6920      	ldr	r0, [r4, #16]
  405046:	e7dd      	b.n	405004 <__swsetup_r+0x20>
  405048:	0799      	lsls	r1, r3, #30
  40504a:	bf58      	it	pl
  40504c:	6962      	ldrpl	r2, [r4, #20]
  40504e:	60a2      	str	r2, [r4, #8]
  405050:	2800      	cmp	r0, #0
  405052:	d1e0      	bne.n	405016 <__swsetup_r+0x32>
  405054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405058:	061a      	lsls	r2, r3, #24
  40505a:	d5dd      	bpl.n	405018 <__swsetup_r+0x34>
  40505c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405060:	81a3      	strh	r3, [r4, #12]
  405062:	f04f 30ff 	mov.w	r0, #4294967295
  405066:	bd38      	pop	{r3, r4, r5, pc}
  405068:	4618      	mov	r0, r3
  40506a:	f000 f927 	bl	4052bc <__sinit>
  40506e:	e7c2      	b.n	404ff6 <__swsetup_r+0x12>
  405070:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405072:	b151      	cbz	r1, 40508a <__swsetup_r+0xa6>
  405074:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405078:	4299      	cmp	r1, r3
  40507a:	d004      	beq.n	405086 <__swsetup_r+0xa2>
  40507c:	4628      	mov	r0, r5
  40507e:	f000 fa43 	bl	405508 <_free_r>
  405082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405086:	2300      	movs	r3, #0
  405088:	6323      	str	r3, [r4, #48]	; 0x30
  40508a:	2300      	movs	r3, #0
  40508c:	6920      	ldr	r0, [r4, #16]
  40508e:	6063      	str	r3, [r4, #4]
  405090:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405094:	6020      	str	r0, [r4, #0]
  405096:	e7c5      	b.n	405024 <__swsetup_r+0x40>
  405098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40509c:	2309      	movs	r3, #9
  40509e:	602b      	str	r3, [r5, #0]
  4050a0:	f04f 30ff 	mov.w	r0, #4294967295
  4050a4:	81a2      	strh	r2, [r4, #12]
  4050a6:	bd38      	pop	{r3, r4, r5, pc}
  4050a8:	20400010 	.word	0x20400010

004050ac <register_fini>:
  4050ac:	4b02      	ldr	r3, [pc, #8]	; (4050b8 <register_fini+0xc>)
  4050ae:	b113      	cbz	r3, 4050b6 <register_fini+0xa>
  4050b0:	4802      	ldr	r0, [pc, #8]	; (4050bc <register_fini+0x10>)
  4050b2:	f000 b805 	b.w	4050c0 <atexit>
  4050b6:	4770      	bx	lr
  4050b8:	00000000 	.word	0x00000000
  4050bc:	0040532d 	.word	0x0040532d

004050c0 <atexit>:
  4050c0:	2300      	movs	r3, #0
  4050c2:	4601      	mov	r1, r0
  4050c4:	461a      	mov	r2, r3
  4050c6:	4618      	mov	r0, r3
  4050c8:	f001 b90e 	b.w	4062e8 <__register_exitproc>

004050cc <__sflush_r>:
  4050cc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4050d0:	b29a      	uxth	r2, r3
  4050d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4050d6:	460d      	mov	r5, r1
  4050d8:	0711      	lsls	r1, r2, #28
  4050da:	4680      	mov	r8, r0
  4050dc:	d43a      	bmi.n	405154 <__sflush_r+0x88>
  4050de:	686a      	ldr	r2, [r5, #4]
  4050e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4050e4:	2a00      	cmp	r2, #0
  4050e6:	81ab      	strh	r3, [r5, #12]
  4050e8:	dd6f      	ble.n	4051ca <__sflush_r+0xfe>
  4050ea:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4050ec:	2c00      	cmp	r4, #0
  4050ee:	d049      	beq.n	405184 <__sflush_r+0xb8>
  4050f0:	2200      	movs	r2, #0
  4050f2:	b29b      	uxth	r3, r3
  4050f4:	f8d8 6000 	ldr.w	r6, [r8]
  4050f8:	f8c8 2000 	str.w	r2, [r8]
  4050fc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405100:	d067      	beq.n	4051d2 <__sflush_r+0x106>
  405102:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405104:	075f      	lsls	r7, r3, #29
  405106:	d505      	bpl.n	405114 <__sflush_r+0x48>
  405108:	6869      	ldr	r1, [r5, #4]
  40510a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40510c:	1a52      	subs	r2, r2, r1
  40510e:	b10b      	cbz	r3, 405114 <__sflush_r+0x48>
  405110:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405112:	1ad2      	subs	r2, r2, r3
  405114:	2300      	movs	r3, #0
  405116:	69e9      	ldr	r1, [r5, #28]
  405118:	4640      	mov	r0, r8
  40511a:	47a0      	blx	r4
  40511c:	1c44      	adds	r4, r0, #1
  40511e:	d03c      	beq.n	40519a <__sflush_r+0xce>
  405120:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405124:	692a      	ldr	r2, [r5, #16]
  405126:	602a      	str	r2, [r5, #0]
  405128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40512c:	2200      	movs	r2, #0
  40512e:	81ab      	strh	r3, [r5, #12]
  405130:	04db      	lsls	r3, r3, #19
  405132:	606a      	str	r2, [r5, #4]
  405134:	d447      	bmi.n	4051c6 <__sflush_r+0xfa>
  405136:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405138:	f8c8 6000 	str.w	r6, [r8]
  40513c:	b311      	cbz	r1, 405184 <__sflush_r+0xb8>
  40513e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405142:	4299      	cmp	r1, r3
  405144:	d002      	beq.n	40514c <__sflush_r+0x80>
  405146:	4640      	mov	r0, r8
  405148:	f000 f9de 	bl	405508 <_free_r>
  40514c:	2000      	movs	r0, #0
  40514e:	6328      	str	r0, [r5, #48]	; 0x30
  405150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405154:	692e      	ldr	r6, [r5, #16]
  405156:	b1ae      	cbz	r6, 405184 <__sflush_r+0xb8>
  405158:	682c      	ldr	r4, [r5, #0]
  40515a:	602e      	str	r6, [r5, #0]
  40515c:	0791      	lsls	r1, r2, #30
  40515e:	bf0c      	ite	eq
  405160:	696b      	ldreq	r3, [r5, #20]
  405162:	2300      	movne	r3, #0
  405164:	1ba4      	subs	r4, r4, r6
  405166:	60ab      	str	r3, [r5, #8]
  405168:	e00a      	b.n	405180 <__sflush_r+0xb4>
  40516a:	4623      	mov	r3, r4
  40516c:	4632      	mov	r2, r6
  40516e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405170:	69e9      	ldr	r1, [r5, #28]
  405172:	4640      	mov	r0, r8
  405174:	47b8      	blx	r7
  405176:	2800      	cmp	r0, #0
  405178:	eba4 0400 	sub.w	r4, r4, r0
  40517c:	4406      	add	r6, r0
  40517e:	dd04      	ble.n	40518a <__sflush_r+0xbe>
  405180:	2c00      	cmp	r4, #0
  405182:	dcf2      	bgt.n	40516a <__sflush_r+0x9e>
  405184:	2000      	movs	r0, #0
  405186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40518a:	89ab      	ldrh	r3, [r5, #12]
  40518c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405190:	81ab      	strh	r3, [r5, #12]
  405192:	f04f 30ff 	mov.w	r0, #4294967295
  405196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40519a:	f8d8 4000 	ldr.w	r4, [r8]
  40519e:	2c1d      	cmp	r4, #29
  4051a0:	d8f3      	bhi.n	40518a <__sflush_r+0xbe>
  4051a2:	4b19      	ldr	r3, [pc, #100]	; (405208 <__sflush_r+0x13c>)
  4051a4:	40e3      	lsrs	r3, r4
  4051a6:	43db      	mvns	r3, r3
  4051a8:	f013 0301 	ands.w	r3, r3, #1
  4051ac:	d1ed      	bne.n	40518a <__sflush_r+0xbe>
  4051ae:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4051b2:	606b      	str	r3, [r5, #4]
  4051b4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4051b8:	6929      	ldr	r1, [r5, #16]
  4051ba:	81ab      	strh	r3, [r5, #12]
  4051bc:	04da      	lsls	r2, r3, #19
  4051be:	6029      	str	r1, [r5, #0]
  4051c0:	d5b9      	bpl.n	405136 <__sflush_r+0x6a>
  4051c2:	2c00      	cmp	r4, #0
  4051c4:	d1b7      	bne.n	405136 <__sflush_r+0x6a>
  4051c6:	6528      	str	r0, [r5, #80]	; 0x50
  4051c8:	e7b5      	b.n	405136 <__sflush_r+0x6a>
  4051ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4051cc:	2a00      	cmp	r2, #0
  4051ce:	dc8c      	bgt.n	4050ea <__sflush_r+0x1e>
  4051d0:	e7d8      	b.n	405184 <__sflush_r+0xb8>
  4051d2:	2301      	movs	r3, #1
  4051d4:	69e9      	ldr	r1, [r5, #28]
  4051d6:	4640      	mov	r0, r8
  4051d8:	47a0      	blx	r4
  4051da:	1c43      	adds	r3, r0, #1
  4051dc:	4602      	mov	r2, r0
  4051de:	d002      	beq.n	4051e6 <__sflush_r+0x11a>
  4051e0:	89ab      	ldrh	r3, [r5, #12]
  4051e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4051e4:	e78e      	b.n	405104 <__sflush_r+0x38>
  4051e6:	f8d8 3000 	ldr.w	r3, [r8]
  4051ea:	2b00      	cmp	r3, #0
  4051ec:	d0f8      	beq.n	4051e0 <__sflush_r+0x114>
  4051ee:	2b1d      	cmp	r3, #29
  4051f0:	d001      	beq.n	4051f6 <__sflush_r+0x12a>
  4051f2:	2b16      	cmp	r3, #22
  4051f4:	d102      	bne.n	4051fc <__sflush_r+0x130>
  4051f6:	f8c8 6000 	str.w	r6, [r8]
  4051fa:	e7c3      	b.n	405184 <__sflush_r+0xb8>
  4051fc:	89ab      	ldrh	r3, [r5, #12]
  4051fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405202:	81ab      	strh	r3, [r5, #12]
  405204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405208:	20400001 	.word	0x20400001

0040520c <_fflush_r>:
  40520c:	b538      	push	{r3, r4, r5, lr}
  40520e:	460d      	mov	r5, r1
  405210:	4604      	mov	r4, r0
  405212:	b108      	cbz	r0, 405218 <_fflush_r+0xc>
  405214:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405216:	b1bb      	cbz	r3, 405248 <_fflush_r+0x3c>
  405218:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40521c:	b188      	cbz	r0, 405242 <_fflush_r+0x36>
  40521e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405220:	07db      	lsls	r3, r3, #31
  405222:	d401      	bmi.n	405228 <_fflush_r+0x1c>
  405224:	0581      	lsls	r1, r0, #22
  405226:	d517      	bpl.n	405258 <_fflush_r+0x4c>
  405228:	4620      	mov	r0, r4
  40522a:	4629      	mov	r1, r5
  40522c:	f7ff ff4e 	bl	4050cc <__sflush_r>
  405230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405232:	07da      	lsls	r2, r3, #31
  405234:	4604      	mov	r4, r0
  405236:	d402      	bmi.n	40523e <_fflush_r+0x32>
  405238:	89ab      	ldrh	r3, [r5, #12]
  40523a:	059b      	lsls	r3, r3, #22
  40523c:	d507      	bpl.n	40524e <_fflush_r+0x42>
  40523e:	4620      	mov	r0, r4
  405240:	bd38      	pop	{r3, r4, r5, pc}
  405242:	4604      	mov	r4, r0
  405244:	4620      	mov	r0, r4
  405246:	bd38      	pop	{r3, r4, r5, pc}
  405248:	f000 f838 	bl	4052bc <__sinit>
  40524c:	e7e4      	b.n	405218 <_fflush_r+0xc>
  40524e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405250:	f000 fbf6 	bl	405a40 <__retarget_lock_release_recursive>
  405254:	4620      	mov	r0, r4
  405256:	bd38      	pop	{r3, r4, r5, pc}
  405258:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40525a:	f000 fbef 	bl	405a3c <__retarget_lock_acquire_recursive>
  40525e:	e7e3      	b.n	405228 <_fflush_r+0x1c>

00405260 <_cleanup_r>:
  405260:	4901      	ldr	r1, [pc, #4]	; (405268 <_cleanup_r+0x8>)
  405262:	f000 bbaf 	b.w	4059c4 <_fwalk_reent>
  405266:	bf00      	nop
  405268:	004063d1 	.word	0x004063d1

0040526c <std.isra.0>:
  40526c:	b510      	push	{r4, lr}
  40526e:	2300      	movs	r3, #0
  405270:	4604      	mov	r4, r0
  405272:	8181      	strh	r1, [r0, #12]
  405274:	81c2      	strh	r2, [r0, #14]
  405276:	6003      	str	r3, [r0, #0]
  405278:	6043      	str	r3, [r0, #4]
  40527a:	6083      	str	r3, [r0, #8]
  40527c:	6643      	str	r3, [r0, #100]	; 0x64
  40527e:	6103      	str	r3, [r0, #16]
  405280:	6143      	str	r3, [r0, #20]
  405282:	6183      	str	r3, [r0, #24]
  405284:	4619      	mov	r1, r3
  405286:	2208      	movs	r2, #8
  405288:	305c      	adds	r0, #92	; 0x5c
  40528a:	f7fe fea5 	bl	403fd8 <memset>
  40528e:	4807      	ldr	r0, [pc, #28]	; (4052ac <std.isra.0+0x40>)
  405290:	4907      	ldr	r1, [pc, #28]	; (4052b0 <std.isra.0+0x44>)
  405292:	4a08      	ldr	r2, [pc, #32]	; (4052b4 <std.isra.0+0x48>)
  405294:	4b08      	ldr	r3, [pc, #32]	; (4052b8 <std.isra.0+0x4c>)
  405296:	6220      	str	r0, [r4, #32]
  405298:	61e4      	str	r4, [r4, #28]
  40529a:	6261      	str	r1, [r4, #36]	; 0x24
  40529c:	62a2      	str	r2, [r4, #40]	; 0x28
  40529e:	62e3      	str	r3, [r4, #44]	; 0x2c
  4052a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4052a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4052a8:	f000 bbc4 	b.w	405a34 <__retarget_lock_init_recursive>
  4052ac:	00406015 	.word	0x00406015
  4052b0:	00406039 	.word	0x00406039
  4052b4:	00406075 	.word	0x00406075
  4052b8:	00406095 	.word	0x00406095

004052bc <__sinit>:
  4052bc:	b510      	push	{r4, lr}
  4052be:	4604      	mov	r4, r0
  4052c0:	4812      	ldr	r0, [pc, #72]	; (40530c <__sinit+0x50>)
  4052c2:	f000 fbbb 	bl	405a3c <__retarget_lock_acquire_recursive>
  4052c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4052c8:	b9d2      	cbnz	r2, 405300 <__sinit+0x44>
  4052ca:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4052ce:	4810      	ldr	r0, [pc, #64]	; (405310 <__sinit+0x54>)
  4052d0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4052d4:	2103      	movs	r1, #3
  4052d6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4052da:	63e0      	str	r0, [r4, #60]	; 0x3c
  4052dc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4052e0:	6860      	ldr	r0, [r4, #4]
  4052e2:	2104      	movs	r1, #4
  4052e4:	f7ff ffc2 	bl	40526c <std.isra.0>
  4052e8:	2201      	movs	r2, #1
  4052ea:	2109      	movs	r1, #9
  4052ec:	68a0      	ldr	r0, [r4, #8]
  4052ee:	f7ff ffbd 	bl	40526c <std.isra.0>
  4052f2:	2202      	movs	r2, #2
  4052f4:	2112      	movs	r1, #18
  4052f6:	68e0      	ldr	r0, [r4, #12]
  4052f8:	f7ff ffb8 	bl	40526c <std.isra.0>
  4052fc:	2301      	movs	r3, #1
  4052fe:	63a3      	str	r3, [r4, #56]	; 0x38
  405300:	4802      	ldr	r0, [pc, #8]	; (40530c <__sinit+0x50>)
  405302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405306:	f000 bb9b 	b.w	405a40 <__retarget_lock_release_recursive>
  40530a:	bf00      	nop
  40530c:	20401214 	.word	0x20401214
  405310:	00405261 	.word	0x00405261

00405314 <__sfp_lock_acquire>:
  405314:	4801      	ldr	r0, [pc, #4]	; (40531c <__sfp_lock_acquire+0x8>)
  405316:	f000 bb91 	b.w	405a3c <__retarget_lock_acquire_recursive>
  40531a:	bf00      	nop
  40531c:	20401228 	.word	0x20401228

00405320 <__sfp_lock_release>:
  405320:	4801      	ldr	r0, [pc, #4]	; (405328 <__sfp_lock_release+0x8>)
  405322:	f000 bb8d 	b.w	405a40 <__retarget_lock_release_recursive>
  405326:	bf00      	nop
  405328:	20401228 	.word	0x20401228

0040532c <__libc_fini_array>:
  40532c:	b538      	push	{r3, r4, r5, lr}
  40532e:	4c0a      	ldr	r4, [pc, #40]	; (405358 <__libc_fini_array+0x2c>)
  405330:	4d0a      	ldr	r5, [pc, #40]	; (40535c <__libc_fini_array+0x30>)
  405332:	1b64      	subs	r4, r4, r5
  405334:	10a4      	asrs	r4, r4, #2
  405336:	d00a      	beq.n	40534e <__libc_fini_array+0x22>
  405338:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40533c:	3b01      	subs	r3, #1
  40533e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405342:	3c01      	subs	r4, #1
  405344:	f855 3904 	ldr.w	r3, [r5], #-4
  405348:	4798      	blx	r3
  40534a:	2c00      	cmp	r4, #0
  40534c:	d1f9      	bne.n	405342 <__libc_fini_array+0x16>
  40534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405352:	f001 bb97 	b.w	406a84 <_fini>
  405356:	bf00      	nop
  405358:	00406a94 	.word	0x00406a94
  40535c:	00406a90 	.word	0x00406a90

00405360 <__fputwc>:
  405360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405364:	b082      	sub	sp, #8
  405366:	4680      	mov	r8, r0
  405368:	4689      	mov	r9, r1
  40536a:	4614      	mov	r4, r2
  40536c:	f000 fb54 	bl	405a18 <__locale_mb_cur_max>
  405370:	2801      	cmp	r0, #1
  405372:	d036      	beq.n	4053e2 <__fputwc+0x82>
  405374:	464a      	mov	r2, r9
  405376:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40537a:	a901      	add	r1, sp, #4
  40537c:	4640      	mov	r0, r8
  40537e:	f000 ff65 	bl	40624c <_wcrtomb_r>
  405382:	1c42      	adds	r2, r0, #1
  405384:	4606      	mov	r6, r0
  405386:	d025      	beq.n	4053d4 <__fputwc+0x74>
  405388:	b3a8      	cbz	r0, 4053f6 <__fputwc+0x96>
  40538a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40538e:	2500      	movs	r5, #0
  405390:	f10d 0a04 	add.w	sl, sp, #4
  405394:	e009      	b.n	4053aa <__fputwc+0x4a>
  405396:	6823      	ldr	r3, [r4, #0]
  405398:	1c5a      	adds	r2, r3, #1
  40539a:	6022      	str	r2, [r4, #0]
  40539c:	f883 e000 	strb.w	lr, [r3]
  4053a0:	3501      	adds	r5, #1
  4053a2:	42b5      	cmp	r5, r6
  4053a4:	d227      	bcs.n	4053f6 <__fputwc+0x96>
  4053a6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4053aa:	68a3      	ldr	r3, [r4, #8]
  4053ac:	3b01      	subs	r3, #1
  4053ae:	2b00      	cmp	r3, #0
  4053b0:	60a3      	str	r3, [r4, #8]
  4053b2:	daf0      	bge.n	405396 <__fputwc+0x36>
  4053b4:	69a7      	ldr	r7, [r4, #24]
  4053b6:	42bb      	cmp	r3, r7
  4053b8:	4671      	mov	r1, lr
  4053ba:	4622      	mov	r2, r4
  4053bc:	4640      	mov	r0, r8
  4053be:	db02      	blt.n	4053c6 <__fputwc+0x66>
  4053c0:	f1be 0f0a 	cmp.w	lr, #10
  4053c4:	d1e7      	bne.n	405396 <__fputwc+0x36>
  4053c6:	f000 fee9 	bl	40619c <__swbuf_r>
  4053ca:	1c43      	adds	r3, r0, #1
  4053cc:	d1e8      	bne.n	4053a0 <__fputwc+0x40>
  4053ce:	b002      	add	sp, #8
  4053d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053d4:	89a3      	ldrh	r3, [r4, #12]
  4053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053da:	81a3      	strh	r3, [r4, #12]
  4053dc:	b002      	add	sp, #8
  4053de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053e2:	f109 33ff 	add.w	r3, r9, #4294967295
  4053e6:	2bfe      	cmp	r3, #254	; 0xfe
  4053e8:	d8c4      	bhi.n	405374 <__fputwc+0x14>
  4053ea:	fa5f fe89 	uxtb.w	lr, r9
  4053ee:	4606      	mov	r6, r0
  4053f0:	f88d e004 	strb.w	lr, [sp, #4]
  4053f4:	e7cb      	b.n	40538e <__fputwc+0x2e>
  4053f6:	4648      	mov	r0, r9
  4053f8:	b002      	add	sp, #8
  4053fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4053fe:	bf00      	nop

00405400 <_fputwc_r>:
  405400:	b530      	push	{r4, r5, lr}
  405402:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405404:	f013 0f01 	tst.w	r3, #1
  405408:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40540c:	4614      	mov	r4, r2
  40540e:	b083      	sub	sp, #12
  405410:	4605      	mov	r5, r0
  405412:	b29a      	uxth	r2, r3
  405414:	d101      	bne.n	40541a <_fputwc_r+0x1a>
  405416:	0590      	lsls	r0, r2, #22
  405418:	d51c      	bpl.n	405454 <_fputwc_r+0x54>
  40541a:	0490      	lsls	r0, r2, #18
  40541c:	d406      	bmi.n	40542c <_fputwc_r+0x2c>
  40541e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405428:	81a3      	strh	r3, [r4, #12]
  40542a:	6662      	str	r2, [r4, #100]	; 0x64
  40542c:	4628      	mov	r0, r5
  40542e:	4622      	mov	r2, r4
  405430:	f7ff ff96 	bl	405360 <__fputwc>
  405434:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405436:	07da      	lsls	r2, r3, #31
  405438:	4605      	mov	r5, r0
  40543a:	d402      	bmi.n	405442 <_fputwc_r+0x42>
  40543c:	89a3      	ldrh	r3, [r4, #12]
  40543e:	059b      	lsls	r3, r3, #22
  405440:	d502      	bpl.n	405448 <_fputwc_r+0x48>
  405442:	4628      	mov	r0, r5
  405444:	b003      	add	sp, #12
  405446:	bd30      	pop	{r4, r5, pc}
  405448:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40544a:	f000 faf9 	bl	405a40 <__retarget_lock_release_recursive>
  40544e:	4628      	mov	r0, r5
  405450:	b003      	add	sp, #12
  405452:	bd30      	pop	{r4, r5, pc}
  405454:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405456:	9101      	str	r1, [sp, #4]
  405458:	f000 faf0 	bl	405a3c <__retarget_lock_acquire_recursive>
  40545c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405460:	9901      	ldr	r1, [sp, #4]
  405462:	b29a      	uxth	r2, r3
  405464:	e7d9      	b.n	40541a <_fputwc_r+0x1a>
  405466:	bf00      	nop

00405468 <_malloc_trim_r>:
  405468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40546a:	4f24      	ldr	r7, [pc, #144]	; (4054fc <_malloc_trim_r+0x94>)
  40546c:	460c      	mov	r4, r1
  40546e:	4606      	mov	r6, r0
  405470:	f7fe fe00 	bl	404074 <__malloc_lock>
  405474:	68bb      	ldr	r3, [r7, #8]
  405476:	685d      	ldr	r5, [r3, #4]
  405478:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40547c:	310f      	adds	r1, #15
  40547e:	f025 0503 	bic.w	r5, r5, #3
  405482:	4429      	add	r1, r5
  405484:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405488:	f021 010f 	bic.w	r1, r1, #15
  40548c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405490:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405494:	db07      	blt.n	4054a6 <_malloc_trim_r+0x3e>
  405496:	2100      	movs	r1, #0
  405498:	4630      	mov	r0, r6
  40549a:	f7fe fdf7 	bl	40408c <_sbrk_r>
  40549e:	68bb      	ldr	r3, [r7, #8]
  4054a0:	442b      	add	r3, r5
  4054a2:	4298      	cmp	r0, r3
  4054a4:	d004      	beq.n	4054b0 <_malloc_trim_r+0x48>
  4054a6:	4630      	mov	r0, r6
  4054a8:	f7fe fdea 	bl	404080 <__malloc_unlock>
  4054ac:	2000      	movs	r0, #0
  4054ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054b0:	4261      	negs	r1, r4
  4054b2:	4630      	mov	r0, r6
  4054b4:	f7fe fdea 	bl	40408c <_sbrk_r>
  4054b8:	3001      	adds	r0, #1
  4054ba:	d00d      	beq.n	4054d8 <_malloc_trim_r+0x70>
  4054bc:	4b10      	ldr	r3, [pc, #64]	; (405500 <_malloc_trim_r+0x98>)
  4054be:	68ba      	ldr	r2, [r7, #8]
  4054c0:	6819      	ldr	r1, [r3, #0]
  4054c2:	1b2d      	subs	r5, r5, r4
  4054c4:	f045 0501 	orr.w	r5, r5, #1
  4054c8:	4630      	mov	r0, r6
  4054ca:	1b09      	subs	r1, r1, r4
  4054cc:	6055      	str	r5, [r2, #4]
  4054ce:	6019      	str	r1, [r3, #0]
  4054d0:	f7fe fdd6 	bl	404080 <__malloc_unlock>
  4054d4:	2001      	movs	r0, #1
  4054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054d8:	2100      	movs	r1, #0
  4054da:	4630      	mov	r0, r6
  4054dc:	f7fe fdd6 	bl	40408c <_sbrk_r>
  4054e0:	68ba      	ldr	r2, [r7, #8]
  4054e2:	1a83      	subs	r3, r0, r2
  4054e4:	2b0f      	cmp	r3, #15
  4054e6:	ddde      	ble.n	4054a6 <_malloc_trim_r+0x3e>
  4054e8:	4c06      	ldr	r4, [pc, #24]	; (405504 <_malloc_trim_r+0x9c>)
  4054ea:	4905      	ldr	r1, [pc, #20]	; (405500 <_malloc_trim_r+0x98>)
  4054ec:	6824      	ldr	r4, [r4, #0]
  4054ee:	f043 0301 	orr.w	r3, r3, #1
  4054f2:	1b00      	subs	r0, r0, r4
  4054f4:	6053      	str	r3, [r2, #4]
  4054f6:	6008      	str	r0, [r1, #0]
  4054f8:	e7d5      	b.n	4054a6 <_malloc_trim_r+0x3e>
  4054fa:	bf00      	nop
  4054fc:	20400440 	.word	0x20400440
  405500:	204010e8 	.word	0x204010e8
  405504:	20400848 	.word	0x20400848

00405508 <_free_r>:
  405508:	2900      	cmp	r1, #0
  40550a:	d044      	beq.n	405596 <_free_r+0x8e>
  40550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405510:	460d      	mov	r5, r1
  405512:	4680      	mov	r8, r0
  405514:	f7fe fdae 	bl	404074 <__malloc_lock>
  405518:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40551c:	4969      	ldr	r1, [pc, #420]	; (4056c4 <_free_r+0x1bc>)
  40551e:	f027 0301 	bic.w	r3, r7, #1
  405522:	f1a5 0408 	sub.w	r4, r5, #8
  405526:	18e2      	adds	r2, r4, r3
  405528:	688e      	ldr	r6, [r1, #8]
  40552a:	6850      	ldr	r0, [r2, #4]
  40552c:	42b2      	cmp	r2, r6
  40552e:	f020 0003 	bic.w	r0, r0, #3
  405532:	d05e      	beq.n	4055f2 <_free_r+0xea>
  405534:	07fe      	lsls	r6, r7, #31
  405536:	6050      	str	r0, [r2, #4]
  405538:	d40b      	bmi.n	405552 <_free_r+0x4a>
  40553a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40553e:	1be4      	subs	r4, r4, r7
  405540:	f101 0e08 	add.w	lr, r1, #8
  405544:	68a5      	ldr	r5, [r4, #8]
  405546:	4575      	cmp	r5, lr
  405548:	443b      	add	r3, r7
  40554a:	d06d      	beq.n	405628 <_free_r+0x120>
  40554c:	68e7      	ldr	r7, [r4, #12]
  40554e:	60ef      	str	r7, [r5, #12]
  405550:	60bd      	str	r5, [r7, #8]
  405552:	1815      	adds	r5, r2, r0
  405554:	686d      	ldr	r5, [r5, #4]
  405556:	07ed      	lsls	r5, r5, #31
  405558:	d53e      	bpl.n	4055d8 <_free_r+0xd0>
  40555a:	f043 0201 	orr.w	r2, r3, #1
  40555e:	6062      	str	r2, [r4, #4]
  405560:	50e3      	str	r3, [r4, r3]
  405562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405566:	d217      	bcs.n	405598 <_free_r+0x90>
  405568:	08db      	lsrs	r3, r3, #3
  40556a:	1c58      	adds	r0, r3, #1
  40556c:	109a      	asrs	r2, r3, #2
  40556e:	684d      	ldr	r5, [r1, #4]
  405570:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405574:	60a7      	str	r7, [r4, #8]
  405576:	2301      	movs	r3, #1
  405578:	4093      	lsls	r3, r2
  40557a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40557e:	432b      	orrs	r3, r5
  405580:	3a08      	subs	r2, #8
  405582:	60e2      	str	r2, [r4, #12]
  405584:	604b      	str	r3, [r1, #4]
  405586:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40558a:	60fc      	str	r4, [r7, #12]
  40558c:	4640      	mov	r0, r8
  40558e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405592:	f7fe bd75 	b.w	404080 <__malloc_unlock>
  405596:	4770      	bx	lr
  405598:	0a5a      	lsrs	r2, r3, #9
  40559a:	2a04      	cmp	r2, #4
  40559c:	d852      	bhi.n	405644 <_free_r+0x13c>
  40559e:	099a      	lsrs	r2, r3, #6
  4055a0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4055a4:	00ff      	lsls	r7, r7, #3
  4055a6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4055aa:	19c8      	adds	r0, r1, r7
  4055ac:	59ca      	ldr	r2, [r1, r7]
  4055ae:	3808      	subs	r0, #8
  4055b0:	4290      	cmp	r0, r2
  4055b2:	d04f      	beq.n	405654 <_free_r+0x14c>
  4055b4:	6851      	ldr	r1, [r2, #4]
  4055b6:	f021 0103 	bic.w	r1, r1, #3
  4055ba:	428b      	cmp	r3, r1
  4055bc:	d232      	bcs.n	405624 <_free_r+0x11c>
  4055be:	6892      	ldr	r2, [r2, #8]
  4055c0:	4290      	cmp	r0, r2
  4055c2:	d1f7      	bne.n	4055b4 <_free_r+0xac>
  4055c4:	68c3      	ldr	r3, [r0, #12]
  4055c6:	60a0      	str	r0, [r4, #8]
  4055c8:	60e3      	str	r3, [r4, #12]
  4055ca:	609c      	str	r4, [r3, #8]
  4055cc:	60c4      	str	r4, [r0, #12]
  4055ce:	4640      	mov	r0, r8
  4055d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055d4:	f7fe bd54 	b.w	404080 <__malloc_unlock>
  4055d8:	6895      	ldr	r5, [r2, #8]
  4055da:	4f3b      	ldr	r7, [pc, #236]	; (4056c8 <_free_r+0x1c0>)
  4055dc:	42bd      	cmp	r5, r7
  4055de:	4403      	add	r3, r0
  4055e0:	d040      	beq.n	405664 <_free_r+0x15c>
  4055e2:	68d0      	ldr	r0, [r2, #12]
  4055e4:	60e8      	str	r0, [r5, #12]
  4055e6:	f043 0201 	orr.w	r2, r3, #1
  4055ea:	6085      	str	r5, [r0, #8]
  4055ec:	6062      	str	r2, [r4, #4]
  4055ee:	50e3      	str	r3, [r4, r3]
  4055f0:	e7b7      	b.n	405562 <_free_r+0x5a>
  4055f2:	07ff      	lsls	r7, r7, #31
  4055f4:	4403      	add	r3, r0
  4055f6:	d407      	bmi.n	405608 <_free_r+0x100>
  4055f8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4055fc:	1aa4      	subs	r4, r4, r2
  4055fe:	4413      	add	r3, r2
  405600:	68a0      	ldr	r0, [r4, #8]
  405602:	68e2      	ldr	r2, [r4, #12]
  405604:	60c2      	str	r2, [r0, #12]
  405606:	6090      	str	r0, [r2, #8]
  405608:	4a30      	ldr	r2, [pc, #192]	; (4056cc <_free_r+0x1c4>)
  40560a:	6812      	ldr	r2, [r2, #0]
  40560c:	f043 0001 	orr.w	r0, r3, #1
  405610:	4293      	cmp	r3, r2
  405612:	6060      	str	r0, [r4, #4]
  405614:	608c      	str	r4, [r1, #8]
  405616:	d3b9      	bcc.n	40558c <_free_r+0x84>
  405618:	4b2d      	ldr	r3, [pc, #180]	; (4056d0 <_free_r+0x1c8>)
  40561a:	4640      	mov	r0, r8
  40561c:	6819      	ldr	r1, [r3, #0]
  40561e:	f7ff ff23 	bl	405468 <_malloc_trim_r>
  405622:	e7b3      	b.n	40558c <_free_r+0x84>
  405624:	4610      	mov	r0, r2
  405626:	e7cd      	b.n	4055c4 <_free_r+0xbc>
  405628:	1811      	adds	r1, r2, r0
  40562a:	6849      	ldr	r1, [r1, #4]
  40562c:	07c9      	lsls	r1, r1, #31
  40562e:	d444      	bmi.n	4056ba <_free_r+0x1b2>
  405630:	6891      	ldr	r1, [r2, #8]
  405632:	68d2      	ldr	r2, [r2, #12]
  405634:	60ca      	str	r2, [r1, #12]
  405636:	4403      	add	r3, r0
  405638:	f043 0001 	orr.w	r0, r3, #1
  40563c:	6091      	str	r1, [r2, #8]
  40563e:	6060      	str	r0, [r4, #4]
  405640:	50e3      	str	r3, [r4, r3]
  405642:	e7a3      	b.n	40558c <_free_r+0x84>
  405644:	2a14      	cmp	r2, #20
  405646:	d816      	bhi.n	405676 <_free_r+0x16e>
  405648:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40564c:	00ff      	lsls	r7, r7, #3
  40564e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405652:	e7aa      	b.n	4055aa <_free_r+0xa2>
  405654:	10aa      	asrs	r2, r5, #2
  405656:	2301      	movs	r3, #1
  405658:	684d      	ldr	r5, [r1, #4]
  40565a:	4093      	lsls	r3, r2
  40565c:	432b      	orrs	r3, r5
  40565e:	604b      	str	r3, [r1, #4]
  405660:	4603      	mov	r3, r0
  405662:	e7b0      	b.n	4055c6 <_free_r+0xbe>
  405664:	f043 0201 	orr.w	r2, r3, #1
  405668:	614c      	str	r4, [r1, #20]
  40566a:	610c      	str	r4, [r1, #16]
  40566c:	60e5      	str	r5, [r4, #12]
  40566e:	60a5      	str	r5, [r4, #8]
  405670:	6062      	str	r2, [r4, #4]
  405672:	50e3      	str	r3, [r4, r3]
  405674:	e78a      	b.n	40558c <_free_r+0x84>
  405676:	2a54      	cmp	r2, #84	; 0x54
  405678:	d806      	bhi.n	405688 <_free_r+0x180>
  40567a:	0b1a      	lsrs	r2, r3, #12
  40567c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405680:	00ff      	lsls	r7, r7, #3
  405682:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405686:	e790      	b.n	4055aa <_free_r+0xa2>
  405688:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40568c:	d806      	bhi.n	40569c <_free_r+0x194>
  40568e:	0bda      	lsrs	r2, r3, #15
  405690:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405694:	00ff      	lsls	r7, r7, #3
  405696:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40569a:	e786      	b.n	4055aa <_free_r+0xa2>
  40569c:	f240 5054 	movw	r0, #1364	; 0x554
  4056a0:	4282      	cmp	r2, r0
  4056a2:	d806      	bhi.n	4056b2 <_free_r+0x1aa>
  4056a4:	0c9a      	lsrs	r2, r3, #18
  4056a6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4056aa:	00ff      	lsls	r7, r7, #3
  4056ac:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4056b0:	e77b      	b.n	4055aa <_free_r+0xa2>
  4056b2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4056b6:	257e      	movs	r5, #126	; 0x7e
  4056b8:	e777      	b.n	4055aa <_free_r+0xa2>
  4056ba:	f043 0101 	orr.w	r1, r3, #1
  4056be:	6061      	str	r1, [r4, #4]
  4056c0:	6013      	str	r3, [r2, #0]
  4056c2:	e763      	b.n	40558c <_free_r+0x84>
  4056c4:	20400440 	.word	0x20400440
  4056c8:	20400448 	.word	0x20400448
  4056cc:	2040084c 	.word	0x2040084c
  4056d0:	20401118 	.word	0x20401118

004056d4 <__sfvwrite_r>:
  4056d4:	6893      	ldr	r3, [r2, #8]
  4056d6:	2b00      	cmp	r3, #0
  4056d8:	d073      	beq.n	4057c2 <__sfvwrite_r+0xee>
  4056da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056de:	898b      	ldrh	r3, [r1, #12]
  4056e0:	b083      	sub	sp, #12
  4056e2:	460c      	mov	r4, r1
  4056e4:	0719      	lsls	r1, r3, #28
  4056e6:	9000      	str	r0, [sp, #0]
  4056e8:	4616      	mov	r6, r2
  4056ea:	d526      	bpl.n	40573a <__sfvwrite_r+0x66>
  4056ec:	6922      	ldr	r2, [r4, #16]
  4056ee:	b322      	cbz	r2, 40573a <__sfvwrite_r+0x66>
  4056f0:	f013 0002 	ands.w	r0, r3, #2
  4056f4:	6835      	ldr	r5, [r6, #0]
  4056f6:	d02c      	beq.n	405752 <__sfvwrite_r+0x7e>
  4056f8:	f04f 0900 	mov.w	r9, #0
  4056fc:	4fb0      	ldr	r7, [pc, #704]	; (4059c0 <__sfvwrite_r+0x2ec>)
  4056fe:	46c8      	mov	r8, r9
  405700:	46b2      	mov	sl, r6
  405702:	45b8      	cmp	r8, r7
  405704:	4643      	mov	r3, r8
  405706:	464a      	mov	r2, r9
  405708:	bf28      	it	cs
  40570a:	463b      	movcs	r3, r7
  40570c:	9800      	ldr	r0, [sp, #0]
  40570e:	f1b8 0f00 	cmp.w	r8, #0
  405712:	d050      	beq.n	4057b6 <__sfvwrite_r+0xe2>
  405714:	69e1      	ldr	r1, [r4, #28]
  405716:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405718:	47b0      	blx	r6
  40571a:	2800      	cmp	r0, #0
  40571c:	dd58      	ble.n	4057d0 <__sfvwrite_r+0xfc>
  40571e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405722:	1a1b      	subs	r3, r3, r0
  405724:	4481      	add	r9, r0
  405726:	eba8 0800 	sub.w	r8, r8, r0
  40572a:	f8ca 3008 	str.w	r3, [sl, #8]
  40572e:	2b00      	cmp	r3, #0
  405730:	d1e7      	bne.n	405702 <__sfvwrite_r+0x2e>
  405732:	2000      	movs	r0, #0
  405734:	b003      	add	sp, #12
  405736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40573a:	4621      	mov	r1, r4
  40573c:	9800      	ldr	r0, [sp, #0]
  40573e:	f7ff fc51 	bl	404fe4 <__swsetup_r>
  405742:	2800      	cmp	r0, #0
  405744:	f040 8133 	bne.w	4059ae <__sfvwrite_r+0x2da>
  405748:	89a3      	ldrh	r3, [r4, #12]
  40574a:	6835      	ldr	r5, [r6, #0]
  40574c:	f013 0002 	ands.w	r0, r3, #2
  405750:	d1d2      	bne.n	4056f8 <__sfvwrite_r+0x24>
  405752:	f013 0901 	ands.w	r9, r3, #1
  405756:	d145      	bne.n	4057e4 <__sfvwrite_r+0x110>
  405758:	464f      	mov	r7, r9
  40575a:	9601      	str	r6, [sp, #4]
  40575c:	b337      	cbz	r7, 4057ac <__sfvwrite_r+0xd8>
  40575e:	059a      	lsls	r2, r3, #22
  405760:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405764:	f140 8083 	bpl.w	40586e <__sfvwrite_r+0x19a>
  405768:	4547      	cmp	r7, r8
  40576a:	46c3      	mov	fp, r8
  40576c:	f0c0 80ab 	bcc.w	4058c6 <__sfvwrite_r+0x1f2>
  405770:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405774:	f040 80ac 	bne.w	4058d0 <__sfvwrite_r+0x1fc>
  405778:	6820      	ldr	r0, [r4, #0]
  40577a:	46ba      	mov	sl, r7
  40577c:	465a      	mov	r2, fp
  40577e:	4649      	mov	r1, r9
  405780:	f000 fa3e 	bl	405c00 <memmove>
  405784:	68a2      	ldr	r2, [r4, #8]
  405786:	6823      	ldr	r3, [r4, #0]
  405788:	eba2 0208 	sub.w	r2, r2, r8
  40578c:	445b      	add	r3, fp
  40578e:	60a2      	str	r2, [r4, #8]
  405790:	6023      	str	r3, [r4, #0]
  405792:	9a01      	ldr	r2, [sp, #4]
  405794:	6893      	ldr	r3, [r2, #8]
  405796:	eba3 030a 	sub.w	r3, r3, sl
  40579a:	44d1      	add	r9, sl
  40579c:	eba7 070a 	sub.w	r7, r7, sl
  4057a0:	6093      	str	r3, [r2, #8]
  4057a2:	2b00      	cmp	r3, #0
  4057a4:	d0c5      	beq.n	405732 <__sfvwrite_r+0x5e>
  4057a6:	89a3      	ldrh	r3, [r4, #12]
  4057a8:	2f00      	cmp	r7, #0
  4057aa:	d1d8      	bne.n	40575e <__sfvwrite_r+0x8a>
  4057ac:	f8d5 9000 	ldr.w	r9, [r5]
  4057b0:	686f      	ldr	r7, [r5, #4]
  4057b2:	3508      	adds	r5, #8
  4057b4:	e7d2      	b.n	40575c <__sfvwrite_r+0x88>
  4057b6:	f8d5 9000 	ldr.w	r9, [r5]
  4057ba:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4057be:	3508      	adds	r5, #8
  4057c0:	e79f      	b.n	405702 <__sfvwrite_r+0x2e>
  4057c2:	2000      	movs	r0, #0
  4057c4:	4770      	bx	lr
  4057c6:	4621      	mov	r1, r4
  4057c8:	9800      	ldr	r0, [sp, #0]
  4057ca:	f7ff fd1f 	bl	40520c <_fflush_r>
  4057ce:	b370      	cbz	r0, 40582e <__sfvwrite_r+0x15a>
  4057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4057d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057d8:	f04f 30ff 	mov.w	r0, #4294967295
  4057dc:	81a3      	strh	r3, [r4, #12]
  4057de:	b003      	add	sp, #12
  4057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057e4:	4681      	mov	r9, r0
  4057e6:	4633      	mov	r3, r6
  4057e8:	464e      	mov	r6, r9
  4057ea:	46a8      	mov	r8, r5
  4057ec:	469a      	mov	sl, r3
  4057ee:	464d      	mov	r5, r9
  4057f0:	b34e      	cbz	r6, 405846 <__sfvwrite_r+0x172>
  4057f2:	b380      	cbz	r0, 405856 <__sfvwrite_r+0x182>
  4057f4:	6820      	ldr	r0, [r4, #0]
  4057f6:	6923      	ldr	r3, [r4, #16]
  4057f8:	6962      	ldr	r2, [r4, #20]
  4057fa:	45b1      	cmp	r9, r6
  4057fc:	46cb      	mov	fp, r9
  4057fe:	bf28      	it	cs
  405800:	46b3      	movcs	fp, r6
  405802:	4298      	cmp	r0, r3
  405804:	465f      	mov	r7, fp
  405806:	d904      	bls.n	405812 <__sfvwrite_r+0x13e>
  405808:	68a3      	ldr	r3, [r4, #8]
  40580a:	4413      	add	r3, r2
  40580c:	459b      	cmp	fp, r3
  40580e:	f300 80a6 	bgt.w	40595e <__sfvwrite_r+0x28a>
  405812:	4593      	cmp	fp, r2
  405814:	db4b      	blt.n	4058ae <__sfvwrite_r+0x1da>
  405816:	4613      	mov	r3, r2
  405818:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40581a:	69e1      	ldr	r1, [r4, #28]
  40581c:	9800      	ldr	r0, [sp, #0]
  40581e:	462a      	mov	r2, r5
  405820:	47b8      	blx	r7
  405822:	1e07      	subs	r7, r0, #0
  405824:	ddd4      	ble.n	4057d0 <__sfvwrite_r+0xfc>
  405826:	ebb9 0907 	subs.w	r9, r9, r7
  40582a:	d0cc      	beq.n	4057c6 <__sfvwrite_r+0xf2>
  40582c:	2001      	movs	r0, #1
  40582e:	f8da 3008 	ldr.w	r3, [sl, #8]
  405832:	1bdb      	subs	r3, r3, r7
  405834:	443d      	add	r5, r7
  405836:	1bf6      	subs	r6, r6, r7
  405838:	f8ca 3008 	str.w	r3, [sl, #8]
  40583c:	2b00      	cmp	r3, #0
  40583e:	f43f af78 	beq.w	405732 <__sfvwrite_r+0x5e>
  405842:	2e00      	cmp	r6, #0
  405844:	d1d5      	bne.n	4057f2 <__sfvwrite_r+0x11e>
  405846:	f108 0308 	add.w	r3, r8, #8
  40584a:	e913 0060 	ldmdb	r3, {r5, r6}
  40584e:	4698      	mov	r8, r3
  405850:	3308      	adds	r3, #8
  405852:	2e00      	cmp	r6, #0
  405854:	d0f9      	beq.n	40584a <__sfvwrite_r+0x176>
  405856:	4632      	mov	r2, r6
  405858:	210a      	movs	r1, #10
  40585a:	4628      	mov	r0, r5
  40585c:	f000 f980 	bl	405b60 <memchr>
  405860:	2800      	cmp	r0, #0
  405862:	f000 80a1 	beq.w	4059a8 <__sfvwrite_r+0x2d4>
  405866:	3001      	adds	r0, #1
  405868:	eba0 0905 	sub.w	r9, r0, r5
  40586c:	e7c2      	b.n	4057f4 <__sfvwrite_r+0x120>
  40586e:	6820      	ldr	r0, [r4, #0]
  405870:	6923      	ldr	r3, [r4, #16]
  405872:	4298      	cmp	r0, r3
  405874:	d802      	bhi.n	40587c <__sfvwrite_r+0x1a8>
  405876:	6963      	ldr	r3, [r4, #20]
  405878:	429f      	cmp	r7, r3
  40587a:	d25d      	bcs.n	405938 <__sfvwrite_r+0x264>
  40587c:	45b8      	cmp	r8, r7
  40587e:	bf28      	it	cs
  405880:	46b8      	movcs	r8, r7
  405882:	4642      	mov	r2, r8
  405884:	4649      	mov	r1, r9
  405886:	f000 f9bb 	bl	405c00 <memmove>
  40588a:	68a3      	ldr	r3, [r4, #8]
  40588c:	6822      	ldr	r2, [r4, #0]
  40588e:	eba3 0308 	sub.w	r3, r3, r8
  405892:	4442      	add	r2, r8
  405894:	60a3      	str	r3, [r4, #8]
  405896:	6022      	str	r2, [r4, #0]
  405898:	b10b      	cbz	r3, 40589e <__sfvwrite_r+0x1ca>
  40589a:	46c2      	mov	sl, r8
  40589c:	e779      	b.n	405792 <__sfvwrite_r+0xbe>
  40589e:	4621      	mov	r1, r4
  4058a0:	9800      	ldr	r0, [sp, #0]
  4058a2:	f7ff fcb3 	bl	40520c <_fflush_r>
  4058a6:	2800      	cmp	r0, #0
  4058a8:	d192      	bne.n	4057d0 <__sfvwrite_r+0xfc>
  4058aa:	46c2      	mov	sl, r8
  4058ac:	e771      	b.n	405792 <__sfvwrite_r+0xbe>
  4058ae:	465a      	mov	r2, fp
  4058b0:	4629      	mov	r1, r5
  4058b2:	f000 f9a5 	bl	405c00 <memmove>
  4058b6:	68a2      	ldr	r2, [r4, #8]
  4058b8:	6823      	ldr	r3, [r4, #0]
  4058ba:	eba2 020b 	sub.w	r2, r2, fp
  4058be:	445b      	add	r3, fp
  4058c0:	60a2      	str	r2, [r4, #8]
  4058c2:	6023      	str	r3, [r4, #0]
  4058c4:	e7af      	b.n	405826 <__sfvwrite_r+0x152>
  4058c6:	6820      	ldr	r0, [r4, #0]
  4058c8:	46b8      	mov	r8, r7
  4058ca:	46ba      	mov	sl, r7
  4058cc:	46bb      	mov	fp, r7
  4058ce:	e755      	b.n	40577c <__sfvwrite_r+0xa8>
  4058d0:	6962      	ldr	r2, [r4, #20]
  4058d2:	6820      	ldr	r0, [r4, #0]
  4058d4:	6921      	ldr	r1, [r4, #16]
  4058d6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4058da:	eba0 0a01 	sub.w	sl, r0, r1
  4058de:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4058e2:	f10a 0001 	add.w	r0, sl, #1
  4058e6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4058ea:	4438      	add	r0, r7
  4058ec:	4540      	cmp	r0, r8
  4058ee:	4642      	mov	r2, r8
  4058f0:	bf84      	itt	hi
  4058f2:	4680      	movhi	r8, r0
  4058f4:	4642      	movhi	r2, r8
  4058f6:	055b      	lsls	r3, r3, #21
  4058f8:	d544      	bpl.n	405984 <__sfvwrite_r+0x2b0>
  4058fa:	4611      	mov	r1, r2
  4058fc:	9800      	ldr	r0, [sp, #0]
  4058fe:	f7fe f821 	bl	403944 <_malloc_r>
  405902:	4683      	mov	fp, r0
  405904:	2800      	cmp	r0, #0
  405906:	d055      	beq.n	4059b4 <__sfvwrite_r+0x2e0>
  405908:	4652      	mov	r2, sl
  40590a:	6921      	ldr	r1, [r4, #16]
  40590c:	f7fe faca 	bl	403ea4 <memcpy>
  405910:	89a3      	ldrh	r3, [r4, #12]
  405912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40591a:	81a3      	strh	r3, [r4, #12]
  40591c:	eb0b 000a 	add.w	r0, fp, sl
  405920:	eba8 030a 	sub.w	r3, r8, sl
  405924:	f8c4 b010 	str.w	fp, [r4, #16]
  405928:	f8c4 8014 	str.w	r8, [r4, #20]
  40592c:	6020      	str	r0, [r4, #0]
  40592e:	60a3      	str	r3, [r4, #8]
  405930:	46b8      	mov	r8, r7
  405932:	46ba      	mov	sl, r7
  405934:	46bb      	mov	fp, r7
  405936:	e721      	b.n	40577c <__sfvwrite_r+0xa8>
  405938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40593c:	42b9      	cmp	r1, r7
  40593e:	bf28      	it	cs
  405940:	4639      	movcs	r1, r7
  405942:	464a      	mov	r2, r9
  405944:	fb91 f1f3 	sdiv	r1, r1, r3
  405948:	9800      	ldr	r0, [sp, #0]
  40594a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40594c:	fb03 f301 	mul.w	r3, r3, r1
  405950:	69e1      	ldr	r1, [r4, #28]
  405952:	47b0      	blx	r6
  405954:	f1b0 0a00 	subs.w	sl, r0, #0
  405958:	f73f af1b 	bgt.w	405792 <__sfvwrite_r+0xbe>
  40595c:	e738      	b.n	4057d0 <__sfvwrite_r+0xfc>
  40595e:	461a      	mov	r2, r3
  405960:	4629      	mov	r1, r5
  405962:	9301      	str	r3, [sp, #4]
  405964:	f000 f94c 	bl	405c00 <memmove>
  405968:	6822      	ldr	r2, [r4, #0]
  40596a:	9b01      	ldr	r3, [sp, #4]
  40596c:	9800      	ldr	r0, [sp, #0]
  40596e:	441a      	add	r2, r3
  405970:	6022      	str	r2, [r4, #0]
  405972:	4621      	mov	r1, r4
  405974:	f7ff fc4a 	bl	40520c <_fflush_r>
  405978:	9b01      	ldr	r3, [sp, #4]
  40597a:	2800      	cmp	r0, #0
  40597c:	f47f af28 	bne.w	4057d0 <__sfvwrite_r+0xfc>
  405980:	461f      	mov	r7, r3
  405982:	e750      	b.n	405826 <__sfvwrite_r+0x152>
  405984:	9800      	ldr	r0, [sp, #0]
  405986:	f000 f99f 	bl	405cc8 <_realloc_r>
  40598a:	4683      	mov	fp, r0
  40598c:	2800      	cmp	r0, #0
  40598e:	d1c5      	bne.n	40591c <__sfvwrite_r+0x248>
  405990:	9d00      	ldr	r5, [sp, #0]
  405992:	6921      	ldr	r1, [r4, #16]
  405994:	4628      	mov	r0, r5
  405996:	f7ff fdb7 	bl	405508 <_free_r>
  40599a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40599e:	220c      	movs	r2, #12
  4059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4059a4:	602a      	str	r2, [r5, #0]
  4059a6:	e715      	b.n	4057d4 <__sfvwrite_r+0x100>
  4059a8:	f106 0901 	add.w	r9, r6, #1
  4059ac:	e722      	b.n	4057f4 <__sfvwrite_r+0x120>
  4059ae:	f04f 30ff 	mov.w	r0, #4294967295
  4059b2:	e6bf      	b.n	405734 <__sfvwrite_r+0x60>
  4059b4:	9a00      	ldr	r2, [sp, #0]
  4059b6:	230c      	movs	r3, #12
  4059b8:	6013      	str	r3, [r2, #0]
  4059ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059be:	e709      	b.n	4057d4 <__sfvwrite_r+0x100>
  4059c0:	7ffffc00 	.word	0x7ffffc00

004059c4 <_fwalk_reent>:
  4059c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4059c8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4059cc:	d01f      	beq.n	405a0e <_fwalk_reent+0x4a>
  4059ce:	4688      	mov	r8, r1
  4059d0:	4606      	mov	r6, r0
  4059d2:	f04f 0900 	mov.w	r9, #0
  4059d6:	687d      	ldr	r5, [r7, #4]
  4059d8:	68bc      	ldr	r4, [r7, #8]
  4059da:	3d01      	subs	r5, #1
  4059dc:	d411      	bmi.n	405a02 <_fwalk_reent+0x3e>
  4059de:	89a3      	ldrh	r3, [r4, #12]
  4059e0:	2b01      	cmp	r3, #1
  4059e2:	f105 35ff 	add.w	r5, r5, #4294967295
  4059e6:	d908      	bls.n	4059fa <_fwalk_reent+0x36>
  4059e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4059ec:	3301      	adds	r3, #1
  4059ee:	4621      	mov	r1, r4
  4059f0:	4630      	mov	r0, r6
  4059f2:	d002      	beq.n	4059fa <_fwalk_reent+0x36>
  4059f4:	47c0      	blx	r8
  4059f6:	ea49 0900 	orr.w	r9, r9, r0
  4059fa:	1c6b      	adds	r3, r5, #1
  4059fc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405a00:	d1ed      	bne.n	4059de <_fwalk_reent+0x1a>
  405a02:	683f      	ldr	r7, [r7, #0]
  405a04:	2f00      	cmp	r7, #0
  405a06:	d1e6      	bne.n	4059d6 <_fwalk_reent+0x12>
  405a08:	4648      	mov	r0, r9
  405a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a0e:	46b9      	mov	r9, r7
  405a10:	4648      	mov	r0, r9
  405a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405a16:	bf00      	nop

00405a18 <__locale_mb_cur_max>:
  405a18:	4b04      	ldr	r3, [pc, #16]	; (405a2c <__locale_mb_cur_max+0x14>)
  405a1a:	4a05      	ldr	r2, [pc, #20]	; (405a30 <__locale_mb_cur_max+0x18>)
  405a1c:	681b      	ldr	r3, [r3, #0]
  405a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405a20:	2b00      	cmp	r3, #0
  405a22:	bf08      	it	eq
  405a24:	4613      	moveq	r3, r2
  405a26:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405a2a:	4770      	bx	lr
  405a2c:	20400010 	.word	0x20400010
  405a30:	20400854 	.word	0x20400854

00405a34 <__retarget_lock_init_recursive>:
  405a34:	4770      	bx	lr
  405a36:	bf00      	nop

00405a38 <__retarget_lock_close_recursive>:
  405a38:	4770      	bx	lr
  405a3a:	bf00      	nop

00405a3c <__retarget_lock_acquire_recursive>:
  405a3c:	4770      	bx	lr
  405a3e:	bf00      	nop

00405a40 <__retarget_lock_release_recursive>:
  405a40:	4770      	bx	lr
  405a42:	bf00      	nop

00405a44 <__swhatbuf_r>:
  405a44:	b570      	push	{r4, r5, r6, lr}
  405a46:	460c      	mov	r4, r1
  405a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405a4c:	2900      	cmp	r1, #0
  405a4e:	b090      	sub	sp, #64	; 0x40
  405a50:	4615      	mov	r5, r2
  405a52:	461e      	mov	r6, r3
  405a54:	db14      	blt.n	405a80 <__swhatbuf_r+0x3c>
  405a56:	aa01      	add	r2, sp, #4
  405a58:	f000 fd1c 	bl	406494 <_fstat_r>
  405a5c:	2800      	cmp	r0, #0
  405a5e:	db0f      	blt.n	405a80 <__swhatbuf_r+0x3c>
  405a60:	9a02      	ldr	r2, [sp, #8]
  405a62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405a66:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405a6a:	fab2 f282 	clz	r2, r2
  405a6e:	0952      	lsrs	r2, r2, #5
  405a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a74:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405a78:	6032      	str	r2, [r6, #0]
  405a7a:	602b      	str	r3, [r5, #0]
  405a7c:	b010      	add	sp, #64	; 0x40
  405a7e:	bd70      	pop	{r4, r5, r6, pc}
  405a80:	89a2      	ldrh	r2, [r4, #12]
  405a82:	2300      	movs	r3, #0
  405a84:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405a88:	6033      	str	r3, [r6, #0]
  405a8a:	d004      	beq.n	405a96 <__swhatbuf_r+0x52>
  405a8c:	2240      	movs	r2, #64	; 0x40
  405a8e:	4618      	mov	r0, r3
  405a90:	602a      	str	r2, [r5, #0]
  405a92:	b010      	add	sp, #64	; 0x40
  405a94:	bd70      	pop	{r4, r5, r6, pc}
  405a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a9a:	602b      	str	r3, [r5, #0]
  405a9c:	b010      	add	sp, #64	; 0x40
  405a9e:	bd70      	pop	{r4, r5, r6, pc}

00405aa0 <__smakebuf_r>:
  405aa0:	898a      	ldrh	r2, [r1, #12]
  405aa2:	0792      	lsls	r2, r2, #30
  405aa4:	460b      	mov	r3, r1
  405aa6:	d506      	bpl.n	405ab6 <__smakebuf_r+0x16>
  405aa8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405aac:	2101      	movs	r1, #1
  405aae:	601a      	str	r2, [r3, #0]
  405ab0:	611a      	str	r2, [r3, #16]
  405ab2:	6159      	str	r1, [r3, #20]
  405ab4:	4770      	bx	lr
  405ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ab8:	b083      	sub	sp, #12
  405aba:	ab01      	add	r3, sp, #4
  405abc:	466a      	mov	r2, sp
  405abe:	460c      	mov	r4, r1
  405ac0:	4606      	mov	r6, r0
  405ac2:	f7ff ffbf 	bl	405a44 <__swhatbuf_r>
  405ac6:	9900      	ldr	r1, [sp, #0]
  405ac8:	4605      	mov	r5, r0
  405aca:	4630      	mov	r0, r6
  405acc:	f7fd ff3a 	bl	403944 <_malloc_r>
  405ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ad4:	b1d8      	cbz	r0, 405b0e <__smakebuf_r+0x6e>
  405ad6:	9a01      	ldr	r2, [sp, #4]
  405ad8:	4f15      	ldr	r7, [pc, #84]	; (405b30 <__smakebuf_r+0x90>)
  405ada:	9900      	ldr	r1, [sp, #0]
  405adc:	63f7      	str	r7, [r6, #60]	; 0x3c
  405ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ae2:	81a3      	strh	r3, [r4, #12]
  405ae4:	6020      	str	r0, [r4, #0]
  405ae6:	6120      	str	r0, [r4, #16]
  405ae8:	6161      	str	r1, [r4, #20]
  405aea:	b91a      	cbnz	r2, 405af4 <__smakebuf_r+0x54>
  405aec:	432b      	orrs	r3, r5
  405aee:	81a3      	strh	r3, [r4, #12]
  405af0:	b003      	add	sp, #12
  405af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405af4:	4630      	mov	r0, r6
  405af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405afa:	f000 fcdf 	bl	4064bc <_isatty_r>
  405afe:	b1a0      	cbz	r0, 405b2a <__smakebuf_r+0x8a>
  405b00:	89a3      	ldrh	r3, [r4, #12]
  405b02:	f023 0303 	bic.w	r3, r3, #3
  405b06:	f043 0301 	orr.w	r3, r3, #1
  405b0a:	b21b      	sxth	r3, r3
  405b0c:	e7ee      	b.n	405aec <__smakebuf_r+0x4c>
  405b0e:	059a      	lsls	r2, r3, #22
  405b10:	d4ee      	bmi.n	405af0 <__smakebuf_r+0x50>
  405b12:	f023 0303 	bic.w	r3, r3, #3
  405b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405b1a:	f043 0302 	orr.w	r3, r3, #2
  405b1e:	2101      	movs	r1, #1
  405b20:	81a3      	strh	r3, [r4, #12]
  405b22:	6022      	str	r2, [r4, #0]
  405b24:	6122      	str	r2, [r4, #16]
  405b26:	6161      	str	r1, [r4, #20]
  405b28:	e7e2      	b.n	405af0 <__smakebuf_r+0x50>
  405b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b2e:	e7dd      	b.n	405aec <__smakebuf_r+0x4c>
  405b30:	00405261 	.word	0x00405261

00405b34 <__ascii_mbtowc>:
  405b34:	b082      	sub	sp, #8
  405b36:	b149      	cbz	r1, 405b4c <__ascii_mbtowc+0x18>
  405b38:	b15a      	cbz	r2, 405b52 <__ascii_mbtowc+0x1e>
  405b3a:	b16b      	cbz	r3, 405b58 <__ascii_mbtowc+0x24>
  405b3c:	7813      	ldrb	r3, [r2, #0]
  405b3e:	600b      	str	r3, [r1, #0]
  405b40:	7812      	ldrb	r2, [r2, #0]
  405b42:	1c10      	adds	r0, r2, #0
  405b44:	bf18      	it	ne
  405b46:	2001      	movne	r0, #1
  405b48:	b002      	add	sp, #8
  405b4a:	4770      	bx	lr
  405b4c:	a901      	add	r1, sp, #4
  405b4e:	2a00      	cmp	r2, #0
  405b50:	d1f3      	bne.n	405b3a <__ascii_mbtowc+0x6>
  405b52:	4610      	mov	r0, r2
  405b54:	b002      	add	sp, #8
  405b56:	4770      	bx	lr
  405b58:	f06f 0001 	mvn.w	r0, #1
  405b5c:	e7f4      	b.n	405b48 <__ascii_mbtowc+0x14>
  405b5e:	bf00      	nop

00405b60 <memchr>:
  405b60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405b64:	2a10      	cmp	r2, #16
  405b66:	db2b      	blt.n	405bc0 <memchr+0x60>
  405b68:	f010 0f07 	tst.w	r0, #7
  405b6c:	d008      	beq.n	405b80 <memchr+0x20>
  405b6e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405b72:	3a01      	subs	r2, #1
  405b74:	428b      	cmp	r3, r1
  405b76:	d02d      	beq.n	405bd4 <memchr+0x74>
  405b78:	f010 0f07 	tst.w	r0, #7
  405b7c:	b342      	cbz	r2, 405bd0 <memchr+0x70>
  405b7e:	d1f6      	bne.n	405b6e <memchr+0xe>
  405b80:	b4f0      	push	{r4, r5, r6, r7}
  405b82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405b86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405b8a:	f022 0407 	bic.w	r4, r2, #7
  405b8e:	f07f 0700 	mvns.w	r7, #0
  405b92:	2300      	movs	r3, #0
  405b94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405b98:	3c08      	subs	r4, #8
  405b9a:	ea85 0501 	eor.w	r5, r5, r1
  405b9e:	ea86 0601 	eor.w	r6, r6, r1
  405ba2:	fa85 f547 	uadd8	r5, r5, r7
  405ba6:	faa3 f587 	sel	r5, r3, r7
  405baa:	fa86 f647 	uadd8	r6, r6, r7
  405bae:	faa5 f687 	sel	r6, r5, r7
  405bb2:	b98e      	cbnz	r6, 405bd8 <memchr+0x78>
  405bb4:	d1ee      	bne.n	405b94 <memchr+0x34>
  405bb6:	bcf0      	pop	{r4, r5, r6, r7}
  405bb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405bbc:	f002 0207 	and.w	r2, r2, #7
  405bc0:	b132      	cbz	r2, 405bd0 <memchr+0x70>
  405bc2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405bc6:	3a01      	subs	r2, #1
  405bc8:	ea83 0301 	eor.w	r3, r3, r1
  405bcc:	b113      	cbz	r3, 405bd4 <memchr+0x74>
  405bce:	d1f8      	bne.n	405bc2 <memchr+0x62>
  405bd0:	2000      	movs	r0, #0
  405bd2:	4770      	bx	lr
  405bd4:	3801      	subs	r0, #1
  405bd6:	4770      	bx	lr
  405bd8:	2d00      	cmp	r5, #0
  405bda:	bf06      	itte	eq
  405bdc:	4635      	moveq	r5, r6
  405bde:	3803      	subeq	r0, #3
  405be0:	3807      	subne	r0, #7
  405be2:	f015 0f01 	tst.w	r5, #1
  405be6:	d107      	bne.n	405bf8 <memchr+0x98>
  405be8:	3001      	adds	r0, #1
  405bea:	f415 7f80 	tst.w	r5, #256	; 0x100
  405bee:	bf02      	ittt	eq
  405bf0:	3001      	addeq	r0, #1
  405bf2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405bf6:	3001      	addeq	r0, #1
  405bf8:	bcf0      	pop	{r4, r5, r6, r7}
  405bfa:	3801      	subs	r0, #1
  405bfc:	4770      	bx	lr
  405bfe:	bf00      	nop

00405c00 <memmove>:
  405c00:	4288      	cmp	r0, r1
  405c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c04:	d90d      	bls.n	405c22 <memmove+0x22>
  405c06:	188b      	adds	r3, r1, r2
  405c08:	4298      	cmp	r0, r3
  405c0a:	d20a      	bcs.n	405c22 <memmove+0x22>
  405c0c:	1884      	adds	r4, r0, r2
  405c0e:	2a00      	cmp	r2, #0
  405c10:	d051      	beq.n	405cb6 <memmove+0xb6>
  405c12:	4622      	mov	r2, r4
  405c14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405c18:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405c1c:	4299      	cmp	r1, r3
  405c1e:	d1f9      	bne.n	405c14 <memmove+0x14>
  405c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c22:	2a0f      	cmp	r2, #15
  405c24:	d948      	bls.n	405cb8 <memmove+0xb8>
  405c26:	ea41 0300 	orr.w	r3, r1, r0
  405c2a:	079b      	lsls	r3, r3, #30
  405c2c:	d146      	bne.n	405cbc <memmove+0xbc>
  405c2e:	f100 0410 	add.w	r4, r0, #16
  405c32:	f101 0310 	add.w	r3, r1, #16
  405c36:	4615      	mov	r5, r2
  405c38:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c3c:	f844 6c10 	str.w	r6, [r4, #-16]
  405c40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c44:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c48:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405c4c:	f844 6c08 	str.w	r6, [r4, #-8]
  405c50:	3d10      	subs	r5, #16
  405c52:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405c56:	f844 6c04 	str.w	r6, [r4, #-4]
  405c5a:	2d0f      	cmp	r5, #15
  405c5c:	f103 0310 	add.w	r3, r3, #16
  405c60:	f104 0410 	add.w	r4, r4, #16
  405c64:	d8e8      	bhi.n	405c38 <memmove+0x38>
  405c66:	f1a2 0310 	sub.w	r3, r2, #16
  405c6a:	f023 030f 	bic.w	r3, r3, #15
  405c6e:	f002 0e0f 	and.w	lr, r2, #15
  405c72:	3310      	adds	r3, #16
  405c74:	f1be 0f03 	cmp.w	lr, #3
  405c78:	4419      	add	r1, r3
  405c7a:	4403      	add	r3, r0
  405c7c:	d921      	bls.n	405cc2 <memmove+0xc2>
  405c7e:	1f1e      	subs	r6, r3, #4
  405c80:	460d      	mov	r5, r1
  405c82:	4674      	mov	r4, lr
  405c84:	3c04      	subs	r4, #4
  405c86:	f855 7b04 	ldr.w	r7, [r5], #4
  405c8a:	f846 7f04 	str.w	r7, [r6, #4]!
  405c8e:	2c03      	cmp	r4, #3
  405c90:	d8f8      	bhi.n	405c84 <memmove+0x84>
  405c92:	f1ae 0404 	sub.w	r4, lr, #4
  405c96:	f024 0403 	bic.w	r4, r4, #3
  405c9a:	3404      	adds	r4, #4
  405c9c:	4421      	add	r1, r4
  405c9e:	4423      	add	r3, r4
  405ca0:	f002 0203 	and.w	r2, r2, #3
  405ca4:	b162      	cbz	r2, 405cc0 <memmove+0xc0>
  405ca6:	3b01      	subs	r3, #1
  405ca8:	440a      	add	r2, r1
  405caa:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cae:	f803 4f01 	strb.w	r4, [r3, #1]!
  405cb2:	428a      	cmp	r2, r1
  405cb4:	d1f9      	bne.n	405caa <memmove+0xaa>
  405cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cb8:	4603      	mov	r3, r0
  405cba:	e7f3      	b.n	405ca4 <memmove+0xa4>
  405cbc:	4603      	mov	r3, r0
  405cbe:	e7f2      	b.n	405ca6 <memmove+0xa6>
  405cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cc2:	4672      	mov	r2, lr
  405cc4:	e7ee      	b.n	405ca4 <memmove+0xa4>
  405cc6:	bf00      	nop

00405cc8 <_realloc_r>:
  405cc8:	2900      	cmp	r1, #0
  405cca:	f000 8095 	beq.w	405df8 <_realloc_r+0x130>
  405cce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cd2:	460d      	mov	r5, r1
  405cd4:	4616      	mov	r6, r2
  405cd6:	b083      	sub	sp, #12
  405cd8:	4680      	mov	r8, r0
  405cda:	f106 070b 	add.w	r7, r6, #11
  405cde:	f7fe f9c9 	bl	404074 <__malloc_lock>
  405ce2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405ce6:	2f16      	cmp	r7, #22
  405ce8:	f02e 0403 	bic.w	r4, lr, #3
  405cec:	f1a5 0908 	sub.w	r9, r5, #8
  405cf0:	d83c      	bhi.n	405d6c <_realloc_r+0xa4>
  405cf2:	2210      	movs	r2, #16
  405cf4:	4617      	mov	r7, r2
  405cf6:	42be      	cmp	r6, r7
  405cf8:	d83d      	bhi.n	405d76 <_realloc_r+0xae>
  405cfa:	4294      	cmp	r4, r2
  405cfc:	da43      	bge.n	405d86 <_realloc_r+0xbe>
  405cfe:	4bc4      	ldr	r3, [pc, #784]	; (406010 <_realloc_r+0x348>)
  405d00:	6899      	ldr	r1, [r3, #8]
  405d02:	eb09 0004 	add.w	r0, r9, r4
  405d06:	4288      	cmp	r0, r1
  405d08:	f000 80b4 	beq.w	405e74 <_realloc_r+0x1ac>
  405d0c:	6843      	ldr	r3, [r0, #4]
  405d0e:	f023 0101 	bic.w	r1, r3, #1
  405d12:	4401      	add	r1, r0
  405d14:	6849      	ldr	r1, [r1, #4]
  405d16:	07c9      	lsls	r1, r1, #31
  405d18:	d54c      	bpl.n	405db4 <_realloc_r+0xec>
  405d1a:	f01e 0f01 	tst.w	lr, #1
  405d1e:	f000 809b 	beq.w	405e58 <_realloc_r+0x190>
  405d22:	4631      	mov	r1, r6
  405d24:	4640      	mov	r0, r8
  405d26:	f7fd fe0d 	bl	403944 <_malloc_r>
  405d2a:	4606      	mov	r6, r0
  405d2c:	2800      	cmp	r0, #0
  405d2e:	d03a      	beq.n	405da6 <_realloc_r+0xde>
  405d30:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d34:	f023 0301 	bic.w	r3, r3, #1
  405d38:	444b      	add	r3, r9
  405d3a:	f1a0 0208 	sub.w	r2, r0, #8
  405d3e:	429a      	cmp	r2, r3
  405d40:	f000 8121 	beq.w	405f86 <_realloc_r+0x2be>
  405d44:	1f22      	subs	r2, r4, #4
  405d46:	2a24      	cmp	r2, #36	; 0x24
  405d48:	f200 8107 	bhi.w	405f5a <_realloc_r+0x292>
  405d4c:	2a13      	cmp	r2, #19
  405d4e:	f200 80db 	bhi.w	405f08 <_realloc_r+0x240>
  405d52:	4603      	mov	r3, r0
  405d54:	462a      	mov	r2, r5
  405d56:	6811      	ldr	r1, [r2, #0]
  405d58:	6019      	str	r1, [r3, #0]
  405d5a:	6851      	ldr	r1, [r2, #4]
  405d5c:	6059      	str	r1, [r3, #4]
  405d5e:	6892      	ldr	r2, [r2, #8]
  405d60:	609a      	str	r2, [r3, #8]
  405d62:	4629      	mov	r1, r5
  405d64:	4640      	mov	r0, r8
  405d66:	f7ff fbcf 	bl	405508 <_free_r>
  405d6a:	e01c      	b.n	405da6 <_realloc_r+0xde>
  405d6c:	f027 0707 	bic.w	r7, r7, #7
  405d70:	2f00      	cmp	r7, #0
  405d72:	463a      	mov	r2, r7
  405d74:	dabf      	bge.n	405cf6 <_realloc_r+0x2e>
  405d76:	2600      	movs	r6, #0
  405d78:	230c      	movs	r3, #12
  405d7a:	4630      	mov	r0, r6
  405d7c:	f8c8 3000 	str.w	r3, [r8]
  405d80:	b003      	add	sp, #12
  405d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d86:	462e      	mov	r6, r5
  405d88:	1be3      	subs	r3, r4, r7
  405d8a:	2b0f      	cmp	r3, #15
  405d8c:	d81e      	bhi.n	405dcc <_realloc_r+0x104>
  405d8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405d92:	f003 0301 	and.w	r3, r3, #1
  405d96:	4323      	orrs	r3, r4
  405d98:	444c      	add	r4, r9
  405d9a:	f8c9 3004 	str.w	r3, [r9, #4]
  405d9e:	6863      	ldr	r3, [r4, #4]
  405da0:	f043 0301 	orr.w	r3, r3, #1
  405da4:	6063      	str	r3, [r4, #4]
  405da6:	4640      	mov	r0, r8
  405da8:	f7fe f96a 	bl	404080 <__malloc_unlock>
  405dac:	4630      	mov	r0, r6
  405dae:	b003      	add	sp, #12
  405db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405db4:	f023 0303 	bic.w	r3, r3, #3
  405db8:	18e1      	adds	r1, r4, r3
  405dba:	4291      	cmp	r1, r2
  405dbc:	db1f      	blt.n	405dfe <_realloc_r+0x136>
  405dbe:	68c3      	ldr	r3, [r0, #12]
  405dc0:	6882      	ldr	r2, [r0, #8]
  405dc2:	462e      	mov	r6, r5
  405dc4:	60d3      	str	r3, [r2, #12]
  405dc6:	460c      	mov	r4, r1
  405dc8:	609a      	str	r2, [r3, #8]
  405dca:	e7dd      	b.n	405d88 <_realloc_r+0xc0>
  405dcc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405dd0:	eb09 0107 	add.w	r1, r9, r7
  405dd4:	f002 0201 	and.w	r2, r2, #1
  405dd8:	444c      	add	r4, r9
  405dda:	f043 0301 	orr.w	r3, r3, #1
  405dde:	4317      	orrs	r7, r2
  405de0:	f8c9 7004 	str.w	r7, [r9, #4]
  405de4:	604b      	str	r3, [r1, #4]
  405de6:	6863      	ldr	r3, [r4, #4]
  405de8:	f043 0301 	orr.w	r3, r3, #1
  405dec:	3108      	adds	r1, #8
  405dee:	6063      	str	r3, [r4, #4]
  405df0:	4640      	mov	r0, r8
  405df2:	f7ff fb89 	bl	405508 <_free_r>
  405df6:	e7d6      	b.n	405da6 <_realloc_r+0xde>
  405df8:	4611      	mov	r1, r2
  405dfa:	f7fd bda3 	b.w	403944 <_malloc_r>
  405dfe:	f01e 0f01 	tst.w	lr, #1
  405e02:	d18e      	bne.n	405d22 <_realloc_r+0x5a>
  405e04:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e08:	eba9 0a01 	sub.w	sl, r9, r1
  405e0c:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e10:	f021 0103 	bic.w	r1, r1, #3
  405e14:	440b      	add	r3, r1
  405e16:	4423      	add	r3, r4
  405e18:	4293      	cmp	r3, r2
  405e1a:	db25      	blt.n	405e68 <_realloc_r+0x1a0>
  405e1c:	68c2      	ldr	r2, [r0, #12]
  405e1e:	6881      	ldr	r1, [r0, #8]
  405e20:	4656      	mov	r6, sl
  405e22:	60ca      	str	r2, [r1, #12]
  405e24:	6091      	str	r1, [r2, #8]
  405e26:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e2a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e2e:	1f22      	subs	r2, r4, #4
  405e30:	2a24      	cmp	r2, #36	; 0x24
  405e32:	60c1      	str	r1, [r0, #12]
  405e34:	6088      	str	r0, [r1, #8]
  405e36:	f200 8094 	bhi.w	405f62 <_realloc_r+0x29a>
  405e3a:	2a13      	cmp	r2, #19
  405e3c:	d96f      	bls.n	405f1e <_realloc_r+0x256>
  405e3e:	6829      	ldr	r1, [r5, #0]
  405e40:	f8ca 1008 	str.w	r1, [sl, #8]
  405e44:	6869      	ldr	r1, [r5, #4]
  405e46:	f8ca 100c 	str.w	r1, [sl, #12]
  405e4a:	2a1b      	cmp	r2, #27
  405e4c:	f200 80a2 	bhi.w	405f94 <_realloc_r+0x2cc>
  405e50:	3508      	adds	r5, #8
  405e52:	f10a 0210 	add.w	r2, sl, #16
  405e56:	e063      	b.n	405f20 <_realloc_r+0x258>
  405e58:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405e5c:	eba9 0a03 	sub.w	sl, r9, r3
  405e60:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e64:	f021 0103 	bic.w	r1, r1, #3
  405e68:	1863      	adds	r3, r4, r1
  405e6a:	4293      	cmp	r3, r2
  405e6c:	f6ff af59 	blt.w	405d22 <_realloc_r+0x5a>
  405e70:	4656      	mov	r6, sl
  405e72:	e7d8      	b.n	405e26 <_realloc_r+0x15e>
  405e74:	6841      	ldr	r1, [r0, #4]
  405e76:	f021 0b03 	bic.w	fp, r1, #3
  405e7a:	44a3      	add	fp, r4
  405e7c:	f107 0010 	add.w	r0, r7, #16
  405e80:	4583      	cmp	fp, r0
  405e82:	da56      	bge.n	405f32 <_realloc_r+0x26a>
  405e84:	f01e 0f01 	tst.w	lr, #1
  405e88:	f47f af4b 	bne.w	405d22 <_realloc_r+0x5a>
  405e8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e90:	eba9 0a01 	sub.w	sl, r9, r1
  405e94:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e98:	f021 0103 	bic.w	r1, r1, #3
  405e9c:	448b      	add	fp, r1
  405e9e:	4558      	cmp	r0, fp
  405ea0:	dce2      	bgt.n	405e68 <_realloc_r+0x1a0>
  405ea2:	4656      	mov	r6, sl
  405ea4:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ea8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405eac:	1f22      	subs	r2, r4, #4
  405eae:	2a24      	cmp	r2, #36	; 0x24
  405eb0:	60c1      	str	r1, [r0, #12]
  405eb2:	6088      	str	r0, [r1, #8]
  405eb4:	f200 808f 	bhi.w	405fd6 <_realloc_r+0x30e>
  405eb8:	2a13      	cmp	r2, #19
  405eba:	f240 808a 	bls.w	405fd2 <_realloc_r+0x30a>
  405ebe:	6829      	ldr	r1, [r5, #0]
  405ec0:	f8ca 1008 	str.w	r1, [sl, #8]
  405ec4:	6869      	ldr	r1, [r5, #4]
  405ec6:	f8ca 100c 	str.w	r1, [sl, #12]
  405eca:	2a1b      	cmp	r2, #27
  405ecc:	f200 808a 	bhi.w	405fe4 <_realloc_r+0x31c>
  405ed0:	3508      	adds	r5, #8
  405ed2:	f10a 0210 	add.w	r2, sl, #16
  405ed6:	6829      	ldr	r1, [r5, #0]
  405ed8:	6011      	str	r1, [r2, #0]
  405eda:	6869      	ldr	r1, [r5, #4]
  405edc:	6051      	str	r1, [r2, #4]
  405ede:	68a9      	ldr	r1, [r5, #8]
  405ee0:	6091      	str	r1, [r2, #8]
  405ee2:	eb0a 0107 	add.w	r1, sl, r7
  405ee6:	ebab 0207 	sub.w	r2, fp, r7
  405eea:	f042 0201 	orr.w	r2, r2, #1
  405eee:	6099      	str	r1, [r3, #8]
  405ef0:	604a      	str	r2, [r1, #4]
  405ef2:	f8da 3004 	ldr.w	r3, [sl, #4]
  405ef6:	f003 0301 	and.w	r3, r3, #1
  405efa:	431f      	orrs	r7, r3
  405efc:	4640      	mov	r0, r8
  405efe:	f8ca 7004 	str.w	r7, [sl, #4]
  405f02:	f7fe f8bd 	bl	404080 <__malloc_unlock>
  405f06:	e751      	b.n	405dac <_realloc_r+0xe4>
  405f08:	682b      	ldr	r3, [r5, #0]
  405f0a:	6003      	str	r3, [r0, #0]
  405f0c:	686b      	ldr	r3, [r5, #4]
  405f0e:	6043      	str	r3, [r0, #4]
  405f10:	2a1b      	cmp	r2, #27
  405f12:	d82d      	bhi.n	405f70 <_realloc_r+0x2a8>
  405f14:	f100 0308 	add.w	r3, r0, #8
  405f18:	f105 0208 	add.w	r2, r5, #8
  405f1c:	e71b      	b.n	405d56 <_realloc_r+0x8e>
  405f1e:	4632      	mov	r2, r6
  405f20:	6829      	ldr	r1, [r5, #0]
  405f22:	6011      	str	r1, [r2, #0]
  405f24:	6869      	ldr	r1, [r5, #4]
  405f26:	6051      	str	r1, [r2, #4]
  405f28:	68a9      	ldr	r1, [r5, #8]
  405f2a:	6091      	str	r1, [r2, #8]
  405f2c:	461c      	mov	r4, r3
  405f2e:	46d1      	mov	r9, sl
  405f30:	e72a      	b.n	405d88 <_realloc_r+0xc0>
  405f32:	eb09 0107 	add.w	r1, r9, r7
  405f36:	ebab 0b07 	sub.w	fp, fp, r7
  405f3a:	f04b 0201 	orr.w	r2, fp, #1
  405f3e:	6099      	str	r1, [r3, #8]
  405f40:	604a      	str	r2, [r1, #4]
  405f42:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f46:	f003 0301 	and.w	r3, r3, #1
  405f4a:	431f      	orrs	r7, r3
  405f4c:	4640      	mov	r0, r8
  405f4e:	f845 7c04 	str.w	r7, [r5, #-4]
  405f52:	f7fe f895 	bl	404080 <__malloc_unlock>
  405f56:	462e      	mov	r6, r5
  405f58:	e728      	b.n	405dac <_realloc_r+0xe4>
  405f5a:	4629      	mov	r1, r5
  405f5c:	f7ff fe50 	bl	405c00 <memmove>
  405f60:	e6ff      	b.n	405d62 <_realloc_r+0x9a>
  405f62:	4629      	mov	r1, r5
  405f64:	4630      	mov	r0, r6
  405f66:	461c      	mov	r4, r3
  405f68:	46d1      	mov	r9, sl
  405f6a:	f7ff fe49 	bl	405c00 <memmove>
  405f6e:	e70b      	b.n	405d88 <_realloc_r+0xc0>
  405f70:	68ab      	ldr	r3, [r5, #8]
  405f72:	6083      	str	r3, [r0, #8]
  405f74:	68eb      	ldr	r3, [r5, #12]
  405f76:	60c3      	str	r3, [r0, #12]
  405f78:	2a24      	cmp	r2, #36	; 0x24
  405f7a:	d017      	beq.n	405fac <_realloc_r+0x2e4>
  405f7c:	f100 0310 	add.w	r3, r0, #16
  405f80:	f105 0210 	add.w	r2, r5, #16
  405f84:	e6e7      	b.n	405d56 <_realloc_r+0x8e>
  405f86:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405f8a:	f023 0303 	bic.w	r3, r3, #3
  405f8e:	441c      	add	r4, r3
  405f90:	462e      	mov	r6, r5
  405f92:	e6f9      	b.n	405d88 <_realloc_r+0xc0>
  405f94:	68a9      	ldr	r1, [r5, #8]
  405f96:	f8ca 1010 	str.w	r1, [sl, #16]
  405f9a:	68e9      	ldr	r1, [r5, #12]
  405f9c:	f8ca 1014 	str.w	r1, [sl, #20]
  405fa0:	2a24      	cmp	r2, #36	; 0x24
  405fa2:	d00c      	beq.n	405fbe <_realloc_r+0x2f6>
  405fa4:	3510      	adds	r5, #16
  405fa6:	f10a 0218 	add.w	r2, sl, #24
  405faa:	e7b9      	b.n	405f20 <_realloc_r+0x258>
  405fac:	692b      	ldr	r3, [r5, #16]
  405fae:	6103      	str	r3, [r0, #16]
  405fb0:	696b      	ldr	r3, [r5, #20]
  405fb2:	6143      	str	r3, [r0, #20]
  405fb4:	f105 0218 	add.w	r2, r5, #24
  405fb8:	f100 0318 	add.w	r3, r0, #24
  405fbc:	e6cb      	b.n	405d56 <_realloc_r+0x8e>
  405fbe:	692a      	ldr	r2, [r5, #16]
  405fc0:	f8ca 2018 	str.w	r2, [sl, #24]
  405fc4:	696a      	ldr	r2, [r5, #20]
  405fc6:	f8ca 201c 	str.w	r2, [sl, #28]
  405fca:	3518      	adds	r5, #24
  405fcc:	f10a 0220 	add.w	r2, sl, #32
  405fd0:	e7a6      	b.n	405f20 <_realloc_r+0x258>
  405fd2:	4632      	mov	r2, r6
  405fd4:	e77f      	b.n	405ed6 <_realloc_r+0x20e>
  405fd6:	4629      	mov	r1, r5
  405fd8:	4630      	mov	r0, r6
  405fda:	9301      	str	r3, [sp, #4]
  405fdc:	f7ff fe10 	bl	405c00 <memmove>
  405fe0:	9b01      	ldr	r3, [sp, #4]
  405fe2:	e77e      	b.n	405ee2 <_realloc_r+0x21a>
  405fe4:	68a9      	ldr	r1, [r5, #8]
  405fe6:	f8ca 1010 	str.w	r1, [sl, #16]
  405fea:	68e9      	ldr	r1, [r5, #12]
  405fec:	f8ca 1014 	str.w	r1, [sl, #20]
  405ff0:	2a24      	cmp	r2, #36	; 0x24
  405ff2:	d003      	beq.n	405ffc <_realloc_r+0x334>
  405ff4:	3510      	adds	r5, #16
  405ff6:	f10a 0218 	add.w	r2, sl, #24
  405ffa:	e76c      	b.n	405ed6 <_realloc_r+0x20e>
  405ffc:	692a      	ldr	r2, [r5, #16]
  405ffe:	f8ca 2018 	str.w	r2, [sl, #24]
  406002:	696a      	ldr	r2, [r5, #20]
  406004:	f8ca 201c 	str.w	r2, [sl, #28]
  406008:	3518      	adds	r5, #24
  40600a:	f10a 0220 	add.w	r2, sl, #32
  40600e:	e762      	b.n	405ed6 <_realloc_r+0x20e>
  406010:	20400440 	.word	0x20400440

00406014 <__sread>:
  406014:	b510      	push	{r4, lr}
  406016:	460c      	mov	r4, r1
  406018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40601c:	f000 fa76 	bl	40650c <_read_r>
  406020:	2800      	cmp	r0, #0
  406022:	db03      	blt.n	40602c <__sread+0x18>
  406024:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406026:	4403      	add	r3, r0
  406028:	6523      	str	r3, [r4, #80]	; 0x50
  40602a:	bd10      	pop	{r4, pc}
  40602c:	89a3      	ldrh	r3, [r4, #12]
  40602e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406032:	81a3      	strh	r3, [r4, #12]
  406034:	bd10      	pop	{r4, pc}
  406036:	bf00      	nop

00406038 <__swrite>:
  406038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40603c:	4616      	mov	r6, r2
  40603e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406042:	461f      	mov	r7, r3
  406044:	05d3      	lsls	r3, r2, #23
  406046:	460c      	mov	r4, r1
  406048:	4605      	mov	r5, r0
  40604a:	d507      	bpl.n	40605c <__swrite+0x24>
  40604c:	2200      	movs	r2, #0
  40604e:	2302      	movs	r3, #2
  406050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406054:	f000 fa44 	bl	4064e0 <_lseek_r>
  406058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40605c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406060:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406064:	81a2      	strh	r2, [r4, #12]
  406066:	463b      	mov	r3, r7
  406068:	4632      	mov	r2, r6
  40606a:	4628      	mov	r0, r5
  40606c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406070:	f000 b924 	b.w	4062bc <_write_r>

00406074 <__sseek>:
  406074:	b510      	push	{r4, lr}
  406076:	460c      	mov	r4, r1
  406078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40607c:	f000 fa30 	bl	4064e0 <_lseek_r>
  406080:	89a3      	ldrh	r3, [r4, #12]
  406082:	1c42      	adds	r2, r0, #1
  406084:	bf0e      	itee	eq
  406086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40608a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40608e:	6520      	strne	r0, [r4, #80]	; 0x50
  406090:	81a3      	strh	r3, [r4, #12]
  406092:	bd10      	pop	{r4, pc}

00406094 <__sclose>:
  406094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406098:	f000 b988 	b.w	4063ac <_close_r>
	...

004060c0 <strlen>:
  4060c0:	f890 f000 	pld	[r0]
  4060c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4060c8:	f020 0107 	bic.w	r1, r0, #7
  4060cc:	f06f 0c00 	mvn.w	ip, #0
  4060d0:	f010 0407 	ands.w	r4, r0, #7
  4060d4:	f891 f020 	pld	[r1, #32]
  4060d8:	f040 8049 	bne.w	40616e <strlen+0xae>
  4060dc:	f04f 0400 	mov.w	r4, #0
  4060e0:	f06f 0007 	mvn.w	r0, #7
  4060e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4060e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4060ec:	f100 0008 	add.w	r0, r0, #8
  4060f0:	fa82 f24c 	uadd8	r2, r2, ip
  4060f4:	faa4 f28c 	sel	r2, r4, ip
  4060f8:	fa83 f34c 	uadd8	r3, r3, ip
  4060fc:	faa2 f38c 	sel	r3, r2, ip
  406100:	bb4b      	cbnz	r3, 406156 <strlen+0x96>
  406102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406106:	fa82 f24c 	uadd8	r2, r2, ip
  40610a:	f100 0008 	add.w	r0, r0, #8
  40610e:	faa4 f28c 	sel	r2, r4, ip
  406112:	fa83 f34c 	uadd8	r3, r3, ip
  406116:	faa2 f38c 	sel	r3, r2, ip
  40611a:	b9e3      	cbnz	r3, 406156 <strlen+0x96>
  40611c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406120:	fa82 f24c 	uadd8	r2, r2, ip
  406124:	f100 0008 	add.w	r0, r0, #8
  406128:	faa4 f28c 	sel	r2, r4, ip
  40612c:	fa83 f34c 	uadd8	r3, r3, ip
  406130:	faa2 f38c 	sel	r3, r2, ip
  406134:	b97b      	cbnz	r3, 406156 <strlen+0x96>
  406136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40613a:	f101 0120 	add.w	r1, r1, #32
  40613e:	fa82 f24c 	uadd8	r2, r2, ip
  406142:	f100 0008 	add.w	r0, r0, #8
  406146:	faa4 f28c 	sel	r2, r4, ip
  40614a:	fa83 f34c 	uadd8	r3, r3, ip
  40614e:	faa2 f38c 	sel	r3, r2, ip
  406152:	2b00      	cmp	r3, #0
  406154:	d0c6      	beq.n	4060e4 <strlen+0x24>
  406156:	2a00      	cmp	r2, #0
  406158:	bf04      	itt	eq
  40615a:	3004      	addeq	r0, #4
  40615c:	461a      	moveq	r2, r3
  40615e:	ba12      	rev	r2, r2
  406160:	fab2 f282 	clz	r2, r2
  406164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40616c:	4770      	bx	lr
  40616e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406172:	f004 0503 	and.w	r5, r4, #3
  406176:	f1c4 0000 	rsb	r0, r4, #0
  40617a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40617e:	f014 0f04 	tst.w	r4, #4
  406182:	f891 f040 	pld	[r1, #64]	; 0x40
  406186:	fa0c f505 	lsl.w	r5, ip, r5
  40618a:	ea62 0205 	orn	r2, r2, r5
  40618e:	bf1c      	itt	ne
  406190:	ea63 0305 	ornne	r3, r3, r5
  406194:	4662      	movne	r2, ip
  406196:	f04f 0400 	mov.w	r4, #0
  40619a:	e7a9      	b.n	4060f0 <strlen+0x30>

0040619c <__swbuf_r>:
  40619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40619e:	460d      	mov	r5, r1
  4061a0:	4614      	mov	r4, r2
  4061a2:	4606      	mov	r6, r0
  4061a4:	b110      	cbz	r0, 4061ac <__swbuf_r+0x10>
  4061a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4061a8:	2b00      	cmp	r3, #0
  4061aa:	d04b      	beq.n	406244 <__swbuf_r+0xa8>
  4061ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4061b0:	69a3      	ldr	r3, [r4, #24]
  4061b2:	60a3      	str	r3, [r4, #8]
  4061b4:	b291      	uxth	r1, r2
  4061b6:	0708      	lsls	r0, r1, #28
  4061b8:	d539      	bpl.n	40622e <__swbuf_r+0x92>
  4061ba:	6923      	ldr	r3, [r4, #16]
  4061bc:	2b00      	cmp	r3, #0
  4061be:	d036      	beq.n	40622e <__swbuf_r+0x92>
  4061c0:	b2ed      	uxtb	r5, r5
  4061c2:	0489      	lsls	r1, r1, #18
  4061c4:	462f      	mov	r7, r5
  4061c6:	d515      	bpl.n	4061f4 <__swbuf_r+0x58>
  4061c8:	6822      	ldr	r2, [r4, #0]
  4061ca:	6961      	ldr	r1, [r4, #20]
  4061cc:	1ad3      	subs	r3, r2, r3
  4061ce:	428b      	cmp	r3, r1
  4061d0:	da1c      	bge.n	40620c <__swbuf_r+0x70>
  4061d2:	3301      	adds	r3, #1
  4061d4:	68a1      	ldr	r1, [r4, #8]
  4061d6:	1c50      	adds	r0, r2, #1
  4061d8:	3901      	subs	r1, #1
  4061da:	60a1      	str	r1, [r4, #8]
  4061dc:	6020      	str	r0, [r4, #0]
  4061de:	7015      	strb	r5, [r2, #0]
  4061e0:	6962      	ldr	r2, [r4, #20]
  4061e2:	429a      	cmp	r2, r3
  4061e4:	d01a      	beq.n	40621c <__swbuf_r+0x80>
  4061e6:	89a3      	ldrh	r3, [r4, #12]
  4061e8:	07db      	lsls	r3, r3, #31
  4061ea:	d501      	bpl.n	4061f0 <__swbuf_r+0x54>
  4061ec:	2d0a      	cmp	r5, #10
  4061ee:	d015      	beq.n	40621c <__swbuf_r+0x80>
  4061f0:	4638      	mov	r0, r7
  4061f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4061f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4061f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4061fa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4061fe:	81a2      	strh	r2, [r4, #12]
  406200:	6822      	ldr	r2, [r4, #0]
  406202:	6661      	str	r1, [r4, #100]	; 0x64
  406204:	6961      	ldr	r1, [r4, #20]
  406206:	1ad3      	subs	r3, r2, r3
  406208:	428b      	cmp	r3, r1
  40620a:	dbe2      	blt.n	4061d2 <__swbuf_r+0x36>
  40620c:	4621      	mov	r1, r4
  40620e:	4630      	mov	r0, r6
  406210:	f7fe fffc 	bl	40520c <_fflush_r>
  406214:	b940      	cbnz	r0, 406228 <__swbuf_r+0x8c>
  406216:	6822      	ldr	r2, [r4, #0]
  406218:	2301      	movs	r3, #1
  40621a:	e7db      	b.n	4061d4 <__swbuf_r+0x38>
  40621c:	4621      	mov	r1, r4
  40621e:	4630      	mov	r0, r6
  406220:	f7fe fff4 	bl	40520c <_fflush_r>
  406224:	2800      	cmp	r0, #0
  406226:	d0e3      	beq.n	4061f0 <__swbuf_r+0x54>
  406228:	f04f 37ff 	mov.w	r7, #4294967295
  40622c:	e7e0      	b.n	4061f0 <__swbuf_r+0x54>
  40622e:	4621      	mov	r1, r4
  406230:	4630      	mov	r0, r6
  406232:	f7fe fed7 	bl	404fe4 <__swsetup_r>
  406236:	2800      	cmp	r0, #0
  406238:	d1f6      	bne.n	406228 <__swbuf_r+0x8c>
  40623a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40623e:	6923      	ldr	r3, [r4, #16]
  406240:	b291      	uxth	r1, r2
  406242:	e7bd      	b.n	4061c0 <__swbuf_r+0x24>
  406244:	f7ff f83a 	bl	4052bc <__sinit>
  406248:	e7b0      	b.n	4061ac <__swbuf_r+0x10>
  40624a:	bf00      	nop

0040624c <_wcrtomb_r>:
  40624c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40624e:	4606      	mov	r6, r0
  406250:	b085      	sub	sp, #20
  406252:	461f      	mov	r7, r3
  406254:	b189      	cbz	r1, 40627a <_wcrtomb_r+0x2e>
  406256:	4c10      	ldr	r4, [pc, #64]	; (406298 <_wcrtomb_r+0x4c>)
  406258:	4d10      	ldr	r5, [pc, #64]	; (40629c <_wcrtomb_r+0x50>)
  40625a:	6824      	ldr	r4, [r4, #0]
  40625c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40625e:	2c00      	cmp	r4, #0
  406260:	bf08      	it	eq
  406262:	462c      	moveq	r4, r5
  406264:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406268:	47a0      	blx	r4
  40626a:	1c43      	adds	r3, r0, #1
  40626c:	d103      	bne.n	406276 <_wcrtomb_r+0x2a>
  40626e:	2200      	movs	r2, #0
  406270:	238a      	movs	r3, #138	; 0x8a
  406272:	603a      	str	r2, [r7, #0]
  406274:	6033      	str	r3, [r6, #0]
  406276:	b005      	add	sp, #20
  406278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40627a:	460c      	mov	r4, r1
  40627c:	4906      	ldr	r1, [pc, #24]	; (406298 <_wcrtomb_r+0x4c>)
  40627e:	4a07      	ldr	r2, [pc, #28]	; (40629c <_wcrtomb_r+0x50>)
  406280:	6809      	ldr	r1, [r1, #0]
  406282:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406284:	2900      	cmp	r1, #0
  406286:	bf08      	it	eq
  406288:	4611      	moveq	r1, r2
  40628a:	4622      	mov	r2, r4
  40628c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406290:	a901      	add	r1, sp, #4
  406292:	47a0      	blx	r4
  406294:	e7e9      	b.n	40626a <_wcrtomb_r+0x1e>
  406296:	bf00      	nop
  406298:	20400010 	.word	0x20400010
  40629c:	20400854 	.word	0x20400854

004062a0 <__ascii_wctomb>:
  4062a0:	b121      	cbz	r1, 4062ac <__ascii_wctomb+0xc>
  4062a2:	2aff      	cmp	r2, #255	; 0xff
  4062a4:	d804      	bhi.n	4062b0 <__ascii_wctomb+0x10>
  4062a6:	700a      	strb	r2, [r1, #0]
  4062a8:	2001      	movs	r0, #1
  4062aa:	4770      	bx	lr
  4062ac:	4608      	mov	r0, r1
  4062ae:	4770      	bx	lr
  4062b0:	238a      	movs	r3, #138	; 0x8a
  4062b2:	6003      	str	r3, [r0, #0]
  4062b4:	f04f 30ff 	mov.w	r0, #4294967295
  4062b8:	4770      	bx	lr
  4062ba:	bf00      	nop

004062bc <_write_r>:
  4062bc:	b570      	push	{r4, r5, r6, lr}
  4062be:	460d      	mov	r5, r1
  4062c0:	4c08      	ldr	r4, [pc, #32]	; (4062e4 <_write_r+0x28>)
  4062c2:	4611      	mov	r1, r2
  4062c4:	4606      	mov	r6, r0
  4062c6:	461a      	mov	r2, r3
  4062c8:	4628      	mov	r0, r5
  4062ca:	2300      	movs	r3, #0
  4062cc:	6023      	str	r3, [r4, #0]
  4062ce:	f7fa ff5f 	bl	401190 <_write>
  4062d2:	1c43      	adds	r3, r0, #1
  4062d4:	d000      	beq.n	4062d8 <_write_r+0x1c>
  4062d6:	bd70      	pop	{r4, r5, r6, pc}
  4062d8:	6823      	ldr	r3, [r4, #0]
  4062da:	2b00      	cmp	r3, #0
  4062dc:	d0fb      	beq.n	4062d6 <_write_r+0x1a>
  4062de:	6033      	str	r3, [r6, #0]
  4062e0:	bd70      	pop	{r4, r5, r6, pc}
  4062e2:	bf00      	nop
  4062e4:	2040122c 	.word	0x2040122c

004062e8 <__register_exitproc>:
  4062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062ec:	4d2c      	ldr	r5, [pc, #176]	; (4063a0 <__register_exitproc+0xb8>)
  4062ee:	4606      	mov	r6, r0
  4062f0:	6828      	ldr	r0, [r5, #0]
  4062f2:	4698      	mov	r8, r3
  4062f4:	460f      	mov	r7, r1
  4062f6:	4691      	mov	r9, r2
  4062f8:	f7ff fba0 	bl	405a3c <__retarget_lock_acquire_recursive>
  4062fc:	4b29      	ldr	r3, [pc, #164]	; (4063a4 <__register_exitproc+0xbc>)
  4062fe:	681c      	ldr	r4, [r3, #0]
  406300:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406304:	2b00      	cmp	r3, #0
  406306:	d03e      	beq.n	406386 <__register_exitproc+0x9e>
  406308:	685a      	ldr	r2, [r3, #4]
  40630a:	2a1f      	cmp	r2, #31
  40630c:	dc1c      	bgt.n	406348 <__register_exitproc+0x60>
  40630e:	f102 0e01 	add.w	lr, r2, #1
  406312:	b176      	cbz	r6, 406332 <__register_exitproc+0x4a>
  406314:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406318:	2401      	movs	r4, #1
  40631a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40631e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406322:	4094      	lsls	r4, r2
  406324:	4320      	orrs	r0, r4
  406326:	2e02      	cmp	r6, #2
  406328:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40632c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406330:	d023      	beq.n	40637a <__register_exitproc+0x92>
  406332:	3202      	adds	r2, #2
  406334:	f8c3 e004 	str.w	lr, [r3, #4]
  406338:	6828      	ldr	r0, [r5, #0]
  40633a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40633e:	f7ff fb7f 	bl	405a40 <__retarget_lock_release_recursive>
  406342:	2000      	movs	r0, #0
  406344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406348:	4b17      	ldr	r3, [pc, #92]	; (4063a8 <__register_exitproc+0xc0>)
  40634a:	b30b      	cbz	r3, 406390 <__register_exitproc+0xa8>
  40634c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406350:	f7fd faf0 	bl	403934 <malloc>
  406354:	4603      	mov	r3, r0
  406356:	b1d8      	cbz	r0, 406390 <__register_exitproc+0xa8>
  406358:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40635c:	6002      	str	r2, [r0, #0]
  40635e:	2100      	movs	r1, #0
  406360:	6041      	str	r1, [r0, #4]
  406362:	460a      	mov	r2, r1
  406364:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406368:	f04f 0e01 	mov.w	lr, #1
  40636c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406370:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406374:	2e00      	cmp	r6, #0
  406376:	d0dc      	beq.n	406332 <__register_exitproc+0x4a>
  406378:	e7cc      	b.n	406314 <__register_exitproc+0x2c>
  40637a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40637e:	430c      	orrs	r4, r1
  406380:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406384:	e7d5      	b.n	406332 <__register_exitproc+0x4a>
  406386:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40638a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40638e:	e7bb      	b.n	406308 <__register_exitproc+0x20>
  406390:	6828      	ldr	r0, [r5, #0]
  406392:	f7ff fb55 	bl	405a40 <__retarget_lock_release_recursive>
  406396:	f04f 30ff 	mov.w	r0, #4294967295
  40639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40639e:	bf00      	nop
  4063a0:	20400850 	.word	0x20400850
  4063a4:	00406908 	.word	0x00406908
  4063a8:	00403935 	.word	0x00403935

004063ac <_close_r>:
  4063ac:	b538      	push	{r3, r4, r5, lr}
  4063ae:	4c07      	ldr	r4, [pc, #28]	; (4063cc <_close_r+0x20>)
  4063b0:	2300      	movs	r3, #0
  4063b2:	4605      	mov	r5, r0
  4063b4:	4608      	mov	r0, r1
  4063b6:	6023      	str	r3, [r4, #0]
  4063b8:	f7fb fd5c 	bl	401e74 <_close>
  4063bc:	1c43      	adds	r3, r0, #1
  4063be:	d000      	beq.n	4063c2 <_close_r+0x16>
  4063c0:	bd38      	pop	{r3, r4, r5, pc}
  4063c2:	6823      	ldr	r3, [r4, #0]
  4063c4:	2b00      	cmp	r3, #0
  4063c6:	d0fb      	beq.n	4063c0 <_close_r+0x14>
  4063c8:	602b      	str	r3, [r5, #0]
  4063ca:	bd38      	pop	{r3, r4, r5, pc}
  4063cc:	2040122c 	.word	0x2040122c

004063d0 <_fclose_r>:
  4063d0:	b570      	push	{r4, r5, r6, lr}
  4063d2:	b159      	cbz	r1, 4063ec <_fclose_r+0x1c>
  4063d4:	4605      	mov	r5, r0
  4063d6:	460c      	mov	r4, r1
  4063d8:	b110      	cbz	r0, 4063e0 <_fclose_r+0x10>
  4063da:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063dc:	2b00      	cmp	r3, #0
  4063de:	d03c      	beq.n	40645a <_fclose_r+0x8a>
  4063e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4063e2:	07d8      	lsls	r0, r3, #31
  4063e4:	d505      	bpl.n	4063f2 <_fclose_r+0x22>
  4063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063ea:	b92b      	cbnz	r3, 4063f8 <_fclose_r+0x28>
  4063ec:	2600      	movs	r6, #0
  4063ee:	4630      	mov	r0, r6
  4063f0:	bd70      	pop	{r4, r5, r6, pc}
  4063f2:	89a3      	ldrh	r3, [r4, #12]
  4063f4:	0599      	lsls	r1, r3, #22
  4063f6:	d53c      	bpl.n	406472 <_fclose_r+0xa2>
  4063f8:	4621      	mov	r1, r4
  4063fa:	4628      	mov	r0, r5
  4063fc:	f7fe fe66 	bl	4050cc <__sflush_r>
  406400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406402:	4606      	mov	r6, r0
  406404:	b133      	cbz	r3, 406414 <_fclose_r+0x44>
  406406:	69e1      	ldr	r1, [r4, #28]
  406408:	4628      	mov	r0, r5
  40640a:	4798      	blx	r3
  40640c:	2800      	cmp	r0, #0
  40640e:	bfb8      	it	lt
  406410:	f04f 36ff 	movlt.w	r6, #4294967295
  406414:	89a3      	ldrh	r3, [r4, #12]
  406416:	061a      	lsls	r2, r3, #24
  406418:	d422      	bmi.n	406460 <_fclose_r+0x90>
  40641a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40641c:	b141      	cbz	r1, 406430 <_fclose_r+0x60>
  40641e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406422:	4299      	cmp	r1, r3
  406424:	d002      	beq.n	40642c <_fclose_r+0x5c>
  406426:	4628      	mov	r0, r5
  406428:	f7ff f86e 	bl	405508 <_free_r>
  40642c:	2300      	movs	r3, #0
  40642e:	6323      	str	r3, [r4, #48]	; 0x30
  406430:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406432:	b121      	cbz	r1, 40643e <_fclose_r+0x6e>
  406434:	4628      	mov	r0, r5
  406436:	f7ff f867 	bl	405508 <_free_r>
  40643a:	2300      	movs	r3, #0
  40643c:	6463      	str	r3, [r4, #68]	; 0x44
  40643e:	f7fe ff69 	bl	405314 <__sfp_lock_acquire>
  406442:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406444:	2200      	movs	r2, #0
  406446:	07db      	lsls	r3, r3, #31
  406448:	81a2      	strh	r2, [r4, #12]
  40644a:	d50e      	bpl.n	40646a <_fclose_r+0x9a>
  40644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40644e:	f7ff faf3 	bl	405a38 <__retarget_lock_close_recursive>
  406452:	f7fe ff65 	bl	405320 <__sfp_lock_release>
  406456:	4630      	mov	r0, r6
  406458:	bd70      	pop	{r4, r5, r6, pc}
  40645a:	f7fe ff2f 	bl	4052bc <__sinit>
  40645e:	e7bf      	b.n	4063e0 <_fclose_r+0x10>
  406460:	6921      	ldr	r1, [r4, #16]
  406462:	4628      	mov	r0, r5
  406464:	f7ff f850 	bl	405508 <_free_r>
  406468:	e7d7      	b.n	40641a <_fclose_r+0x4a>
  40646a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40646c:	f7ff fae8 	bl	405a40 <__retarget_lock_release_recursive>
  406470:	e7ec      	b.n	40644c <_fclose_r+0x7c>
  406472:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406474:	f7ff fae2 	bl	405a3c <__retarget_lock_acquire_recursive>
  406478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40647c:	2b00      	cmp	r3, #0
  40647e:	d1bb      	bne.n	4063f8 <_fclose_r+0x28>
  406480:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406482:	f016 0601 	ands.w	r6, r6, #1
  406486:	d1b1      	bne.n	4063ec <_fclose_r+0x1c>
  406488:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40648a:	f7ff fad9 	bl	405a40 <__retarget_lock_release_recursive>
  40648e:	4630      	mov	r0, r6
  406490:	bd70      	pop	{r4, r5, r6, pc}
  406492:	bf00      	nop

00406494 <_fstat_r>:
  406494:	b538      	push	{r3, r4, r5, lr}
  406496:	460b      	mov	r3, r1
  406498:	4c07      	ldr	r4, [pc, #28]	; (4064b8 <_fstat_r+0x24>)
  40649a:	4605      	mov	r5, r0
  40649c:	4611      	mov	r1, r2
  40649e:	4618      	mov	r0, r3
  4064a0:	2300      	movs	r3, #0
  4064a2:	6023      	str	r3, [r4, #0]
  4064a4:	f7fb fcf2 	bl	401e8c <_fstat>
  4064a8:	1c43      	adds	r3, r0, #1
  4064aa:	d000      	beq.n	4064ae <_fstat_r+0x1a>
  4064ac:	bd38      	pop	{r3, r4, r5, pc}
  4064ae:	6823      	ldr	r3, [r4, #0]
  4064b0:	2b00      	cmp	r3, #0
  4064b2:	d0fb      	beq.n	4064ac <_fstat_r+0x18>
  4064b4:	602b      	str	r3, [r5, #0]
  4064b6:	bd38      	pop	{r3, r4, r5, pc}
  4064b8:	2040122c 	.word	0x2040122c

004064bc <_isatty_r>:
  4064bc:	b538      	push	{r3, r4, r5, lr}
  4064be:	4c07      	ldr	r4, [pc, #28]	; (4064dc <_isatty_r+0x20>)
  4064c0:	2300      	movs	r3, #0
  4064c2:	4605      	mov	r5, r0
  4064c4:	4608      	mov	r0, r1
  4064c6:	6023      	str	r3, [r4, #0]
  4064c8:	f7fb fcf0 	bl	401eac <_isatty>
  4064cc:	1c43      	adds	r3, r0, #1
  4064ce:	d000      	beq.n	4064d2 <_isatty_r+0x16>
  4064d0:	bd38      	pop	{r3, r4, r5, pc}
  4064d2:	6823      	ldr	r3, [r4, #0]
  4064d4:	2b00      	cmp	r3, #0
  4064d6:	d0fb      	beq.n	4064d0 <_isatty_r+0x14>
  4064d8:	602b      	str	r3, [r5, #0]
  4064da:	bd38      	pop	{r3, r4, r5, pc}
  4064dc:	2040122c 	.word	0x2040122c

004064e0 <_lseek_r>:
  4064e0:	b570      	push	{r4, r5, r6, lr}
  4064e2:	460d      	mov	r5, r1
  4064e4:	4c08      	ldr	r4, [pc, #32]	; (406508 <_lseek_r+0x28>)
  4064e6:	4611      	mov	r1, r2
  4064e8:	4606      	mov	r6, r0
  4064ea:	461a      	mov	r2, r3
  4064ec:	4628      	mov	r0, r5
  4064ee:	2300      	movs	r3, #0
  4064f0:	6023      	str	r3, [r4, #0]
  4064f2:	f7fb fce6 	bl	401ec2 <_lseek>
  4064f6:	1c43      	adds	r3, r0, #1
  4064f8:	d000      	beq.n	4064fc <_lseek_r+0x1c>
  4064fa:	bd70      	pop	{r4, r5, r6, pc}
  4064fc:	6823      	ldr	r3, [r4, #0]
  4064fe:	2b00      	cmp	r3, #0
  406500:	d0fb      	beq.n	4064fa <_lseek_r+0x1a>
  406502:	6033      	str	r3, [r6, #0]
  406504:	bd70      	pop	{r4, r5, r6, pc}
  406506:	bf00      	nop
  406508:	2040122c 	.word	0x2040122c

0040650c <_read_r>:
  40650c:	b570      	push	{r4, r5, r6, lr}
  40650e:	460d      	mov	r5, r1
  406510:	4c08      	ldr	r4, [pc, #32]	; (406534 <_read_r+0x28>)
  406512:	4611      	mov	r1, r2
  406514:	4606      	mov	r6, r0
  406516:	461a      	mov	r2, r3
  406518:	4628      	mov	r0, r5
  40651a:	2300      	movs	r3, #0
  40651c:	6023      	str	r3, [r4, #0]
  40651e:	f7fa fe0d 	bl	40113c <_read>
  406522:	1c43      	adds	r3, r0, #1
  406524:	d000      	beq.n	406528 <_read_r+0x1c>
  406526:	bd70      	pop	{r4, r5, r6, pc}
  406528:	6823      	ldr	r3, [r4, #0]
  40652a:	2b00      	cmp	r3, #0
  40652c:	d0fb      	beq.n	406526 <_read_r+0x1a>
  40652e:	6033      	str	r3, [r6, #0]
  406530:	bd70      	pop	{r4, r5, r6, pc}
  406532:	bf00      	nop
  406534:	2040122c 	.word	0x2040122c

00406538 <__aeabi_uldivmod>:
  406538:	b953      	cbnz	r3, 406550 <__aeabi_uldivmod+0x18>
  40653a:	b94a      	cbnz	r2, 406550 <__aeabi_uldivmod+0x18>
  40653c:	2900      	cmp	r1, #0
  40653e:	bf08      	it	eq
  406540:	2800      	cmpeq	r0, #0
  406542:	bf1c      	itt	ne
  406544:	f04f 31ff 	movne.w	r1, #4294967295
  406548:	f04f 30ff 	movne.w	r0, #4294967295
  40654c:	f000 b97a 	b.w	406844 <__aeabi_idiv0>
  406550:	f1ad 0c08 	sub.w	ip, sp, #8
  406554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406558:	f000 f806 	bl	406568 <__udivmoddi4>
  40655c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406564:	b004      	add	sp, #16
  406566:	4770      	bx	lr

00406568 <__udivmoddi4>:
  406568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40656c:	468c      	mov	ip, r1
  40656e:	460d      	mov	r5, r1
  406570:	4604      	mov	r4, r0
  406572:	9e08      	ldr	r6, [sp, #32]
  406574:	2b00      	cmp	r3, #0
  406576:	d151      	bne.n	40661c <__udivmoddi4+0xb4>
  406578:	428a      	cmp	r2, r1
  40657a:	4617      	mov	r7, r2
  40657c:	d96d      	bls.n	40665a <__udivmoddi4+0xf2>
  40657e:	fab2 fe82 	clz	lr, r2
  406582:	f1be 0f00 	cmp.w	lr, #0
  406586:	d00b      	beq.n	4065a0 <__udivmoddi4+0x38>
  406588:	f1ce 0c20 	rsb	ip, lr, #32
  40658c:	fa01 f50e 	lsl.w	r5, r1, lr
  406590:	fa20 fc0c 	lsr.w	ip, r0, ip
  406594:	fa02 f70e 	lsl.w	r7, r2, lr
  406598:	ea4c 0c05 	orr.w	ip, ip, r5
  40659c:	fa00 f40e 	lsl.w	r4, r0, lr
  4065a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4065a4:	0c25      	lsrs	r5, r4, #16
  4065a6:	fbbc f8fa 	udiv	r8, ip, sl
  4065aa:	fa1f f987 	uxth.w	r9, r7
  4065ae:	fb0a cc18 	mls	ip, sl, r8, ip
  4065b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4065b6:	fb08 f309 	mul.w	r3, r8, r9
  4065ba:	42ab      	cmp	r3, r5
  4065bc:	d90a      	bls.n	4065d4 <__udivmoddi4+0x6c>
  4065be:	19ed      	adds	r5, r5, r7
  4065c0:	f108 32ff 	add.w	r2, r8, #4294967295
  4065c4:	f080 8123 	bcs.w	40680e <__udivmoddi4+0x2a6>
  4065c8:	42ab      	cmp	r3, r5
  4065ca:	f240 8120 	bls.w	40680e <__udivmoddi4+0x2a6>
  4065ce:	f1a8 0802 	sub.w	r8, r8, #2
  4065d2:	443d      	add	r5, r7
  4065d4:	1aed      	subs	r5, r5, r3
  4065d6:	b2a4      	uxth	r4, r4
  4065d8:	fbb5 f0fa 	udiv	r0, r5, sl
  4065dc:	fb0a 5510 	mls	r5, sl, r0, r5
  4065e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4065e4:	fb00 f909 	mul.w	r9, r0, r9
  4065e8:	45a1      	cmp	r9, r4
  4065ea:	d909      	bls.n	406600 <__udivmoddi4+0x98>
  4065ec:	19e4      	adds	r4, r4, r7
  4065ee:	f100 33ff 	add.w	r3, r0, #4294967295
  4065f2:	f080 810a 	bcs.w	40680a <__udivmoddi4+0x2a2>
  4065f6:	45a1      	cmp	r9, r4
  4065f8:	f240 8107 	bls.w	40680a <__udivmoddi4+0x2a2>
  4065fc:	3802      	subs	r0, #2
  4065fe:	443c      	add	r4, r7
  406600:	eba4 0409 	sub.w	r4, r4, r9
  406604:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406608:	2100      	movs	r1, #0
  40660a:	2e00      	cmp	r6, #0
  40660c:	d061      	beq.n	4066d2 <__udivmoddi4+0x16a>
  40660e:	fa24 f40e 	lsr.w	r4, r4, lr
  406612:	2300      	movs	r3, #0
  406614:	6034      	str	r4, [r6, #0]
  406616:	6073      	str	r3, [r6, #4]
  406618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40661c:	428b      	cmp	r3, r1
  40661e:	d907      	bls.n	406630 <__udivmoddi4+0xc8>
  406620:	2e00      	cmp	r6, #0
  406622:	d054      	beq.n	4066ce <__udivmoddi4+0x166>
  406624:	2100      	movs	r1, #0
  406626:	e886 0021 	stmia.w	r6, {r0, r5}
  40662a:	4608      	mov	r0, r1
  40662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406630:	fab3 f183 	clz	r1, r3
  406634:	2900      	cmp	r1, #0
  406636:	f040 808e 	bne.w	406756 <__udivmoddi4+0x1ee>
  40663a:	42ab      	cmp	r3, r5
  40663c:	d302      	bcc.n	406644 <__udivmoddi4+0xdc>
  40663e:	4282      	cmp	r2, r0
  406640:	f200 80fa 	bhi.w	406838 <__udivmoddi4+0x2d0>
  406644:	1a84      	subs	r4, r0, r2
  406646:	eb65 0503 	sbc.w	r5, r5, r3
  40664a:	2001      	movs	r0, #1
  40664c:	46ac      	mov	ip, r5
  40664e:	2e00      	cmp	r6, #0
  406650:	d03f      	beq.n	4066d2 <__udivmoddi4+0x16a>
  406652:	e886 1010 	stmia.w	r6, {r4, ip}
  406656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40665a:	b912      	cbnz	r2, 406662 <__udivmoddi4+0xfa>
  40665c:	2701      	movs	r7, #1
  40665e:	fbb7 f7f2 	udiv	r7, r7, r2
  406662:	fab7 fe87 	clz	lr, r7
  406666:	f1be 0f00 	cmp.w	lr, #0
  40666a:	d134      	bne.n	4066d6 <__udivmoddi4+0x16e>
  40666c:	1beb      	subs	r3, r5, r7
  40666e:	0c3a      	lsrs	r2, r7, #16
  406670:	fa1f fc87 	uxth.w	ip, r7
  406674:	2101      	movs	r1, #1
  406676:	fbb3 f8f2 	udiv	r8, r3, r2
  40667a:	0c25      	lsrs	r5, r4, #16
  40667c:	fb02 3318 	mls	r3, r2, r8, r3
  406680:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406684:	fb0c f308 	mul.w	r3, ip, r8
  406688:	42ab      	cmp	r3, r5
  40668a:	d907      	bls.n	40669c <__udivmoddi4+0x134>
  40668c:	19ed      	adds	r5, r5, r7
  40668e:	f108 30ff 	add.w	r0, r8, #4294967295
  406692:	d202      	bcs.n	40669a <__udivmoddi4+0x132>
  406694:	42ab      	cmp	r3, r5
  406696:	f200 80d1 	bhi.w	40683c <__udivmoddi4+0x2d4>
  40669a:	4680      	mov	r8, r0
  40669c:	1aed      	subs	r5, r5, r3
  40669e:	b2a3      	uxth	r3, r4
  4066a0:	fbb5 f0f2 	udiv	r0, r5, r2
  4066a4:	fb02 5510 	mls	r5, r2, r0, r5
  4066a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4066ac:	fb0c fc00 	mul.w	ip, ip, r0
  4066b0:	45a4      	cmp	ip, r4
  4066b2:	d907      	bls.n	4066c4 <__udivmoddi4+0x15c>
  4066b4:	19e4      	adds	r4, r4, r7
  4066b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4066ba:	d202      	bcs.n	4066c2 <__udivmoddi4+0x15a>
  4066bc:	45a4      	cmp	ip, r4
  4066be:	f200 80b8 	bhi.w	406832 <__udivmoddi4+0x2ca>
  4066c2:	4618      	mov	r0, r3
  4066c4:	eba4 040c 	sub.w	r4, r4, ip
  4066c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4066cc:	e79d      	b.n	40660a <__udivmoddi4+0xa2>
  4066ce:	4631      	mov	r1, r6
  4066d0:	4630      	mov	r0, r6
  4066d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066d6:	f1ce 0420 	rsb	r4, lr, #32
  4066da:	fa05 f30e 	lsl.w	r3, r5, lr
  4066de:	fa07 f70e 	lsl.w	r7, r7, lr
  4066e2:	fa20 f804 	lsr.w	r8, r0, r4
  4066e6:	0c3a      	lsrs	r2, r7, #16
  4066e8:	fa25 f404 	lsr.w	r4, r5, r4
  4066ec:	ea48 0803 	orr.w	r8, r8, r3
  4066f0:	fbb4 f1f2 	udiv	r1, r4, r2
  4066f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4066f8:	fb02 4411 	mls	r4, r2, r1, r4
  4066fc:	fa1f fc87 	uxth.w	ip, r7
  406700:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406704:	fb01 f30c 	mul.w	r3, r1, ip
  406708:	42ab      	cmp	r3, r5
  40670a:	fa00 f40e 	lsl.w	r4, r0, lr
  40670e:	d909      	bls.n	406724 <__udivmoddi4+0x1bc>
  406710:	19ed      	adds	r5, r5, r7
  406712:	f101 30ff 	add.w	r0, r1, #4294967295
  406716:	f080 808a 	bcs.w	40682e <__udivmoddi4+0x2c6>
  40671a:	42ab      	cmp	r3, r5
  40671c:	f240 8087 	bls.w	40682e <__udivmoddi4+0x2c6>
  406720:	3902      	subs	r1, #2
  406722:	443d      	add	r5, r7
  406724:	1aeb      	subs	r3, r5, r3
  406726:	fa1f f588 	uxth.w	r5, r8
  40672a:	fbb3 f0f2 	udiv	r0, r3, r2
  40672e:	fb02 3310 	mls	r3, r2, r0, r3
  406732:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406736:	fb00 f30c 	mul.w	r3, r0, ip
  40673a:	42ab      	cmp	r3, r5
  40673c:	d907      	bls.n	40674e <__udivmoddi4+0x1e6>
  40673e:	19ed      	adds	r5, r5, r7
  406740:	f100 38ff 	add.w	r8, r0, #4294967295
  406744:	d26f      	bcs.n	406826 <__udivmoddi4+0x2be>
  406746:	42ab      	cmp	r3, r5
  406748:	d96d      	bls.n	406826 <__udivmoddi4+0x2be>
  40674a:	3802      	subs	r0, #2
  40674c:	443d      	add	r5, r7
  40674e:	1aeb      	subs	r3, r5, r3
  406750:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406754:	e78f      	b.n	406676 <__udivmoddi4+0x10e>
  406756:	f1c1 0720 	rsb	r7, r1, #32
  40675a:	fa22 f807 	lsr.w	r8, r2, r7
  40675e:	408b      	lsls	r3, r1
  406760:	fa05 f401 	lsl.w	r4, r5, r1
  406764:	ea48 0303 	orr.w	r3, r8, r3
  406768:	fa20 fe07 	lsr.w	lr, r0, r7
  40676c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406770:	40fd      	lsrs	r5, r7
  406772:	ea4e 0e04 	orr.w	lr, lr, r4
  406776:	fbb5 f9fc 	udiv	r9, r5, ip
  40677a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40677e:	fb0c 5519 	mls	r5, ip, r9, r5
  406782:	fa1f f883 	uxth.w	r8, r3
  406786:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40678a:	fb09 f408 	mul.w	r4, r9, r8
  40678e:	42ac      	cmp	r4, r5
  406790:	fa02 f201 	lsl.w	r2, r2, r1
  406794:	fa00 fa01 	lsl.w	sl, r0, r1
  406798:	d908      	bls.n	4067ac <__udivmoddi4+0x244>
  40679a:	18ed      	adds	r5, r5, r3
  40679c:	f109 30ff 	add.w	r0, r9, #4294967295
  4067a0:	d243      	bcs.n	40682a <__udivmoddi4+0x2c2>
  4067a2:	42ac      	cmp	r4, r5
  4067a4:	d941      	bls.n	40682a <__udivmoddi4+0x2c2>
  4067a6:	f1a9 0902 	sub.w	r9, r9, #2
  4067aa:	441d      	add	r5, r3
  4067ac:	1b2d      	subs	r5, r5, r4
  4067ae:	fa1f fe8e 	uxth.w	lr, lr
  4067b2:	fbb5 f0fc 	udiv	r0, r5, ip
  4067b6:	fb0c 5510 	mls	r5, ip, r0, r5
  4067ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4067be:	fb00 f808 	mul.w	r8, r0, r8
  4067c2:	45a0      	cmp	r8, r4
  4067c4:	d907      	bls.n	4067d6 <__udivmoddi4+0x26e>
  4067c6:	18e4      	adds	r4, r4, r3
  4067c8:	f100 35ff 	add.w	r5, r0, #4294967295
  4067cc:	d229      	bcs.n	406822 <__udivmoddi4+0x2ba>
  4067ce:	45a0      	cmp	r8, r4
  4067d0:	d927      	bls.n	406822 <__udivmoddi4+0x2ba>
  4067d2:	3802      	subs	r0, #2
  4067d4:	441c      	add	r4, r3
  4067d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4067da:	eba4 0408 	sub.w	r4, r4, r8
  4067de:	fba0 8902 	umull	r8, r9, r0, r2
  4067e2:	454c      	cmp	r4, r9
  4067e4:	46c6      	mov	lr, r8
  4067e6:	464d      	mov	r5, r9
  4067e8:	d315      	bcc.n	406816 <__udivmoddi4+0x2ae>
  4067ea:	d012      	beq.n	406812 <__udivmoddi4+0x2aa>
  4067ec:	b156      	cbz	r6, 406804 <__udivmoddi4+0x29c>
  4067ee:	ebba 030e 	subs.w	r3, sl, lr
  4067f2:	eb64 0405 	sbc.w	r4, r4, r5
  4067f6:	fa04 f707 	lsl.w	r7, r4, r7
  4067fa:	40cb      	lsrs	r3, r1
  4067fc:	431f      	orrs	r7, r3
  4067fe:	40cc      	lsrs	r4, r1
  406800:	6037      	str	r7, [r6, #0]
  406802:	6074      	str	r4, [r6, #4]
  406804:	2100      	movs	r1, #0
  406806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40680a:	4618      	mov	r0, r3
  40680c:	e6f8      	b.n	406600 <__udivmoddi4+0x98>
  40680e:	4690      	mov	r8, r2
  406810:	e6e0      	b.n	4065d4 <__udivmoddi4+0x6c>
  406812:	45c2      	cmp	sl, r8
  406814:	d2ea      	bcs.n	4067ec <__udivmoddi4+0x284>
  406816:	ebb8 0e02 	subs.w	lr, r8, r2
  40681a:	eb69 0503 	sbc.w	r5, r9, r3
  40681e:	3801      	subs	r0, #1
  406820:	e7e4      	b.n	4067ec <__udivmoddi4+0x284>
  406822:	4628      	mov	r0, r5
  406824:	e7d7      	b.n	4067d6 <__udivmoddi4+0x26e>
  406826:	4640      	mov	r0, r8
  406828:	e791      	b.n	40674e <__udivmoddi4+0x1e6>
  40682a:	4681      	mov	r9, r0
  40682c:	e7be      	b.n	4067ac <__udivmoddi4+0x244>
  40682e:	4601      	mov	r1, r0
  406830:	e778      	b.n	406724 <__udivmoddi4+0x1bc>
  406832:	3802      	subs	r0, #2
  406834:	443c      	add	r4, r7
  406836:	e745      	b.n	4066c4 <__udivmoddi4+0x15c>
  406838:	4608      	mov	r0, r1
  40683a:	e708      	b.n	40664e <__udivmoddi4+0xe6>
  40683c:	f1a8 0802 	sub.w	r8, r8, #2
  406840:	443d      	add	r5, r7
  406842:	e72b      	b.n	40669c <__udivmoddi4+0x134>

00406844 <__aeabi_idiv0>:
  406844:	4770      	bx	lr
  406846:	bf00      	nop
  406848:	0001c200 	.word	0x0001c200
  40684c:	000000c0 	.word	0x000000c0
  406850:	00000800 	.word	0x00000800
  406854:	00000000 	.word	0x00000000
  406858:	5d69255b 	.word	0x5d69255b
  40685c:	6c6c255b 	.word	0x6c6c255b
  406860:	00005d75 	.word	0x00005d75
  406864:	29582528 	.word	0x29582528
  406868:	00000000 	.word	0x00000000
  40686c:	2578307c 	.word	0x2578307c
  406870:	00005832 	.word	0x00005832
  406874:	000a0d7c 	.word	0x000a0d7c
  406878:	5f5f5f5f 	.word	0x5f5f5f5f
  40687c:	5f5f5f5f 	.word	0x5f5f5f5f
  406880:	5f5f5f5f 	.word	0x5f5f5f5f
  406884:	5f5f5f5f 	.word	0x5f5f5f5f
  406888:	5f5f5f5f 	.word	0x5f5f5f5f
  40688c:	5f5f5f5f 	.word	0x5f5f5f5f
  406890:	52415453 	.word	0x52415453
  406894:	5f5f5f54 	.word	0x5f5f5f54
  406898:	5f5f5f5f 	.word	0x5f5f5f5f
  40689c:	5f5f5f5f 	.word	0x5f5f5f5f
  4068a0:	5f5f5f5f 	.word	0x5f5f5f5f
  4068a4:	5f5f5f5f 	.word	0x5f5f5f5f
  4068a8:	5f5f5f5f 	.word	0x5f5f5f5f
  4068ac:	5f5f5f5f 	.word	0x5f5f5f5f
  4068b0:	5f5f5f5f 	.word	0x5f5f5f5f
  4068b4:	5f5f5f5f 	.word	0x5f5f5f5f
  4068b8:	0a0d5f5f 	.word	0x0a0d5f5f
  4068bc:	00000000 	.word	0x00000000
  4068c0:	2d2d2d2d 	.word	0x2d2d2d2d
  4068c4:	2d2d2d2d 	.word	0x2d2d2d2d
  4068c8:	2d2d2d2d 	.word	0x2d2d2d2d
  4068cc:	2d2d2d2d 	.word	0x2d2d2d2d
  4068d0:	2d2d2d2d 	.word	0x2d2d2d2d
  4068d4:	2d2d2d2d 	.word	0x2d2d2d2d
  4068d8:	2d2d2d2d 	.word	0x2d2d2d2d
  4068dc:	2d2d2d2d 	.word	0x2d2d2d2d
  4068e0:	2d69252d 	.word	0x2d69252d
  4068e4:	2d2d2d2d 	.word	0x2d2d2d2d
  4068e8:	2d2d2d2d 	.word	0x2d2d2d2d
  4068ec:	2d2d2d2d 	.word	0x2d2d2d2d
  4068f0:	2d2d2d2d 	.word	0x2d2d2d2d
  4068f4:	2d2d2d2d 	.word	0x2d2d2d2d
  4068f8:	2d2d2d2d 	.word	0x2d2d2d2d
  4068fc:	2d2d2d2d 	.word	0x2d2d2d2d
  406900:	0d2d2d2d 	.word	0x0d2d2d2d
  406904:	0000000a 	.word	0x0000000a

00406908 <_global_impure_ptr>:
  406908:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  406918:	46454443 00000000 33323130 37363534     CDEF....01234567
  406928:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406938:	0000296c                                l)..

0040693c <blanks.7217>:
  40693c:	20202020 20202020 20202020 20202020                     

0040694c <zeroes.7218>:
  40694c:	30303030 30303030 30303030 30303030     0000000000000000
  40695c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040696c <_ctype_>:
  40696c:	20202000 20202020 28282020 20282828     .         ((((( 
  40697c:	20202020 20202020 20202020 20202020                     
  40698c:	10108820 10101010 10101010 10101010      ...............
  40699c:	04040410 04040404 10040404 10101010     ................
  4069ac:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4069bc:	01010101 01010101 01010101 10101010     ................
  4069cc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4069dc:	02020202 02020202 02020202 10101010     ................
  4069ec:	00000020 00000000 00000000 00000000      ...............
	...

00406a70 <_init>:
  406a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a72:	bf00      	nop
  406a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a76:	bc08      	pop	{r3}
  406a78:	469e      	mov	lr, r3
  406a7a:	4770      	bx	lr

00406a7c <__init_array_start>:
  406a7c:	004050ad 	.word	0x004050ad

00406a80 <__frame_dummy_init_array_entry>:
  406a80:	0040018d                                ..@.

00406a84 <_fini>:
  406a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a86:	bf00      	nop
  406a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406a8a:	bc08      	pop	{r3}
  406a8c:	469e      	mov	lr, r3
  406a8e:	4770      	bx	lr

00406a90 <__fini_array_start>:
  406a90:	00400169 	.word	0x00400169
